import type { IVChart, EventCallback, EventParamsDefinition, EventFilter } from '@visactor/vchart';
export interface LegendEventProps {
    onLegendItemHover?: (e: any) => void;
    onLegendItemUnHover?: (e: any) => void;
    onLegendItemClick?: (e: any) => void;
    onLegendFilter?: (e: any) => void;
    onLegendSelectedDataChange?: (e: any) => void;
}
export interface BrushEventProps {
    onBrushStart?: (e: any) => void;
    onBrushChange?: (e: any) => void;
    onBrushEnd?: (e: any) => void;
}
export interface DataZoomEventProps {
    onDataZoomChange?: (e: any) => void;
}
export interface PlayerEventProps {
    onPlayerPlay?: (e: any) => void;
    onPlayerPause?: (e: any) => void;
    onPlayerEnd?: (e: any) => void;
    onPlayerChange?: (e: any) => void;
    onPlayerForward?: (e: any) => void;
    onPlayerBackward?: (e: any) => void;
}
export interface ScrollBarEventProps {
    onScrollBarChange?: (e: any) => void;
}
export interface DimensionEventProps {
    onDimensionHover?: (e: any) => void;
    onDimensionClick?: (e: any) => void;
}
export interface HierarchyEventProps {
    onDrill?: (e: any) => void;
}
export interface ChartLifeCycleEventProps {
    onInitialized?: (e: any) => void;
    onRendered?: (e: any) => void;
    onRenderFinished?: (e: any) => void;
    onAnimationFinished?: (e: any) => void;
    onLayoutStart?: (e: any) => void;
    onLayoutEnd?: (e: any) => void;
}
export interface EventsProps {
    onPointerDown?: EventCallback<EventParamsDefinition['pointerdown']>;
    onPointerUp?: EventCallback<EventParamsDefinition['pointerup']>;
    onPointerUpOutside?: EventCallback<EventParamsDefinition['pointerupoutside']>;
    onPointerTap?: EventCallback<EventParamsDefinition['pointertap']>;
    onPointerOver?: EventCallback<EventParamsDefinition['pointerover']>;
    onPointerMove?: EventCallback<EventParamsDefinition['pointermove']>;
    onPointerEnter?: EventCallback<EventParamsDefinition['pointerenter']>;
    onPointerLeave?: EventCallback<EventParamsDefinition['pointerleave']>;
    onPointerOut?: EventCallback<EventParamsDefinition['pointerout']>;
    onMouseDown?: EventCallback<EventParamsDefinition['mousedown']>;
    onMouseUp?: EventCallback<EventParamsDefinition['mouseup']>;
    onMouseUpOutside?: EventCallback<EventParamsDefinition['mouseupoutside']>;
    onMouseMove?: EventCallback<EventParamsDefinition['mousemove']>;
    onMouseOver?: EventCallback<EventParamsDefinition['mouseover']>;
    onMouseOut?: EventCallback<EventParamsDefinition['mouseout']>;
    onMouseEnter?: EventCallback<EventParamsDefinition['mouseenter']>;
    onMouseLeave?: EventCallback<EventParamsDefinition['mouseleave']>;
    onPinch?: EventCallback<EventParamsDefinition['pinch']>;
    onPinchStart?: EventCallback<EventParamsDefinition['pinchstart']>;
    onPinchEnd?: EventCallback<EventParamsDefinition['pinchend']>;
    onPan?: EventCallback<EventParamsDefinition['pan']>;
    onPanStart?: EventCallback<EventParamsDefinition['panstart']>;
    onPanEnd?: EventCallback<EventParamsDefinition['panend']>;
    onDrag?: EventCallback<EventParamsDefinition['drag']>;
    onDragStart?: EventCallback<EventParamsDefinition['dragstart']>;
    onDragEnter?: EventCallback<EventParamsDefinition['dragenter']>;
    onDragLeave?: EventCallback<EventParamsDefinition['dragleave']>;
    onDragOver?: EventCallback<EventParamsDefinition['dragover']>;
    onDragEnd?: EventCallback<EventParamsDefinition['dragend']>;
    onRightDown?: EventCallback<EventParamsDefinition['rightdown']>;
    onRightUp?: EventCallback<EventParamsDefinition['rightup']>;
    onRightUpOutside?: EventCallback<EventParamsDefinition['rightupoutside']>;
    onTouchStart?: EventCallback<EventParamsDefinition['touchstart']>;
    onTouchEnd?: EventCallback<EventParamsDefinition['touchend']>;
    onTouchEndOutside?: EventCallback<EventParamsDefinition['touchendoutside']>;
    onTouchMove?: EventCallback<EventParamsDefinition['touchmove']>;
    onTouchCancel?: EventCallback<EventParamsDefinition['touchcancel']>;
    onPress?: EventCallback<EventParamsDefinition['press']>;
    onPressUp?: EventCallback<EventParamsDefinition['pressup']>;
    onPressEnd?: EventCallback<EventParamsDefinition['pressend']>;
    onSwipe?: EventCallback<EventParamsDefinition['swipe']>;
    onDrop?: EventCallback<EventParamsDefinition['drop']>;
    onWeel?: EventCallback<EventParamsDefinition['weel']>;
    onClick?: EventCallback<EventParamsDefinition['click']>;
    onDblClick?: EventCallback<EventParamsDefinition['dblclick']>;
    onPointerDownFilter?: EventFilter;
    onPointerUpFilter?: EventFilter;
    onPointerUpOutsideFilter?: EventFilter;
    onPointerTapFilter?: EventCallback<EventParamsDefinition['pointertap']>;
    onPointerOverFilter?: EventCallback<EventParamsDefinition['pointerover']>;
    onPointerMoveFilter?: EventFilter;
    onPointerEnterFilter?: EventFilter;
    onPointerLeaveFilter?: EventFilter;
    onPointerOutFilter?: EventFilter;
    onMouseDownFilter?: EventFilter;
    onMouseUpFilter?: EventFilter;
    onMouseUpOutsideFilter?: EventFilter;
    onMouseMoveFilter?: EventFilter;
    onMouseOverFilter?: EventFilter;
    onMouseOutFilter?: EventFilter;
    onMouseEnterFilter?: EventFilter;
    onMouseLeaveFilter?: EventFilter;
    onPinchFilter?: EventFilter;
    onPinchStartFilter?: EventFilter;
    onPinchEndFilter?: EventFilter;
    onPanFilter?: EventFilter;
    onPanStartFilter?: EventFilter;
    onPanEndFilter?: EventFilter;
    onDragFilter?: EventFilter;
    onDragStartFilter?: EventFilter;
    onDragEnterFilter?: EventFilter;
    onDragLeaveFilter?: EventFilter;
    onDragOverFilter?: EventFilter;
    onDragEndFilter?: EventFilter;
    onRightDownFilter?: EventFilter;
    onRightUpFilter?: EventFilter;
    onRightUpOutsideFilter?: EventFilter;
    onTouchStartFilter?: EventFilter;
    onTouchEndFilter?: EventFilter;
    onTouchEndOutsideFilter?: EventFilter;
    onTouchMoveFilter?: EventFilter;
    onTouchCancelFilter?: EventFilter;
    onPressFilter?: EventFilter;
    onPressUpFilter?: EventFilter;
    onPressEndFilter?: EventFilter;
    onSwipeFilter?: EventFilter;
    onDropFilter?: EventFilter;
    onWeelFilter?: EventFilter;
    onClickFilter?: EventFilter;
    onDblClickFilter?: EventFilter;
}
export declare const REACT_TO_VCHART_EVENTS: {
    onPointerDown: string;
    onPointerUp: string;
    onPointerUpOutside: string;
    onPointerTap: string;
    onPointerOver: string;
    onPointerMove: string;
    onPointerEnter: string;
    onPointerLeave: string;
    onPointerOut: string;
    onMouseDown: string;
    onMouseUp: string;
    onMouseUpOutside: string;
    onMouseMove: string;
    onMouseOver: string;
    onMouseOut: string;
    onMouseEnter: string;
    onMouseLeave: string;
    onPinch: string;
    onPinchStart: string;
    onPinchEnd: string;
    onPan: string;
    onPanStart: string;
    onPanEnd: string;
    onDrag: string;
    onDragStart: string;
    onDragEnter: string;
    onDragLeave: string;
    onDragOver: string;
    onDragEnd: string;
    onRightDown: string;
    onRightUp: string;
    onRightUpOutside: string;
    onTouchStart: string;
    onTouchEnd: string;
    onTouchEndOutside: string;
    onTouchMove: string;
    onTouchCancel: string;
    onPress: string;
    onPressUp: string;
    onPressEnd: string;
    onSwipe: string;
    onDrop: string;
    onWeel: string;
    onClick: string;
    onDblClick: string;
};
export declare const LEGEND_CUSTOMIZED_EVENTS: {
    onLegendItemHover: string;
    onLegendItemUnHover: string;
    onLegendItemClick: string;
    onLegendFilter: string;
    onLegendSelectedDataChange: string;
};
export declare const BRUSH_CUSTOMIZED_EVENTS: {
    onBrushStart: string;
    onBrushChange: string;
    onBrushEnd: string;
    onBrushClear: string;
};
export declare const DATAZOOM_CUSTOMIZED_EVENTS: {
    onDataZoomChange: string;
};
export declare const PLAYER_CUSTOMIZED_EVENTS: {
    onPlayerPlay: string;
    onPlayerPause: string;
    onPlayerEnd: string;
    onPlayerChange: string;
    onPlayerForward: string;
    onPlayerBackward: string;
};
export declare const SCROLLBAR_CUSTOMIZED_EVENTS: {
    onScrollBarChange: string;
};
export declare const DIMENSION_EVENTS: {
    onDimensionHover: string;
    onDimensionClick: string;
};
export declare const HIERARCHY_EVENTS: {
    onDrill: string;
};
export declare const CHART_LIFECYCLE_EVENTS: {
    onInitialized: string;
    onRendered: string;
    onRenderFinished: string;
    onAnimationFinished: string;
    onLayoutStart: string;
    onLayoutEnd: string;
};
export declare const CHART_EVENTS: {
    onPointerDown: string;
    onPointerUp: string;
    onPointerUpOutside: string;
    onPointerTap: string;
    onPointerOver: string;
    onPointerMove: string;
    onPointerEnter: string;
    onPointerLeave: string;
    onPointerOut: string;
    onMouseDown: string;
    onMouseUp: string;
    onMouseUpOutside: string;
    onMouseMove: string;
    onMouseOver: string;
    onMouseOut: string;
    onMouseEnter: string;
    onMouseLeave: string;
    onPinch: string;
    onPinchStart: string;
    onPinchEnd: string;
    onPan: string;
    onPanStart: string;
    onPanEnd: string;
    onDrag: string;
    onDragStart: string;
    onDragEnter: string;
    onDragLeave: string;
    onDragOver: string;
    onDragEnd: string;
    onRightDown: string;
    onRightUp: string;
    onRightUpOutside: string;
    onTouchStart: string;
    onTouchEnd: string;
    onTouchEndOutside: string;
    onTouchMove: string;
    onTouchCancel: string;
    onPress: string;
    onPressUp: string;
    onPressEnd: string;
    onSwipe: string;
    onDrop: string;
    onWeel: string;
    onClick: string;
    onDblClick: string;
    onDrill: string;
    onInitialized: string;
    onRendered: string;
    onRenderFinished: string;
    onAnimationFinished: string;
    onLayoutStart: string;
    onLayoutEnd: string;
    onDimensionHover: string;
    onDimensionClick: string;
    onScrollBarChange: string;
    onDataZoomChange: string;
    onPlayerPlay: string;
    onPlayerPause: string;
    onPlayerEnd: string;
    onPlayerChange: string;
    onPlayerForward: string;
    onPlayerBackward: string;
    onBrushStart: string;
    onBrushChange: string;
    onBrushEnd: string;
    onBrushClear: string;
    onLegendItemHover: string;
    onLegendItemUnHover: string;
    onLegendItemClick: string;
    onLegendFilter: string;
    onLegendSelectedDataChange: string;
};
export declare const CHART_EVENTS_KEYS: string[];
export declare const COMMON_EVENTK_KEYS: string[];
export declare const VCHART_TO_REACT_EVENTS: Record<string, string>;
export declare const findEventProps: <T extends EventsProps>(props: T, supportedEvents?: Record<string, string>) => EventsProps;
export declare const bindEventsToChart: <T>(chart: IVChart, newProps?: T, prevProps?: T, supportedEvents?: Record<string, string>) => boolean;
