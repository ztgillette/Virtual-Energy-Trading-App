{"version":3,"sources":["../src/context/chart.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAQ1B,MAAM,YAAY,GAAG,KAAK,CAAC,aAAa,CAAmB,IAAI,CAAC,CAAC;AACjE,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC;AAE1C,MAAM,UAAU,iBAAiB,CAAI,SAAuD;IAC1F,MAAM,GAAG,GAAG,KAAK,CAAC,UAAU,CAAS,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAClD,OAAO,CACL,oBAAC,YAAY,CAAC,QAAQ,QACnB,CAAC,GAAqB,EAAE,EAAE,CAAC,CAG1B,oBAAC,SAAS,oBAAM,KAAW,IAAE,KAAK,EAAE,GAAG,CAAC,KAAK,IAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAI,CAC5E,CACqB,CACzB,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,IAAI,CAAC;IAC1D,OAAO,GAAG,CAAC;AACb,CAAC;AAED,eAAe,YAAY,CAAC","file":"chart.js","sourcesContent":["import React from 'react';\nimport type { IVChart } from '@visactor/vchart';\n\nexport interface ChartContextType {\n  chart?: IVChart;\n  isChildrenUpdated?: boolean;\n}\n\nconst ChartContext = React.createContext<ChartContextType>(null);\nChartContext.displayName = 'ChartContext';\n\nexport function withChartInstance<T>(Component: React.ComponentType<T & { chart?: IVChart }>) {\n  const Com = React.forwardRef<any, T>((props, ref) => {\n    return (\n      <ChartContext.Consumer>\n        {(ctx: ChartContextType) => (\n          // Only pass ref if Component supports it (i.e., is a forwardRef component)\n          // Otherwise, omit ref to avoid type errors\n          <Component {...(props as T)} chart={ctx.chart} {...(ref ? { ref } : {})} />\n        )}\n      </ChartContext.Consumer>\n    );\n  });\n  Com.displayName = Component.displayName || Component.name;\n  return Com;\n}\n\nexport default ChartContext;\n"]}