{"version":3,"sources":["../src/components/tooltip/BaseTooltip.tsx"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,6CAAyD;AACzD,6CAA0C;AAWnC,MAAM,aAAa,GAAG,CAC3B,aAAqB,EACrB,QAAgB,EAChB,SAA0B,EAC1B,EAAE;IACF,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;QACjC,eAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KAChC;IAGD,MAAM,UAAU,GAAG,CAAC,UAAU,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;IAE3D,MAAM,IAAI,GAAgB,CAAC,KAAQ,EAAE,EAAE;QACrC,MAAM,QAAQ,GAAG,eAAK,CAAC,MAAM,CAAS,KAAK,CAAC,QAAQ,CAAC,CAAC;QACtD,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,OAAO,EAAE;YAEvC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC;SACnC;QAED,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;IAChC,IAAY,CAAC,SAAS,GAAG,CAAC,KAAsD,EAAE,EAAE;QACnF,MAAM,cAAc,GAAe,IAAA,oBAAW,EAAI,KAAK,EAAE,UAAU,CAAC,CAAC;QAErE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,QAAQ,EAAE;YAC1C,cAAc,CAAC,aAAa,GAAG,CAAC,cAAc,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,CACvE,eAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CACzC,IAAA,iBAAQ,EAAC,KAAK,CAAC;gBACb,CAAC,CAAC,eAAK,CAAC,YAAY,CAAC,KAAkE,EAAE;oBACrF,cAAc;oBACd,aAAa;oBACb,MAAM;iBACP,CAAC;gBACJ,CAAC,CAAC,KAAK,CACV,CAAC;SACL;QAED,OAAO;YACL,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,QAAQ,EAAE,IAAI;SACf,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AA/CW,QAAA,aAAa,iBA+CxB","file":"BaseTooltip.js","sourcesContent":["import React from 'react';\nimport { isObject, pickWithout } from '@visactor/vutils';\nimport { VChart } from '@visactor/vchart';\nimport type { TooltipRender } from './interface';\n\nexport interface BaseTooltipProps {\n  id?: string | number;\n  tooltipRender?: TooltipRender;\n  children?: React.ReactNode;\n}\n\ntype TooltipProps = BaseTooltipProps & { updateId?: number; componentId?: number };\n\nexport const createTooltip = <T extends TooltipProps>(\n  componentName: string,\n  specName: string,\n  registers?: (() => void)[]\n) => {\n  if (registers && registers.length) {\n    VChart.useRegisters(registers);\n  }\n\n  // tooltip component 不支持 children，其他组件暂时也都不支持\n  const ignoreKeys = ['updateId', 'componentId', 'children'];\n\n  const Comp: React.FC<T> = (props: T) => {\n    const updateId = React.useRef<number>(props.updateId);\n    if (props.updateId !== updateId.current) {\n      // update triggered by chart when chart is rendered\n      updateId.current = props.updateId;\n    }\n\n    return null;\n  };\n\n  Comp.displayName = componentName;\n  (Comp as any).parseSpec = (props: T & { updateId?: number; componentId?: string }) => {\n    const newTooltipSpec: Partial<T> = pickWithout<T>(props, ignoreKeys);\n\n    if (!props.tooltipRender && props.children) {\n      newTooltipSpec.tooltipRender = (tooltipElement, actualTooltip, params) =>\n        React.Children.map(props.children, child =>\n          isObject(child)\n            ? React.cloneElement(child as React.ReactElement<any, React.JSXElementConstructor<any>>, {\n                tooltipElement,\n                actualTooltip,\n                params\n              })\n            : child\n        );\n    }\n\n    return {\n      spec: newTooltipSpec,\n      specName,\n      isSingle: true\n    };\n  };\n\n  return Comp;\n};\n"]}