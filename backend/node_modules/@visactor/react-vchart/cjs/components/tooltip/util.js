"use strict";

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.initCustomTooltip = void 0;

const react_1 = __importDefault(require("react")), constant_1 = require("./constant"), react_dom_1 = require("react-dom"), initCustomTooltip = (setTooltipNode, props, spec) => {
    let render;
    if ((null == spec ? void 0 : spec.tooltipRender) ? (render = spec.tooltipRender, 
    delete spec.tooltipRender) : props.tooltipRender && (render = props.tooltipRender), 
    render) {
        let reserve;
        return (null == spec ? void 0 : spec.reserveDefaultTooltip) ? (reserve = spec.reserveDefaultTooltip, 
        delete spec.reserveDefaultTooltip) : reserve = props.reserveDefaultTooltip, Object.assign(Object.assign({}, spec), {
            updateElement: (el, actualTooltip, params) => {
                const {changePositionOnly: changePositionOnly} = params;
                if (!changePositionOnly) {
                    if (!reserve) {
                        el.style.width = "auto", el.style.height = "auto", el.style.minHeight = "auto", 
                        el.style.padding = "0px";
                        for (let i = 0; i < el.children.length; i++) {
                            const childNode = el.children[i];
                            childNode.className !== constant_1.REACT_TOOLTIP_ClASS_NAME && "none" !== childNode.style.display && (childNode.style.display = "none");
                        }
                    }
                    setTooltipNode((0, react_dom_1.createPortal)(react_1.default.createElement("div", {
                        className: constant_1.REACT_TOOLTIP_ClASS_NAME
                    }, render(el, actualTooltip, params)), el));
                }
            }
        });
    }
    return spec;
};

exports.initCustomTooltip = initCustomTooltip;
//# sourceMappingURL=util.js.map
