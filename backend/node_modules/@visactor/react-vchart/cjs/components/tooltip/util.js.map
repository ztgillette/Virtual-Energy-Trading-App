{"version":3,"sources":["../src/components/tooltip/util.tsx"],"names":[],"mappings":";;;;;;AACA,kDAA0B;AAI1B,yCAAsD;AACtD,yCAAyC;AAGlC,MAAM,iBAAiB,GAAG,CAC/B,cAAqE,EACrE,KAAqB,EACrB,IAAmB,EACnB,EAAE;IACF,IAAI,MAAqB,CAAC;IAC1B,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,aAAa,EAAE;QACvB,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;QAC5B,OAAO,IAAI,CAAC,aAAa,CAAC;KAC3B;SAAM,IAAI,KAAK,CAAC,aAAa,EAAE;QAC9B,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC;KAC9B;IAED,IAAI,MAAM,EAAE;QACV,IAAI,OAAgB,CAAC;QACrB,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,qBAAqB,EAAE;YAC/B,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC;YACrC,OAAO,IAAI,CAAC,qBAAqB,CAAC;SACnC;aAAM;YACL,OAAO,GAAG,KAAK,CAAC,qBAAqB,CAAC;SACvC;QACD,OAAO,gCACF,IAAI,KACP,aAAa,EAAE,CAAC,EAAE,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE;gBAC3C,MAAM,EAAE,kBAAkB,EAAE,GAAG,MAAM,CAAC;gBACtC,IAAI,kBAAkB,EAAE;oBACtB,OAAO;iBACR;gBACD,IAAI,CAAC,OAAO,EAAE;oBACZ,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;oBACxB,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;oBACzB,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;oBAC5B,EAAE,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;oBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC3C,MAAM,SAAS,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAgB,CAAC;wBAChD,IAAI,SAAS,CAAC,SAAS,KAAK,mCAAwB,IAAI,SAAS,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,EAAE;4BAC1F,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;yBAClC;qBACF;iBACF;gBAED,cAAc,CACZ,IAAA,wBAAY,EAAC,uCAAK,SAAS,EAAE,mCAAwB,IAAG,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE,MAAM,CAAC,CAAO,EAAE,EAAE,CAAC,CACtG,CAAC;YACJ,CAAC,GACc,CAAC;KACnB;IAED,OAAO,IAAoB,CAAC;AAC9B,CAAC,CAAC;AAjDW,QAAA,iBAAiB,qBAiD5B","file":"util.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport React from 'react';\nimport type { BaseChartProps } from '../../charts/BaseChart';\nimport type { TooltipProps, TooltipRender } from './interface';\nimport type { ITooltipSpec } from '@visactor/vchart';\nimport { REACT_TOOLTIP_ClASS_NAME } from './constant';\nimport { createPortal } from 'react-dom';\n\n/** tooltip 自定义插槽 */\nexport const initCustomTooltip = (\n  setTooltipNode: React.Dispatch<React.SetStateAction<React.ReactNode>>,\n  props: BaseChartProps,\n  spec?: TooltipProps\n) => {\n  let render: TooltipRender;\n  if (spec?.tooltipRender) {\n    render = spec.tooltipRender;\n    delete spec.tooltipRender;\n  } else if (props.tooltipRender) {\n    render = props.tooltipRender;\n  }\n\n  if (render) {\n    let reserve: boolean;\n    if (spec?.reserveDefaultTooltip) {\n      reserve = spec.reserveDefaultTooltip;\n      delete spec.reserveDefaultTooltip;\n    } else {\n      reserve = props.reserveDefaultTooltip;\n    }\n    return {\n      ...spec,\n      updateElement: (el, actualTooltip, params) => {\n        const { changePositionOnly } = params;\n        if (changePositionOnly) {\n          return;\n        }\n        if (!reserve) {\n          el.style.width = 'auto';\n          el.style.height = 'auto';\n          el.style.minHeight = 'auto';\n          el.style.padding = '0px';\n          for (let i = 0; i < el.children.length; i++) {\n            const childNode = el.children[i] as HTMLElement;\n            if (childNode.className !== REACT_TOOLTIP_ClASS_NAME && childNode.style.display !== 'none') {\n              childNode.style.display = 'none';\n            }\n          }\n        }\n\n        setTooltipNode(\n          createPortal(<div className={REACT_TOOLTIP_ClASS_NAME}>{render(el, actualTooltip, params)}</div>, el)\n        );\n      }\n    } as ITooltipSpec;\n  }\n\n  return spec as ITooltipSpec;\n};\n"]}