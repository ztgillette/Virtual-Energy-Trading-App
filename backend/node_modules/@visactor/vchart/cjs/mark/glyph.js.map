{"version":3,"sources":["../src/mark/glyph.ts"],"names":[],"mappings":"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","file":"glyph.js","sourcesContent":["import type { ICommonSpec } from '../typings/visual';\nimport { BaseMark } from './base/base-mark';\nimport type { IGlyph, IGlyphGraphicAttribute, IGraphic } from '@visactor/vrender-core';\nimport { createGlyph } from '@visactor/vrender-core';\nimport type { IGlyphMark } from './interface/mark';\nimport type { MarkType } from './interface/type';\nimport { Factory } from '../core/factory';\nimport type { Datum } from '../typings/common';\nimport { registerGlyph, registerShadowRoot } from '@visactor/vrender-kits';\nimport type { IMarkGraphic } from './interface/common';\nimport { DiffState } from './interface/enum';\nimport { merge } from '@visactor/vutils';\nexport abstract class GlyphMark<T extends ICommonSpec = ICommonSpec, Cfg = any>\n  extends BaseMark<T>\n  implements IGlyphMark<T, Cfg>\n{\n  protected _defaultGlyphAttrs: T;\n\n  protected _subMarks: Record<\n    string,\n    {\n      type: MarkType;\n      defaultAttributes?: any;\n    }\n  >;\n\n  getSubMarks() {\n    return this._subMarks;\n  }\n\n  protected _glyphConfig: Cfg;\n\n  setGlyphConfig(cfg: Cfg) {\n    this._glyphConfig = cfg;\n  }\n\n  getGlyphConfig() {\n    return this._glyphConfig;\n  }\n\n  protected _positionChannels: string[];\n\n  getPositionChannels() {\n    return this._positionChannels;\n  }\n\n  protected _positionEncoder: (glyphAttrs: any, datum: Datum, g: IGlyph) => Record<string, any>;\n\n  protected _channelEncoder: Record<string, (channelValue: any) => Record<string, any>>;\n\n  private _onGlyphAttributeUpdate(glyph: IGlyph) {\n    return (newAttributes: any) => {\n      const positionChannels = this.getPositionChannels();\n      let subAttrsMap =\n        positionChannels && this._positionEncoder && Object.keys(newAttributes).some(k => positionChannels.includes(k))\n          ? this._positionEncoder(newAttributes, glyph?.context?.data?.[0], glyph)\n          : null;\n\n      if (this._channelEncoder) {\n        Object.keys(this._channelEncoder).forEach(channel => {\n          if (channel in newAttributes) {\n            const channelAttrsMap = this._channelEncoder[channel](newAttributes[channel]);\n\n            subAttrsMap = subAttrsMap ? merge(subAttrsMap, channelAttrsMap) : channelAttrsMap;\n          }\n        });\n      }\n\n      if (subAttrsMap) {\n        glyph.getSubGraphic().forEach(subGraphic => {\n          if (subGraphic && subAttrsMap[subGraphic.name]) {\n            subGraphic.setAttributes(subAttrsMap[subGraphic.name]);\n          }\n        });\n      }\n\n      return newAttributes;\n    };\n  }\n\n  protected _setStateOfGraphic = (g: IMarkGraphic) => {\n    g.clearStates();\n    g.stateProxy = null;\n\n    if (g.context.diffState === DiffState.enter || g.context.diffState === DiffState.update) {\n      g.glyphStateProxy = (stateName: string, nexStates: string[]) => {\n        const glyphAttrs = {\n          attributes: {\n            ...this._runEncoderOfGraphic(this._encoderOfState?.[stateName], g),\n            ...(g.runtimeStateCache ? g.runtimeStateCache[stateName] : null)\n          }\n        };\n\n        // 更新缓存\n        if (!g.glyphStates) {\n          g.glyphStates = { [stateName]: glyphAttrs };\n        } else if (!g.glyphStates[stateName]) {\n          g.glyphStates[stateName] = glyphAttrs;\n        }\n\n        return glyphAttrs;\n      };\n\n      g.useStates(g.context.states);\n    }\n  };\n\n  protected _createGraphic(attrs: IGlyphGraphicAttribute = {}): IGraphic {\n    const glyph = createGlyph(attrs);\n    glyph.onBeforeAttributeUpdate = this._onGlyphAttributeUpdate(glyph);\n    const subMarks = this._subMarks;\n\n    if (subMarks) {\n      const subGraphics: IGraphic[] = [];\n\n      Object.keys(subMarks).forEach(name => {\n        // glyph 中的子元素会继承glyph 的 x,y，所以子元素手动设置一下，x: 0, y: 0\n        const subGraphic = Factory.createGraphicComponent(subMarks[name].type, {\n          ...subMarks[name].defaultAttributes\n        });\n\n        if (subGraphic) {\n          subGraphics.push(subGraphic);\n\n          subGraphic.name = name;\n          subGraphic.onBeforeAttributeUpdate = (attrs: any) => {\n            return attrs;\n          };\n        }\n      });\n\n      glyph.setSubGraphic(subGraphics);\n    }\n\n    (glyph as any).onBeforeAttributeUpdate(attrs);\n\n    return glyph;\n  }\n\n  protected _runProgressiveEncoder(graphics: IMarkGraphic[]) {\n    this._runEncoder(graphics);\n  }\n}\n\nexport const registerGlyphMark = () => {\n  Factory.registerGraphicComponent('glyph', createGlyph);\n  registerShadowRoot();\n  registerGlyph();\n};\n"]}