{"version":3,"sources":["../src/mark/text.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,gDAA4C;AAK5C,yDAA4F;AAE5F,yDAAoE;AACpE,6CAAqD;AAErD,MAAa,QAAS,SAAQ,oBAA+B;IAK3D,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,YAAY,IAAY,EAAE,MAAmB;QAC3C,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QARb,SAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAEpB,cAAS,GAAoB,MAAM,CAAC;IAO9C,CAAC;IAES,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAE3B,KAAK,EAAE,CAAC,EACR,SAAS,EAAE,QAAQ,EACnB,SAAS,EAAE,CAAC,EACZ,UAAU,EAAE,EAAE,GACf,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,iBAAiB,CAAC,IAAsC;QACtD,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;SAChC;IACH,CAAC;IAES,2BAA2B,CAAC,CAAe,EAAE,KAAU,EAAE,UAAgB;QACjF,MAAM,SAAS,GAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAE1E,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC;QAE3B,IAAI,IAAA,iBAAQ,EAAC,IAAI,CAAC,IAAI,IAAA,gBAAO,EAAE,IAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,MAAM,IAAK,IAAY,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE;YACjH,SAAS,CAAC,UAAU,GAAI,IAAY,CAAC,IAAI,CAAC;SAC3C;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAES,cAAc,CAAC,QAA2D,EAAE;QACpF,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;QAEvB,OAAO,IAAI,CAAC,SAAS,KAAK,MAAM,IAAI,CAAC,IAAY,aAAZ,IAAI,uBAAJ,IAAI,CAAU,IAAI,MAAK,MAAM;YAChE,CAAC,CAAC,IAAA,6BAAc,EAAC,KAAkC,CAAC;YACpD,CAAC,CAAC,IAAA,yBAAU,EAAC,KAA8B,CAAC,CAAC;IACjD,CAAC;;AAlDH,4BAmDC;AAlDiB,aAAI,UAAqB;AAoDpC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,iBAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9C,IAAA,iCAAkB,GAAE,CAAC;IACrB,IAAA,2BAAY,GAAE,CAAC;IACf,IAAA,+BAAgB,GAAE,CAAC;IAEnB,iBAAO,CAAC,wBAAwB,SAAoB,yBAAU,CAAC,CAAC;IAChE,iBAAO,CAAC,wBAAwB,CAAC,UAAU,EAAE,6BAAc,CAAC,CAAC;AAC/D,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B","file":"text.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { IComposedTextMarkSpec } from '../typings/visual';\nimport { BaseMark } from './base/base-mark';\nimport type { IMarkGraphic, IMarkOption, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface';\nimport type { ITextMark, ITextSpec } from './interface/mark';\nimport { registerRichtext, registerShadowRoot, registerText } from '@visactor/vrender-kits';\nimport type { IGraphic, IRichTextGraphicAttribute, ITextGraphicAttribute } from '@visactor/vrender-core';\nimport { createRichText, createText } from '@visactor/vrender-core';\nimport { isObject, isValid } from '@visactor/vutils';\n\nexport class TextMark extends BaseMark<IComposedTextMarkSpec> implements ITextMark {\n  static readonly type = MarkTypeEnum.text;\n  readonly type = TextMark.type;\n\n  protected _textType: 'text' | 'rich' = 'text';\n  getTextType() {\n    return this._textType;\n  }\n\n  constructor(name: string, option: IMarkOption) {\n    super(name, option);\n  }\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<IComposedTextMarkSpec> = {\n      ...super._getDefaultStyle(),\n      // TODO: 删除后会有显示问题，待排查\n      angle: 0,\n      textAlign: 'center',\n      lineWidth: 0,\n      textConfig: []\n    };\n    return defaultStyle;\n  }\n\n  initStyleWithSpec(spec: ITextSpec<IComposedTextMarkSpec>) {\n    super.initStyleWithSpec(spec);\n    if (spec.textType) {\n      this._textType = spec.textType;\n    }\n  }\n\n  protected _transformGraphicAttributes(g: IMarkGraphic, attrs: any, groupAttrs?: any) {\n    const textAttrs = super._transformGraphicAttributes(g, attrs, groupAttrs);\n\n    const { text } = textAttrs;\n\n    if (isObject(text) && isValid((text as any).text) && (this._textType === 'rich' || (text as any).type === 'rich')) {\n      textAttrs.textConfig = (text as any).text;\n    }\n\n    return textAttrs;\n  }\n\n  protected _createGraphic(attrs: ITextGraphicAttribute | IRichTextGraphicAttribute = {}): IGraphic {\n    const { text } = attrs;\n\n    return this._textType === 'rich' || (text as any)?.type === 'rich'\n      ? createRichText(attrs as IRichTextGraphicAttribute)\n      : createText(attrs as ITextGraphicAttribute);\n  }\n}\n\nexport const registerTextMark = () => {\n  Factory.registerMark(TextMark.type, TextMark);\n  registerShadowRoot();\n  registerText();\n  registerRichtext();\n\n  Factory.registerGraphicComponent(MarkTypeEnum.text, createText);\n  Factory.registerGraphicComponent('richtext', createRichText);\n};\n"]}