{"version":3,"sources":["../src/mark/mark-set/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { array, isNil, merge } from '@visactor/vutils';\nimport type { IMark } from '../interface';\n\n/** 跟随 mark 一起存储的信息 */\nexport interface IMarkInfo {\n  /** 样式和 seriesField 有关 */\n  styleWithSeriesField?: boolean;\n  /** mark name */\n  name?: string;\n}\n\nexport class MarkSet {\n  protected _children: IMark[] = [];\n  protected _markNameMap: Record<string, IMark> = {};\n  getMarkNameMap() {\n    return this._markNameMap;\n  }\n\n  protected readonly _infoMap = new Map<IMark, IMarkInfo>();\n  static readonly defaultMarkInfo: IMarkInfo = {};\n\n  addMark(mark?: IMark, markInfo?: IMarkInfo) {\n    if (isNil(mark)) {\n      return;\n    }\n    this._children.push(mark);\n    this._markNameMap[mark.name] = mark;\n    this._infoMap.set(mark, merge({}, MarkSet.defaultMarkInfo, markInfo));\n  }\n\n  removeMark(markName: string): void {\n    const index = this._children.findIndex(m => m.name === markName);\n    if (index >= 0) {\n      this._infoMap.delete(this._children[index]);\n      delete this._markNameMap[markName];\n      this._children.splice(index, 1);\n    }\n  }\n  clear() {\n    this._children = [];\n    this._markNameMap = {};\n    this._infoMap.clear();\n  }\n\n  forEach(callbackfn: (value: IMark, index: number, array: IMark[]) => void) {\n    this._children.forEach(callbackfn);\n  }\n\n  includes(mark: IMark, fromIndex?: number) {\n    return this._children.includes(mark, fromIndex);\n  }\n\n  get(key: number | string) {\n    if (!isNaN(Number(key))) {\n      return this._children[key];\n    }\n    return this._markNameMap[key];\n  }\n\n  getMarks() {\n    return this._children.slice();\n  }\n\n  getMarksInType(type: string | string[]): IMark[] {\n    const types = array(type);\n    return this._children.filter(m => types.includes(m.type));\n  }\n\n  getMarkInId(markId: number): IMark | undefined {\n    return this._children.find(m => m.id === markId);\n  }\n\n  /**\n   * 获取满足某 info 的所有 mark\n   * @param info\n   * @returns\n   */\n  getMarkWithInfo(info: Partial<IMarkInfo>) {\n    return this._children.find(mark => {\n      return Object.keys(info).every(key => info[key] === this._infoMap.get(mark)[key]);\n    });\n  }\n}\n"]}