{"version":3,"sources":["../src/mark/rule.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+CAA4C;AAE5C,gDAA4C;AAI5C,yDAA0E;AAE1E,yDAAoD;AAEpD,MAAa,QAAS,SAAQ,oBAAuB;IAArD;;QAEW,SAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IA0BhC,CAAC;IAzBW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,CAAC,GACN,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,2BAA2B,CAAC,CAAe,EAAE,KAAU,EAAE,UAAgB;QACjF,MAAM,UAAU,GAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC3E,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,KAAc,UAAU,EAAnB,IAAI,UAAK,UAAU,EAAtC,sBAAyB,CAAa,CAAC;QAE7C,uCACK,IAAI,KACP,MAAM,EAAE;gBACN,EAAE,CAAC,EAAE,CAAC,EAAE;gBACR,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;aACjB,IACD;IACJ,CAAC;IAES,cAAc,CAAC,QAA+B,EAAE;QACxD,OAAO,IAAA,yBAAU,EAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;;AA3BH,4BA4BC;AA3BiB,aAAI,UAAqB;AA6BpC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,iBAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9C,IAAA,iCAAkB,GAAE,CAAC;IACrB,IAAA,2BAAY,GAAE,CAAC;IAEf,iBAAO,CAAC,wBAAwB,SAAoB,yBAAU,CAAC,CAAC;AAClE,CAAC,CAAC;AANW,QAAA,gBAAgB,oBAM3B","file":"rule.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { IRuleMarkSpec } from '../typings/visual';\nimport { BaseMark } from './base/base-mark';\nimport type { IMarkGraphic, IMarkStyle, IRuleMark } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { registerLine, registerShadowRoot } from '@visactor/vrender-kits';\nimport type { IGraphic, ILineGraphicAttribute } from '@visactor/vrender-core';\nimport { createLine } from '@visactor/vrender-core';\n\nexport class RuleMark extends BaseMark<IRuleMarkSpec> implements IRuleMark {\n  static readonly type = MarkTypeEnum.rule;\n  readonly type = RuleMark.type;\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<IRuleMarkSpec> = {\n      ...super._getDefaultStyle(),\n      x1: 0,\n      y1: 0\n    };\n    return defaultStyle;\n  }\n\n  protected _transformGraphicAttributes(g: IMarkGraphic, attrs: any, groupAttrs?: any) {\n    const finalAttrs = super._transformGraphicAttributes(g, attrs, groupAttrs);\n    const { x, x1, y, y1, ...rest } = finalAttrs;\n\n    return {\n      ...rest,\n      points: [\n        { x, y },\n        { x: x1, y: y1 }\n      ]\n    };\n  }\n\n  protected _createGraphic(attrs: ILineGraphicAttribute = {}): IGraphic {\n    return createLine(attrs);\n  }\n}\n\nexport const registerRuleMark = () => {\n  Factory.registerMark(RuleMark.type, RuleMark);\n  registerShadowRoot();\n  registerLine();\n\n  Factory.registerGraphicComponent(MarkTypeEnum.line, createLine);\n};\n"]}