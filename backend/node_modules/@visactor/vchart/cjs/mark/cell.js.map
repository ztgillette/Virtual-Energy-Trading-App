{"version":3,"sources":["../src/mark/cell.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAK5C,yDAA4E;AAC5E,qEAAuE;AAEvE,yDAAsD;AACtD,6CAAyC;AACzC,iCAAkC;AAElC,MAAa,QAAS,SAAQ,eAAuB;IAArD;;QAEW,SAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IA4BhC,CAAC;IA1BW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,IAAI,EAAE,SAAS,EACf,SAAS,EAAE,CAAC,EACZ,OAAO,EAAE,CAAC,GACX,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,cAAc,CAAC,QAAa,EAAE;QACtC,OAAO,IAAA,2BAAY,EAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAES,2BAA2B,CAAC,CAAe,EAAE,KAAU,EAAE,UAAgB;;QACjF,MAAM,WAAW,GAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC5E,MAAM,UAAU,GACd,MAAA,MAAA,WAAW,CAAC,KAAK,mCAAI,WAAW,CAAC,UAAU,mCAAI,MAAC,CAAC,CAAC,SAAqC,0CAAE,UAAU,CAAC;QAEtG,IAAI,IAAA,cAAK,EAAC,UAAU,CAAC,EAAE;YACrB,WAAW,CAAC,UAAU,GAAG,MAAM,CAAC;SACjC;aAAM;YACL,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;SACrC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;;AA7BH,4BA8BC;AA7BiB,aAAI,UAAqB;AA+BpC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,iBAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAE9C,iBAAO,CAAC,wBAAwB,WAAsB,2BAAY,CAAC,CAAC;IAEpE,IAAA,iCAAkB,GAAE,CAAC;IACrB,IAAA,6BAAc,GAAE,CAAC;IACjB,IAAA,4CAAuB,GAAE,CAAC;AAC5B,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B","file":"cell.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { ICellMarkSpec } from '../typings';\nimport type { ICellMark, IMarkGraphic, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { registerShadowRoot, registerSymbol } from '@visactor/vrender-kits';\nimport { registerSymbolDataLabel } from '@visactor/vrender-components';\nimport type { IGraphic, ISymbolGraphicAttribute } from '@visactor/vrender-core';\nimport { createSymbol } from '@visactor/vrender-core';\nimport { isNil } from '@visactor/vutils';\nimport { BaseMark } from './base';\n\nexport class CellMark extends BaseMark<ICellMarkSpec> implements ICellMark {\n  static readonly type = MarkTypeEnum.cell;\n  readonly type = CellMark.type;\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<ICellMarkSpec> = {\n      ...super._getDefaultStyle(),\n      fill: undefined,\n      lineWidth: 0,\n      padding: 0\n    };\n    return defaultStyle;\n  }\n\n  protected _createGraphic(attrs: any = {}): IGraphic {\n    return createSymbol(attrs);\n  }\n\n  protected _transformGraphicAttributes(g: IMarkGraphic, attrs: any, groupAttrs?: any) {\n    const symbolAttrs = super._transformGraphicAttributes(g, attrs, groupAttrs);\n    const symbolType =\n      symbolAttrs.shape ?? symbolAttrs.symbolType ?? (g.attribute as ISymbolGraphicAttribute)?.symbolType;\n\n    if (isNil(symbolType)) {\n      symbolAttrs.symbolType = 'rect';\n    } else {\n      symbolAttrs.symbolType = symbolType;\n    }\n    return symbolAttrs;\n  }\n}\n\nexport const registerCellMark = () => {\n  Factory.registerMark(CellMark.type, CellMark);\n\n  Factory.registerGraphicComponent(MarkTypeEnum.symbol, createSymbol);\n\n  registerShadowRoot();\n  registerSymbol();\n  registerSymbolDataLabel();\n};\n"]}