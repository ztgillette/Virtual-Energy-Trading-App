{"version":3,"sources":["../src/mark/arc.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,6CAAqD;AAIrD,gDAA4C;AAI5C,gDAA2D;AAC3D,6CAAoD;AACpD,yDAAmD;AACnD,qEAAoE;AACpE,yDAAyE;AAEzE,MAAa,WAAoC,SAAQ,oBAAW;IAKlE,YAAY,IAAY,EAAE,MAAmB;QAC3C,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QALb,SAAI,GAAW,OAAO,CAAC,IAAI,CAAC;QAErC,sBAAiB,GAAG,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;QA6BrD,uBAAkB,GAAG,CAC7B,GAAW,EACX,KAAY,EACZ,SAAyB,QAAQ,EACjC,UAAkB,EACV,EAAE;;YACV,MAAM,MAAM,GAAG,MAAC,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,EAAE,MAAM,CAAY,mCAAI,CAAC,CAAC;YACjF,OAAO,UAAU,GAAG,MAAM,CAAC;QAC7B,CAAC,CAAC;QAEQ,kBAAa,GAAG,CAAC,GAAc,EAAE,KAAY,EAAE,SAAyB,QAAQ,EAAE,MAAc,EAAE,EAAE;YAC5G,OAAO,CACL,IAAA,yBAAgB,EACd,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EACd,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,EAAE,MAAM,CAAW,EAC1D,KAAK,CAAC,wBAAgB,CAAC,CACxB,CAAC,GAAG,CAAC,GAAG,MAAM,CAChB,CAAC;QACJ,CAAC,CAAC;QAzCA,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,aAA8B,CAAC;QAC/D,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,aAA8B,CAAC;QAC/D,IAAI,CAAC,iBAAiB,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAmC,CAAC;QAE9E,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACjD,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAES,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,UAAU,EAAE,CAAC,EACb,QAAQ,EAAE,CAAC,EACX,WAAW,EAAE,CAAC,EACd,WAAW,EAAE,CAAC,EACd,YAAY,EAAE,CAAC,EACf,SAAS,EAAE,CAAC,EACZ,YAAY,EAAE,CAAC,EACf,YAAY,EAAE,CAAC,GAChB,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;CAqBF;AAnDD,kCAmDC;AAED,MAAa,OAAQ,SAAQ,WAAyB;IAAtD;;QAEW,SAAI,GAAiB,OAAO,CAAC,IAAI,CAAC;IAC7C,CAAC;;AAHD,0BAGC;AAFiB,YAAI,SAAoB;AAInC,MAAM,eAAe,GAAG,GAAG,EAAE;IAClC,IAAA,iCAAkB,GAAE,CAAC;IACrB,IAAA,0BAAW,GAAE,CAAC;IACd,IAAA,yCAAoB,GAAE,CAAC;IACvB,IAAA,6BAAoB,GAAE,CAAC;IACvB,iBAAO,CAAC,wBAAwB,QAAmB,wBAAS,CAAC,CAAC;IAC9D,iBAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9C,CAAC,CAAC;AAPW,QAAA,eAAe,mBAO1B","file":"arc.js","sourcesContent":["import { Factory } from './../core/factory';\nimport { ARC_MIDDLE_ANGLE } from '../constant/polar';\nimport type { IArcMarkSpec, Datum, StateValueType } from '../typings';\nimport type { ExChannelCall } from './base/base-mark';\n// eslint-disable-next-line no-duplicate-imports\nimport { BaseMark } from './base/base-mark';\nimport type { IArcMark, IMarkOption, IMarkRaw, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { registerArcAnimation } from '../animation/config';\nimport { polarToCartesian } from '@visactor/vutils';\nimport { createArc } from '@visactor/vrender-core';\nimport { registerArcDataLabel } from '@visactor/vrender-components';\nimport { registerArc, registerShadowRoot } from '@visactor/vrender-kits';\n\nexport class BaseArcMark<T extends IArcMarkSpec> extends BaseMark<T> implements IMarkRaw<T> {\n  readonly type: string = ArcMark.type;\n\n  _unCompileChannel = { centerOffset: true, radiusOffset: true };\n\n  constructor(name: string, option: IMarkOption) {\n    super(name, option);\n\n    // because of set object.function, this setting should be write after object init\n    this._computeExChannel.x = this.computeCenter as ExChannelCall;\n    this._computeExChannel.y = this.computeCenter as ExChannelCall;\n    this._computeExChannel.outerRadius = this.computeOuterRadius as ExChannelCall;\n\n    this._extensionChannel.centerOffset = ['x', 'y'];\n    this._extensionChannel.radiusOffset = ['outerRadius'];\n  }\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<T> = {\n      ...super._getDefaultStyle(),\n      startAngle: 0,\n      endAngle: 0,\n      outerRadius: 0,\n      innerRadius: 0,\n      cornerRadius: 0,\n      lineWidth: 0,\n      innerPadding: 0,\n      outerPadding: 0\n    };\n    return defaultStyle;\n  }\n\n  protected computeOuterRadius = (\n    key: string,\n    datum: Datum,\n    states: StateValueType = 'normal',\n    superValue: number\n  ): number => {\n    const offset = (this.getAttribute('radiusOffset', datum, states) as number) ?? 0;\n    return superValue + offset;\n  };\n\n  protected computeCenter = (key: 'x' | 'y', datum: Datum, states: StateValueType = 'normal', center: number) => {\n    return (\n      polarToCartesian(\n        { x: 0, y: 0 },\n        this.getAttribute('centerOffset', datum, states) as number,\n        datum[ARC_MIDDLE_ANGLE]\n      )[key] + center\n    );\n  };\n}\n\nexport class ArcMark extends BaseArcMark<IArcMarkSpec> implements IArcMark {\n  static readonly type = MarkTypeEnum.arc;\n  readonly type: MarkTypeEnum = ArcMark.type;\n}\n\nexport const registerArcMark = () => {\n  registerShadowRoot();\n  registerArc();\n  registerArcDataLabel();\n  registerArcAnimation();\n  Factory.registerGraphicComponent(MarkTypeEnum.arc, createArc);\n  Factory.registerMark(ArcMark.type, ArcMark);\n};\n"]}