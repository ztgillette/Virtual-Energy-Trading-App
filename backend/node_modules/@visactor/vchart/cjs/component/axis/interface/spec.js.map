{"version":3,"sources":["../src/component/axis/interface/spec.ts"],"names":[],"mappings":"","file":"spec.js","sourcesContent":["import type { AxisBreakProps, AxisItem, AxisItemStateStyle } from '@visactor/vrender-components';\nimport type { IAnimationSpec } from '../../../animation/spec';\nimport type {\n  Datum,\n  IFormatMethod,\n  IPadding,\n  IRectMarkSpec,\n  IRichTextFormatMethod,\n  IRuleMarkSpec,\n  ISymbolMarkSpec,\n  ITextMarkSpec,\n  StringOrNumber\n} from '../../../typings';\nimport type { IComponentSpec } from '../../base/interface';\nimport type { AxisType, IAxisItem, IBandAxisLayer, ITickCalculationCfg, StyleCallback } from './common';\nimport type { IBaseScale } from '@visactor/vscale';\nimport type { IVChart } from '../../../core';\n\nexport interface ICommonAxisSpec extends Omit<IComponentSpec, 'orient' | 'center'>, IAnimationSpec<string, string> {\n  /**\n   * 轴类型\n   */\n  type?: AxisType;\n  /**\n   * 是否显示坐标轴\n   * @default true\n   */\n  visible?: boolean;\n  /**\n   * 是否开启反向坐标轴。\n   * @default false\n   */\n  inverse?: boolean;\n  /**\n   * 轴刻度线配置\n   */\n  tick?: ITick;\n  /**\n   * 子刻度线配置\n   */\n  subTick?: ISubTick;\n\n  /**\n   * 是否开启动画，默认关闭\n   * @default false\n   */\n  animation?: boolean;\n\n  // 交互相关的配置\n  /**\n   * 是否开启 select 选中交互，默认关闭\n   * @default false\n   */\n  select?: boolean;\n  /**\n   * 是否开启 hover 悬浮交互，默认关闭\n   * @default false\n   */\n  hover?: boolean;\n\n  /**\n   * 是否开启轴数据采样，默认开启。\n   * 轴采样开启之后，会对轴数据进行采样显示，防止轴数据的重叠。\n   * 通过配置 `label.minGap` 可以控制轴标签之间的间距。\n   * @default true\n   * @since 1.1.0\n   */\n  sampling?: boolean;\n\n  /**\n   * 是否强制初始化 tick 数据，仅在 visible 为 false 时生效\n   * @default false\n   */\n  forceInitTick?: boolean;\n}\n\nexport type ILinearAxisBreakSpec = Omit<AxisBreakProps, 'rawRange'> & {\n  /**\n   * 截断标识之间的间距：\n   * 1. `number` 为像素值\n   * 2. `string` 为百分比相对值，如 '1%'\n   * @default 6\n   */\n  gap?: number | string;\n  /**\n   * 计算截断对应range的类型，根据长度或者记录数进行分段\n   * @since 1.12.12\n   */\n  scopeType?: 'count' | 'length';\n};\n\nexport interface ILinearAxisSpec {\n  // 线性轴数值范围配置\n  /** 最小值，**优先级高于 zero，nice** */\n  min?: number;\n  /** 最大值，**优先级高于 zero，nice** */\n  max?: number;\n\n  /**\n   * 最小值，当且仅当该值小于数据最小值时，才能生效\n   * 注意：不建议和配置`min`一起使用\n   * @since 1.11.0\n   */\n  softMin?: number | ((domain: number[]) => number);\n  /**\n   * 最大值，当且仅当该值大于数据最大值时，才能生效\n   * 注意：不建议和配置`max`一起使用\n   * @since 1.11.0\n   */\n  softMax?: number | ((domain: number[]) => number);\n\n  /** @deparated 线性轴数值范围配置（已弃用，请使用外层 min/max） */\n  range?: {\n    /** @deparated 最小值 */\n    min?: number;\n    /** @deparated 最大值 */\n    max?: number;\n  };\n\n  /**\n   * 是否根据数据将轴范围调整到相对规整的数值\n   * @default true\n   * @description 当配置了 min 和 max，该配置项失效\n   * @example 当配置了 max = 999, nice并不会将轴范围优化到1000\n   */\n  nice?: boolean;\n  /**\n   * nice效果的类型，是精度优先还是tickCount优先（比如tickCount为2那nice出来的精度就很低）\n   * @default undefined('tickCountFirst')\n   * @description 不配置就默认是tickCountFirst\n   * @example 数据范围是0~6000，如果tickCount为2，那么tickCountFirst出来的range就是[0, 10000], accurateFirst出来的range就是[0, 6000]但10000显示不了\n   */\n  niceType?: 'tickCountFirst' | 'accurateFirst';\n  /**\n   * 是否包含0值\n   * @default true\n   * @description 当配置了 min和 max，该配置项失效\n   */\n  zero?: boolean;\n  /**\n   * 轴范围按比例扩展\n   * @description 当配置了 min和 max，该配置项失效\n   */\n  expand?: {\n    /**\n     * 轴范围扩展的最小比例\n     */\n    min?: number;\n    /**\n     * 轴范围扩展的最大比例\n     */\n    max?: number;\n  };\n\n  /**\n   * 连续轴上的 dimension tooltip 数据筛选范围\n   * 如果配置为单个数字 d，则筛选区间为 [x0 - d, x0 + d]；如果配置为二元组 [d1, d2]，则筛选区间为 [x0 + d1, x0 + d2]\n   * 如果配置为函数 f, 函数的返回值将会作为数据筛选范围的值\n   * @since 1.4.0\n   */\n  tooltipFilterRange?: number | [number, number] | ((params: { scale: IBaseScale }) => number | [number, number]);\n  /**\n   * 轴截断配置，只对笛卡尔坐标系的 linear 轴生效\n   * @since 1.12.4\n   */\n  breaks?: ILinearAxisBreakSpec[];\n}\n\nexport interface IBandAxisSpec {\n  /**\n   * 是否去除 band 轴两端的留白，如果为 true，则两端的 padding 为 0，\n   * **并且 bandPadding、paddingInner 和 paddingOuter 的设置将被忽略**。\n   * @default false\n   * @since 1.7.0\n   */\n  trimPadding?: boolean;\n  /**\n   * 同时设置轴的 paddingInner 和 paddingOuter\n   * **因为有可能存在多层 scale( xField 设置成了数组，即分组场景），所以支持了数组类型，用于多层 scale 的 bandPadding 配置**\n   */\n  bandPadding?: number | number[];\n  /**\n   * band 轴的内边距\n   * ** 因为有可能存在多层 scale( xField 设置成了数组，即分组场景），所以支持了数组类型，用于多层 scale 的 paddingInner 配置**\n   * @default 0.1\n   */\n  paddingInner?: number | number[];\n  /**\n   * band 轴的外边距\n   * ** 因为有可能存在多层 scale( xField 设置成了数组，即分组场景），所以支持了数组类型，用于多层 scale 的 paddingOuter 配置**\n   * @default 0.3\n   */\n  paddingOuter?: number | number[];\n  /**\n   * 配置离散轴的数值范围\n   * @since 1.1.0\n   */\n  domain?: StringOrNumber[];\n  /**\n   * `bandPosition` 是一个可选参数，用于指定数据点在 band 轴上的位置。它的含义是确定数据点在 band 轴上的位置偏移量，相对于 band 轴的起始位置。\n   * `bandPosition` 的取值范围是从 0 到 1，其中 0 表示数据点位于 band 轴的起始位置，1 表示数据点位于 band 轴的结束位置。\n   * @default 0.5\n   */\n  bandPosition?: number;\n\n  /**\n   * 当存在多层分组场景时，是否展示所有的分组轴\n   * @default false\n   * @since 1.9.0\n   */\n  showAllGroupLayers?: boolean;\n  /**\n   * 每一层轴的配置\n   * layer[0] 为离坐标轴线最近的轴，当且仅当 `showAllGroupLayers` 配置开启生效。\n   * @since 1.9.0\n   */\n  layers?: IBandAxisLayer[];\n}\n// Grid 配置项\nexport interface IGrid extends IAxisItem<IRuleMarkSpec> {\n  /**\n   * 两个栅格线间的填充色\n   */\n  alternateColor?: string | string[];\n  /**\n   * grid 是否与 label 对齐，默认为 true，即对齐，配置为 false 则显示在前后两个刻度中间\n   * @default true\n   */\n  alignWithLabel?: boolean;\n  /**\n   * 网格线样式，支持回调\n   */\n  style?: IRuleMarkSpec | StyleCallback<IRuleMarkSpec | undefined>;\n  /**\n   * 快捷属性，也可以在 `style` 中配置，用于配置网格线的绘制顺序，默认为 50\n   * @default 50\n   * @since 1.4.0\n   */\n  zIndex?: number;\n}\n\n// 刻度线配置\nexport interface ITick extends IAxisItem<IRuleMarkSpec>, ITickCalculationCfg {\n  /**\n   * Length of tick lines\n   * 坐标轴刻度线的长度\n   * @default 4\n   */\n  tickSize?: number;\n  /**\n   * 刻度线朝向，默认朝外(坐标线包围盒外部)\n   * @default false\n   */\n  inside?: boolean;\n  /**\n   * tick 是否与 label 对齐，默认为 true，即对齐，配置为 false 则显示在前后两个刻度中间\n   * @default true\n   */\n  alignWithLabel?: boolean;\n  /**\n   * 刻度线样式设置，支持回调\n   */\n  style?: IRuleMarkSpec | StyleCallback<IRuleMarkSpec | undefined>;\n  /**\n   * 刻度线不同交互状态下的样式配置，支持：\n   * 1. hover\n   * 2. hover_reverse\n   * 3. selected\n   * 4. selected_reverse\n   */\n  state?: AxisItemStateStyle<IRuleMarkSpec>;\n  /**\n   * 用于 tick 的数据过滤\n   * @since 1.1.0\n   */\n  dataFilter?: (data: AxisItem[], context: { vchart: IVChart }) => AxisItem[];\n}\n\n// 子刻度线配置\nexport interface ISubTick extends IAxisItem<IRuleMarkSpec> {\n  /**\n   * TODO: 考虑下 log 轴，自刻度线之间的间距是不均匀的问题\n   * 子刻度个数\n   */\n  tickCount?: number;\n  /**\n   * 子刻度线朝向，默认朝外(坐标线包围盒外部)\n   * @default false\n   */\n  inside?: boolean;\n  /** 子刻度线的长度 */\n  tickSize?: number;\n  /**\n   * 子刻度线不同交互状态下的样式配置，支持：\n   * 1. hover\n   * 2. hover_reverse\n   * 3. selected\n   * 4. selected_reverse\n   */\n  state?: AxisItemStateStyle<IRuleMarkSpec>;\n}\n\n// 轴标签配置\nexport interface ILabel extends IAxisItem<ITextMarkSpec> {\n  /**\n   * 文本类型\n   * @deprecated 1.10.0 版本后，在 formatMethod 中返回 { type: 'rich', text: xxx}\n   * */\n  type?: 'text' | 'rich';\n  /**\n   * 轴标签内容格式化函数\n   * @param text 原始标签文本值\n   * @param datum 图形数据\n   * @returns 格式化后的文本\n   */\n  formatMethod?: IFormatMethod<[text: string | string[], datum?: Datum]>;\n  /**\n   * 格式化模板\n   * @description 可以通过类似 `{value:.2f}%` 的形式对指定数据字段进行格式化\n   * @since 1.10.0\n   */\n  formatter?: string | string[];\n  /** 标签同 tick 之间的间距 */\n  space?: number;\n  /**\n   * 标签朝向，默认朝外(坐标线包围盒外部)\n   * @default false\n   */\n  inside?: boolean;\n  /**\n   * 标签之间的最小间距（单位为像素），仅当轴采样开始时生效（`sampling: true`）。\n   * 该配置会影响轴采样的结果。\n   */\n  minGap?: number;\n  /**\n   * 文本样式设置\n   */\n  style?: ITextMarkSpec | StyleCallback<ITextMarkSpec | undefined>;\n  /**\n   * label 不同交互状态下的样式配置，支持：\n   * 1. hover\n   * 2. hover_reverse\n   * 3. selected\n   * 4. selected_reverse\n   */\n  state?: AxisItemStateStyle<ITextMarkSpec>;\n  /**\n   * 用于 label 的数据过滤\n   * @since 1.1.0\n   */\n  dataFilter?: (data: AxisItem[], layer: number, context: { vchart: IVChart }) => AxisItem[];\n}\n\n// 轴线配置\nexport interface IDomainLine extends IAxisItem<IRuleMarkSpec> {\n  /**\n   * domainLine 在不同交互状态下的样式配置，支持：\n   * 1. hover\n   * 2. hover_reverse\n   * 3. selected\n   * 4. selected_reverse\n   */\n  state?: AxisItemStateStyle<IRuleMarkSpec>;\n}\n\n// 轴标题配置\nexport interface ITitle extends IAxisItem<ITextMarkSpec> {\n  /**\n   * 文本类型\n   * @deprecated 1.10.0 版本后，在 formatMethod 中返回 { type: 'rich', text: xxx}\n   * */\n  type?: 'text' | 'rich';\n  /**\n   * 轴标题内容，支持多种格式\n   * - 字符串或者数值\n   * - 字符串或者数值数组\n   */\n  text?: ITextMarkSpec['text'] | ReturnType<IRichTextFormatMethod<[]>>;\n  /**\n   * 标题的显示位置，直角坐标系默认 'middle'；\n   * 极坐标系的圆弧轴如果配置了内半径，则默认 'middle'，否则 'end'\n   */\n  position?: 'start' | 'middle' | 'end';\n  /**\n   * 标题距离坐标轴(轴线、刻度、标签共同构成的包围盒)的距离\n   */\n  space?: number;\n  /**\n   * 标题内边距配置\n   */\n  padding?: IPadding | number | number[];\n  /**\n   * 标题背景色设置\n   */\n  background?: IAxisItem<IRectMarkSpec> & {\n    /**\n     * 背景的交互状态样式配置\n     */\n    state?: AxisItemStateStyle<Partial<IRectMarkSpec>>;\n  };\n  /**\n   * TODO: 接入富文本\n   * 标题 shape 配置\n   */\n  shape?: IAxisItem<ISymbolMarkSpec> & {\n    /**\n     * shape 同标题文本之间的间距\n     */\n    space?: number;\n    /**\n     * shape 标记的交互状态样式配置\n     */\n    state?: AxisItemStateStyle<Partial<ISymbolMarkSpec>>;\n  };\n  /**\n   * 标题整体的旋转角度（如果标题配置了 background、shape 等属性的话，需要使用该属性进行整体的配置旋转）。\n   */\n  angle?: number;\n  /**\n   * text 文本的交互状态样式配置\n   */\n  state?: AxisItemStateStyle<Partial<ITextMarkSpec>>;\n}\n"]}