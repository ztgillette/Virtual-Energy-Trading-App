{"version":3,"sources":["../src/component/axis/cartesian/time-axis.ts"],"names":[],"mappings":"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","file":"time-axis.js","sourcesContent":["import type { IEffect } from '../../../model/interface';\nimport { DataView } from '@visactor/vdataset';\nimport { isXAxis } from './util/common';\nimport { isValid, TimeUtil } from '@visactor/vutils';\nimport { eachSeries } from '../../../util/model';\nimport type { ICartesianSeries } from '../../../series/interface';\nimport { CartesianLinearAxis } from './linear-axis';\nimport type { ICartesianTickDataOpt } from '@visactor/vrender-components';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport type { Datum } from '../../../typings';\nimport { CompilableData } from '../../../compile/data/compilable-data';\nimport type { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport type { ICartesianTimeAxisSpec } from './interface';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\nimport { getAxisItem, shouldUpdateAxis } from '../util';\n// eslint-disable-next-line no-duplicate-imports\nimport { mergeSpec } from '@visactor/vutils-extension';\nimport { continuousTicks, LineAxis, LineAxisGrid } from '@visactor/vrender-components';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\nimport type { IGroup } from '@visactor/vrender-core';\nimport type { VRenderComponentOptions } from '../../../core/interface';\nimport { AxisEnum, GridEnum } from '../interface/common';\nimport { commonAxis } from '../../../theme/builtin/common/component/axis/common-axis';\nimport { axisX, axisY } from '../../../theme/builtin/common/component/axis/cartesian-axis';\n\nexport interface CartesianTimeAxis<T extends ICartesianTimeAxisSpec = ICartesianTimeAxisSpec>\n  extends Pick<LinearAxisMixin, 'valueToPosition'>,\n    CartesianLinearAxis<T> {}\n\nexport class CartesianTimeAxis<\n  T extends ICartesianTimeAxisSpec = ICartesianTimeAxisSpec\n> extends CartesianLinearAxis<T> {\n  static type = ComponentTypeEnum.cartesianTimeAxis;\n  type = ComponentTypeEnum.cartesianTimeAxis;\n\n  static specKey = 'axes';\n  static readonly builtInTheme = {\n    axis: commonAxis,\n    axisX,\n    axisY\n  };\n\n  protected _layerTickData!: CompilableData;\n\n  protected _zero: boolean = false;\n\n  effect: IEffect = {\n    scaleUpdate: params => {\n      this.computeData(params?.value);\n      eachSeries(\n        this._regions,\n        s => {\n          if (isXAxis(this.getOrient())) {\n            if (\n              shouldUpdateAxis(\n                (s as ICartesianSeries).getXAxisHelper(),\n                this.axisHelper(),\n                isValid(this._seriesUserId) || isValid(this._seriesIndex)\n              )\n            ) {\n              (s as ICartesianSeries).setXAxisHelper(this.axisHelper());\n            }\n          } else {\n            if (\n              shouldUpdateAxis(\n                (s as ICartesianSeries).getYAxisHelper(),\n                this.axisHelper(),\n                isValid(this._seriesUserId) || isValid(this._seriesIndex)\n              )\n            ) {\n              (s as ICartesianSeries).setYAxisHelper(this.axisHelper());\n            }\n          }\n        },\n        {\n          userId: this._seriesUserId,\n          specIndex: this._seriesIndex\n        }\n      );\n    }\n  };\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n    this._tick = mergeSpec({}, this._spec.tick, this._spec.layers?.[0]);\n  }\n\n  protected _initData() {\n    super._initData();\n\n    // 如果layer数组的第二项未配置，则不显示第二层\n    if (this._spec.layers?.[1]) {\n      const layerTickData = new DataView(this._option.dataSet, { name: `${this.type}_${this.id}_layer_1_ticks` })\n        .parse(this._scale, {\n          type: 'scale'\n        })\n        .transform(\n          {\n            type: `${this.type}-ticks`,\n            options: {\n              ...this._tickTransformOption(),\n              tickCount: this._spec.layers[1].tickCount,\n              forceTickCount: this._spec.layers[1].forceTickCount,\n              tickStep: this._spec.layers[1].tickStep\n            } as ICartesianTickDataOpt\n          },\n          false\n        );\n      this._layerTickData = new CompilableData(this._option, layerTickData);\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected computeData(updateType?: 'range' | 'domain' | 'force'): void {\n    super.computeData(updateType);\n    if (this._layerTickData) {\n      this._layerTickData.getDataView().reRunAllTransform();\n      this._layerTickData.updateData();\n    }\n  }\n\n  created() {\n    super.created();\n    if (this._layerTickData) {\n      if (this._axisMark) {\n        this._layerTickData.addRelatedMark(this._axisMark);\n      }\n\n      if (this._gridMark) {\n        this._layerTickData.addRelatedMark(this._gridMark);\n      }\n    }\n  }\n\n  protected _getLabelFormatMethod(): any {\n    const timeUtil = TimeUtil.getInstance();\n    const timeFormat1 = this._spec.layers?.[1]?.timeFormat || '%Y%m%d';\n    const timeFormatMode1 = this._spec.layers?.[1]?.timeFormatMode || 'local';\n    const timeFormatter1 = timeFormatMode1 === 'local' ? timeUtil.timeFormat : timeUtil.timeUTCFormat;\n\n    const timeFormat0 = this._spec.layers?.[0]?.timeFormat || '%Y%m%d';\n    const timeFormatMode0 = this._spec.layers?.[0]?.timeFormatMode || 'local';\n    const timeFormatter0 = timeFormatMode0 === 'local' ? timeUtil.timeFormat : timeUtil.timeUTCFormat;\n\n    return (value: any, datum: any, index: number, data: any[], layer: number) => {\n      let timeValue: string;\n      if (layer === 0) {\n        timeValue = timeFormatter0(timeFormat0, value);\n      } else {\n        timeValue = timeFormatter1(timeFormat1, value);\n      }\n\n      return this._spec.label?.formatMethod ? this._spec.label.formatMethod(timeValue, datum) : timeValue;\n    };\n  }\n\n  protected getLabelItems(length: number) {\n    const items = [];\n\n    const tickLatestData = this.getTickData()?.getLatestData();\n    if (tickLatestData && tickLatestData.length) {\n      items.push(\n        tickLatestData.map((obj: Datum) => {\n          return getAxisItem(obj.value, this._getNormalizedValue([obj.value], length));\n        })\n      );\n    }\n\n    const layerLatestData = this._layerTickData?.getLatestData();\n    if (layerLatestData && layerLatestData.length) {\n      items.push(\n        layerLatestData.map((obj: Datum) => {\n          return getAxisItem(obj.value, this._getNormalizedValue([obj.value], length));\n        })\n      );\n    }\n\n    return items;\n  }\n\n  protected registerTicksTransform() {\n    const name = `${this.type}-ticks`;\n    registerDataSetInstanceTransform(this._option.dataSet, name, continuousTicks);\n\n    return name;\n  }\n  transformScaleDomain() {\n    // do nothing\n  }\n}\n\nexport const registerCartesianTimeAxis = () => {\n  Factory.registerGraphicComponent(AxisEnum.lineAxis, (attrs: any, options: VRenderComponentOptions) => {\n    return new LineAxis(attrs, options) as unknown as IGroup;\n  });\n  Factory.registerGraphicComponent(GridEnum.lineAxisGrid, (attrs: any, options: VRenderComponentOptions) => {\n    return new LineAxisGrid(attrs, options) as unknown as IGroup;\n  });\n  registerAxis();\n  Factory.registerComponent(CartesianTimeAxis.type, CartesianTimeAxis);\n};\n"]}