"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerCartesianSymlogAxis = exports.CartesianSymlogAxis = void 0;

const linear_axis_1 = require("./linear-axis"), type_1 = require("../../interface/type"), linear_axis_mixin_1 = require("../mixin/linear-axis-mixin"), vscale_1 = require("@visactor/vscale"), vutils_1 = require("@visactor/vutils"), factory_1 = require("../../../core/factory"), base_axis_1 = require("../base-axis"), vrender_components_1 = require("@visactor/vrender-components"), register_1 = require("../../../data/register"), common_1 = require("../interface/common"), common_axis_1 = require("../../../theme/builtin/common/component/axis/common-axis"), linear_axis_2 = require("../../../theme/builtin/common/component/axis/linear-axis"), cartesian_axis_1 = require("../../../theme/builtin/common/component/axis/cartesian-axis");

class CartesianSymlogAxis extends linear_axis_1.CartesianLinearAxis {
    constructor() {
        super(...arguments), this.type = type_1.ComponentTypeEnum.cartesianSymlogAxis, this._zero = !1, 
        this._scale = new vscale_1.SymlogScale;
    }
    initScales() {
        var _a;
        super.initScales(), this._scale.constant(null !== (_a = this._spec.constant) && void 0 !== _a ? _a : 10);
    }
    registerTicksTransform() {
        const name = `${this.type}-ticks`;
        return (0, register_1.registerDataSetInstanceTransform)(this._option.dataSet, name, vrender_components_1.continuousTicks), 
        name;
    }
    transformScaleDomain() {}
}

exports.CartesianSymlogAxis = CartesianSymlogAxis, CartesianSymlogAxis.type = type_1.ComponentTypeEnum.cartesianSymlogAxis, 
CartesianSymlogAxis.specKey = "axes", CartesianSymlogAxis.builtInTheme = {
    axis: common_axis_1.commonAxis,
    axisLinear: linear_axis_2.axisLinear,
    axisX: cartesian_axis_1.axisX,
    axisY: cartesian_axis_1.axisY
}, (0, vutils_1.mixin)(CartesianSymlogAxis, linear_axis_mixin_1.LinearAxisMixin);

const registerCartesianSymlogAxis = () => {
    factory_1.Factory.registerGraphicComponent(common_1.AxisEnum.lineAxis, ((attrs, options) => new vrender_components_1.LineAxis(attrs, options))), 
    factory_1.Factory.registerGraphicComponent(common_1.GridEnum.lineAxisGrid, ((attrs, options) => new vrender_components_1.LineAxisGrid(attrs, options))), 
    (0, base_axis_1.registerAxis)(), factory_1.Factory.registerComponent(CartesianSymlogAxis.type, CartesianSymlogAxis);
};

exports.registerCartesianSymlogAxis = registerCartesianSymlogAxis;
//# sourceMappingURL=symlog-axis.js.map
