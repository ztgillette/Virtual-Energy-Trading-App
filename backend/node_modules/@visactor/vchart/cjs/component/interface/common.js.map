{"version":3,"sources":["../src/component/interface/common.ts"],"names":[],"mappings":"","file":"common.js","sourcesContent":["import type { ISeriesFilter } from '../../region/interface';\nimport type { ILayoutModel, IModelConstructor, IModelOption, IModelSpecInfo } from '../../model/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type { IRegion } from '../../region/interface';\nimport type { ISeries } from '../../series/interface';\nimport type { Maybe, StringOrNumber } from '../../typings';\nimport type { IGraphic } from '@visactor/vrender-core';\nimport type { IChartSpecInfo } from '../../chart/interface';\n/**\n * 组件作为图表辅助阅读等功能的模块，除了model提供的能力之外，还有以下功能特点\n * 支持对多region的绑定。\n * 能够在resize时正常的重新对内部元素布局。\n * 保持数据独立，模块间的依赖关系，能从数据上处理的应当从数据上处理。\n */\n\nexport interface IComponentOption extends IModelOption {\n  // 区域\n  getAllRegions: () => IRegion[];\n  getRegionsInIndex: (index?: number[]) => IRegion[];\n  getRegionsInIds: (ids: number[]) => IRegion[];\n  getRegionsInUserIdOrIndex: (user_ids?: StringOrNumber[], index?: number[]) => IRegion[];\n  // series\n  getAllSeries: () => ISeries[];\n  getSeriesInIndex: (index?: number[]) => ISeries[];\n  getSeriesInIds: (ids?: number[]) => ISeries[];\n  getSeriesInUserIdOrIndex: (user_ids?: StringOrNumber[], index?: number[]) => ISeries[];\n  // component\n  getAllComponents: () => IComponent[];\n  getComponentByIndex: (key: string, index: number) => IComponent | undefined;\n  getComponentByUserId: (userId: StringOrNumber) => IComponent | undefined;\n  getComponentsByKey: (key: string) => IComponent[];\n  getComponentsByType: (type: string) => IComponent[];\n}\n\nexport interface IComponent extends ILayoutModel {\n  readonly name: string;\n\n  // 区域\n  getRegions: () => IRegion[];\n  getBindSeriesFilter?: () => ISeriesFilter;\n  getVRenderComponents: () => IGraphic[];\n\n  // 清空，用于更新等场景\n  clear: () => void;\n\n  // 数据\n  getDatum: (childGraphic?: IGraphic) => any | undefined;\n}\n\nexport interface IComponentConstructor extends IModelConstructor {\n  type: string;\n  specKey?: string;\n  getSpecInfo?: (chartSpec: any, chartSpecInfo?: IChartSpecInfo) => Maybe<IModelSpecInfo[]>;\n  createComponent: (specInfo: IModelSpecInfo, options: IComponentOption) => IComponent;\n  new (spec: any, options: IComponentOption): IComponent;\n}\n"]}