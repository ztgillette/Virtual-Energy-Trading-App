{"version":3,"sources":["../src/component/marker/mark-area/cartesian-mark-area.ts"],"names":[],"mappings":"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","file":"cartesian-mark-area.js","sourcesContent":["import { ComponentTypeEnum } from '../../interface/type';\nimport type { IOptionAggr, IOptionWithCoordinates } from '../../../data/transforms/interface';\nimport { cartesianCoordinateLayout, getMarkAreaProcessInfo, positionLayout, xyLayout } from '../utils';\nimport type { MarkAreaAttrs } from '@visactor/vrender-components';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkArea as MarkAreaComponent, registerMarkAreaAnimate } from '@visactor/vrender-components';\n// eslint-disable-next-line no-duplicate-imports\nimport { isValid } from '@visactor/vutils';\nimport { Factory } from '../../../core/factory';\nimport type { CoordinateType, IPoint } from '../../../typings';\nimport type { IMarkProcessOptions } from '../interface';\nimport { BaseMarkArea } from './base-mark-area';\nimport { markArea } from '../../../theme/builtin/common/component/mark-area';\n\nexport class CartesianMarkArea extends BaseMarkArea {\n  static type = ComponentTypeEnum.markArea;\n  type = ComponentTypeEnum.markArea;\n  name: string = ComponentTypeEnum.markArea;\n  static coordinateType = 'cartesian';\n  coordinateType = 'cartesian' as CoordinateType;\n\n  static readonly builtInTheme = {\n    markArea\n  };\n\n  protected _newMarkAreaComponent(attr: MarkAreaAttrs): MarkAreaComponent {\n    return new MarkAreaComponent(attr);\n  }\n\n  protected _computePointsAttr() {\n    const spec = this._spec as any;\n    const data = this._markerData;\n    const startRelativeSeries = this._startRelativeSeries;\n    const endRelativeSeries = this._endRelativeSeries;\n    const relativeSeries = this._relativeSeries;\n\n    const { doXProcess, doYProcess, doXYProcess, doCoordinatesProcess } = getMarkAreaProcessInfo(spec);\n\n    const isPositionLayout = isValid(spec.positions);\n    const autoRange = spec.autoRange ?? false;\n\n    let points: IPoint[] = [];\n    let lines: IPoint[][] = [];\n    if (doXYProcess) {\n      lines = xyLayout(data, startRelativeSeries, endRelativeSeries, relativeSeries, autoRange);\n      // 格式为 [[{x, y}], [{x, y}]]\n      // 顺序为左下角开始逆时针绘制\n      const [start, end] = lines;\n      if (start && start.length && end && end.length) {\n        points = [\n          {\n            x: start[0].x,\n            y: end[0].y\n          },\n          start[0],\n          {\n            x: end[0].x,\n            y: start[0].y\n          },\n          end[0]\n        ];\n      }\n    } else if (doXProcess || doYProcess) {\n      lines = xyLayout(data, startRelativeSeries, endRelativeSeries, relativeSeries, autoRange);\n      const [start, end] = lines;\n      if (start && start.length && end && end.length) {\n        points = [...start, end[1], end[0]];\n      }\n    } else if (doCoordinatesProcess) {\n      points = cartesianCoordinateLayout(data, relativeSeries, autoRange, spec.coordinatesOffset);\n    } else if (isPositionLayout) {\n      points = positionLayout(spec.positions, relativeSeries, spec.regionRelative);\n    }\n\n    return { points };\n  }\n\n  protected _computeOptions(): IMarkProcessOptions {\n    const spec = this._spec as any;\n    const { doXProcess, doYProcess, doXYProcess, doCoordinatesProcess } = getMarkAreaProcessInfo(spec);\n\n    let options: IOptionAggr[] | IOptionWithCoordinates;\n    if (doXYProcess) {\n      options = [\n        this._processSpecByDims([\n          { dim: 'x', specValue: spec.x },\n          { dim: 'y', specValue: spec.y }\n        ]),\n        this._processSpecByDims([\n          { dim: 'x', specValue: spec.x1 },\n          { dim: 'y', specValue: spec.y1 }\n        ])\n      ];\n    } else if (doXProcess) {\n      options = [\n        this._processSpecByDims([{ dim: 'x', specValue: spec.x }]),\n        this._processSpecByDims([{ dim: 'x', specValue: spec.x1 }])\n      ];\n    } else if (doYProcess) {\n      options = [\n        this._processSpecByDims([{ dim: 'y', specValue: spec.y }]),\n        this._processSpecByDims([{ dim: 'y', specValue: spec.y1 }])\n      ];\n    } else if (doCoordinatesProcess) {\n      options = this._processSpecCoo(spec);\n    }\n    return { options };\n  }\n}\n\nexport const registerMarkArea = () => {\n  Factory.registerComponent(CartesianMarkArea.type, CartesianMarkArea);\n  registerMarkAreaAnimate();\n};\n"]}