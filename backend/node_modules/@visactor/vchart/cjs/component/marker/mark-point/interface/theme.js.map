{"version":3,"sources":["../src/component/marker/mark-point/interface/theme.ts"],"names":[],"mappings":"","file":"theme.js","sourcesContent":["import type { IImageGraphicAttribute, IRichTextGraphicAttribute, IGroupGraphicAttribute } from '@visactor/vrender-core';\nimport type { IMarkPointItemPosition } from '@visactor/vrender-components';\nimport type { ILineMarkSpec, ISymbolMarkSpec } from '../../../../typings';\nimport type {\n  IMarkerLabelSpec,\n  IMarkerRef,\n  IMarkerState,\n  IMarkerSymbol,\n  MarkerStateCallback,\n  MarkerStateValue,\n  MarkerStyleCallback\n} from '../../interface';\nimport type { IRegion } from '../../../../region/interface';\n\nexport type IOffsetCallback = (region: IRegion) => number;\n\nexport type IItemContentStyle = ISymbolMarkSpec | IImageGraphicAttribute | IGroupGraphicAttribute;\nexport interface IItemContent extends IMarkerRef {\n  /**\n   * 标注内容相对于定位点的位置\n   */\n  position?: keyof typeof IMarkPointItemPosition;\n  /**\n   * x 方向偏移量\n   */\n  offsetX?: number | 'regionRight' | 'regionLeft' | IOffsetCallback;\n  /**\n   * y 方向偏移量\n   */\n  offsetY?: number | 'regionTop' | 'regionBottom' | IOffsetCallback;\n  /**\n   * 是否自动调整 item content 使其展示在 marker 可见区域内。\n   * @default false\n   * @since 1.8.7\n   */\n  confine?: boolean;\n\n  /**\n   * 标注类型\n   */\n  // richText 和 text + rich的功能有重叠, 所以去掉richText的配置\n  // 为了兼容老配置, 会把用户配的richText转化成text + rich的形式\n  // type?: 'symbol' | 'text' | 'image' | 'richText';\n  type?: 'symbol' | 'text' | 'image' | 'custom';\n\n  /**\n   * 标注内容的样式及状态 等价于 symbol | image | text | richText | customMark\n   * @since 2.0.0\n   */\n  style?: IItemContentStyle | MarkerStyleCallback<IItemContentStyle> | IMarkerLabelSpec;\n  state?: Record<MarkerStateValue, IItemContentStyle | MarkerStateCallback<IItemContentStyle>>;\n\n  // 老写法, 先保留\n  /**\n   * type为symbol时, symbol的样式\n   */\n  symbol?: Partial<IMarkerState<ISymbolMarkSpec>>;\n  /**\n   * type为image时, image的样式\n   */\n  image?: Partial<IMarkerState<IImageGraphicAttribute>>;\n  /**\n   * type为text时, text的样式\n   * 'text'类型的ItemContent新增三种子类型：'text','rich'。配置在textStyle.type上。\n   */\n  text?: IMarkerLabelSpec;\n  /**\n   * type为rich text时, rich text的样式\n   */\n  richText?: Partial<IMarkerState<IRichTextGraphicAttribute>>;\n  /**\n   * type为custom时, customMark的样式(目前仅在mapLabel内部逻辑中使用到)\n   */\n  customMark?: Partial<IMarkerState<IGroupGraphicAttribute>>;\n}\n\nexport type IItemLine<T extends Partial<IMarkerSymbol> = IMarkerSymbol> = {\n  /** TODO：'type-opo' */\n  /**\n   * 引导线类型\n   * 'type-s'表示起点和终点直接连线; 'type-do'表示包含一个折点，且折点x坐标为起点到终点的 1/2 x坐标，折点y坐标为起点y坐标；'type-op' 表示包含一个折点，且折点x坐标为起点x坐标，折点y坐标为终点y坐标；'type-po' 表示包含一个折点，且折点x坐标为终点x坐标，折点y坐标为起点y坐标\n   * 引导线类型的具体形式参考：https://journals.sagepub.com/doi/10.1177/1473871618799500\n   */\n  type?: 'type-s' | 'type-do' | 'type-po' | 'type-op' | 'type-arc';\n  /**\n   * 当type为type-arc时生效, 数值决定圆心到终点连线的偏移量, 绝对值越小, 曲率越大, 符号决定法向, 不能等于0\n   * @since 1.11.1\n   * @default 0.8\n   */\n  arcRatio?: number;\n  /**\n   * 引导线可见性\n   */\n  visible?: boolean;\n  /**\n   * 垂直于引导线的装饰线，参考案例: https://observablehq.com/@mikelotis/edmonton-population-history-line-chart\n   */\n  decorativeLine?: {\n    /**\n     * 装饰线可见性\n     */\n    visible?: boolean;\n    /**\n     * 装饰线的长度\n     */\n    length?: number;\n  };\n  /**\n   * 引导线起点symbol样式\n   */\n  startSymbol?: T;\n  /**\n   * 引导线终点symbol样式\n   */\n  endSymbol?: T;\n  /**\n   * 引导线样式\n   */\n  line?: Partial<IMarkerState<Omit<ILineMarkSpec, 'visible'>>>;\n};\n\nexport interface IMarkPointTheme<T extends Partial<IMarkerSymbol> = Partial<IMarkerSymbol>> {\n  /**\n   * 标注引导线\n   */\n  itemLine?: IItemLine<T>;\n\n  /**\n   * 标注内容\n   */\n  itemContent?: IItemContent;\n  /**\n   * 被标注的内容\n   * @since 1.11.1\n   */\n  targetSymbol?: {\n    /**\n     * 被标注内容与标记线间的间隙\n     * @default 0\n     */\n    offset?: number;\n    /**\n     * 是否显示\n     * @default false\n     */\n    visible?: boolean;\n    /**\n     * 大小\n     * @default 20\n     */\n    size?: number;\n  } & Partial<IMarkerState<ISymbolMarkSpec>>;\n}\n"]}