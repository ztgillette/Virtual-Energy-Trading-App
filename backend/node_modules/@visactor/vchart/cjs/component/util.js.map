{"version":3,"sources":["../src/component/util.ts"],"names":[],"mappings":";;;AACA,6CAAkD;AAElD,6CAA0C;AAG1C,SAAgB,2BAA2B,CAAC,IAAY,EAAE,QAAoC;IAC5F,OAAO,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACrC,CAAC;AAFD,kEAEC;AAED,SAAgB,iBAAiB,CAC/B,YAAkB,EAClB,SAA6B,EAC7B,IAAsB,EACtB,KAAa;IAEb,IAAI,YAAY,EAAE;QAChB,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC;KAC1D;IACD,MAAM,aAAa,GAAG,iBAAO,CAAC,YAAY,EAAE,CAAC;IAC7C,IAAI,SAAS,IAAI,aAAa,EAAE;QAC9B,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,EAAE,CAAC;KACtE;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAdD,8CAcC;AAEM,MAAM,WAAW,GAAG,CACzB,SAAc,EACd,OAAe,EACf,QAAgB,EAChB,MAA6B,EACD,EAAE;IAC9B,IAAI,IAAA,cAAK,EAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE;QAC7B,OAAO,SAAS,CAAC;KAClB;IACD,MAAM,WAAW,GAAG,IAAA,gBAAO,EAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAChD,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAErE,MAAM,SAAS,GAAqB,EAAE,CAAC;IACtC,IAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAS,EAAE,EAAE;QACrC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;YAC/B,SAAS,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,CAAC;gBACP,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAChD,YAAY,EAAE,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC,CAAC;gBACvC,IAAI,EAAE,QAAQ;aACf,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAxBW,QAAA,WAAW,eAwBtB","file":"util.js","sourcesContent":["import type { Maybe } from '@visactor/vutils';\nimport { isArray, isNil } from '@visactor/vutils';\nimport type { Datum } from '../typings';\nimport { Factory } from '../core/factory';\nimport type { IModelSpecInfo } from '../model/interface';\n\nexport function getComponentThemeFromOption(type: string, getTheme: (...keys: string[]) => any) {\n  return getTheme('component', type);\n}\n\nexport function getFormatFunction(\n  formatMethod?: any,\n  formatter?: string | string[],\n  text?: string | number,\n  datum?: Datum\n) {\n  if (formatMethod) {\n    return { formatFunc: formatMethod, args: [text, datum] };\n  }\n  const formatterImpl = Factory.getFormatter();\n  if (formatter && formatterImpl) {\n    return { formatFunc: formatterImpl, args: [text, datum, formatter] };\n  }\n  return {};\n}\n\nexport const getSpecInfo = <T extends Record<string, any>>(\n  chartSpec: any,\n  specKey: string,\n  compType: string,\n  filter?: (spec: T) => boolean\n): Maybe<IModelSpecInfo<T>[]> => {\n  if (isNil(chartSpec[specKey])) {\n    return undefined;\n  }\n  const isArraySpec = isArray(chartSpec[specKey]);\n  const spec = isArraySpec ? chartSpec[specKey] : [chartSpec[specKey]];\n\n  const specInfos: IModelSpecInfo[] = [];\n  (spec as T[]).forEach((s, i: number) => {\n    if (s && (!filter || filter(s))) {\n      specInfos.push({\n        spec: s,\n        specPath: isArraySpec ? [specKey, i] : [specKey],\n        specInfoPath: ['component', specKey, i],\n        type: compType\n      });\n    }\n  });\n  return specInfos;\n};\n"]}