{"version":3,"sources":["../src/component/crosshair/cartesian.ts"],"names":[],"mappings":"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","file":"cartesian.js","sourcesContent":["import type { Maybe } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { isValid } from '@visactor/vutils';\nimport type { IComponentOption } from '../interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { ComponentTypeEnum } from '../interface/type';\nimport type { ICartesianCrosshairSpec } from './interface';\nimport type { ICartesianSeries } from '../../series/interface';\nimport { LineCrosshair, RectCrosshair } from '@visactor/vrender-components';\n// eslint-disable-next-line no-duplicate-imports\nimport { BaseCrossHair } from './base';\nimport type { INode } from '@visactor/vrender-core';\nimport type { IAxis } from '../axis/interface';\nimport type { IOrientType, IPoint, StringOrNumber, TooltipActiveType, TooltipData } from '../../typings';\nimport { isXAxis, isYAxis } from '../axis/cartesian/util/common';\nimport { Factory } from '../../core/factory';\nimport type { IModelSpecInfo } from '../../model/interface';\nimport { layoutByValue, layoutCrosshair } from './utils/cartesian';\nimport { getFirstSeries } from '../../util';\nimport type { IDimensionData, IDimensionInfo } from '../../event/events/dimension/interface';\nimport { getSpecInfo } from '../util';\nimport { crosshair } from '../../theme/builtin/common/component/crosshair';\n\n// 1. crosshair保存上次记录的x和y轴dimension\n// 2. 每次交互触发时，首先转化成dimension保存，然后依据dimension计算x和y绘制\n// 3. 如果同方向同时有多个轴，那么同时保存这些轴的数据\n// 4. 如果同方向的轴有多个离散轴，那么直接不显示\n\nexport class CartesianCrossHair<T extends ICartesianCrosshairSpec = ICartesianCrosshairSpec> extends BaseCrossHair<T> {\n  static specKey = 'crosshair';\n\n  static readonly builtInTheme = {\n    crosshair\n  };\n  static type = ComponentTypeEnum.cartesianCrosshair;\n  type = ComponentTypeEnum.cartesianCrosshair;\n  name: string = ComponentTypeEnum.cartesianCrosshair;\n\n  static getSpecInfo(chartSpec: any): Maybe<IModelSpecInfo[]> {\n    return getSpecInfo<ICartesianCrosshairSpec>(chartSpec, this.specKey, this.type, (s: ICartesianCrosshairSpec) => {\n      return (s.xField && s.xField.visible !== false) || (s.yField && s.yField.visible !== false);\n    });\n  }\n\n  constructor(spec: T, options: IComponentOption) {\n    super(spec, options);\n\n    this._stateByField = {\n      xField: {\n        coordKey: 'x',\n        anotherAxisKey: 'y',\n        currentValue: new Map(),\n        labelsComp: {\n          top: null,\n          bottom: null\n        }\n      },\n      yField: {\n        coordKey: 'y',\n        anotherAxisKey: 'x',\n        currentValue: new Map(),\n        labelsComp: {\n          left: null,\n          right: null\n        }\n      }\n    };\n  }\n\n  /**\n   * 查找所有落在x和y区域的轴\n   * @param relativeX\n   * @param relativeY\n   */\n  private _findAllAxisContains(relativeX: number, relativeY: number) {\n    const xAxisMap = this._getAxisInfoByField<IAxis>('x');\n    const yAxisMap = this._getAxisInfoByField<IAxis>('y');\n    return {\n      xAxisMap: this._filterAxisByPoint(xAxisMap, relativeX, relativeY),\n      yAxisMap: this._filterAxisByPoint(yAxisMap, relativeX, relativeY)\n    };\n  }\n\n  protected _getDatumAtPoint(axis: IAxis, point: IPoint): number | string {\n    const dim = isXAxis(axis.getOrient() as unknown as IOrientType) ? 'x' : 'y';\n    const coordByAxis = point[dim] - (axis.getLayoutStartPoint()[dim] - this.getLayoutStartPoint()[dim]);\n    const value = axis.getScale().invert(coordByAxis);\n    return value;\n  }\n\n  /**\n   * set axis value of crosshair\n   */\n  setAxisValue(datum: StringOrNumber, axis: IAxis) {\n    if (isXAxis(axis.getOrient() as unknown as IOrientType)) {\n      this._stateByField.xField.currentValue.set(axis.getSpecIndex(), {\n        datum,\n        axis\n      });\n    } else {\n      this._stateByField.yField.currentValue.set(axis.getSpecIndex(), {\n        datum,\n        axis\n      });\n    }\n  }\n\n  protected _layoutCrosshair(\n    relativeX: number,\n    relativeY: number,\n    tooltipData?: TooltipData,\n    activeType?: TooltipActiveType\n  ) {\n    let x = relativeX;\n    let y = relativeY;\n\n    if (tooltipData && tooltipData.length) {\n      if (activeType === 'dimension') {\n        const dimensionInfo = (tooltipData as IDimensionInfo[])[0];\n        // 图例筛选时, 找到第一个没有被筛选的系列\n        const datumIndex = dimensionInfo.data.findIndex(dimData => dimData.datum.length > 0);\n        let pos;\n        if (datumIndex > -1) {\n          const dimensionData = dimensionInfo.data[datumIndex];\n          pos = dimensionData.series.dataToPosition(dimensionData.datum[0]);\n        }\n\n        const isY = isValid(dimensionInfo.dimType)\n          ? dimensionInfo.dimType === 'y'\n          : isYAxis(dimensionInfo?.axis?.getOrient() as IOrientType);\n\n        if (isY) {\n          y = pos?.y;\n        } else {\n          x = pos?.x;\n        }\n      } else if (activeType === 'mark') {\n        const dimensionData = (tooltipData as IDimensionData[])[0];\n        const pos = dimensionData.series.dataToPosition(dimensionData.datum[0]);\n\n        x = pos?.x;\n        y = pos?.y;\n      }\n    }\n    // 删除之前的currValue\n    this.clearAxisValue();\n    // 找到所有的包含这个点的轴\n    const { xAxisMap, yAxisMap } = this._findAllAxisContains(x, y);\n    if ((xAxisMap && xAxisMap.size === 0) || (yAxisMap && yAxisMap.size === 0)) {\n      if (this.enableRemain) {\n        return;\n      }\n      // 隐藏\n      this.hide();\n      return;\n    }\n\n    // 将数据保存到这个对象中，如果不存在，就直接不执行后续逻辑\n    xAxisMap && xAxisMap.size && this._setAllAxisValues(xAxisMap, { x, y }, 'xField');\n    yAxisMap && yAxisMap.size && this._setAllAxisValues(yAxisMap, { x, y }, 'yField');\n\n    this.layoutByValue();\n  }\n\n  layoutByValue(enableRemain?: boolean) {\n    if (!this.enable) {\n      return;\n    }\n    const series = getFirstSeries(this._regions, 'cartesian') as ICartesianSeries;\n    if (!series) {\n      return;\n    }\n\n    layoutByValue(this._stateByField, series, this.getLayoutStartPoint(), enableRemain ?? this.enableRemain);\n\n    Object.keys(this._stateByField).forEach(field => {\n      this._layoutByField(field);\n    });\n  }\n\n  private _layoutByField(field: string) {\n    const { cacheInfo, attributes, labelsComp, bandSize, coordKey } = this._stateByField[field];\n    if (!attributes || !cacheInfo || (cacheInfo._isCache && this.enableRemain)) {\n      return;\n    }\n\n    const { coord, labels, visible, labelsTextStyle } = cacheInfo;\n\n    if (visible) {\n      // 外部设置的size\n      const positionAttribute = layoutCrosshair(this._stateByField[field]);\n      this._updateCrosshairByField(field, positionAttribute);\n\n      Object.keys(labels).forEach(labelKey => {\n        if (labels[labelKey].visible) {\n          const updateAttrs = {\n            [coordKey]: coord + bandSize / 2,\n            ...labels[labelKey],\n            ...attributes.label,\n            angle: attributes.label.syncAxisLabelAngle ? cacheInfo.axisLabel?.attribute.angle ?? 0 : 0,\n            textStyle: {\n              ...attributes.label?.textStyle,\n              ...labelsTextStyle[labelKey]\n            },\n            zIndex: this.labelZIndex,\n            visible: true\n          };\n          this._updateCrosshairLabel(labelsComp[labelKey], updateAttrs, label => {\n            label.name = `crosshair-${field.replace('Field', '')}-${labelKey}-label`;\n            labelsComp[labelKey] = label;\n          });\n        } else {\n          labelsComp[labelKey] && labelsComp[labelKey].hideAll();\n        }\n      });\n    } else {\n      this._hideByField(field);\n    }\n  }\n\n  private _updateCrosshairByField(field: string, positionAttribute: any) {\n    const container = this.getContainer();\n    const { attributes } = this._stateByField[field];\n    let { crosshairComp } = this._stateByField[field];\n\n    if (crosshairComp) {\n      crosshairComp.setAttributes(positionAttribute);\n    } else {\n      const style = attributes.style;\n      // 创建\n      if (attributes.type === 'line') {\n        crosshairComp = new LineCrosshair({\n          ...positionAttribute,\n          lineStyle: style,\n          zIndex: this.gridZIndex + 1, // 样式优化：线盖在面上\n          disableTriggerEvent: this._option.disableTriggerEvent,\n          pickable: false\n        });\n      } else if (attributes.type === 'rect') {\n        crosshairComp = new RectCrosshair({\n          ...positionAttribute,\n          rectStyle: style,\n          zIndex: this.gridZIndex,\n          disableTriggerEvent: this._option.disableTriggerEvent,\n          pickable: false\n        });\n      }\n      // 添加至场景树\n      container?.add(crosshairComp as unknown as INode);\n\n      this._stateByField[field].crosshairComp = crosshairComp;\n    }\n  }\n}\n\nexport const registerCartesianCrossHair = () => {\n  Factory.registerComponent(CartesianCrossHair.type, CartesianCrossHair);\n};\n"]}