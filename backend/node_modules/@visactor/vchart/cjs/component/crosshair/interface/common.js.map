{"version":3,"sources":["../src/component/crosshair/interface/common.ts"],"names":[],"mappings":"","file":"common.js","sourcesContent":["import type { Dict } from '@visactor/vutils';\nimport type { IPadding, StringOrNumber } from '../../../typings';\nimport type { IAxis } from '../../axis/interface';\nimport type { LineCrosshair, RectCrosshair, Tag } from '@visactor/vrender-components';\nimport type { IGroup, IRichTextGraphicAttribute, IText, ITextGraphicAttribute } from '@visactor/vrender-core';\n\nexport type AxisCurrentValueMap = Map<\n  number,\n  {\n    datum: StringOrNumber;\n    axis: IAxis;\n    [key: string]: any;\n  }\n>;\n\nexport type IBound = { x1: number; y1: number; x2: number; y2: number };\nexport type IAxisInfo<T> = Map<number, IBound & { axis: T }>;\n\nexport interface IHair {\n  /** 是否展示 crosshair 辅助图形 */\n  visible: boolean;\n  /** 类型 */\n  type: 'rect' | 'line';\n  /** 样式 */\n  style?: Dict<any>;\n  label?: {\n    /** 文本是否可见 */\n    visible: boolean;\n    /** 格式化函数 */\n    formatMethod?: (text: StringOrNumber | string[], position: string) => string | string[];\n    /**\n     * 格式化模板\n     * @description 可以通过类似 `{value:.2f}%` 的形式对指定数据字段进行格式化\n     * @since 1.10.0\n     */\n    formatter?: string | string[];\n    /** 文本样式 */\n    textStyle?: Dict<any>;\n    minWidth?: number;\n    maxWidth?: number;\n    padding?: IPadding | number | number[];\n    panel?: Dict<any>;\n    zIndex?: number;\n    /**\n     * 文本是否跟随轴标签的角度旋转\n     * default: false\n     * @since 1.13.12\n     */\n    syncAxisLabelAngle?: boolean;\n  };\n  /**\n   * 极坐标系样式\n   */\n  smooth?: boolean;\n}\n\nexport interface IHairRadius extends IHair {\n  smooth?: boolean;\n}\n\nexport interface ICrosshairLabelInfo {\n  visible: boolean;\n  text: StringOrNumber;\n  dx?: number;\n  dy?: number;\n  x?: number;\n  y?: number;\n  offset?: number;\n  defaultFormatter?: (value: StringOrNumber) => StringOrNumber;\n}\n\nexport interface ICrosshairInfo {\n  /**\n   * croosshair 的大小，xField 对应了crosshair图形的高度，yField 对应了crosshair图形的宽度\n   */\n  coordRange: [number, number];\n  sizeRange: [number, number];\n  coord: number;\n  labels: Record<string, ICrosshairLabelInfo>;\n  labelsTextStyle?: Record<string, Partial<ITextGraphicAttribute> | Partial<IRichTextGraphicAttribute>>;\n  visible: boolean;\n  _isCache?: boolean;\n  axis: IAxis;\n  axisLabel?: IText;\n  /**\n   * 半径轴对应的crosshair，当crosshair类型为多边形的时候，多边形的边数\n   */\n  sides?: number;\n}\n\nexport interface CrossHairStateItem {\n  /**\n   * 坐标对应的key，xField对应了'x'，yField对应了'y'\n   */\n  coordKey: string;\n  /**\n   * 另一个轴对应的key，xField对应了'y'，yField对应了'x'\n   */\n  anotherAxisKey: string;\n  /**\n   * 记录当前crosshair对应的轴组件和位置信息\n   */\n  currentValue: AxisCurrentValueMap;\n  /**\n   * crosshair组件对应的公共的图形属性配置\n   */\n  attributes?: IHair | undefined;\n  /**\n   * 记录当前crosshair的信息，用于crosshair组件的更新\n   */\n  cacheInfo?: ICrosshairInfo | undefined;\n  /**\n   * crosshair组件的实例\n   */\n  crosshairComp?: LineCrosshair | RectCrosshair | IGroup;\n  /**\n   * crosshair组件的文本实例\n   */\n  labelsComp?: Record<string, Tag>;\n  /**\n   * 当前轴对应的band大小\n   */\n  bandSize?: number;\n  /**\n   * 当前轴对应的band偏移量\n   */\n  offsetSize?: number;\n}\n\nexport type CrossHairStateByField = Record<string, CrossHairStateItem>;\n"]}