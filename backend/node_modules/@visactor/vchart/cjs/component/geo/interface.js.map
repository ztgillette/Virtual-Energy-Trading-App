{"version":3,"sources":["../src/component/geo/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IPoint } from '../../typings/coordinate';\nimport type { IComponent } from '../interface';\n\nexport type ProjectionType =\n  | 'albers'\n  | 'albersUsa'\n  | 'azimuthalEqualArea'\n  | 'azimuthalEquidistant'\n  | 'conicConformal'\n  | 'conicEqualArea'\n  | 'conicEquidistant'\n  | 'equalEarth'\n  | 'equirectangular'\n  | 'gnomonic'\n  | 'identity'\n  | 'mercator'\n  | 'naturalEarth1'\n  | 'orthographic'\n  | 'stereographic'\n  | 'transverseMercator';\n\nexport interface IProjectionSpec {\n  name: string;\n  /**\n   * 地理映射类型\n   */\n  type: ProjectionType;\n  /**\n   * 初始化缩放倍数\n   * @default 1\n   */\n  zoom?: number;\n  /**\n   * 初始化聚焦的经纬度\n   */\n  center?: [number, number];\n}\n\n// 坐标系统属于region下的内容\n// 1. 同一个region下的coordinate应该一致\n// 2. region只有一个坐标系对象\nexport interface IGeoCoordinate extends IComponent {\n  projectionSpec: IProjectionSpec;\n\n  longitudeField?: string;\n  latitudeField?: string;\n\n  dataToPosition: (values: any[]) => IPoint;\n  dispatchZoom: (zoomDelta: number, center?: { x: number; y: number }) => void;\n}\n\nexport interface IGeoCoordinateHelper {\n  longitudeField?: string;\n  latitudeField?: string;\n\n  dataToPosition: (values: [number, number]) => IPoint;\n  dataToLatitude: (lat: number) => number;\n  dataToLongitude: (lon: number) => number;\n\n  shape: (datum: any) => string;\n\n  getCoordinateId: () => number;\n}\n\nexport interface IGeoCoordinateSpec {\n  projection: Omit<IProjectionSpec, 'name'>;\n}\n"]}