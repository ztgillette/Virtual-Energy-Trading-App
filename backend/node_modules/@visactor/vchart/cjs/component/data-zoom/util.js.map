{"version":3,"sources":["../src/component/data-zoom/util.ts"],"names":[],"mappings":";;;AAAA,6CAAiD;AACjD,qCAA0C;AASnC,MAAM,oBAAoB,GAAG,CAClC,cAAmB,EACnB,EAEC,EACD,EAAE;IACF,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,EAAE,CAAC;IAEjE,MAAM,UAAU,GAAG,KAAK,EAAE,CAAC;IAC3B,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;IACjC,IAAI,IAAA,YAAK,EAAC,SAAS,CAAC,IAAI,IAAA,YAAK,EAAC,UAAU,CAAC,EAAE;QACzC,OAAO,cAAc,CAAC;KACvB;IACD,MAAM,MAAM,GAAG,cAAc,EAAE,CAAC;IAChC,MAAM,SAAS,GAAG,IAAA,gBAAO,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;IAEnE,IACE,cAAc,CAAC,SAAS,CAAC;QACzB,MAAM;QACN,MAAM,CAAC,SAAS,CAAC;QACjB,MAAM,CAAC,SAAS,CAAC,CAAC,sBAAsB;QACxC,CAAC,YAAY,EAAE,EACf;QACA,cAAc,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC;KAC9C;IAED,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AA3BW,QAAA,oBAAoB,wBA2B/B;AAKK,MAAM,uBAAuB,GAAG,CAAC,IAAgB,EAAE,EAAkC,EAAE,EAAE;IAC9F,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IACjD,MAAM,UAAU,GAAG,KAAK,EAAE,CAAC;IAC3B,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;IACjC,IAAI,IAAA,YAAK,EAAC,SAAS,CAAC,IAAI,IAAA,YAAK,EAAC,UAAU,CAAC,EAAE;QACzC,OAAO,IAAI,CAAC;KACb;IACD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1B,OAAO,EAAE,CAAC;KACX;IAGD,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACpB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YACjB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,YAAY,EAAE,EAAE;QAClB,MAAM,GAAG,CAAC,CAAM,EAAE,EAAE;YAClB,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,IAAA,YAAK,EAAC,UAAU,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAC9B,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAA,aAAI,EAAC,SAAS,CAAC,EAAE;oBAC3D,IAAI,GAAG,IAAI,CAAC;iBACb;gBACD,OAAO;YACT,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;KACH;SAAM;QACL,MAAM,GAAG,CAAC,CAAM,EAAE,EAAE;YAClB,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,IAAA,YAAK,EAAC,UAAU,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBAE9B,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBACnD,IAAI,GAAG,IAAI,CAAC;iBACb;gBACD,OAAO;YACT,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;KACH;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7B,CAAC,CAAC;AA9CW,QAAA,uBAAuB,2BA8ClC;AAgBK,MAAM,uBAAuB,GAAG,CAAC,IAAgB,EAAE,EAAkC,EAAE,EAAE;IAC9F,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC;IAC/E,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;IAC7C,MAAM,SAAS,GAAQ,EAAE,CAAC;IAC1B,MAAM,UAAU,GAAU,EAAE,CAAC;IAC7B,MAAM,WAAW,GAAU,EAAE,CAAC;IAC9B,IAAI,aAAa,GAAG,KAAK,CAAC;IAE1B,cAAc,CAAC,OAAO,CAAC,CAAC,EAAY,EAAE,CAAC,EAAE,EAAE;;QACzC,IAAI,IAAA,YAAK,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;YACzB,OAAO;SACR;QAED,MAAM,cAAc,GAAG,MAAA,EAAE,CAAC,SAAS,EAAE,0CAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,cAAc,IAAI,cAAc,CAAC,sBAAsB,EAAE;YAC3D,aAAa,GAAG,IAAI,CAAC;YACrB,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;gBACvC,IAAI,IAAA,YAAK,EAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;oBACvB,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBAClB;YACH,CAAC,CAAC,CAAC;SACJ;QACD,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YAE/B,IAAA,YAAK,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpC,IAAI,CAAC,IAAA,YAAK,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBACpB,IAAI,IAAA,YAAK,EAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;wBAC9B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC3B,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;qBACzB;oBACD,IAAI,CAAC,IAAA,YAAK,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;wBAG1B,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACjG;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,aAAa;QACrC,CAAC,CAAC,WAAW;QACb,CAAC,CAAC,eAAe,KAAK,KAAK;YAC3B,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAE3B,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAChC,MAAM,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC;QAEpC,IAAI,UAAU,EAAE;YACd,GAAG,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;SACpC;QAED,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AA1DW,QAAA,uBAAuB,2BA0DlC","file":"util.js","sourcesContent":["import { isArray, last } from '@visactor/vutils';\nimport { array, isNil } from '../../util';\nimport type { DataView } from '@visactor/vdataset';\n\nexport interface IDataFilterWithNewDomainOption {\n  getNewDomain: () => any[];\n  isContinuous: () => boolean;\n  field: () => string;\n}\n\nexport const lockStatisticsFilter = (\n  statisticsData: any,\n  op: IDataFilterWithNewDomainOption & {\n    originalFields: () => Record<string, any>;\n  }\n) => {\n  const { getNewDomain, isContinuous, field, originalFields } = op;\n\n  const datumField = field();\n  const newDomain = getNewDomain();\n  if (isNil(newDomain) || isNil(datumField)) {\n    return statisticsData;\n  }\n  const fields = originalFields();\n  const realField = isArray(datumField) ? datumField[0] : datumField;\n\n  if (\n    statisticsData[realField] &&\n    fields &&\n    fields[realField] &&\n    fields[realField].lockStatisticsByDomain &&\n    !isContinuous()\n  ) {\n    statisticsData[realField].values = newDomain;\n  }\n\n  return statisticsData;\n};\n\n/**\n * 保证数据筛选的结果全都在坐标轴的新domain范围中，防止出现point数据因为超出domain范围而绘制在原点的情况\n */\nexport const dataFilterWithNewDomain = (data: Array<any>, op: IDataFilterWithNewDomainOption) => {\n  const { getNewDomain, isContinuous, field } = op;\n  const datumField = field();\n  const newDomain = getNewDomain();\n  if (isNil(newDomain) || isNil(datumField)) {\n    return data;\n  }\n  if (newDomain.length === 0) {\n    return [];\n  }\n\n  // 使用map代替indexOf查找，提升性能\n  const domainMap = {};\n  newDomain.forEach(d => {\n    if (!domainMap[d]) {\n      domainMap[d] = 1;\n    }\n  });\n\n  let filter = null;\n  if (isContinuous()) {\n    filter = (d: any) => {\n      let flag = false;\n      array(datumField).every(field => {\n        if (d[field] >= newDomain[0] && d[field] <= last(newDomain)) {\n          flag = true;\n        }\n        return;\n      });\n      return flag;\n    };\n  } else {\n    filter = (d: any) => {\n      let flag = false;\n      array(datumField).every(field => {\n        // 这里d[f] + ''的原因是：数据是number类型的，但轴声明为band轴，domain会强制将number => string，所以filter的时候要将data中的number => string\n        if (domainMap[d[field] + ''] || domainMap[d[field]]) {\n          flag = true;\n        }\n        return;\n      });\n      return flag;\n    };\n  }\n\n  return data.filter(filter);\n};\n\nexport interface IDataFilterComputeDomainOption {\n  input: {\n    dataCollection: any[];\n    stateFields: string[];\n    valueFields: string[];\n    isCategoryState?: boolean;\n    method: 'sum'; // todo: 也许可以提供多种数据统计方法 @chensiji\n  };\n  output: {\n    stateField: string;\n    valueField: string;\n  };\n}\n\nexport const dataFilterComputeDomain = (data: Array<any>, op: IDataFilterComputeDomainOption) => {\n  const { stateFields, valueFields, dataCollection, isCategoryState } = op.input;\n  const { stateField, valueField } = op.output;\n  const resultObj: any = {};\n  const resultData: any[] = [];\n  const stateValues: any[] = [];\n  let hasLockDomain = false;\n\n  dataCollection.forEach((dv: DataView, i) => {\n    if (isNil(stateFields[i])) {\n      return;\n    }\n    // 按照用户指定的domain进行排序(这里不通过getRawDataStatistics来取是因为时机不对，此时getRawDataStatistics还没有正确结果)\n    const stateFieldInfo = dv.getFields()?.[stateFields[i]];\n    if (stateFieldInfo && stateFieldInfo.lockStatisticsByDomain) {\n      hasLockDomain = true;\n      stateFieldInfo.domain.forEach((d: any) => {\n        if (isNil(resultObj[d])) {\n          stateValues.push(d);\n          resultObj[d] = 0;\n        }\n      });\n    }\n    dv.latestData.forEach((d: any) => {\n      // 针对rangeColumn等xField为数组形式的图表，需要将xField的所有value都记录下来\n      array(stateFields[i]).forEach(state => {\n        if (!isNil(d[state])) {\n          if (isNil(resultObj[d[state]])) {\n            stateValues.push(d[state]);\n            resultObj[d[state]] = 0;\n          }\n          if (!isNil(valueFields[i])) {\n            // 传进来的d[yFields[i]]可能是stringnumber\n            // 传进来的d[yFields[i]]可能是普通的字符串，这时计数按1计算（其实相当于计算数据条数）\n            resultObj[d[state]] += isNaN(parseFloat(d[valueFields[i]])) ? 1 : parseFloat(d[valueFields[i]]);\n          }\n        }\n      });\n    });\n  });\n\n  const sortedStateValues = hasLockDomain\n    ? stateValues\n    : isCategoryState === false\n    ? stateValues.sort((a, b) => a - b)\n    : Object.keys(resultObj);\n\n  sortedStateValues.forEach(state => {\n    const res = { [stateField]: state };\n\n    if (valueField) {\n      res[valueField] = resultObj[state];\n    }\n\n    resultData.push(res);\n  });\n\n  return resultData;\n};\n"]}