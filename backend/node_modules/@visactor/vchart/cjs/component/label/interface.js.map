{"version":3,"sources":["../src/component/label/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { BaseLabelAttrs, DataLabelAttrs } from '@visactor/vrender-components';\nimport type { ConvertToMarkStyleSpec, Datum, IComposedTextMarkSpec, IFormatMethod, ITextMarkSpec } from '../../typings';\nimport type { IComponentSpec } from '../base/interface';\nimport type { ILabelMark, IMark } from '../../mark/interface';\nimport type { ISeries } from '../../series/interface';\nimport type { IRegion } from '../../region/interface';\n\nexport interface ILabelInfo {\n  baseMark: IMark;\n  labelMark: ILabelMark;\n  series: ISeries;\n  labelSpec: TransformedLabelSpec;\n}\n\nexport interface ILabelComponentContext {\n  region: IRegion;\n  labelInfo: ILabelInfo[];\n}\n\nexport interface ILabelFormatMethodContext {\n  series?: ISeries;\n}\n\n/**\n * 系列图元标签配置，一般用于展示数据项\n */\nexport interface ILabelSpec extends ILabelAnimationSpec {\n  /**\n   * 标签组件的层级\n   */\n  zIndex?: number;\n  /** 默认不显示标签 */\n  visible?: boolean;\n  /**\n   * 是否支持交互。\n   * @default false\n   */\n  interactive?: boolean;\n  /**\n   * 文本类型：text, rich,\n   * @since 1.7.0\n   * @deprecated\n   */\n  textType?: 'text' | 'rich';\n  /**\n   * 格式化函数\n   * @since 1.10.0 支持返回结构 `{type:'rich', text: [{text:'some text', fill:'black', fontSize: 20}]}\n   */\n  formatMethod?: IFormatMethod<[text: string | string[], datum?: Datum, ctx?: ILabelFormatMethodContext]>;\n  /**\n   * 字符串模版\n   * 用{}包裹变量名的字符串模版, 变量名取自数据属性值\n   * eg: 'type={type},value={value}'\n   * @since 1.7.0\n   */\n  formatter?: string | string[];\n  /** 标签与其对应数据图元的间距 */\n  offset?: number;\n  /** 标签位置 */\n  position?: string;\n  /** 标签样式配置 */\n  style?: ConvertToMarkStyleSpec<IComposedTextMarkSpec>;\n  /** 交互样式配置 */\n  state?: LabelStateStyle<Partial<IComposedTextMarkSpec>>;\n  /** 标签防重叠配置 */\n  overlap?: BaseLabelAttrs['overlap'] & {\n    /**\n     * 防重叠区域边距\n     * @since 1.13.7\n     */\n    padding?: DataLabelAttrs['size']['padding'];\n  };\n  /** 标签智能反色配置 */\n  smartInvert?: BaseLabelAttrs['smartInvert'];\n  /**\n   * 堆积数据过滤类型\n   * @since 1.12.0\n   */\n  stackDataFilterType?: 'min' | 'max';\n  /** 自定义标签数据筛选和排序\n   * @since 1.3.0\n   */\n  dataFilter?: BaseLabelAttrs['dataFilter'];\n  /** 自定义标签布局函数。\n   * @description 当配置了 customLayoutFunc 后，默认布局和防重叠逻辑将不再生效。（overlap/position/offset不生效）\n   * @since 1.3.0\n   */\n  customLayoutFunc?: BaseLabelAttrs['customLayoutFunc'];\n  /** 自定义标签躲避函数\n   * @description 当配置了 customOverlapFunc 后，会根据 position 和 offset 进行初始布局。配置的防重叠逻辑(overlap)不生效。\n   * @since 1.3.0\n   */\n  customOverlapFunc?: BaseLabelAttrs['customOverlapFunc'];\n  /**\n   * 防重叠计算完成后的回调函数\n   * @since 1.13.5\n   */\n  onAfterOverlapping?: BaseLabelAttrs['onAfterOverlapping'];\n  /**\n   * 标签布局\n   */\n  labelLayout?: 'series' | 'region';\n  /**\n   * 是否支持3D\n   */\n  support3d?: boolean;\n  /**\n   * 是否同步数据图元的状态变化\n   * @default false\n   * @since 1.9.0\n   */\n  syncState?: boolean;\n  /**\n   * 是否显示标签关联图元的 mark tooltip\n   * @default false\n   * @since 1.13.5\n   */\n  showRelatedMarkTooltip?: boolean;\n}\n\nexport type ILabelAnimationSpec = Pick<\n  BaseLabelAttrs,\n  'animation' | 'animationEnter' | 'animationUpdate' | 'animationExit'\n>;\nexport type IMultiLabelSpec<T extends Omit<ILabelSpec, 'position'>> = T | T[];\n\ntype LabelStateStyle<T> = {\n  /**\n   * 标签hover状态样式配置\n   */\n  hover?: T;\n  /**\n   * 标签hover_reverse状态样式配置\n   */\n  hover_reverse?: T;\n  /**\n   * 标签选中状态样式配置\n   */\n  selected?: T;\n  /**\n   * 标签未选中状态样式配置\n   */\n  selected_reverse?: T;\n};\n\nexport type ITotalLabelSpec = Pick<\n  ILabelSpec,\n  'visible' | 'formatMethod' | 'interactive' | 'offset' | 'style' | 'state' | 'textType' | 'overlap'\n> & {\n  /** 堆叠汇总标签的位置，在一组堆积图元的上方或下方\n   * @default 'top'\n   */\n  position?: 'top' | 'bottom';\n  /**\n   * 不管总计标签是否展示，内部都默认计算总计值\n   * @default false\n   */\n  alwayCalculateTotal?: boolean;\n};\n\nexport interface ITotalLabelTheme\n  extends Pick<ILabelSpec, 'visible' | 'interactive' | 'offset' | 'overlap' | 'smartInvert' | 'animation'> {\n  style?: ITextMarkSpec;\n}\n\n// 内部处理转换后的标签配置\nexport type TransformedLabelSpec = ILabelSpec & {\n  getStyleHandler: (series: ISeries) => (mark?: ILabelMark, spec?: any) => void;\n};\n"]}