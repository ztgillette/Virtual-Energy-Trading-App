{"version":3,"sources":["../src/component/tooltip/utils/get-value.ts"],"names":[],"mappings":";;;AAAA,6CAAkF;AASlF,qCAA+C;AAGxC,MAAM,sBAAsB,GAAG,CACpC,KAAiC,EACjC,KAAW,EACX,MAA6B,EAC7B,SAAkB,EACH,EAAE;IACjB,IAAI,KAAQ,CAAC;IACb,IAAI,IAAA,mBAAU,EAAC,KAAK,CAAC,EAAE;QACrB,KAAK,GAAI,KAAmC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KAC7D;SAAM,IAAI,IAAA,sBAAa,EAAC,KAAK,CAAC,IAAI,IAAA,gBAAO,EAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACvD,KAAK,GAAG,IAAA,YAAG,EAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAM,CAAC;KACtC;SAAM;QACL,KAAK,GAAG,KAAU,CAAC;KACpB;IAED,IAAI,SAAS,EAAE;QACb,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,IAAA,wBAAiB,EAAC,SAAS,EAAE,SAAS,EAAE,KAAe,EAAE,KAAK,CAAC,CAAC;QAC7F,IAAI,UAAU,IAAI,IAAI,EAAE;YACtB,KAAK,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC;SAC7B;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAvBW,QAAA,sBAAsB,0BAuBjC;AAEK,MAAM,sBAAsB,GAAG,CACpC,KAAiC,EACjC,IAAkB,EAClB,MAA6B,EACd,EAAE;IACjB,IAAI,IAAA,cAAK,EAAC,KAAK,CAAC,EAAE;QAChB,OAAO,KAAkB,CAAC;KAC3B;IACD,IAAI,IAAA,mBAAU,EAAC,KAAK,CAAC,EAAE;QACrB,OAAQ,KAAmC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC3D;IACD,OAAO,KAAU,CAAC;AACpB,CAAC,CAAC;AAZW,QAAA,sBAAsB,0BAYjC;AAEF,SAAgB,4BAA4B,CAAC,IAAiB;;IAE5D,MAAM,WAAW,GAAqB,CAAA,MAAC,IAAyB,CAAC,CAAC,CAAC,0CAAE,MAAM;QACzE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAwB,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACjD,CAAC,CAAE,IAAyB,CAAC;IAC/B,KAAK,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,WAAW,EAAE;QAC5C,KAAK,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,QAAQ,EAAE;YAC3C,KAAK,MAAM,SAAS,IAAI,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,EAAE,EAAE;gBACvC,IAAI,SAAS,EAAE;oBACb,OAAO,SAAS,CAAC;iBAClB;aACF;SACF;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAfD,oEAeC","file":"get-value.js","sourcesContent":["import { get, isFunction, isNil, isPlainObject, isValid } from '@visactor/vutils';\nimport type {\n  Datum,\n  TooltipContentCallback,\n  TooltipContentProperty,\n  TooltipData,\n  TooltipPatternProperty\n} from '../../../typings';\nimport type { TooltipHandlerParams } from '../interface';\nimport { getFormatFunction } from '../../util';\nimport type { IDimensionData, IDimensionInfo } from '../../../event';\n\nexport const getTooltipContentValue = <T>(\n  field?: TooltipContentProperty<T>,\n  datum?: any,\n  params?: TooltipHandlerParams,\n  formatter?: string\n): T | undefined => {\n  let value: T;\n  if (isFunction(field)) {\n    value = (field as TooltipContentCallback<T>)(datum, params);\n  } else if (isPlainObject(field) && isValid(field.field)) {\n    value = get(datum, field.field) as T;\n  } else {\n    value = field as T;\n  }\n\n  if (formatter) {\n    const { formatFunc, args } = getFormatFunction(undefined, formatter, field as string, datum);\n    if (formatFunc && args) {\n      value = formatFunc(...args);\n    }\n  }\n\n  return value;\n};\n\nexport const getTooltipPatternValue = <T>(\n  field?: TooltipPatternProperty<T>,\n  data?: TooltipData,\n  params?: TooltipHandlerParams\n): T | undefined => {\n  if (isNil(field)) {\n    return field as undefined;\n  }\n  if (isFunction(field)) {\n    return (field as TooltipContentCallback<T>)(data, params);\n  }\n  return field as T;\n};\n\nexport function getFirstDatumFromTooltipData(data: TooltipData): Datum {\n  // 找到第一个可用的datum\n  const dimInfoList: IDimensionInfo[] = (data as IDimensionData[])[0]?.series\n    ? [{ data: data as IDimensionData[], value: '' }]\n    : (data as IDimensionInfo[]);\n  for (const { data: dataList } of dimInfoList) {\n    for (const { datum: datumList } of dataList) {\n      for (const datumItem of datumList ?? []) {\n        if (datumItem) {\n          return datumItem;\n        }\n      }\n    }\n  }\n  return undefined;\n}\n"]}