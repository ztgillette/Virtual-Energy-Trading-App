{"version":3,"sources":["../src/component/tooltip/processor/mark-tooltip.ts"],"names":[],"mappings":"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","file":"mark-tooltip.js","sourcesContent":["import type { BaseEventParams } from '../../../event/interface';\nimport type { TooltipActiveType } from '../../../typings';\nimport type { ITooltipSpec, TooltipHandlerParams } from '../interface';\nimport type { MarkTooltipInfo, MouseEventData } from './interface';\nimport { BaseTooltipProcessor } from './base';\nimport type { ISeries } from '../../../series/interface';\nimport { IContainPointMode } from '@visactor/vrender-core';\nimport type { IDimensionData } from '../../../event/events/dimension/interface';\nimport type { Label } from '../../label';\nimport { getDatumOfGraphic } from '../../../util/mark';\nimport { Factory } from '../../../core/factory';\nimport { TooltipType } from '../constant';\n\nexport class MarkTooltipProcessor extends BaseTooltipProcessor {\n  activeType: TooltipActiveType = 'mark';\n\n  /** 触发对应类型的 tooltip */\n  showTooltip(info: MarkTooltipInfo, params: BaseEventParams, changePositionOnly: boolean) {\n    const { datum, series } = info;\n    const tooltipSpec = this.component.getSpec();\n    const tooltipData = [{ datum: [datum], series }];\n    const helper = series.tooltipHelper;\n    const seriesSpec = series.getSpec()?.tooltip as ITooltipSpec;\n    const seriesCheckOverlap = seriesSpec?.mark?.checkOverlap;\n    let checkOverlap = false;\n\n    if (seriesCheckOverlap === true || (tooltipSpec.mark?.checkOverlap === true && seriesCheckOverlap !== false)) {\n      const activeTriggers = helper?.activeTriggerSet.mark;\n\n      if (activeTriggers) {\n        checkOverlap = true;\n        const chart = this.component.getChart();\n        // compute layer offset\n        const layer = chart.getCompiler().getStage().getLayer(undefined);\n        const point = { x: params.event.viewX, y: params.event.viewY };\n        layer.globalTransMatrix.transformPoint({ x: params.event.viewX, y: params.event.viewY }, point);\n\n        activeTriggers.forEach(mark => {\n          mark.getGraphics().forEach(g => {\n            if (\n              g !== params.node &&\n              g &&\n              g.containsPoint(point.x, point.y, IContainPointMode.GLOBAL, g.stage.getPickerService())\n            ) {\n              tooltipData[0].datum.push(getDatumOfGraphic(g));\n            }\n          });\n        });\n      }\n    }\n\n    const newParams: TooltipHandlerParams = {\n      ...(params as any),\n      model: series, // 在 label 支持 mark tooltip 后，eventParam.model 可能是 label 组件，而 tooltip 中需要的是 series\n      changePositionOnly,\n      tooltip: this.component\n    };\n    if (changePositionOnly && checkOverlap) {\n      const cacheData = this._cacheActiveSpec && this._cacheActiveSpec.data;\n\n      if (\n        !cacheData ||\n        (cacheData as IDimensionData[])[0].series !== tooltipData[0].series ||\n        (cacheData as IDimensionData[])[0].datum.length !== tooltipData[0].datum.length ||\n        (cacheData as IDimensionData[])[0].datum.some((d, index) => d !== tooltipData[0].datum[index])\n      ) {\n        newParams.changePositionOnly = false;\n      }\n    }\n    return this._showTooltipByHandler(tooltipData, newParams);\n  }\n\n  /** 获取触发 tooltip 需要的信息 */\n  getMouseEventData(params: BaseEventParams): MouseEventData {\n    let info: MarkTooltipInfo | undefined;\n    let ignore: boolean | undefined;\n\n    const modelType = params.model?.modelType;\n    // 处理mark info\n    if (modelType === 'series') {\n      const series = params.model as ISeries;\n      const helper = series.tooltipHelper;\n      const activeTriggers = helper?.activeTriggerSet.mark;\n      const ignoreTriggers = helper?.ignoreTriggerSet.mark;\n      if (activeTriggers?.has(params.mark)) {\n        info = {\n          mark: params.mark,\n          datum: params.datum,\n          series\n        };\n      } else if (ignoreTriggers?.has(params.mark)) {\n        ignore = true;\n      }\n    } else if (modelType === 'component') {\n      const model = params.model as Label;\n      const node = params.node;\n      if (model.name === 'label' && node) {\n        const labelInfo = model.getLabelInfoByTextGraphic(node);\n        const { baseMark, series, labelMark } = labelInfo ?? {};\n        const helper = series.tooltipHelper;\n        const activeTriggers = helper?.activeTriggerSet.mark;\n        const ignoreTriggers = helper?.ignoreTriggerSet.mark;\n        if (activeTriggers?.has(labelMark)) {\n          info = {\n            mark: baseMark as any, // 标签的 tooltip 与其关联图元保持一致\n            datum: (node.attribute as any).data,\n            series\n          };\n        } else if (ignoreTriggers?.has(labelMark)) {\n          ignore = true;\n        }\n      }\n    }\n    return {\n      tooltipInfo: info,\n      ignore\n    };\n  }\n}\n\nexport const registerMarkTooltipProcessor = () => {\n  Factory.registerTooltipProcessor(TooltipType.mark, MarkTooltipProcessor);\n};\n"]}