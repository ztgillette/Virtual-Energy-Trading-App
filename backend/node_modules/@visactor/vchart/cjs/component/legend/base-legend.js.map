{"version":3,"sources":["../src/component/legend/base-legend.ts"],"names":[],"mappings":"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","file":"base-legend.js","sourcesContent":["import { isNil, isEqual, isValid, array, isValidNumber } from '@visactor/vutils';\nimport type { DataView } from '@visactor/vdataset';\nimport type { IRegion } from '../../region/interface';\nimport { BaseComponent } from '../base/base-component';\nimport type { IEffect } from '../../model/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type { ILayoutRect, ILayoutType, IOrientType, IPoint, StringOrNumber } from '../../typings';\nimport { LayoutLevel, LayoutZIndex } from '../../constant/layout';\nimport { ChartEvent } from '../../constant/event';\nimport { eachSeries } from '../../util/model';\nimport { isValidOrient } from '../../util/space';\nimport { mergeSpec } from '@visactor/vutils-extension';\nimport { CompilableData } from '../../compile/data/compilable-data';\n// eslint-disable-next-line no-duplicate-imports\nimport type { ILegend, ILegendCommonSpec } from './interface';\nimport type { IGraphic, IGroup } from '@visactor/vrender-core';\n\nexport abstract class BaseLegend<T extends ILegendCommonSpec> extends BaseComponent<T> implements ILegend {\n  layoutType: ILayoutType = 'normal';\n  layoutZIndex: number = LayoutZIndex.Legend;\n  layoutLevel: number = LayoutLevel.Legend;\n\n  static specKey = 'legends';\n  specKey = 'legends';\n\n  protected _orient: IOrientType = 'left';\n  get orient() {\n    return this._orient;\n  }\n\n  protected _visible: boolean = true;\n  get visible() {\n    return this._visible;\n  }\n\n  protected _position: 'start' | 'middle' | 'end' = 'middle';\n  get position() {\n    return this._position;\n  }\n\n  protected _legendData!: CompilableData;\n  /**\n   * 获取图例数据\n   * @returns 图例的数据\n   */\n  getLegendData() {\n    return this._legendData.getLatestData();\n  }\n\n  private _preSelectedData: StringOrNumber[] = [];\n  protected _selectedData: StringOrNumber[] = [];\n  /**\n   * getSelectedData\n   */\n  getSelectedData() {\n    return this._selectedData;\n  }\n\n  protected _legendComponent: IGroup;\n  private _cacheAttrs: any;\n\n  effect: IEffect = {\n    onSelectedDataChange: () => {\n      eachSeries(\n        this._regions,\n        s => {\n          s.getViewData()?.markRunning();\n        },\n        {\n          userId: this._seriesUserId,\n          specIndex: this._seriesIndex\n        }\n      );\n      eachSeries(\n        this._regions,\n        s => {\n          s.reFilterViewData();\n        },\n        {\n          userId: this._seriesUserId,\n          specIndex: this._seriesIndex\n        }\n      );\n    }\n  };\n  // 与系列的关联关系\n  // 优先级：id > index\n  // 最终结果：series & region取交集\n  protected _seriesUserId?: StringOrNumber[];\n  protected _seriesIndex?: number[];\n  protected _regionUserId?: StringOrNumber[];\n  protected _regionUserIndex?: number[];\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n\n    this._orient = isValidOrient(this._spec.orient) ? this._spec.orient : 'left';\n    this._position = this._spec.position ?? 'middle';\n    this._visible = this._spec.visible !== false;\n\n    const { regionId, regionIndex, seriesId, seriesIndex } = this._spec;\n\n    isValid(seriesId) && (this._seriesUserId = array(seriesId));\n    isValid(regionId) && (this._regionUserId = array(regionId));\n    isValid(seriesIndex) && (this._seriesIndex = array(seriesIndex));\n    isValid(regionIndex) && (this._regionUserIndex = array(regionIndex));\n    this._regions = this._option.getRegionsInUserIdOrIndex(this._regionUserId, this._regionUserIndex);\n  }\n\n  created() {\n    super.created();\n    // data\n    this.initData();\n  }\n\n  /** Update API **/\n  _compareSpec(spec: T, prevSpec: T) {\n    const result = super._compareSpec(spec, prevSpec);\n    result.reRender = true;\n    if (spec?.orient !== prevSpec?.orient) {\n      result.reMake = true;\n      return result;\n    }\n    if (!isEqual(prevSpec, spec)) {\n      result.reCompile = true;\n    }\n    return result;\n  }\n\n  protected abstract _initLegendData(): DataView;\n  protected abstract _initSelectedData(): void;\n  protected abstract _getLegendAttributes(rect: ILayoutRect): any;\n  protected abstract _getLegendConstructor(): any;\n  protected abstract _initEvent(): void;\n\n  private _bindLegendDataChange() {\n    this._preSelectedData = this._selectedData.slice();\n    this._initSelectedData();\n    this._forceLayout();\n  }\n\n  protected initData() {\n    const legendData = this._initLegendData();\n    legendData.target.addListener('change', this._bindLegendDataChange.bind(this));\n    this._legendData = new CompilableData(this._option, legendData);\n\n    this._initSelectedData();\n    eachSeries(\n      this._regions,\n      s => {\n        s.event.on(ChartEvent.rawDataUpdate, { filter: ({ model }) => model?.id === s.id }, () => {\n          this._legendData.getDataView().reRunAllTransform({\n            skipEqual: true\n          });\n        });\n      },\n      {\n        userId: this._seriesUserId,\n        specIndex: this._seriesIndex\n      }\n    );\n  }\n\n  setSelectedData(selectedData: StringOrNumber[]) {\n    const lastData = this._selectedData;\n    if (isNil(selectedData) || JSON.stringify(lastData) === JSON.stringify(selectedData)) {\n      return;\n    }\n\n    // 更新图例筛选\n    eachSeries(\n      this._regions,\n      s => {\n        if (s.legendSelectedFilter) {\n          selectedData = s.legendSelectedFilter(this, selectedData);\n        }\n      },\n      {\n        userId: this._seriesUserId,\n        specIndex: this._seriesIndex\n      }\n    );\n\n    this._selectedData = [...selectedData];\n    // 更新数据\n    this.effect.onSelectedDataChange?.();\n    this.event.emit(ChartEvent.legendSelectedDataChange, { model: this });\n\n    // 更新图例样式\n    (this._legendComponent as unknown as any)?.setSelected(this._selectedData);\n  }\n\n  afterSetLayoutStartPoint(pos: IPoint): void {\n    super.afterSetLayoutStartPoint(pos);\n\n    if (this._legendComponent) {\n      const { x, y } = pos;\n      if (isValidNumber(x * y)) {\n        this._legendComponent.setAttributes({ x, y });\n      }\n    }\n  }\n\n  getBoundsInRect(rect: ILayoutRect, fullSpace: ILayoutRect) {\n    if (!this._visible) {\n      if (this._legendComponent && this._legendComponent.parent) {\n        this._legendComponent.parent.removeChild(this._legendComponent);\n        this._legendComponent = null;\n      }\n      return { x1: 0, y1: 0, x2: 0, y2: 0 };\n    }\n    const result = { x1: this.getLayoutStartPoint().x, y1: this.getLayoutStartPoint().y, x2: 0, y2: 0 };\n    const attrs = this._getLegendAttributes(rect);\n    attrs.disableTriggerEvent = this._option.disableTriggerEvent;\n    if (this._legendComponent) {\n      if (!isEqual(attrs, this._cacheAttrs)) {\n        this._legendComponent.setAttributes(\n          mergeSpec({}, attrs, {\n            defaultSelected: this._selectedData // 图表 resize 之后应该保留上次筛选的结果\n          })\n        );\n      }\n    } else {\n      const legendConstructor = this._getLegendConstructor();\n      const legend = new legendConstructor(\n        mergeSpec({}, attrs, {\n          defaultSelected: this._selectedData\n        })\n      );\n      legend.name = 'legend';\n      this._legendComponent = legend;\n      const container = this.getContainer();\n      container.add(legend);\n\n      // 绑定事件\n      if (!this._option.disableTriggerEvent) {\n        this._initEvent();\n      }\n\n      // 代理 legend 上的事件\n      legend.on('*', (event: any, type: string) => this._delegateEvent(this._legendComponent, event, type));\n    }\n    this._cacheAttrs = attrs;\n\n    const width = isFinite(this._legendComponent.AABBBounds.width()) ? this._legendComponent.AABBBounds.width() : 0;\n    const height = isFinite(this._legendComponent.AABBBounds.height()) ? this._legendComponent.AABBBounds.height() : 0;\n\n    if (this.layoutType !== 'normal-inline') {\n      // 调整位置\n      const layout = this.layoutOrient === 'bottom' || this.layoutOrient === 'top' ? 'horizontal' : 'vertical';\n      const position = this._position;\n      const { width: rectWidth, height: rectHeight } = fullSpace;\n      let offsetX = 0;\n      let offsetY = 0;\n      if (layout === 'horizontal') {\n        if (position === 'middle') {\n          offsetX = (rectWidth - width) / 2;\n        } else if (position === 'end') {\n          offsetX = rectWidth - width;\n        }\n      } else {\n        if (position === 'middle') {\n          offsetY = (rectHeight - height) / 2;\n        } else if (position === 'end') {\n          offsetY = rectHeight - height;\n        }\n      }\n\n      this._legendComponent.setAttributes({\n        dx: offsetX,\n        dy: offsetY\n      });\n    }\n\n    result.x2 = result.x1 + width;\n    result.y2 = result.y1 + height;\n    return result;\n  }\n\n  onDataUpdate(): void {\n    if (JSON.stringify(this._preSelectedData) === JSON.stringify(this._selectedData)) {\n      return;\n    }\n\n    if (this._legendComponent) {\n      // 更新组件\n      const attrs = this._getLegendAttributes(this.getLayoutRect());\n      if (!isEqual(attrs, this._cacheAttrs)) {\n        this._legendComponent.setAttributes(\n          mergeSpec({}, attrs, {\n            defaultSelected: this._selectedData // 图表 resize 之后应该保留上次筛选的结果\n          })\n        );\n      }\n    }\n    // 更新数据流\n    this.effect.onSelectedDataChange?.();\n    this.event.emit(ChartEvent.legendSelectedDataChange, { model: this });\n  }\n\n  protected _getNeedClearVRenderComponents(): IGraphic[] {\n    return [this._legendComponent] as unknown as IGroup[];\n  }\n\n  clear(): void {\n    super.clear();\n    this._cacheAttrs = null;\n    this._preSelectedData = null;\n  }\n}\n"]}