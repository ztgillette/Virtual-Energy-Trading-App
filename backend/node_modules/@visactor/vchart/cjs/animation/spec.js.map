{"version":3,"sources":["../src/animation/spec.ts"],"names":[],"mappings":"","file":"spec.js","sourcesContent":["import type { EasingType, IGraphic } from '@visactor/vrender-core';\nimport type { IAnimationConfig, IStateAnimationConfig } from './interface';\n\nexport interface ICommonStateAnimateSpec {\n  /**\n   * 图表动画时长\n   */\n  duration?: number;\n  /**\n   * 动画延迟开始的时长\n   */\n  delay?: number;\n  /**\n   * 动画缓动效果\n   */\n  easing?: EasingType;\n  /**\n   * 是否轮流执行\n   */\n  oneByOne?: boolean;\n}\n\nexport interface IStateAnimateSpec<Preset extends string> extends ICommonStateAnimateSpec {\n  /**\n   * 预设动画效果\n   */\n  preset?: Preset | false;\n}\n\nexport type IMarkAnimateSpec<MarkName extends string> = Partial<\n  Record<MarkName, false | IAnimationConfig | IAnimationConfig[]>\n>;\n\nexport interface IAnimationSpec<MarkName extends string, Preset extends string> {\n  /**\n   * 图表入场动画\n   * 支持配置图表内置不同动画效果\n   */\n  animationAppear?: boolean | IStateAnimateSpec<Preset> | IMarkAnimateSpec<MarkName>;\n  /**\n   * 数据更新 - 新增数据动画\n   */\n  animationEnter?: boolean | ICommonStateAnimateSpec | IMarkAnimateSpec<MarkName>;\n  /**\n   * 数据更新 - 数据更新动画\n   */\n  animationUpdate?: boolean | ICommonStateAnimateSpec | IMarkAnimateSpec<MarkName>;\n  /**\n   * 数据更新 - 数据删除动画\n   */\n  animationExit?: boolean | ICommonStateAnimateSpec | IMarkAnimateSpec<MarkName>;\n  /**\n   * 图表退场动画\n   */\n  animationDisappear?: boolean | ICommonStateAnimateSpec | IMarkAnimateSpec<MarkName>;\n  /**\n   * 状态切换动画\n   * @since 1.12.0\n   */\n  animationState?: boolean | IStateAnimationConfig;\n  /**\n   * 循环动画\n   */\n  animationNormal?: IMarkAnimateSpec<MarkName>;\n}\nexport interface IMorphSeriesSpec {\n  /**\n   * 系列全局动画是否开启\n   * @default true\n   */\n  enable?: boolean;\n  /**\n   * 图元匹配字段\n   * 系列前后根据 morphKey 配置的内容进行关联\n   */\n  morphKey?: string;\n  /**\n   * 数据匹配字段\n   * 多数据图元可配置\n   */\n  morphElementKey?: string;\n}\n\nexport type MorphData = { prev: any[]; next: any[] };\nexport type MorphElements = { prev: IGraphic[]; next: IGraphic[] };\n\nexport type MorphFunctionCallback<T> = (datum: MorphData, element: MorphElements, parameters: any) => T;\n\nexport type MorphFunctionType<T> = T | MorphFunctionCallback<T>;\n\nexport type MorphFunctionValueType<T> = MorphFunctionType<T> | T;\n\nexport interface IMorphAnimationConfig {\n  easing?: EasingType;\n  delay?: MorphFunctionValueType<number>;\n  duration?: MorphFunctionValueType<number>;\n  oneByOne?: MorphFunctionValueType<boolean | number>;\n  splitPath?: MorphFunctionValueType<'clone' | null | undefined>;\n}\n\nexport interface IMorphConfig {\n  /** whether enable reusing of grammar */\n  reuse?: boolean;\n  /** whether enable morph */\n  morph?: boolean;\n  /** force all marks to participate in morphing */\n  morphAll?: boolean;\n  /** morphing animation config */\n  animation?: IMorphAnimationConfig;\n  /** whether apply exit animations for released marks */\n  enableExitAnimation?: boolean;\n}\n"]}