{"version":3,"sources":["../src/animation/animation-planner.ts"],"names":[],"mappings":"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","file":"animation-planner.js","sourcesContent":["/**\n * 动画规划器，执行一批graphic.applyAnimationState，\n * planner和planner之间是串行的\n */\nimport type { IMarkGraphic } from '../mark/interface';\nimport type { IAnimationConfig } from './interface';\nimport type { IGroup } from '@visactor/vrender-core';\n\nexport class AnimationPlanner {\n  state: string;\n  graphics: IMarkGraphic[];\n  private config: IAnimationConfig[];\n  private beforeExecute?: (graphics: IMarkGraphic[]) => void;\n  private afterExecute?: (graphics: IMarkGraphic[]) => void;\n\n  /**\n   * @param state 要应用的动画状态\n   * @param graphics 要动画的图形数组\n   * @param config 动画配置\n   * @param beforeExecute 可选的在执行前调用的函数，用于设置diffAttrs\n   * @param afterExecute 可选的在执行后调用的函数，用于恢复diffAttrs\n   */\n  constructor(\n    state: string,\n    graphics: IMarkGraphic[],\n    config: IAnimationConfig[],\n    beforeExecute?: (graphics: IMarkGraphic[]) => void,\n    afterExecute?: (graphics: IMarkGraphic[]) => void\n  ) {\n    this.state = state;\n    this.graphics = graphics;\n    this.config = config || [];\n    this.beforeExecute = beforeExecute;\n    this.afterExecute = afterExecute;\n  }\n\n  /**\n   * 执行动画planner\n   * @param product 包含图形的组元素\n   * @param onComplete 所有动画完成时的回调\n   */\n  execute(product?: IGroup, onComplete?: () => void): void {\n    if (!this.graphics.length || !this.config.length) {\n      onComplete?.();\n      return;\n    }\n\n    // 执行前处理回调，例如设置正确的diffAttrs\n    if (this.beforeExecute) {\n      this.beforeExecute(this.graphics);\n    }\n\n    // 计数完成的动画\n    let completedCount = 0;\n    const totalCount = this.graphics.length;\n\n    // 每个图形的动画完成回调\n    const onAnimationComplete = () => {\n      completedCount++;\n      if (completedCount >= totalCount) {\n        // 所有动画完成后执行后处理回调\n        if (this.afterExecute) {\n          this.afterExecute(this.graphics);\n        }\n\n        onComplete?.();\n      }\n    };\n\n    this.graphics.forEach(g => {\n      if (!g) {\n        completedCount++;\n        return;\n      }\n\n      if (this.state === 'exit') {\n        g.isExiting = true;\n      }\n      const animationConfig =\n        this.config.length > 1\n          ? this.config.map(c => ({\n              name: this.state,\n              animation: { ...c, customParameters: g.context } as any\n            }))\n          : {\n              name: this.state,\n              animation: { ...this.config[0], customParameters: g.context } as any\n            };\n\n      g.applyAnimationState([this.state], [animationConfig], onAnimationComplete);\n    });\n  }\n\n  /**\n   * 一次执行所有图形的动画（在组元素上）\n   * @param product 包含所有图形的组元素\n   * @param onComplete 动画完成时的回调\n   */\n  executeOnGroup(product: IGroup, onComplete?: () => void): void {\n    if (!this.graphics.length || !this.config.length || !product) {\n      onComplete?.();\n      return;\n    }\n\n    // 执行前处理回调\n    if (this.beforeExecute) {\n      this.beforeExecute(this.graphics);\n    }\n\n    const mainConfig = this.config[0];\n    const configArray = [\n      {\n        name: this.state,\n        animation: { ...mainConfig } as any\n      }\n    ];\n\n    // 使用任何类型断言设置自定义参数函数\n    configArray.forEach(config => {\n      config.animation.customParameters = (data: any, g: IMarkGraphic) => g.context;\n    });\n\n    // 对整个组应用动画\n    product.applyAnimationState([this.state], configArray, () => {\n      // 动画完成后执行后处理回调\n      if (this.afterExecute) {\n        this.afterExecute(this.graphics);\n      }\n\n      onComplete?.();\n    });\n  }\n}\n"]}