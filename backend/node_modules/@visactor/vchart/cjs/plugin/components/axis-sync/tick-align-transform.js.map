{"version":3,"sources":["../src/plugin/components/axis-sync/tick-align-transform.ts"],"names":[],"mappings":"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","file":"tick-align-transform.js","sourcesContent":["import type { Datum } from '../../../typings';\nimport type { CartesianAxis } from '../../../component';\nimport { convertDomainToTickData } from '@visactor/vrender-components';\nimport { last, precisionSub, getDecimalPlaces } from '@visactor/vutils';\n\nexport interface ITickAlignOpt {\n  targetAxis: () => CartesianAxis;\n  currentAxis: () => CartesianAxis;\n}\n\nfunction saveTick(value: number, minInput: number, inputRange: number, minOutput: number, outputRange: number) {\n  const sub = precisionSub(value, minInput);\n  const decimalPlaces = Math.max(getDecimalPlaces(inputRange), getDecimalPlaces(sub));\n  const percent = Math.round(sub * 10 ** decimalPlaces) / Math.round(inputRange * 10 ** decimalPlaces);\n  return outputRange * percent + minOutput;\n}\n\nexport const tickAlign = (data: Array<Datum>, op: ITickAlignOpt) => {\n  if (!data) {\n    return data;\n  }\n  // check align enable\n  const targetAxis = op?.targetAxis?.();\n  if (!targetAxis) {\n    return data;\n  }\n  const currentAxis = op?.currentAxis?.();\n  if (!currentAxis) {\n    return data;\n  }\n  const currentData = currentAxis.getTickData()?.getDataView();\n  if (!currentData) {\n    return data;\n  }\n  // TODO 这种方法有点hack\n  const currentTickTransform = currentData.transformsArr.find(t => t.type.includes('ticks'));\n  if (!currentTickTransform) {\n    return data;\n  }\n  const currentScale = currentAxis.getScale();\n  if (!currentScale) {\n    return data;\n  }\n  const targetData = targetAxis.getTickData()?.getDataView()?.latestData;\n  if (!targetData?.length) {\n    return data;\n  }\n  const targetScale = targetAxis.getScale();\n  if (!targetScale) {\n    return data;\n  }\n  const targetDomain = targetScale.domain();\n  const targetRange = last(targetDomain) - targetDomain[0];\n  if (targetRange === 0) {\n    return data;\n  }\n  const currentDomain = currentScale.domain();\n  const currentRange = last(currentDomain) - currentDomain[0];\n  if (targetRange === 0) {\n    return data;\n  }\n  // make the tickData of the current axis consistent with the tickData of the target axis\n  const newTicks: number[] = targetData.map((d: { value: number }) =>\n    saveTick(d.value, targetDomain[0], targetRange, currentDomain[0], currentRange)\n  );\n  return convertDomainToTickData(newTicks);\n};\n"]}