{"version":3,"sources":["../src/plugin/components/axis-sync/axis-sync.ts"],"names":[],"mappings":"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","file":"axis-sync.js","sourcesContent":["import { ChartEvent } from '../../../constant/event';\nimport { zeroAlign } from './zero-align-transform';\nimport type { IComponentPlugin, IComponentPluginService } from '../interface';\nimport type { CartesianAxis, ICartesianLinearAxisSpec, ILinearAxisSync } from '../../../component/axis/cartesian';\nimport { isContinuous } from '@visactor/vscale';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\nimport { tickAlign } from './tick-align-transform';\nimport { BasePlugin } from '../../base/base-plugin';\n\nexport class AxisSyncPlugin\n  extends BasePlugin<IComponentPluginService>\n  implements IComponentPlugin<IComponentPluginService>\n{\n  static readonly pluginType: 'component' = 'component';\n  static readonly type: string = 'AxisSyncPlugin';\n  readonly type: string = 'AxisSyncPlugin';\n\n  constructor() {\n    super(AxisSyncPlugin.type);\n  }\n\n  protected _checkEnableSync(axis: CartesianAxis): ILinearAxisSync | false {\n    if (!isContinuous(axis.getScale().type)) {\n      return false;\n    }\n    const sync = (axis.getSpec() as ICartesianLinearAxisSpec).sync as ILinearAxisSync;\n    if (!sync?.axisId) {\n      return false;\n    }\n    return sync;\n  }\n\n  private _getTargetAxis(axis: CartesianAxis, sync: ILinearAxisSync) {\n    const targetAxis = axis.getOption().getChart().getComponentByUserId(sync.axisId) as CartesianAxis;\n    if (!targetAxis?.type.startsWith('cartesianAxis')) {\n      return null;\n    }\n    return targetAxis;\n  }\n\n  onInit(service: IComponentPluginService, axis: CartesianAxis) {\n    const sync = this._checkEnableSync(axis);\n    if (!sync) {\n      return;\n    }\n    if (!sync.zeroAlign) {\n      return;\n    }\n    const targetAxis = this._getTargetAxis(axis, sync);\n    if (!targetAxis) {\n      return;\n    }\n    // because of if the to axes bind in same region, the region will update them both in the data update.\n    axis.event.on(\n      ChartEvent.scaleDomainUpdate,\n      { filter: ({ model }) => model.id === axis.id || model.id === targetAxis.id },\n      () => {\n        zeroAlign(targetAxis, axis);\n      }\n    );\n  }\n\n  onDidCompile(service: IComponentPluginService, axis: CartesianAxis) {\n    const sync = this._checkEnableSync(axis);\n    if (!sync) {\n      return;\n    }\n    const targetAxis = this._getTargetAxis(axis, sync);\n    if (!targetAxis) {\n      return;\n    }\n    if (sync.tickAlign) {\n      registerDataSetInstanceTransform(axis.getOption().dataSet, 'tickAlign', tickAlign);\n      const opt = {\n        targetAxis: () => targetAxis,\n        currentAxis: () => axis\n      };\n      const targetDataView = targetAxis.getTickData()?.getDataView();\n      // 目标数据更新后，需要再次更新\n      if (targetDataView) {\n        targetDataView.target.addListener('change', () => {\n          axis.getTickData()?.getDataView()?.reRunAllTransform({\n            skipEqual: true\n          });\n        });\n      }\n      // only make this one follow target\n      axis.addTransformToTickData({ type: 'tickAlign', options: opt, level: Number.MAX_SAFE_INTEGER }, false);\n    }\n  }\n}\n"]}