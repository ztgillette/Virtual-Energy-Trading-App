{"version":3,"sources":["../src/plugin/components/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IComponent } from '../../component/interface';\nimport type { IBasePlugin, IBasePluginService, MaybePromise } from '../base/interface';\n\ninterface IContext {\n  skipLayout: boolean;\n}\n\nexport interface IComponentPlugin<T extends IComponentPluginService = any> extends IBasePlugin<T> {\n  onWillLayout?: (service: T, ...params: any) => MaybePromise<void>;\n  onDidLayout?: (service: T, ...params: any) => MaybePromise<void>;\n  onWillLayoutVertical?: (service: T, context: IContext, ...params: any) => MaybePromise<void>;\n  onWillLayoutHorizontal?: (service: T, context: IContext, ...params: any) => MaybePromise<void>;\n  onDidLayoutVertical?: (service: T, ...params: any) => MaybePromise<void>;\n  onDidLayoutHorizontal?: (service: T, ...params: any) => MaybePromise<void>;\n}\n\nexport interface IComponentPluginConstructor {\n  readonly pluginType: 'component';\n  readonly specKey?: string;\n  readonly type: string;\n  new (): IComponentPlugin;\n}\n\nexport interface IComponentPluginService<T extends IComponentPlugin = any> extends IBasePluginService<T> {\n  component: IComponent;\n}\n"]}