{"version":3,"sources":["../src/plugin/components/tooltip-handler/utils/svg.ts"],"names":[],"mappings":"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","file":"svg.js","sourcesContent":["import { escapeHTML } from './common';\n// eslint-disable-next-line no-duplicate-imports\nimport type { CustomSymbolClass, IGradientColor, ILinearGradient } from '@visactor/vrender-core';\nimport { Symbol } from '@visactor/vrender-core';\nimport { Bounds, isObject, isString } from '@visactor/vutils';\nimport type { ITooltipShapeActual } from '../../../../typings';\n\nexport function getSvgHtml(option: ITooltipShapeActual | undefined, gradientId?: string) {\n  if (!option || !option.hasShape || !option.shapeType) {\n    return '';\n  }\n\n  const styleString = `style=\"display:inline-block;vertical-align:middle;\"`;\n  const { shapeType, shapeFill, shapeStroke, shapeHollow = false } = option;\n  const size = option.shapeSize ?? 8;\n  const lineWidth = option.shapeLineWidth ? escapeHTML(option.shapeLineWidth) + 'px' : '0px';\n  let fillString: string = 'currentColor';\n  const getStroke = () => (shapeStroke ? escapeHTML(shapeStroke) : fillString);\n\n  const sizeNumber = size;\n  const createSymbol = (symbolType: string) => new Symbol({ symbolType, size: sizeNumber, fill: true });\n\n  let symbol = createSymbol(shapeType);\n  const parsedPath = symbol.getParsedPath();\n  if (!parsedPath.path && parsedPath.pathStr) {\n    symbol = createSymbol(parsedPath.pathStr);\n  }\n\n  let bounds;\n  let path;\n  if (symbol.getParsedPath().path) {\n    const pathModel = symbol.getParsedPath().path;\n\n    path = pathModel.toString();\n    bounds = pathModel.bounds;\n  } else if (parsedPath.isSvg && (parsedPath as unknown as CustomSymbolClass).svgCache) {\n    path = (parsedPath as unknown as CustomSymbolClass).svgCache.map(s => s.path.toString()).join();\n    bounds = (parsedPath as unknown as CustomSymbolClass).svgCache.reduce(\n      (acc, cur) => acc.union(cur.path.bounds),\n      new Bounds()\n    );\n  }\n  let viewBox = `${bounds.x1} ${bounds.y1} ${bounds.width()} ${bounds.height()}`;\n\n  // svg 不支持内描边，需要手动将描边空间预留在 viewBox 上\n  if (lineWidth !== '0px') {\n    const [x, y, w, h] = viewBox.split(' ').map(n => Number(n));\n    const lw = Number(lineWidth.slice(0, -2));\n    viewBox = `${x - lw / 2} ${y - lw / 2} ${w + lw} ${h + lw}`;\n  }\n\n  if (!shapeFill || isString(shapeFill) || shapeHollow) {\n    fillString = shapeHollow ? 'none' : shapeFill ? escapeHTML(shapeFill) : 'currentColor';\n    return `\n    <svg ${styleString} width=\"${size}\" height=\"${size}\" viewBox=\"${viewBox}\">\n      <path\n        d=\"${path}\"\n        style=\"fill: ${fillString}; stroke: ${getStroke()}; stroke-width: ${lineWidth}\"\n      >\n      </path>\n    </svg>`;\n  }\n  if (isObject(shapeFill)) {\n    fillString = 'gradientColor' + (gradientId ?? '');\n    let gradient = '';\n    const stops = ((shapeFill as IGradientColor).stops ?? [])\n      .map(s => `<stop offset=\"${escapeHTML(s.offset.toString())}\" stop-color=\"${escapeHTML(s.color)}\"/>`)\n      .join('');\n    if ((shapeFill as IGradientColor).gradient === 'radial') {\n      gradient = `<radialGradient id=\"${fillString}\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"0%\" fy=\"0%\">\n      ${stops}\n      </radialGradient>`;\n    } else if ((shapeFill as IGradientColor).gradient === 'linear') {\n      gradient = `<linearGradient id=\"${fillString}\" x1=\"${\n        (((shapeFill as ILinearGradient).x0 as number) ?? 0) * 100\n      }%\" y1=\"${(((shapeFill as ILinearGradient).y0 as number) ?? 0) * 100}%\" x2=\"${\n        (((shapeFill as ILinearGradient).x1 as number) ?? 0) * 100\n      }%\" y2=\"${(((shapeFill as ILinearGradient).y1 as number) ?? 0) * 100}%\">\n      ${stops}\n      </linearGradient>`;\n    }\n    return `\n    <svg ${styleString} width=\"${size}\" height=\"${size}\" viewBox=\"-0.5 -0.5 1 1\">\n      ${gradient}\n      <path\n        d=\"${path}\"\n        style=\"fill: url(#${fillString}); stroke: ${getStroke()}; stroke-width: ${lineWidth}\"\n      >\n      </path>\n    </svg>`;\n  }\n\n  return '';\n}\n"]}