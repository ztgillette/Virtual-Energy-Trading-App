{"version":3,"sources":["../src/series/mosaic/mosaic.ts"],"names":[],"mappings":"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","file":"mosaic.js","sourcesContent":["import { BarSeries } from '../bar/bar';\n// eslint-disable-next-line no-duplicate-imports\nimport { SeriesTypeEnum } from '../interface/type';\n// eslint-disable-next-line no-duplicate-imports\nimport { registerRectMark } from '../../mark/rect';\n// eslint-disable-next-line no-duplicate-imports\nimport { registerTextMark } from '../../mark/text';\nimport { registerFadeInOutAnimation } from '../../animation/config';\nimport type { IMosaicSeriesSpec } from './interface';\nimport { Factory } from '../../core/factory';\nimport { BarSeriesSpecTransformer } from '../bar/bar-transformer';\nimport { registerCartesianLinearAxis } from '../../component/axis/cartesian';\nimport { Direction } from '../../typings/space';\nimport {\n  MOSAIC_CAT_END_PERCENT,\n  MOSAIC_CAT_START_PERCENT,\n  MOSAIC_VALUE_END_PERCENT,\n  MOSAIC_VALUE_START_PERCENT\n} from '../../constant/data';\nimport { isNil } from '@visactor/vutils';\nimport type { IBarSeriesTheme } from '../bar/interface';\nimport { mosaic } from '../../theme/builtin/common/series/mosaic';\n\nexport class MosaicSeries<T extends IMosaicSeriesSpec = IMosaicSeriesSpec> extends BarSeries<any> {\n  static readonly type: string = SeriesTypeEnum.mosaic;\n  type = SeriesTypeEnum.mosaic;\n\n  protected declare _spec: T;\n  static readonly builtInTheme: Record<string, IBarSeriesTheme> = { mosaic };\n\n  static readonly transformerConstructor = BarSeriesSpecTransformer as any;\n  readonly transformerConstructor = BarSeriesSpecTransformer as any;\n\n  private _bandWidthField?: string;\n  get bandWidthField() {\n    return this._bandWidthField;\n  }\n  getStack() {\n    return true;\n  }\n\n  getPercent() {\n    return this._spec.percent;\n  }\n\n  getGroupFields() {\n    return this.direction === 'vertical' ? this._specXField : this._specYField;\n  }\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n    const isPercent = this.getPercent();\n\n    if (this.direction === Direction.horizontal) {\n      if (isPercent) {\n        this.setFieldX(MOSAIC_VALUE_END_PERCENT);\n        this.setFieldX2(MOSAIC_VALUE_START_PERCENT);\n      }\n\n      this.setFieldY(MOSAIC_CAT_END_PERCENT);\n      this.setFieldY2(MOSAIC_CAT_START_PERCENT);\n    } else {\n      if (isPercent) {\n        this.setFieldY(MOSAIC_VALUE_END_PERCENT);\n        this.setFieldY2(MOSAIC_VALUE_START_PERCENT);\n      }\n\n      this.setFieldX(MOSAIC_CAT_END_PERCENT);\n      this.setFieldX2(MOSAIC_CAT_START_PERCENT);\n    }\n\n    if (this._spec.bandWidthField) {\n      this._bandWidthField = this._spec.bandWidthField;\n    }\n  }\n\n  parseLabelStyle(labelStyle: any, labelSpec: any) {\n    if (labelSpec?.filterByGroup && isNil(labelStyle.dataFilter)) {\n      const allGroupFields = this.getGroupFields();\n      const { field, type: filterType = 'max', filter } = labelSpec.filterByGroup;\n      delete labelStyle.filterField;\n      const fieldIndex = allGroupFields.indexOf(field);\n\n      if (fieldIndex < 0) {\n        return;\n      }\n      const isCatField = !!(fieldIndex % 2);\n      const valueField = isCatField\n        ? filterType === 'min'\n          ? this.direction === Direction.horizontal\n            ? this._fieldY2\n            : this._fieldX2\n          : this.direction === Direction.horizontal\n          ? this._fieldY\n          : this._fieldX\n        : filterType === 'min'\n        ? this.direction === Direction.horizontal\n          ? this._fieldX2\n          : this._fieldY2\n        : this.direction === Direction.horizontal\n        ? this._fieldX\n        : this._fieldY;\n      const filterFunc =\n        filterType === 'min'\n          ? (a: any, b: any) => {\n              return a.data?.[valueField as string] < b.data?.[valueField as string];\n            }\n          : (a: any, b: any) => {\n              return a.data?.[valueField as string] > b.data?.[valueField as string];\n            };\n\n      labelStyle.dataFilter = (data: any) => {\n        const filteredData: any = {};\n\n        data.forEach((d: any) => {\n          const datum = d.data;\n          const fieldValue = datum?.[field];\n\n          if (isNil(fieldValue) || (filter && !filter(d))) {\n            return;\n          }\n\n          if (!filteredData[fieldValue] || filterFunc(d, filteredData[fieldValue])) {\n            filteredData[fieldValue] = d;\n          }\n        });\n        return data.filter((d: any) => {\n          const fieldValue = d.data?.[field];\n          return filteredData[fieldValue] && filteredData[fieldValue] === d;\n        });\n      };\n    }\n\n    return labelStyle;\n  }\n}\n\nexport const registerMosaicSeries = () => {\n  registerRectMark();\n  registerTextMark();\n  registerFadeInOutAnimation();\n  registerCartesianLinearAxis();\n  Factory.registerSeries(MosaicSeries.type, MosaicSeries);\n};\n"]}