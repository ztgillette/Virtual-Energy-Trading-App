{"version":3,"sources":["../src/series/progress/linear/animation.ts"],"names":[],"mappings":";;;AAEA,mDAAgD;AAIhD,SAAS,wBAAwB,CAAC,MAAsC;IACtE,OAAO,GAAG,EAAE;QACV,IAAI,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE;YACnC,OAAO;gBACL,MAAM,EAAE,UAAU;aACnB,CAAC;SACH;QACD,OAAO;YACL,MAAM,EAAE,UAAU;SACnB,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,WAAW,GAAG,CAAC,MAAsC,EAAwB,EAAE;IACnF,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,SAAS,iBAAyB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc;QAChF,OAAO,EAAE,wBAAwB,CAAC,MAAM,CAAC;KAC1C,CAAC;AACJ,CAAC,CAAC;AAEK,MAAM,uBAAuB,GAAG,CAAC,MAAsC,EAAwB,EAAE;IACtG,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,SAAS,iBAAyB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,eAAe;QAClF,OAAO,EAAE,wBAAwB,CAAC,MAAM,CAAC;KAC1C,CAAC;AACJ,CAAC,CAAC;AALW,QAAA,uBAAuB,2BAKlC;AAEW,QAAA,aAAa,GAAyB;IACjD,IAAI,EAAE,QAAQ;CACf,CAAC;AAEF,SAAgB,6BAA6B,CAC3C,MAAsC,EACtC,SAA+C,MAAM;IAErD,IAAI,MAAM,KAAK,KAAK,EAAE;QACpB,OAAO,EAAE,CAAC;KACX;IACD,QAAQ,MAAM,EAAE;QACd,KAAK,QAAQ;YACX,OAAO,qBAAa,CAAC;QACvB;YACE,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC;KAC9B;AACH,CAAC;AAbD,sEAaC;AAEM,MAAM,+BAA+B,GAAG,GAAG,EAAE;IAClD,iBAAO,CAAC,iBAAiB,CACvB,gBAAgB,EAChB,CAAC,MAAsC,EAAE,MAAkC,EAAE,EAAE;QAC7E,OAAO;YACL,MAAM,EAAE,6BAA6B,CAAC,MAAM,EAAE,MAAM,CAAC;YACrD,KAAK,EAAE,6BAA6B,CAAC,MAAM,CAAC;YAC5C,SAAS,EAAE,IAAA,+BAAuB,EAAC,MAAM,CAAC;SAC3C,CAAC;IACJ,CAAC,CACF,CAAC;AACJ,CAAC,CAAC;AAXW,QAAA,+BAA+B,mCAW1C","file":"animation.js","sourcesContent":["// eslint-disable-next-line no-duplicate-imports\nimport { Direction } from '../../../typings/space';\nimport { Factory } from '../../../core/factory';\nimport type { ILinearProgressAnimationParams, LinearProgressAppearPreset } from './interface';\nimport type { IAnimationTypeConfig } from '../../../animation/interface';\n\nfunction LinearProgressGrowOption(params: ILinearProgressAnimationParams) {\n  return () => {\n    if (params.direction === 'vertical') {\n      return {\n        orient: 'negative'\n      };\n    }\n    return {\n      orient: 'positive'\n    };\n  };\n}\n\nconst Appear_Grow = (params: ILinearProgressAnimationParams): IAnimationTypeConfig => {\n  return {\n    type: params.direction === Direction.horizontal ? 'growWidthIn' : 'growHeightIn',\n    options: LinearProgressGrowOption(params)\n  };\n};\n\nexport const linearProgressDisappear = (params: ILinearProgressAnimationParams): IAnimationTypeConfig => {\n  return {\n    type: params.direction === Direction.horizontal ? 'growWidthOut' : 'growHeightOut',\n    options: LinearProgressGrowOption(params)\n  };\n};\n\nexport const Appear_FadeIn: IAnimationTypeConfig = {\n  type: 'fadeIn'\n};\n\nexport function linearProgressPresetAnimation(\n  params: ILinearProgressAnimationParams,\n  preset: LinearProgressAppearPreset | boolean = 'grow'\n) {\n  if (preset === false) {\n    return {};\n  }\n  switch (preset) {\n    case 'fadeIn':\n      return Appear_FadeIn;\n    default:\n      return Appear_Grow(params);\n  }\n}\n\nexport const registerLinearProgressAnimation = () => {\n  Factory.registerAnimation(\n    'linearProgress',\n    (params: ILinearProgressAnimationParams, preset: LinearProgressAppearPreset) => {\n      return {\n        appear: linearProgressPresetAnimation(params, preset),\n        enter: linearProgressPresetAnimation(params),\n        disappear: linearProgressDisappear(params)\n      };\n    }\n  );\n};\n"]}