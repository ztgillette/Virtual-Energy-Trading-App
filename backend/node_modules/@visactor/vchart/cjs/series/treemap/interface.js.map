{"version":3,"sources":["../src/series/treemap/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IRectMarkSpec, ITextMarkSpec } from '../../typings';\nimport type { IHierarchyData, IMarkSpec, IMarkTheme, ISeriesSpec } from '../../typings/spec';\nimport type { TreemapOptions } from '@visactor/vlayouts';\nimport type { ICartesianSeriesTheme } from '../cartesian/interface';\nimport type { IAnimationSpec } from '../../animation/spec';\nimport type { SeriesMarkNameEnum } from '../interface/type';\nimport type { ILabelSpec } from '../../component/label/interface';\n\nexport type TreemapMark = 'leaf' | 'nonLeaf';\n\nexport type TreemapAppearPreset = 'growIn' | 'fadeIn';\n\nexport interface ITreemapSeriesSpec\n  extends Omit<ISeriesSpec, 'data'>,\n    IAnimationSpec<TreemapMark, TreemapAppearPreset> {\n  type: 'treemap';\n  /**\n   * 文本字段\n   */\n  categoryField: string;\n  /**\n   * 权重字段\n   */\n  valueField: string;\n  /**\n   * 数据\n   */\n  data: IHierarchyData;\n  /**\n   * 矩形分割比例\n   * @default (1 + Math.sqrt(5)) / 2\n   */\n  aspectRatio?: number;\n\n  /**\n   * 矩形分割算法\n   * @default 'binary'\n   * @description\n   * 'binary':    递归地将指定的节点分割成一个近似平衡的二叉树，对宽的矩形选择水平分割，对高的矩形选择垂直分割。\n   *\n   * 'dice':      根据指定节点的每个子节点的值水平划分由x0, y0, x1, y1指定的矩形区域。子节点按顺序定位，从给定矩形\n   *              的左边缘（x0）开始。如果子节点的值之和小于指定节点的值（即，如果指定节点有一个非零的内部值），剩余的空位将被\n   *              定位在给定矩形的右边缘（x1）。\n   *\n   * 'slice':     和'dice'类似，方向为竖直方向分割。\n   *\n   * 'sliceDice': 节点奇数深度，用'slice'；节点偶数深度，用'dice'。\n   *\n   * 'squarify':  尽可能按照一个特定长宽比的分割矩形。\n   */\n  splitType?: TreemapOptions['splitType'];\n  /**\n   * 节点间距\n   * @default 1\n   */\n  gapWidth?: TreemapOptions['gapWidth'];\n  /**\n   * 节点内边距\n   * @default [5]\n   */\n  nodePadding?: TreemapOptions['padding'];\n  /**\n   * 展示的最大层级\n   * @description 当节点在层次数据中的深度大于 maxDepth 时，节点将不会被显示\n   */\n  maxDepth?: TreemapOptions['maxDepth'];\n  /**\n   * 当区域面积（px * px）小于设定值后，节点将被隐藏\n   * @default 10\n   */\n  minVisibleArea?: TreemapOptions['minVisibleArea'];\n  /**\n   * 当区域面积（px * px）小于设定值后，节点的子节点将被隐藏\n   */\n  minChildrenVisibleArea?: TreemapOptions['minChildrenVisibleArea'];\n  /**\n   * 当区域宽或高（px）小于设定值后，节点的子节点将被隐藏\n   */\n  minChildrenVisibleSize?: TreemapOptions['minChildrenVisibleSize'];\n  /**\n   * 是否开启拖拽和缩放\n   * @default false\n   */\n  roam?: boolean;\n  /**\n   * 下钻配置\n   * @default false\n   * @description 下钻功能开关\n   */\n  drill?: boolean;\n  /**\n   * 钻取字段的field\n   * @default DEFAULT_DATA_KEY\n   * @description 通过API进行钻取, 需要此配置项.\n   */\n  drillField?: string;\n  /**\n   * 叶子节点样式配置\n   */\n  [SeriesMarkNameEnum.leaf]?: IMarkSpec<IRectMarkSpec>;\n  /**\n   * 非叶子节点样式配置\n   */\n  [SeriesMarkNameEnum.nonLeaf]?: IMarkSpec<IRectMarkSpec>;\n  /**\n   * 叶子节点标签样式配置，默认不显示\n   */\n  [SeriesMarkNameEnum.label]?: Omit<ILabelSpec, 'position' | 'overlap'>;\n  /**\n   * 非叶子节点标签样式配置，默认不显示\n   */\n  [SeriesMarkNameEnum.nonLeafLabel]?: Omit<ILabelSpec, 'position' | 'overlap'> & {\n    position?: TreemapOptions['labelPosition'];\n    padding?: TreemapOptions['labelPadding'];\n  };\n}\n\nexport interface ITreemapSeriesTheme extends ICartesianSeriesTheme {\n  gapWidth?: TreemapOptions['padding'];\n  nodePadding?: TreemapOptions['padding'];\n  [SeriesMarkNameEnum.leaf]?: Partial<IMarkTheme<IRectMarkSpec>>;\n  [SeriesMarkNameEnum.nonLeaf]?: Partial<IMarkTheme<IRectMarkSpec>>;\n  [SeriesMarkNameEnum.label]?: Partial<IMarkTheme<ITextMarkSpec>>;\n  [SeriesMarkNameEnum.nonLeafLabel]?: Partial<IMarkTheme<ITextMarkSpec> & { padding?: TreemapOptions['labelPadding'] }>;\n}\n"]}