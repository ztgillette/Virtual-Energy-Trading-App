{"version":3,"sources":["../src/series/word-cloud/animation.ts"],"names":[],"mappings":";;;AAAA,mDAAkE;AAClE,gDAA6C;AAI7C,SAAS,gBAAgB,CAAC,QAAgB,EAAE,SAAiB,EAAE,SAAiB;IAC9E,IAAI,QAAQ,GAAG,SAAS,GAAG,SAAS,EAAE;QACpC,OAAO,QAAQ,GAAG,CAAC,SAAS,GAAG,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;KACxE;IACD,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AAClD,CAAC;AAEM,MAAM,yBAAyB,GAAG,CAAC,MAAiC,EAAwB,EAAE;IACnG,OAAO;QACL,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,GAAG;QACb,KAAK,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YACxB,MAAM,eAAe,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;YACjD,MAAM,QAAQ,GAAG,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ,KAAI,GAAG,CAAC;YAClD,MAAM,SAAS,GAAG,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,SAAS,KAAI,iCAAwB,CAAC,MAAM,CAAC,QAAQ,CAAC;YACzF,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;YAC3C,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;YAC3C,OAAO,KAAK,GAAG,gBAAgB,CAAC,QAAkB,EAAE,SAAmB,EAAE,KAAK,CAAC,CAAC;QAClF,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,yBAAyB,6BAapC;AAEF,SAAgB,wBAAwB,CACtC,MAAiC,EACjC,MAAuC;IAEvC,IAAI,MAAM,KAAK,KAAK,EAAE;QACpB,OAAO,EAAE,CAAC;KACX;IACD,QAAQ,MAAM,EAAE;QACd,KAAK,QAAQ;YACX,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;QAC5B,KAAK,SAAS,CAAC;QACf;YACE,OAAO,IAAA,iCAAyB,EAAC,MAAM,CAAC,CAAC;KAC5C;AACH,CAAC;AAdD,4DAcC;AAEM,MAAM,0BAA0B,GAAG,GAAG,EAAE;IAC7C,iBAAO,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAiC,EAAE,MAA6B,EAAE,EAAE,CAAC,CAAC;QAC5G,MAAM,EAAE,wBAAwB,CAAC,MAAM,EAAE,MAAM,CAAC;QAChD,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzB,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;QACzB,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;KAC/B,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAPW,QAAA,0BAA0B,8BAOrC","file":"animation.js","sourcesContent":["import { DEFAULT_ANIMATION_CONFIG } from '../../animation/config';\nimport { Factory } from '../../core/factory';\nimport type { IWordcloudAnimationParams, WordcloudAppearPreset } from './interface';\nimport type { IAnimationTypeConfig } from '../../animation/interface';\n\nfunction computeWordDelay(duration: number, totalTime: number, wordCount: number) {\n  if (duration * wordCount < totalTime) {\n    return duration + (totalTime - wordCount * duration) / (wordCount - 1);\n  }\n  return (totalTime - duration) / (wordCount - 1);\n}\n\nexport const WordCloudScaleInAnimation = (params: IWordcloudAnimationParams): IAnimationTypeConfig => {\n  return {\n    type: 'scaleIn',\n    duration: 200,\n    delay: (datum, graphic) => {\n      const animationConfig = params.animationConfig();\n      const duration = animationConfig?.duration || 200;\n      const totalTime = animationConfig?.totalTime || DEFAULT_ANIMATION_CONFIG.appear.duration;\n      const count = graphic.context.graphicCount;\n      const index = graphic.context.graphicIndex;\n      return index * computeWordDelay(duration as number, totalTime as number, count);\n    }\n  };\n};\n\nexport function wordcloudPresetAnimation(\n  params: IWordcloudAnimationParams,\n  preset: WordcloudAppearPreset | boolean\n): IAnimationTypeConfig {\n  if (preset === false) {\n    return {};\n  }\n  switch (preset) {\n    case 'fadeIn':\n      return { type: 'fadeIn' };\n    case 'scaleIn':\n    default:\n      return WordCloudScaleInAnimation(params);\n  }\n}\n\nexport const registerWordCloudAnimation = () => {\n  Factory.registerAnimation('wordCloud', (params: IWordcloudAnimationParams, preset: WordcloudAppearPreset) => ({\n    appear: wordcloudPresetAnimation(params, preset),\n    enter: { type: 'fadeIn' },\n    exit: { type: 'fadeOut' },\n    disappear: { type: 'fadeOut' }\n  }));\n};\n"]}