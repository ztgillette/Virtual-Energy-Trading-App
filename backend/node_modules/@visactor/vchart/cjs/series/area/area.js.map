{"version":3,"sources":["../src/series/area/area.ts"],"names":[],"mappings":"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","file":"area.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport { isArray } from '@visactor/vutils';\n/* eslint-disable no-duplicate-imports */\nimport { LineLikeSeriesMixin } from '../mixin/line-mixin';\nimport { Direction } from '../../typings/space';\nimport { CartesianSeries } from '../cartesian/cartesian';\nimport { AttributeLevel } from '../../constant/attribute';\nimport type { Datum, InterpolateType } from '../../typings';\nimport { valueInScaleRange } from '../../util/scale';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';\nimport { mixin } from '@visactor/vutils';\nimport { animationConfig, userAnimationConfig } from '../../animation/utils';\nimport { DEFAULT_SMOOTH_INTERPOLATE } from '../../typings/interpolate';\nimport type { IAreaSeriesSpec, IAreaSeriesTheme } from './interface';\nimport type { IMarkAnimateSpec } from '../../animation/spec';\nimport { registerLineMark } from '../../mark/line';\nimport { registerAreaMark } from '../../mark/area';\nimport { registerSymbolMark } from '../../mark/symbol';\nimport { AreaSeriesTooltipHelper } from './tooltip-helpter';\nimport { areaSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport { registerAreaSeriesAnimation } from './animation';\nimport type { IMark, IAreaMark } from '../../mark/interface';\nimport { AreaSeriesSpecTransformer } from './area-transformer';\nimport { getGroupAnimationParams } from '../util/utils';\nimport { registerCartesianLinearAxis, registerCartesianBandAxis } from '../../component/axis/cartesian';\nimport { STACK_FIELD_END } from '../../constant/data';\nimport { registerSymbolOverlapTransform } from '../../mark/transform/symbol-overlap';\nimport { registerDataSamplingTransform } from '../../mark/transform/data-sampling';\nimport { area } from '../../theme/builtin/common/series/area';\n\nexport interface AreaSeries<T extends IAreaSeriesSpec = IAreaSeriesSpec>\n  extends Pick<\n      LineLikeSeriesMixin,\n      | 'initLineMark'\n      | 'initSymbolMark'\n      | 'initLabelMarkStyle'\n      | 'initLineMarkStyle'\n      | 'initSymbolMarkStyle'\n      | 'encodeDefined'\n      | '_lineMark'\n      | '_symbolMark'\n      | 'addSamplingCompile'\n      | 'addOverlapCompile'\n      | 'reCompileSampling'\n      | 'initLineLabelMarkStyle'\n    >,\n    CartesianSeries<T> {}\n\nexport class AreaSeries<T extends IAreaSeriesSpec = IAreaSeriesSpec> extends CartesianSeries<T> {\n  static readonly type: string = SeriesTypeEnum.area;\n  type = SeriesTypeEnum.area;\n\n  static readonly builtInTheme: Record<string, IAreaSeriesTheme> = { area };\n  static readonly mark: SeriesMarkMap = areaSeriesMark;\n  static readonly transformerConstructor = AreaSeriesSpecTransformer as any;\n  readonly transformerConstructor = AreaSeriesSpecTransformer;\n\n  protected _areaMark!: IAreaMark;\n  protected _sortDataByAxis: boolean = false;\n\n  initMark(): void {\n    const seriesMark = this._spec.seriesMark ?? 'area';\n    const isAreaMarkVisible = this._isAreaVisible() || this._isLineVisible();\n    // area\n    this._areaMark = this._createMark(\n      AreaSeries.mark.area,\n      {\n        groupKey: this._seriesField,\n        isSeriesMark: isAreaMarkVisible && seriesMark !== 'point'\n      },\n      {\n        morphElementKey: this.getDimensionField()[0]\n      }\n    ) as IAreaMark;\n\n    this.initSymbolMark(seriesMark === 'point');\n  }\n\n  initMarkStyle(): void {\n    this.initAreaMarkStyle();\n    this.initSymbolMarkStyle();\n  }\n\n  initAreaMarkStyle() {\n    // FIXME 是不是应该把curveType提前到上层配置\n    // 不允许area和line的curveType不一致\n    const userCurveType = (this.getSpec().area?.style?.curveType ??\n      this.getSpec().line?.style?.curveType) as InterpolateType;\n    const curveType =\n      userCurveType === DEFAULT_SMOOTH_INTERPOLATE\n        ? this._direction === Direction.horizontal\n          ? 'monotoneY'\n          : 'monotoneX'\n        : userCurveType;\n\n    // area\n    const areaMark = this._areaMark;\n    if (areaMark) {\n      const isAreaVisible = this._isAreaVisible();\n      const isLineVisible = this._isLineVisible();\n      if (isAreaVisible || isLineVisible) {\n        areaMark.setVisible(true);\n      } else {\n        areaMark.setVisible(false);\n      }\n\n      if (this._direction === Direction.horizontal) {\n        this.setMarkStyle(\n          this._areaMark,\n          {\n            x: this.dataToPositionX.bind(this),\n            x1: (datum: Datum) => {\n              return valueInScaleRange(this.dataToPositionX1(datum), this._xAxisHelper?.getScale?.(0));\n            },\n            y: this.dataToPositionY.bind(this),\n            y1: this.dataToPositionY.bind(this),\n            z: this._fieldZ ? this.dataToPositionZ.bind(this) : null,\n            orient: this._direction\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      } else {\n        this.setMarkStyle(\n          this._areaMark,\n          {\n            x: this.dataToPositionX.bind(this),\n            x1: this.dataToPositionX.bind(this),\n            y1: (datum: Datum) => {\n              return valueInScaleRange(this.dataToPositionY1(datum), this._yAxisHelper?.getScale?.(0));\n            },\n            y: this.dataToPositionY.bind(this),\n            z: this._fieldZ ? this.dataToPositionZ.bind(this) : null\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      }\n      this.setMarkStyle(\n        areaMark,\n        {\n          fill: isAreaVisible ? this.getColorAttribute() : false,\n          stroke: isLineVisible ? this.getColorAttribute() : false\n        },\n        'normal',\n        AttributeLevel.Series\n      );\n\n      if (this._invalidType !== 'zero') {\n        this.setMarkStyle(\n          areaMark,\n          {\n            defined: this._getInvalidDefined.bind(this),\n            connectedType: this._getInvalidConnectType()\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      }\n\n      if (this.getStack()) {\n        // 在堆叠情况下面积系列需要控制图元层级，https://github.com/VisActor/VChart/issues/3684\n        this.setMarkStyle(\n          areaMark,\n          {\n            zIndex: (datum: Datum) => -datum[STACK_FIELD_END] // 越在堆叠下层，datum[STACK_FIELD_END] 越小,  zIndex越大\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      }\n\n      this.setMarkStyle(\n        areaMark,\n        {\n          curveType\n        },\n        'normal',\n        AttributeLevel.Built_In\n      );\n\n      // change stroke to area stoke = [lineStroke,false,false,false]\n      Object.keys(areaMark.stateStyle).forEach(state => {\n        if (areaMark.stateStyle[state].stroke) {\n          areaMark.setPostProcess(\n            'stroke',\n            result => {\n              return [result, false, false, false];\n            },\n            state\n          );\n        }\n      });\n    }\n  }\n\n  initAnimation() {\n    const areaAnimationParams = { direction: this.direction };\n    const appearPreset = (this._spec.animationAppear as IMarkAnimateSpec<string>)?.preset;\n    if (this._lineMark) {\n      this._lineMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('line')?.(areaAnimationParams, appearPreset),\n          userAnimationConfig(SeriesMarkNameEnum.line, this._spec, this._markAttributeContext)\n        )\n      );\n    }\n\n    if (this._areaMark) {\n      this._areaMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('area')?.(areaAnimationParams, appearPreset),\n          userAnimationConfig(SeriesMarkNameEnum.area, this._spec, this._markAttributeContext)\n        )\n      );\n    }\n\n    if (this._symbolMark) {\n      const animationParams = getGroupAnimationParams(this);\n      this._symbolMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('scaleInOut')?.(),\n          userAnimationConfig(SeriesMarkNameEnum.point, this._spec, this._markAttributeContext),\n          animationParams\n        )\n      );\n    }\n  }\n\n  protected _isAreaVisible() {\n    const areaSpec = this._spec.area || {};\n    return areaSpec.visible !== false && areaSpec.style?.visible !== false;\n  }\n\n  protected _isLineVisible() {\n    const lineSpec = this._spec.line || {};\n    return lineSpec.visible !== false && lineSpec.style?.visible !== false;\n  }\n\n  protected initTooltip() {\n    this._tooltipHelper = new AreaSeriesTooltipHelper(this);\n    const { group, mark } = this._tooltipHelper.activeTriggerSet;\n    if (this._areaMark) {\n      group.add(this._areaMark);\n    }\n    if (this._lineMark) {\n      group.add(this._lineMark);\n    }\n    if (this._symbolMark) {\n      mark.add(this._symbolMark);\n      group.add(this._symbolMark);\n    }\n  }\n\n  viewDataStatisticsUpdate(d: DataView) {\n    super.viewDataStatisticsUpdate(d);\n    this.encodeDefined(this._areaMark, 'defined');\n  }\n\n  compile(): void {\n    super.compile();\n    this.addSamplingCompile();\n    this.addOverlapCompile();\n  }\n\n  getDefaultShapeType() {\n    return 'square';\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._areaMark, this._symbolMark, this._lineMark];\n  }\n\n  onLayoutEnd(): void {\n    super.onLayoutEnd();\n    this.reCompileSampling();\n  }\n\n  getSeriesStyle(datum: Datum) {\n    return (attribute: string) => {\n      const seriesMarkType = this._spec.seriesMark ?? 'area';\n\n      let result = this._seriesMark?.getAttribute(attribute as any, datum) ?? undefined;\n      if (attribute === 'fill' && (!result || seriesMarkType === 'line')) {\n        attribute = 'stroke';\n        result = this._seriesMark?.getAttribute(attribute, datum) ?? undefined;\n      }\n      if (attribute === 'stroke' && isArray(result)) {\n        return result[0];\n      }\n      return result;\n    };\n  }\n}\n\nmixin(AreaSeries, LineLikeSeriesMixin);\n\nexport const registerAreaSeries = () => {\n  registerDataSamplingTransform();\n  registerSymbolOverlapTransform();\n  registerLineMark();\n  registerAreaMark();\n  registerSymbolMark();\n  registerAreaSeriesAnimation();\n  registerCartesianBandAxis();\n  registerCartesianLinearAxis();\n  Factory.registerSeries(AreaSeries.type, AreaSeries);\n};\n"]}