{"version":3,"sources":["../src/series/scatter/scatter.ts"],"names":[],"mappings":"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","file":"scatter.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport { PREFIX } from '../../constant/base';\nimport type { DataView } from '@visactor/vdataset';\nimport type { Datum, ScaleType, VisualType, IScatterInvalidType } from '../../typings';\nimport type { IScatterSeriesSpec, ScatterAppearPreset } from './interface';\nimport { CartesianSeries } from '../cartesian/cartesian';\nimport { isNil, isValid, isObject, isFunction, isString, isArray, isNumber, isNumeric } from '@visactor/vutils';\nimport { AttributeLevel } from '../../constant/attribute';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';\nimport { STATE_VALUE_ENUM } from '../../compile/mark/interface';\nimport {\n  SCATTER_DEFAULT_RANGE_SHAPE,\n  SCATTER_DEFAULT_RANGE_SIZE,\n  SCATTER_DEFAULT_SHAPE,\n  SCATTER_DEFAULT_SHAPE_SCALE_TYPE,\n  SCATTER_DEFAULT_SIZE,\n  SCATTER_DEFAULT_SIZE_SCALE_TYPE\n} from '../../constant/scatter';\nimport { animationConfig, shouldMarkDoMorph, userAnimationConfig } from '../../animation/utils';\nimport type { IStateAnimateSpec } from '../../animation/spec';\nimport { registerScatterAnimation } from './animation';\nimport { registerSymbolMark } from '../../mark/symbol';\nimport { scatterSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport type { ILabelMark, IMark, IMarkGraphic, ISymbolMark } from '../../mark/interface';\nimport { ScatterSeriesSpecTransformer } from './scatter-transformer';\nimport { getGroupAnimationParams } from '../util/utils';\nimport { registerCartesianLinearAxis, registerCartesianBandAxis } from '../../component/axis/cartesian';\nimport { scatter } from '../../theme/builtin/common/series/scatter';\n\nexport class ScatterSeries<T extends IScatterSeriesSpec = IScatterSeriesSpec> extends CartesianSeries<T> {\n  static readonly type: string = SeriesTypeEnum.scatter;\n  type = SeriesTypeEnum.scatter;\n\n  static readonly mark: SeriesMarkMap = scatterSeriesMark;\n  static readonly builtInTheme = { scatter };\n  static readonly transformerConstructor = ScatterSeriesSpecTransformer as any;\n  readonly transformerConstructor = ScatterSeriesSpecTransformer;\n\n  private _symbolMark: ISymbolMark;\n  private _labelMark: ILabelMark;\n\n  private _size: IScatterSeriesSpec['size'];\n  private _sizeField: string;\n  private _shape: IScatterSeriesSpec['shape'];\n  private _shapeField: string;\n\n  protected _invalidType: IScatterInvalidType = 'zero';\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n\n    // size\n    this._size = this._spec.size;\n    this._sizeField = this._spec.sizeField;\n    // shape\n    this._shape = this._spec.shape;\n    this._shapeField = this._spec.shapeField;\n  }\n\n  private _getSeriesAttribute<T>(\n    field: string,\n    spec: VisualType<T>,\n    {\n      defaultScaleType,\n      defaultRange\n    }: {\n      defaultScaleType: ScaleType;\n      defaultRange: T[];\n    },\n    key: string\n  ): VisualType<T> {\n    // 若sizeSpec是函数\n    if (isFunction(spec)) {\n      return spec;\n    }\n\n    if (isArray(spec)) {\n      if (isNil(field)) {\n        this._option?.onError(`${key}Field is required.`);\n        return spec;\n      }\n\n      if (defaultScaleType !== 'ordinal' && (spec as any[]).length > 2) {\n        this._option?.onError(`${key} length is invalid, specify up to 2 ${key}s.`);\n        return spec;\n      }\n      const scaleName = `${PREFIX}_series_scatter_${this.id}_scale_${key}`;\n      this._option.globalScale.registerModelScale({\n        id: scaleName,\n        type: defaultScaleType,\n        domain: [\n          {\n            dataId: this._rawData.name,\n            fields: [field]\n          }\n        ],\n        range: spec\n      });\n      return {\n        scale: scaleName,\n        field\n      };\n    }\n\n    // 若sizeSpec是对象\n    if (isObject(spec)) {\n      if (isNil(field)) {\n        this._option?.onError(`${key}Field is required.`);\n        return spec;\n      }\n      const scaleName = `${PREFIX}_series_scatter_${this.id}_scale_${key}`;\n      const visualSpec = {\n        id: scaleName,\n        type: defaultScaleType,\n        domain: [\n          {\n            dataId: this._rawData.name,\n            fields: [field]\n          }\n        ],\n        range: defaultRange,\n        ...spec\n      };\n\n      this._option.globalScale.registerModelScale(visualSpec);\n      return {\n        scale: visualSpec.id,\n        field\n      };\n    }\n\n    // 其余情况报错\n    this._option?.onError(`${key} attribute is invalid.`);\n    return spec;\n  }\n\n  /**\n   * 计算sizeScale\n   * @param field 数据对应字段\n   * @param sizeSpec size配置\n   */\n  private getSizeAttribute(field: string, sizeSpec: IScatterSeriesSpec['size']): VisualType<number> {\n    // 若sizeSpec不存在\n    if (isNil(sizeSpec)) {\n      // Tips: spec会被theme配置merge, 所以Spec没配置, 不一定会触发这里.\n      return SCATTER_DEFAULT_SIZE;\n    }\n\n    // 若sizeSpec是数值\n    if (isNumber(sizeSpec)) {\n      return sizeSpec;\n    }\n\n    // 若sizeSpec是字符串中的数值\n    if (isString(sizeSpec) && isNumeric(sizeSpec)) {\n      return parseFloat(sizeSpec);\n    }\n\n    return this._getSeriesAttribute<number>(\n      field,\n      sizeSpec as VisualType<number>,\n      {\n        defaultScaleType: SCATTER_DEFAULT_SIZE_SCALE_TYPE,\n        defaultRange: SCATTER_DEFAULT_RANGE_SIZE\n      },\n      'size'\n    );\n  }\n\n  /**\n   * 计算shapeScale\n   * @param field 数据对应字段\n   * @param shapeSpec shape配置\n   */\n  private getShapeAttribute(field: string, shapeSpec: IScatterSeriesSpec['shape']): VisualType<string> {\n    // 若shapeSpec不存在\n    if (isNil(shapeSpec)) {\n      // Tips: spec会被theme配置merge, 所以Spec没配置, 不一定会触发这里.\n      return SCATTER_DEFAULT_SHAPE;\n    }\n\n    // 若shapeSpec是字符串\n    if (isString(shapeSpec)) {\n      return shapeSpec;\n    }\n\n    return this._getSeriesAttribute<string>(\n      field,\n      shapeSpec as VisualType<string>,\n      {\n        defaultScaleType: SCATTER_DEFAULT_SHAPE_SCALE_TYPE,\n        defaultRange: SCATTER_DEFAULT_RANGE_SHAPE\n      },\n      'shape'\n    );\n  }\n\n  /**\n   * 初始化Mark\n   */\n  initMark(): void {\n    this._symbolMark = this._createMark(\n      ScatterSeries.mark.point,\n      {\n        groupKey: this._seriesField,\n        isSeriesMark: true\n      },\n      {\n        morph: shouldMarkDoMorph(this._spec, ScatterSeries.mark.point.name),\n        morphElementKey: this.getDimensionField()[0]\n      }\n    ) as ISymbolMark;\n  }\n\n  /**\n   * 初始化散点图各类Mark的Style\n   */\n  initMarkStyle(): void {\n    this.initSymbolMarkStyle();\n  }\n\n  /**\n   * 初始化动画\n   */\n  initAnimation(): void {\n    const animationParams = getGroupAnimationParams(this);\n    const appearPreset = (this._spec?.animationAppear as IStateAnimateSpec<ScatterAppearPreset>)?.preset;\n    this._symbolMark.setAnimationConfig(\n      animationConfig(\n        Factory.getAnimationInKey('scatter')?.({}, appearPreset),\n        userAnimationConfig(SeriesMarkNameEnum.point, this._spec, this._markAttributeContext),\n        animationParams\n      )\n    );\n  }\n\n  /**\n   * 初始化SymbolMark\n   */\n  private initSymbolMarkStyle(): void {\n    const symbolMark = this._symbolMark;\n    if (!symbolMark) {\n      return;\n    }\n\n    if (this._invalidType !== 'zero') {\n      this.setMarkStyle(symbolMark, {\n        visible: this._getInvalidDefined.bind(this)\n      });\n    }\n\n    this.setMarkStyle(\n      symbolMark,\n      {\n        x: this.dataToPositionX.bind(this),\n        y: this.dataToPositionY.bind(this),\n        z: this._fieldZ ? this.dataToPositionZ.bind(this) : null,\n        fill: this.getColorAttribute(),\n        size: isNumber(this._size) || isFunction(this._size) ? this._size : SCATTER_DEFAULT_SIZE,\n        symbolType: isString(this._shape) || isFunction(this._shape) ? this._shape : SCATTER_DEFAULT_SHAPE\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n\n    if (isValid(this._sizeField) || isValid(this._size)) {\n      this.setMarkStyle(\n        symbolMark,\n        {\n          size: this.getSizeAttribute(this._sizeField, this._size) as VisualType<number>\n        },\n        STATE_VALUE_ENUM.STATE_NORMAL,\n        AttributeLevel.User_Mark\n      );\n    }\n\n    if (isValid(this._shapeField) || isValid(this._shape)) {\n      this.setMarkStyle(\n        symbolMark,\n        {\n          symbolType: this.getShapeAttribute(this._shapeField, this._shape) as VisualType<string>\n        },\n        STATE_VALUE_ENUM.STATE_NORMAL,\n        AttributeLevel.User_Mark\n      );\n    }\n  }\n\n  protected initTooltip() {\n    super.initTooltip();\n\n    this._symbolMark && this._tooltipHelper.activeTriggerSet.mark.add(this._symbolMark);\n  }\n\n  viewDataStatisticsUpdate(d: DataView) {\n    super.viewDataStatisticsUpdate(d);\n    const fields = [this.getDimensionField()[0], this.getStackValueField()];\n    const allValid = fields.every(field => field && this.getViewDataStatistics()?.latestData?.[field]?.allValid);\n    if (this._invalidType === 'zero' || allValid) {\n      this.setMarkStyle(this._symbolMark, { visible: true }, 'normal', AttributeLevel.Series);\n    } else {\n      this.setMarkStyle(\n        this._symbolMark,\n        { visible: this._getInvalidDefined.bind(this) },\n        'normal',\n        AttributeLevel.Series\n      );\n    }\n\n    // if has produce, reCompile encode to set attribute to product\n    if (this._symbolMark.getProduct()) {\n      this._symbolMark.compileEncode();\n    }\n  }\n\n  /**\n   * 初始化LabelMark\n   */\n  initLabelMarkStyle(labelMark?: ILabelMark): void {\n    if (!labelMark) {\n      return;\n    }\n    this._labelMark = labelMark;\n    this.setMarkStyle(\n      labelMark,\n      {\n        fill: this.getColorAttribute(),\n        text: (datum: Datum) => {\n          return datum[this.getStackValueField()];\n        },\n        z: this._fieldZ ? this.dataToPositionZ.bind(this) : null\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n    if (this._invalidType !== 'zero') {\n      this.setMarkStyle(\n        labelMark,\n        {\n          visible: this._getInvalidDefined.bind(this)\n        },\n        STATE_VALUE_ENUM.STATE_NORMAL,\n        AttributeLevel.Series\n      );\n    }\n  }\n\n  /**\n   * 处理缩放\n   */\n  handleZoom(e: any) {\n    this.getMarksWithoutRoot().forEach(mark => {\n      if (!mark) {\n        return;\n      }\n      const graphics = mark.getGraphics();\n\n      if (!graphics || !graphics.length) {\n        return;\n      }\n\n      graphics.forEach((graphicItem: IMarkGraphic, i: number) => {\n        const datum = graphicItem?.context?.data?.[0];\n        const newPosition = this.dataToPosition(datum);\n        if (newPosition && graphicItem) {\n          graphicItem.translateTo(newPosition.x, newPosition.y);\n        }\n      });\n    });\n\n    const vgrammarLabel = this._labelMark?.getComponent()?.getProduct();\n\n    if (vgrammarLabel) {\n      (vgrammarLabel as any).evaluate(null, null);\n    }\n  }\n\n  handlePan(e: any) {\n    // TODO 现在处理好像一模一样\n    this.handleZoom(e);\n  }\n\n  getDefaultShapeType() {\n    return 'circle';\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._symbolMark];\n  }\n}\n\nexport const registerScatterSeries = () => {\n  registerSymbolMark();\n  registerScatterAnimation();\n  registerCartesianBandAxis();\n  registerCartesianLinearAxis();\n  Factory.registerSeries(ScatterSeries.type, ScatterSeries);\n};\n"]}