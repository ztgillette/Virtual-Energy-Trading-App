{"version":3,"sources":["../src/series/base/group.ts"],"names":[],"mappings":";;;AAAA,iDAAuD;AACvD,kDAAuE;AACvE,yEAAqE;AAGrE,MAAa,KAAK;IAEhB,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAGD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,YAAY,MAAgB;QAVlB,YAAO,GAAa,EAAE,CAAC;QAW/B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,QAAQ,CAAC,QAAkB,EAAE,OAAgB;QAC3C,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC/B,MAAM,SAAS,GAAG,IAAI,mBAAQ,CAAC,OAAO,YAAY,kBAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxF,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC1B,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE;YAC1B,IAAI,EAAE,UAAU;SACjB,CAAC,CAAC;QACH,IAAA,2CAAgC,EAAC,OAAO,EAAE,eAAe,EAAE,8BAAa,CAAC,CAAC;QAC1E,SAAS,CAAC,SAAS,CACjB;YACE,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE;gBACP,MAAM,EAAE,IAAI,CAAC,OAAO;aACrB;SACF,EACD,KAAK,CACN,CAAC;QACF,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,eAAe;IAEf,CAAC;IAED,oBAAoB,CAAC,KAAa;;QAChC,MAAM,MAAM,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,SAAS,0CAAE,UAAU,0CAAE,eAAe,0CAAG,KAAK,CAAC,CAAC;QACpE,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1C,CAAC;CACF;AA5CD,sBA4CC","file":"group.js","sourcesContent":["import { DataSet, DataView } from '@visactor/vdataset';\nimport { registerDataSetInstanceTransform } from '../../data/register';\nimport { dimensionTree } from '../../data/transforms/dimension-data';\nimport type { IGroup } from '../../typings';\n\nexport class Group implements IGroup {\n  protected _fields: string[] = [];\n  get fields() {\n    return this._fields;\n  }\n\n  protected _groupData?: DataView;\n  get groupData() {\n    return this._groupData;\n  }\n\n  constructor(fields: string[]) {\n    this._fields = fields;\n  }\n\n  initData(viewData: DataView, dataSet: DataSet) {\n    const dataName = viewData.name;\n    const groupData = new DataView(dataSet instanceof DataSet ? dataSet : viewData.dataSet);\n    groupData.name = dataName;\n    groupData.parse([viewData], {\n      type: 'dataview'\n    });\n    registerDataSetInstanceTransform(dataSet, 'dimensionTree', dimensionTree);\n    groupData.transform(\n      {\n        type: 'dimensionTree',\n        options: {\n          fields: this._fields\n        }\n      },\n      false\n    );\n    groupData.target.addListener('change', this.groupDataUpdate.bind(this));\n    this._groupData = groupData;\n  }\n\n  groupDataUpdate() {\n    // do nothing\n  }\n\n  getGroupValueInField(field: string) {\n    const values = this.groupData?.latestData?.dimensionValues?.[field];\n    return values ? Array.from(values) : [];\n  }\n}\n"]}