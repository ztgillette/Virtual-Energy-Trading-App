{"version":3,"sources":["../src/series/range-area/range-area.ts"],"names":[],"mappings":";;;AAAA,uCAA0C;AAE1C,4CAAmD;AACnD,0CAAmD;AAGnD,wDAA0D;AAC1D,qDAAgE;AAEhE,yCAAiD;AACjD,gDAA6C;AAC7C,8DAAwG;AAGxG,MAAa,eAA6D,SAAQ,iBAAa;IAA/F;;QAEE,SAAI,GAAG,qBAAc,CAAC,SAAS,CAAC;IA6ElC,CAAC;IAzEC,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAC/B,eAAe,CAAC,IAAI,CAAC,IAAI,EACzB;YACE,QAAQ,EAAE,IAAI,CAAC,YAAY;YAC3B,YAAY,EAAE,IAAI;SACnB,EACD;YACE,eAAe,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;SAC7C,CACW,CAAC;IACjB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,iBAAiB;QACf,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,QAAQ,EAAE;YACZ,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC1B,IAAI,IAAI,CAAC,UAAU,iBAAyB,EAAE;gBAC5C,IAAI,CAAC,YAAY,CACf,IAAI,CAAC,SAAS,EACd;oBACE,EAAE,EAAE,CAAC,KAAY,EAAE,EAAE;wBACnB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;4BACtB,OAAO,MAAM,CAAC,GAAG,CAAC;yBACnB;wBACD,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;wBAC7C,OAAO,cAAc,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;4BAC9E,YAAY,EAAE,IAAI,CAAC,aAAa;yBACjC,CAAC,CAAC;oBACL,CAAC;iBACF,EACD,QAAQ,EACR,0BAAc,CAAC,MAAM,CACtB,CAAC;aACH;iBAAM;gBACL,IAAI,CAAC,YAAY,CACf,IAAI,CAAC,SAAS,EACd;oBACE,EAAE,EAAE,CAAC,KAAY,EAAE,EAAE;wBACnB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;4BACtB,OAAO,MAAM,CAAC,GAAG,CAAC;yBACnB;wBACD,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC;wBAC7C,OAAO,cAAc,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;4BAC9E,YAAY,EAAE,IAAI,CAAC,aAAa;yBACjC,CAAC,CAAC;oBACL,CAAC;iBACF,EACD,QAAQ,EACR,0BAAc,CAAC,MAAM,CACtB,CAAC;aACH;YAED,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,0BAAc,CAAC,MAAM,CAAC,CAAC;SACjF;IACH,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,cAAc,GAAG,IAAI,6CAA4B,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC;IAES,gBAAgB;QACxB,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACpD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,cAAc,IAAI,cAAc,CAAC,UAAU,IAAI,MAAM,CAAC,MAAM,EAAE;YAChE,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;SAC7G;QACD,OAAO,KAAK,CAAC;IACf,CAAC;;AA9EH,0CA+EC;AA9EiB,oBAAI,GAAW,qBAAc,CAAC,SAAS,CAAC;AAGxC,oBAAI,GAAkB,8BAAmB,CAAC;AA6ErD,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,IAAA,uBAAgB,GAAE,CAAC;IACnB,IAAA,qCAAyB,GAAE,CAAC;IAC5B,IAAA,uCAA2B,GAAE,CAAC;IAC9B,iBAAO,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;AAChE,CAAC,CAAC;AALW,QAAA,uBAAuB,2BAKlC","file":"range-area.js","sourcesContent":["import { AreaSeries } from '../area/area';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesTypeEnum } from '../interface/type';\nimport { registerAreaMark } from '../../mark/area';\nimport { Direction } from '../../typings/space';\nimport type { Datum } from '../../typings';\nimport { AttributeLevel } from '../../constant/attribute';\nimport { RangeAreaSeriesTooltipHelper } from './tooltip-helper';\nimport type { IAreaSeriesSpec } from '../area/interface';\nimport { rangeAreaSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport { registerCartesianLinearAxis, registerCartesianBandAxis } from '../../component/axis/cartesian';\nimport type { IAreaMark } from '../../mark/interface';\n\nexport class RangeAreaSeries<T extends IAreaSeriesSpec = IAreaSeriesSpec> extends AreaSeries<T> {\n  static readonly type: string = SeriesTypeEnum.rangeArea;\n  type = SeriesTypeEnum.rangeArea;\n\n  static readonly mark: SeriesMarkMap = rangeAreaSeriesMark;\n\n  initMark(): void {\n    this._areaMark = this._createMark(\n      RangeAreaSeries.mark.area,\n      {\n        groupKey: this._seriesField,\n        isSeriesMark: true\n      },\n      {\n        morphElementKey: this.getDimensionField()[0]\n      }\n    ) as IAreaMark;\n  }\n\n  initMarkStyle(): void {\n    this.initAreaMarkStyle();\n  }\n\n  initAreaMarkStyle(): void {\n    const areaMark = this._areaMark;\n    if (areaMark) {\n      super.initAreaMarkStyle();\n      if (this._direction === Direction.horizontal) {\n        this.setMarkStyle(\n          this._areaMark,\n          {\n            x1: (datum: Datum) => {\n              if (!this._xAxisHelper) {\n                return Number.NaN;\n              }\n              const { dataToPosition } = this._xAxisHelper;\n              return dataToPosition(this.getDatumPositionValues(datum, this._spec.xField[1]), {\n                bandPosition: this._bandPosition\n              });\n            }\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      } else {\n        this.setMarkStyle(\n          this._areaMark,\n          {\n            y1: (datum: Datum) => {\n              if (!this._yAxisHelper) {\n                return Number.NaN;\n              }\n              const { dataToPosition } = this._yAxisHelper;\n              return dataToPosition(this.getDatumPositionValues(datum, this._spec.yField[1]), {\n                bandPosition: this._bandPosition\n              });\n            }\n          },\n          'normal',\n          AttributeLevel.Series\n        );\n      }\n\n      this.setMarkStyle(areaMark, { stroke: false }, 'normal', AttributeLevel.Series);\n    }\n  }\n\n  protected initTooltip() {\n    this._tooltipHelper = new RangeAreaSeriesTooltipHelper(this);\n  }\n\n  protected _isFieldAllValid() {\n    const viewStatistics = this.getViewDataStatistics();\n    const fields = this.fieldY;\n    if (viewStatistics && viewStatistics.latestData && fields.length) {\n      return fields.every(field => viewStatistics.latestData[field] && viewStatistics.latestData[field].allValid);\n    }\n    return false;\n  }\n}\n\nexport const registerRangeAreaSeries = () => {\n  registerAreaMark();\n  registerCartesianBandAxis();\n  registerCartesianLinearAxis();\n  Factory.registerSeries(RangeAreaSeries.type, RangeAreaSeries);\n};\n"]}