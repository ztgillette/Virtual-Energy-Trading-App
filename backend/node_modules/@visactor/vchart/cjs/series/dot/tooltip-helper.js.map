{"version":3,"sources":["../src/series/dot/tooltip-helper.ts"],"names":[],"mappings":";;;AACA,2DAAiE;AAWjE,6CAA4C;AAI5C,MAAa,sBAAuB,SAAQ,wCAAuB;IAAnE;;QAYE,sBAAiB,GAAG,GAAG,EAAE;YACvB,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;IA4DJ,CAAC;IAzEW,YAAY,CAAC,UAA6B;QAClD,OAAO,UAAU,KAAK,MAAM,CAAC;IAC/B,CAAC;IAES,sBAAsB,CAAC,UAA6B;QAC5D,OAAO;YACL,GAAG,EAAE,YAAY;YACjB,KAAK,EAAE,YAAY;SACpB,CAAC;IACJ,CAAC;IAMS,qBAAqB;QAC7B,OAAO;YACL;gBACE,GAAG,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI;gBAC/B,KAAK,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE;aAChC;YACD;gBACE,GAAG,EAAE,YAAY;gBACjB,KAAK,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,iBAAQ,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC;aACrF;YACD;gBACE,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW;aACzC;YACD;gBACE,GAAG,EAAE,UAAU;gBACf,KAAK,EAAE,CAAC,KAAU,EAAE,EAAE;oBACpB,OAAO,KAAK,CAAC,QAAQ,CAAC;gBACxB,CAAC;aACF;SACF,CAAC;IACJ,CAAC;IAED,cAAc,CACZ,UAA6B,EAC7B,gBAA+B,EAC/B,IAAkB,EAClB,KAAe,EACf,MAA6B;;QAE7B,MAAM,GAAG,GAAG,KAAK,CAAC,cAAc,CAAC,UAAU,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACpF,MAAM,iBAAiB,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,IAAI,0CAAG,UAAU,CAAC,0CAAE,aAAa,mCAAI,MAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAG,UAAU,CAAC,0CAAE,aAAa,CAAC;QAElH,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE;YAC7B,GAAG,CAAC,aAAa,GAAG,CAAC,IAAS,EAAE,KAAU,EAAE,MAAW,EAAE,EAAE;gBACzD,MAAM,eAAe,GAAyB,EAAE,CAAC;gBACjD,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;gBAEnE,YAAY,CAAC,MAAM,GAAG,CAAC;oBACrB,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;wBAC7C,IAAI,IAAI,GAAG,IAAI,CAAC;wBAChB,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;4BACzB,eAAe,CAAC,IAAI,CAAC,gCAChB,YAAY,CAAC,CAAC,CAAC,KAClB,SAAS,EAAE,QAAQ,EACnB,QAAQ,EAAE,IAAI,EACd,GAAG,EAAE,GAAG,EACR,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GACH,CAAC,CAAC;4BACzB,IAAI,GAAG,KAAK,CAAC;yBACd;oBACH,CAAC,CAAC,CAAC;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACtC,CAAC,CAAC;SACH;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA1ED,wDA0EC","file":"tooltip-helper.js","sourcesContent":["import type { ISeriesTooltipHelper } from '../interface';\nimport { BaseSeriesTooltipHelper } from '../base/tooltip-helper';\nimport type {\n  Datum,\n  ITooltipActual,\n  ITooltipLineActual,\n  ITooltipLinePattern,\n  MaybeArray,\n  TooltipActiveType,\n  TooltipData,\n  TooltipPatternProperty\n} from '../../typings';\nimport { TimeUtil } from '@visactor/vutils';\nimport type { ITooltipSpec } from '../../component/tooltip/interface/spec';\nimport type { TooltipHandlerParams } from '../../component/tooltip/interface/common';\n\nexport class DotSeriesTooltipHelper extends BaseSeriesTooltipHelper implements ISeriesTooltipHelper {\n  protected enableByType(activeType: TooltipActiveType): boolean {\n    return activeType === 'mark';\n  }\n\n  protected getDefaultTitlePattern(activeType: TooltipActiveType): ITooltipLinePattern {\n    return {\n      key: 'event info',\n      value: 'event info'\n    };\n  }\n\n  shapeTypeCallback = () => {\n    return 'square';\n  };\n\n  protected getDefaultContentList(): MaybeArray<TooltipPatternProperty<MaybeArray<ITooltipLinePattern>>> {\n    return [\n      {\n        key: (datum: any) => datum.type,\n        value: (datum: any) => datum.id\n      },\n      {\n        key: 'event_time',\n        value: (datum: any) => TimeUtil.getInstance().timeFormat('%Y%m%d', datum.event_time)\n      },\n      {\n        key: 'action_type',\n        value: (datum: any) => datum.action_type\n      },\n      {\n        key: 'children',\n        value: (datum: any) => {\n          return datum.children;\n        }\n      }\n    ];\n  }\n\n  getTooltipData(\n    activeType: TooltipActiveType,\n    chartTooltipSpec?: ITooltipSpec,\n    data?: TooltipData,\n    datum?: Datum[],\n    params?: TooltipHandlerParams\n  ): ITooltipActual | null {\n    const res = super.getTooltipData(activeType, chartTooltipSpec, data, datum, params);\n    const userUpdateContent = this.spec?.[activeType]?.updateContent ?? chartTooltipSpec?.[activeType]?.updateContent;\n\n    if (res && !userUpdateContent) {\n      res.updateContent = (prev: any, datum: any, params: any) => {\n        const childrenContent: ITooltipLineActual[] = [];\n        const childrenPrev = prev.filter((p: any) => p.key === 'children');\n\n        childrenPrev.length > 0 &&\n          childrenPrev[0].value.forEach((element: any) => {\n            let flag = true;\n            for (const key in element) {\n              childrenContent.push({\n                ...childrenPrev[0],\n                shapeType: 'circle',\n                hasShape: flag,\n                key: key,\n                value: element[key] + ''\n              } as ITooltipLineActual);\n              flag = false;\n            }\n          });\n        return prev.concat(childrenContent);\n      };\n    }\n\n    return res;\n  }\n}\n"]}