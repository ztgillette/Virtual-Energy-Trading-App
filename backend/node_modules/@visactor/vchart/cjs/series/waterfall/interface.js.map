{"version":3,"sources":["../src/series/waterfall/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { Datum, IMarkSpec, IMarkTheme, IRuleMarkSpec, ITextMarkSpec } from '../../typings';\nimport type { IAnimationSpec } from '../../animation/spec';\nimport type { BarAppearPreset, IBarSeriesSpec, IBarSeriesTheme } from '../bar/interface';\nimport type { ILabelSpec, ITotalLabelSpec } from '../../component/label/interface';\nimport type { SeriesMarkNameEnum } from '../interface/type';\n\nexport type WaterfallAppearPreset = BarAppearPreset;\n\ntype WaterfallMarks = 'bar';\n\nexport interface IWaterfallTotalText {\n  /** 总计文本 */\n  text?: string;\n}\n\nexport interface IWaterfallTotalEnd extends IWaterfallTotalText {\n  /** 此类型下，默认在数据最后增加一条总计信息 */\n  type: 'end';\n}\nexport interface IWaterfallTotalCustom extends IWaterfallTotalText {\n  /** 此类型下，总计的运算方式由自定义函数决定 */\n  type: 'custom';\n  /** 总计值的标志位，对应 field 的值为 true 时，认为数据是总计数据 */\n  tagField: string;\n  /** 总计数据在运算时会调用这个函数，参数为当前总计数据，当前累计信息，需要返回总计的起点值与终点值 */\n  product: (datum: Datum, current: { start: number; end: number }) => { start: number; end: number };\n}\n\nexport interface IWaterfallTotalField extends IWaterfallTotalText {\n  /** 此类型下，总计的运算方式由对应的数据字段决定 */\n  type: 'field';\n  /** 总计值的标志位，对应 field 的值为 true 时，认为数据是总计数据 */\n  tagField: string;\n  /** 可以指定总计值 */\n  valueField?: string;\n  /** 可以指定总计起点 */\n  startField?: string;\n  /** 可以指定总计计算前 n 个维度 */\n  collectCountField?: string;\n}\n\nexport type IWaterfallStackLabelPosition = 'withChange' | 'middle' | 'max' | 'min';\nexport type IWaterfallStackLabelValueType = 'change' | 'absolute';\n\nexport interface IWaterfallSeriesSpec\n  extends Omit<IBarSeriesSpec, 'type' | 'label'>,\n    IAnimationSpec<WaterfallMarks, WaterfallAppearPreset> {\n  /**\n   *  系列类型\n   */\n  type: 'waterfall';\n  /**\n   * 总计配置\n   */\n  total?: IWaterfallTotalEnd | IWaterfallTotalField | IWaterfallTotalCustom;\n  /**\n   * 引导线配置\n   */\n  [SeriesMarkNameEnum.leaderLine]?: IMarkSpec<IRuleMarkSpec>;\n  /**\n   * 堆积值标签配置\n   */\n  [SeriesMarkNameEnum.stackLabel]?: ILabelSpec & {\n    /** 标签位置 */\n    position?: IWaterfallStackLabelPosition;\n    /** 标签偏移量 */\n    offset?: number;\n    /** 标签值 */\n    valueType?: IWaterfallStackLabelValueType;\n  };\n\n  totalLabel?: ITotalLabelSpec & {\n    /** 标签位置 */\n    position?: IWaterfallStackLabelPosition;\n    /** 标签偏移量 */\n    offset?: number;\n    /** 标签值 */\n    valueType?: IWaterfallStackLabelValueType;\n  };\n\n  /**\n   * 标签配置\n   */\n  [SeriesMarkNameEnum.label]?: ILabelSpec & {\n    /** 是否可见 */\n    visible: boolean;\n    /** 标签位置(支持两端显示 bothEnds) */\n    // position?: PositionEnum;\n    /** 标签偏移量 */\n    offset?: number;\n  };\n}\n\nexport interface IWaterfallSeriesTheme extends IBarSeriesTheme {\n  seriesFieldName: {\n    total: string;\n    increase: string;\n    decrease: string;\n  };\n  [SeriesMarkNameEnum.leaderLine]?: Partial<IMarkTheme<IRuleMarkSpec>>;\n  [SeriesMarkNameEnum.stackLabel]?: Partial<\n    IMarkTheme<ITextMarkSpec> & { offset?: number; position?: IWaterfallStackLabelPosition }\n  >;\n}\n"]}