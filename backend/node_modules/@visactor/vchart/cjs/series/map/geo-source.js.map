{"version":3,"sources":["../src/series/map/geo-source.ts"],"names":[],"mappings":";;;AAAA,iDAAgG;AAChG,4CAAwC;AAExC,kDAAsG;AACtG,6CAAmD;AAsCtC,QAAA,YAAY,GAAG,IAAI,GAAG,EAAoB,CAAC;AAExD,IAAI,UAA0B,CAAC;AAE/B,SAAS,cAAc;IACrB,IAAI,UAAU,EAAE;QACd,OAAO;KACR;IACD,UAAU,GAAG,IAAI,kBAAO,EAAE,CAAC;IAC3B,IAAA,wCAA6B,EAAC,UAAU,EAAE,SAAS,EAAE,wBAAa,CAAC,CAAC;IACpE,IAAA,wCAA6B,EAAC,UAAU,EAAE,UAAU,EAAE,yBAAc,CAAC,CAAC;IACtE,IAAA,2CAAgC,EAAC,UAAU,EAAE,UAAU,EAAE,mBAAQ,CAAC,CAAC;AACrE,CAAC;AAMD,SAAgB,iBAAiB,CAC/B,GAAW,EACX,MAAqB,EACrB,SAA0B,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE;IAE7D,IAAI,oBAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACzB,IAAA,YAAI,EAAC,gBAAgB,GAAG,wCAAwC,CAAC,CAAC;KACnE;IACD,cAAc,EAAE,CAAC;IACjB,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,UAAW,CAAC,CAAC;IAC3C,MAAM,OAAO,GAAoB,IAAA,cAAK,EAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;IACxF,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;QAC9B,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE;YACrB,IAAI,EAAE,UAAU;YAChB,OAAO;SACR,CAAC,CAAC;KACJ;SAAM;QACL,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE;YACrB,IAAI,EAAE,SAAS;YACf,OAAO;SACR,CAAC,CAAC;KACJ;IAED,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;IAC5B,IAAI,QAAQ,KAAK,IAAI,EAAE;QACrB,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;KAC1C;SAAM,IAAI,IAAA,iBAAQ,EAAC,QAAQ,CAAC,EAAE;QAC7B,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC7D;IAED,oBAAY,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClC,CAAC;AA/BD,8CA+BC;AAED,SAAgB,mBAAmB,CAAC,GAAW;IAC7C,IAAI,CAAC,oBAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC1B,IAAA,YAAI,EAAC,gBAAgB,GAAG,oBAAoB,CAAC,CAAC;QAC9C,OAAO;KACR;IACD,oBAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AAND,kDAMC;AAED,SAAgB,YAAY,CAAC,IAAY;IACvC,OAAO,oBAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAFD,oCAEC;AAED,SAAgB,cAAc;IAC5B,oBAAY,CAAC,KAAK,EAAE,CAAC;IACrB,UAAU,GAAG,IAAI,CAAC;AACpB,CAAC;AAHD,wCAGC","file":"geo-source.js","sourcesContent":["import { DataSet, DataView, geoJSONParser, simplify, topoJSONParser } from '@visactor/vdataset';\nimport { warn } from '../../util/debug';\nimport type { GeoSourceType } from '../../typings/geo';\nimport { registerDataSetInstanceParser, registerDataSetInstanceTransform } from '../../data/register';\nimport { isObject, merge } from '@visactor/vutils';\n\nexport interface IGeoJsonOption {\n  type?: 'geojson';\n  /** 计算中心点 */\n  /** @default true */\n  centroid?: boolean;\n  /** 地图简化 */\n  /** @default false */\n  simplify?:\n    | boolean\n    | {\n        /**\n         * A number in degrees(e.g. lat/lon distance).\n         *  1 degree is roughly equivalent to 69 miles. the default is 0.001, which is around a city block long.\n         * @default 0.01\n         * @since 1.11.0\n         */\n        tolerance: number;\n      };\n  /** 逆时针回绕(Multi)LineString或(Multi)Polygon的外部环，内部环顺时针。*/\n  /** @default false */\n  rewind?:\n    | boolean\n    | {\n        /** 启用反向绕行 */\n        /** @default false */\n        reverse?: boolean;\n      };\n}\n\nexport interface ITopoJsonOption extends Omit<IGeoJsonOption, 'type'> {\n  type: 'topojson';\n  object: string;\n}\n\nexport type GeoSourceOption = IGeoJsonOption | ITopoJsonOption;\n\nexport const geoSourceMap = new Map<string, DataView>();\n\nlet mapDataSet: DataSet | null;\n\nfunction initMapDataSet() {\n  if (mapDataSet) {\n    return;\n  }\n  mapDataSet = new DataSet();\n  registerDataSetInstanceParser(mapDataSet, 'geojson', geoJSONParser);\n  registerDataSetInstanceParser(mapDataSet, 'topojson', topoJSONParser);\n  registerDataSetInstanceTransform(mapDataSet, 'simplify', simplify);\n}\n\n/**\n * 1. 这个和mapSeries强绑定，后续可以考虑动态注册API\n * 2. 存成dataView而不是原始数据，是考虑减少parser的开销\n */\nexport function registerMapSource(\n  key: string,\n  source: GeoSourceType,\n  option: GeoSourceOption = { type: 'geojson', centroid: true }\n) {\n  if (geoSourceMap.has(key)) {\n    warn(`map type of '${key}' already exists, will be overwritten.`);\n  }\n  initMapDataSet();\n  const dataView = new DataView(mapDataSet!);\n  const options: GeoSourceOption = merge({}, { centroid: true, simplify: false }, option);\n  if (option.type === 'topojson') {\n    dataView.parse(source, {\n      type: 'topojson',\n      options\n    });\n  } else {\n    dataView.parse(source, {\n      type: 'geojson',\n      options\n    });\n  }\n\n  const { simplify } = option;\n  if (simplify === true) {\n    dataView.transform({ type: 'simplify' });\n  } else if (isObject(simplify)) {\n    dataView.transform({ type: 'simplify', options: simplify });\n  }\n\n  geoSourceMap.set(key, dataView);\n}\n\nexport function unregisterMapSource(key: string) {\n  if (!geoSourceMap.has(key)) {\n    warn(`map type of '${key}' does not exists.`);\n    return;\n  }\n  geoSourceMap.delete(key);\n}\n\nexport function getMapSource(type: string) {\n  return geoSourceMap.get(type);\n}\n\nexport function clearMapSource() {\n  geoSourceMap.clear();\n  mapDataSet = null;\n}\n"]}