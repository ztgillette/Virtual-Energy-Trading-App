"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerElementHighlightByName = exports.ElementHighlightByName = void 0;

const factory_1 = require("../../core/factory"), base_1 = require("./base"), interface_1 = require("../../compile/mark/interface"), vutils_1 = require("@visactor/vutils"), util_1 = require("./util"), type = "element-highlight-by-name", defaultOptions = {
    highlightState: interface_1.STATE_VALUE_ENUM.STATE_HIGHLIGHT,
    blurState: interface_1.STATE_VALUE_ENUM.STATE_BLUR,
    filterType: "groupKey"
};

class ElementHighlightByName extends base_1.BaseTrigger {
    constructor(options) {
        super(options), this.type = type, this.handleStart = e => {
            if (this.options.shouldStart ? this.options.shouldStart(e) : this._filterByName(e)) {
                const itemKey = this._parseTargetKey(e);
                this.start(itemKey);
            }
        }, this.handleReset = e => {
            (this.options.shouldReset ? this.options.shouldReset(e) : this._filterByName(e)) && this.resetAll();
        }, this.options = Object.assign({}, defaultOptions, options), this.updateMarkIdByState([ this.options.highlightState, this.options.blurState ]);
    }
    getStartState() {
        return this.options.highlightState;
    }
    getResetState() {
        return this.options.blurState;
    }
    getEvents() {
        return [ {
            type: this.options.trigger,
            handler: this.handleStart
        }, {
            type: this.options.triggerOff,
            handler: this.handleReset
        } ];
    }
    _filterByName(e) {
        var _a;
        const names = (0, vutils_1.array)(this.options.graphicName);
        return (null === (_a = null == e ? void 0 : e.node) || void 0 === _a ? void 0 : _a.name) && names.includes(e.node.name);
    }
    _parseTargetKey(e) {
        return this.options.parseData ? this.options.parseData(e) : "text" === e.node.type ? e.node.attribute.text : null;
    }
    start(itemKey) {
        if (itemKey) {
            const filterValue = (0, util_1.generateFilterValue)(this.options), {interaction: interaction, highlightState: highlightState, blurState: blurState} = this.options, statedGraphics = interaction.getStatedGraphics(this), newStatedGraphics = [];
            this.getMarks().forEach((m => {
                var _a;
                null === (_a = m.getGraphics()) || void 0 === _a || _a.forEach((g => {
                    filterValue(g) === itemKey && newStatedGraphics.push(g);
                }));
            })), interaction.updateStates(this, newStatedGraphics, statedGraphics, highlightState, blurState), 
            interaction.setStatedGraphics(this, newStatedGraphics);
        }
    }
    resetAll() {
        const {interaction: interaction, highlightState: highlightState, blurState: blurState} = this.options;
        interaction.clearAllStatesOfTrigger(this, highlightState, blurState), interaction.setStatedGraphics(this, []);
    }
    reset(g) {
        const {highlightState: highlightState, blurState: blurState, interaction: interaction} = this.options;
        if (g) {
            const statedGraphics = interaction.getStatedGraphics(this);
            statedGraphics && statedGraphics.includes(g) && (g.removeState([ highlightState, blurState ]), 
            interaction.setStatedGraphics(this, statedGraphics.filter((sg => sg !== g))));
        } else this.resetAll();
    }
}

exports.ElementHighlightByName = ElementHighlightByName, ElementHighlightByName.type = type, 
ElementHighlightByName.defaultOptions = defaultOptions;

const registerElementHighlightByName = () => {
    factory_1.Factory.registerInteractionTrigger(type, ElementHighlightByName);
};

exports.registerElementHighlightByName = registerElementHighlightByName;
//# sourceMappingURL=element-highlight-by-name.js.map
