{"version":3,"sources":["../src/interaction/interface/spec.ts"],"names":[],"mappings":"","file":"spec.js","sourcesContent":["import type { EventType } from '../../event/interface';\nimport type { StringOrNumber } from '../../typings/common';\nimport type {\n  IElementActiveByLegendOptions,\n  IElementActiveOptions,\n  IElementHighlightByLegendOptions,\n  IElementHighlightByNameOptions,\n  IElementHighlightOptions,\n  IElementSelectOptions\n} from './trigger';\n\nexport interface IBaseInteractionSpec {\n  /**\n   * 触发交互的图元id\n   */\n  markIds?: StringOrNumber[];\n  /**\n   * 触发交互的图元名称\n   */\n  markNames?: StringOrNumber[];\n}\n\ntype Trigger = EventType | EventType[];\n\n/**\n * hover 交互详细配置内容\n */\nexport interface IHoverSpec extends IBaseInteractionSpec {\n  /**\n   * hover 交互开关，默认开启\n   */\n  enable?: boolean;\n  /**\n   * hover 交互的触发事件配置\n   */\n  trigger?: Trigger;\n  /**\n   * hover 交互的终止事件配置\n   */\n  triggerOff?: Trigger;\n}\n\n/**\n * select 交互详细配置内容\n */\nexport interface ISelectSpec extends IBaseInteractionSpec {\n  /**\n   * select 交互开关，默认开启。\n   */\n  enable?: boolean;\n  /**\n   * 选中模式配置，默认 single 单选\n   */\n  mode?: 'single' | 'multiple';\n  /**\n   * select 交互的触发事件配置\n   */\n  trigger?: Trigger;\n  /**\n   * select 交互的终止事件配置\n   */\n  triggerOff?: Trigger | number;\n}\n\n/**\n * 将触发元素的状态设置为激活状态，当开启这个交互的时候，可以在系列图元通过 `state.active` 设置激活状态下的视觉编码\n */\nexport type IElementActiveSpec = IBaseInteractionSpec &\n  Pick<IElementActiveOptions, 'trigger' | 'triggerOff' | 'state'> & {\n    /**\n     * 设置交互的类型为 'element-active'\n     */\n    type: 'element-active';\n  };\n\n/**\n * 图元选中相关交互，当开启这个交互的时候，\n * 可以在系列图元通过 `state.selected` 设置激活状态下的视觉编码\n * 可以在系列图元通过 `state.selected_reverse` 设置非激活状态下的视觉编码\n */\nexport type IElementSelectSpec = IBaseInteractionSpec &\n  Pick<IElementSelectOptions, 'trigger' | 'triggerOff' | 'state' | 'isMultiple' | 'reverseState'> & {\n    /**\n     * 设置交互的类型为 'element-select'\n     */\n    type: 'element-select';\n  };\n/**\n * 图元高亮交互配置，当开启这个交互的时候，\n * 可以在系列图元通过 `state.highlight` 设置激活状态下的视觉编码\n * 可以在系列图元通过 `state.blur` 设置非激活状态下的视觉编码\n */\nexport type IElementHighlightSpec = IBaseInteractionSpec &\n  Pick<IElementHighlightOptions, 'blurState' | 'highlightState' | 'triggerOff' | 'trigger'> & {\n    /**\n     * 设置交互的类型为 'element-highlight'\n     */\n    type: 'element-highlight';\n  };\n/**\n * 将触发元素以及和触发元素具有相同key的元素状态设置为高亮状态，其他元素的状态设置为失焦状态；一般需要配合系列的dataKey 配置使用\n */\nexport type IElementHighlightByKeySpec = IBaseInteractionSpec &\n  Pick<IElementHighlightOptions, 'blurState' | 'highlightState' | 'triggerOff' | 'trigger'> & {\n    /**\n     * 设置交互的类型为 'element-highlight-by-key'\n     */\n    type: 'element-highlight-by-key';\n  };\n/**\n * 将触发元素以及和触发元素具有相同分组值（groupKey）的元素状态设置为高亮状态，其他元素的状态设置为失焦状态\n */\nexport type IElementHighlightByGroup = IBaseInteractionSpec &\n  Pick<IElementHighlightOptions, 'blurState' | 'highlightState' | 'triggerOff' | 'trigger'> & {\n    /**\n     * 设置交互的类型为 'element-highlight-by-group'\n     */\n    type: 'element-highlight-by-group';\n  };\n/**\n * 根据图例激活图元，默认触发事件为图例的 `legendItemHover`和`legendItemUnHover`事件\n */\nexport type IElementActiveByLegend = IBaseInteractionSpec &\n  Pick<IElementActiveByLegendOptions, 'filterType' | 'state'> & {\n    /**\n     * 设置交互的类型为 'element-active-by-legend'\n     */\n    type: 'element-active-by-legend';\n  };\n/**\n * 根据图例高亮图元，默认触发事件为图例的 `legendItemHover`和`legendItemUnHover`事件\n */\nexport type IElementHighlightByLegend = IBaseInteractionSpec &\n  Pick<IElementHighlightByLegendOptions, 'filterType' | 'blurState' | 'highlightState'> & {\n    /**\n     * 设置交互的类型为'element-highlight-by-legend'\n     */\n    type: 'element-highlight-by-legend';\n  };\n/**\n * 根据图例高亮图元，默认触发事件为图例的 `legendItemHover`和`legendItemUnHover`事件\n */\nexport type IElementHighlightByName = IBaseInteractionSpec &\n  Pick<IElementHighlightByNameOptions, 'blurState' | 'highlightState' | 'graphicName' | 'parseData'> & {\n    /**\n     * 设置交互的类型为'element-highlight-by-name'\n     */\n    type: 'element-highlight-by-name';\n  };\n\n/**\n * 元素选中交互，将所有相同名称的元素的状态设置为选中状态；注意该交互不建议和默认的select交互同时使用（象形图除外）\n */\nexport interface ICustomInteraction extends IBaseInteractionSpec {\n  type: string;\n}\n\n/**\n * 交互相关配置，目前支持的交互类型包括：\n * - 元素激活\n * - 元素选中\n * - 元素高亮\n * - 根据key值高亮元素\n * - 根据group值高亮元素\n * - 根据legend值激活元素\n * - 根据legend值高亮元素\n * - 根据图元名称高亮元素\n */\nexport type IInteractionItemSpec =\n  | IElementActiveSpec\n  | IElementSelectSpec\n  | IElementHighlightSpec\n  | IElementHighlightByKeySpec\n  | IElementHighlightByGroup\n  | IElementActiveByLegend\n  | IElementHighlightByLegend\n  | IElementHighlightByName\n  | ICustomInteraction;\n\n/**\n *  申明图表交互相关配置\n */\nexport interface IInteractionSpec {\n  /**\n   * 图表hover相关交互配置，当值为boolean类型时，表示开启或者关闭该交互\n   * 也支持更详细的交互配置\n   */\n  hover?: IHoverSpec | boolean;\n  /**\n   * 图表选中相关交互配置，当值为boolean类型时，表示开启或者关闭该交互\n   * 也支持更详细的交互配置\n   */\n  select?: ISelectSpec | boolean;\n  /**\n   * 其他需要按需注册的类型交互\n   */\n  interactions?: IInteractionItemSpec[];\n}\n"]}