{"version":3,"sources":["../src/interaction/interaction.ts"],"names":[],"mappings":";;;AAKA,MAAa,WAAW;IAAxB;QACU,4BAAuB,GAAkC,IAAI,GAAG,EAAE,CAAC;QAEnE,yBAAoB,GAAY,KAAK,CAAC;QAMtC,uBAAkB,GAAgC,IAAI,GAAG,EAAE,CAAC;IA0QtE,CAAC;IA9QC,sBAAsB,CAAC,OAAgB;QACrC,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC;IACtC,CAAC;IAGD,UAAU,CAAC,OAAiB;QAC1B,IAAI,OAAO,EAAE;YACX,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;YAC3C,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;YAE3C,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACvC,IAAI,KAAK,EAAE;oBACT,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBAExD,IAAI,YAAY,EAAE;wBAChB,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC/D;yBAAM;wBACL,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;qBAC/C;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,iBAAiB,CAAC,OAAiB,EAAE,QAAwB;QAC3D,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,iBAAiB,CAAC,OAAiB;QACjC,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAED,YAAY,CACV,OAAiB,EACjB,iBAAiC,EACjC,kBAAmC,EACnC,KAAc,EACd,YAAqB;QAErB,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,OAAO,EAAE,CAAC;SACX;QAED,IAAI,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;YACnD,OAAO,EAAE,CAAC;SACX;QACD,IAAI,KAAK,IAAI,YAAY,EAAE;YACzB,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBAEnD,IAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,YAAY,CAAC,CAAC;gBAChG,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;aACnF;iBAAM;gBAEL,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,iBAAiB,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;aAC9E;SACF;aAAM,IAAI,KAAK,EAAE;YAChB,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBACnD,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;aACnF;iBAAM;gBACL,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;aAC5D;SACF;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAES,4BAA4B,CACpC,OAAiB,EACjB,iBAAiC,EACjC,kBAAkC,EAClC,YAAoB;QAEpB,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAEjD,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;;YAC7B,MAAM,UAAU,GACd,YAAY,IAAI,aAAa,CAAC,YAAY,CAAC,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAExG,IAAI,UAAU,EAAE;gBACd,MAAM,CAAC,GAAG,MAAA,CAAC,CAAC,MAAM,0CAAE,IAAI,CAAC;gBACzB,MAAM,YAAY,GAAI,CAAS,CAAC,mBAAmB,IAAK,CAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAC/F,CAAC,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CAAC;QAEH,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;;YAC5B,MAAM,UAAU,GACd,YAAY,IAAI,aAAa,CAAC,YAAY,CAAC,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAExG,IAAI,UAAU,EAAE;gBACd,MAAM,CAAC,GAAG,MAAA,CAAC,CAAC,MAAM,0CAAE,IAAI,CAAC;gBACzB,MAAM,YAAY,GAAI,CAAS,CAAC,mBAAmB,IAAK,CAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAC/F,CAAC,CAAC,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAES,qBAAqB,CAC7B,OAAiB,EACjB,iBAAiC,EACjC,kBAAkC,EAClC,KAAa;QAEb,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAEjD,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;;YAC7B,MAAM,QAAQ,GAAG,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAElG,IAAI,QAAQ,EAAE;gBACZ,MAAM,CAAC,GAAG,MAAA,CAAC,CAAC,MAAM,0CAAE,IAAI,CAAC;gBACzB,MAAM,YAAY,GAAI,CAAS,CAAC,mBAAmB,IAAK,CAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAC/F,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;aACpC;QACH,CAAC,CAAC,CAAC;QAEH,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;;YAC5B,MAAM,QAAQ,GAAG,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClG,IAAI,QAAQ,EAAE;gBACZ,MAAM,CAAC,GAAG,MAAA,CAAC,CAAC,MAAM,0CAAE,IAAI,CAAC;gBACzB,MAAM,YAAY,GAAI,CAAS,CAAC,mBAAmB,IAAK,CAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAC/F,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAES,sBAAsB,CAC9B,OAAiB,EACjB,cAA8B,EAC9B,KAAa,EACb,YAAoB;QAEpB,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAEjD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;;YAChB,MAAM,UAAU,GAAG,YAAY,IAAI,aAAa,CAAC,YAAY,CAAC,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC7G,MAAM,QAAQ,GAAG,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAEtF,IAAI,CAAC,UAAU,IAAI,CAAC,QAAQ,EAAE;gBAC5B,OAAO;aACR;YAED,MAAM,YAAY,GAAI,CAAS,CAAC,mBAAmB,IAAK,CAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAC/F,MAAA,CAAC,CAAC,WAAW,EAAE,0CAAE,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC3B,MAAM,QAAQ,GAAG,cAAc,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC9D,IAAI,QAAQ,EAAE;oBACZ,IAAI,QAAQ,EAAE;wBACZ,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;qBACvC;iBACF;qBAAM;oBACL,IAAI,UAAU,EAAE;wBACd,CAAC,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;qBAC9C;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB,CAAC,OAAiB,EAAE,cAA8B,EAAE,KAAa;QAC3F,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAEjD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;;YACnB,MAAM,QAAQ,GAAG,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEzF,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO;aACR;YAED,MAAM,YAAY,GAAI,IAAY,CAAC,mBAAmB,IAAK,IAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAErG,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC9B,MAAM,QAAQ,GAAG,cAAc,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAE9D,IAAI,QAAQ,EAAE;oBACZ,IAAI,QAAQ,EAAE;wBACZ,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;qBACvC;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB,CAAC,OAAiB,EAAE,KAAc,EAAE,YAAqB;QAC9E,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,OAAO;SACR;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAEvD,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;YAC7C,OAAO;SACR;QACD,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAEjD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,IAAI,EAAE;gBACR,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBACpC,MAAM,YAAY,GAAI,IAAY,CAAC,mBAAmB,IAAK,IAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBACrG,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;oBAC/B,IAAI,YAAY,IAAI,aAAa,CAAC,YAAY,CAAC,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;wBAChG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;4BACnB,CAAC,CAAC,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;wBAC5C,CAAC,CAAC,CAAC;qBACJ;oBAED,IAAI,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;wBAC3E,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;4BACnB,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;gCAC9B,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;6BACpC;wBACH,CAAC,CAAC,CAAC;qBACJ;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,OAAO;SACR;QAED,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE;YAClD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACzB,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEzD,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;YAC/B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACnB,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;gBAG/D,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,qBAAqB,CAAC,UAAkB,EAAE,YAA4B;QACpE,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,OAAO;SACR;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEzD,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;YAC/B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACnB,MAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;oBACjD,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;wBAC3B,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;wBAEtC,OAAO,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;gBAEzG,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF;AAnRD,kCAmRC","file":"interaction.js","sourcesContent":["import type { StateValue } from '../compile/mark';\nimport type { IMarkGraphic } from '../mark/interface';\nimport type { IInteraction } from './interface/common';\nimport type { ITrigger } from './interface/trigger';\n\nexport class Interaction implements IInteraction {\n  private _stateGraphicsByTrigger: Map<ITrigger, IMarkGraphic[]> = new Map();\n\n  private _disableTriggerEvent: boolean = false;\n\n  setDisableActiveEffect(disable: boolean) {\n    this._disableTriggerEvent = disable;\n  }\n\n  private _triggerMapByState: Map<StateValue, ITrigger[]> = new Map();\n  addTrigger(trigger: ITrigger) {\n    if (trigger) {\n      const startState = trigger.getStartState();\n      const resetState = trigger.getResetState();\n\n      [startState, resetState].forEach(state => {\n        if (state) {\n          const stateTrigger = this._triggerMapByState.get(state);\n\n          if (stateTrigger) {\n            !stateTrigger.includes(trigger) && stateTrigger.push(trigger);\n          } else {\n            this._triggerMapByState.set(state, [trigger]);\n          }\n        }\n      });\n    }\n  }\n\n  setStatedGraphics(trigger: ITrigger, graphics: IMarkGraphic[]) {\n    this._stateGraphicsByTrigger.set(trigger, graphics);\n  }\n\n  getStatedGraphics(trigger: ITrigger) {\n    return this._stateGraphicsByTrigger.get(trigger);\n  }\n\n  updateStates(\n    trigger: ITrigger,\n    newStatedGraphics: IMarkGraphic[],\n    prevStatedGraphics?: IMarkGraphic[],\n    state?: string,\n    reverseState?: string\n  ) {\n    if (this._disableTriggerEvent) {\n      return [];\n    }\n\n    if (!newStatedGraphics || !newStatedGraphics.length) {\n      return [];\n    }\n    if (state && reverseState) {\n      if (prevStatedGraphics && prevStatedGraphics.length) {\n        // toggle\n        this.toggleReverseStateOfGraphics(trigger, newStatedGraphics, prevStatedGraphics, reverseState);\n        this.toggleStateOfGraphics(trigger, newStatedGraphics, prevStatedGraphics, state);\n      } else {\n        // update all the elements\n        this.addBothStateOfGraphics(trigger, newStatedGraphics, state, reverseState);\n      }\n    } else if (state) {\n      if (prevStatedGraphics && prevStatedGraphics.length) {\n        this.toggleStateOfGraphics(trigger, newStatedGraphics, prevStatedGraphics, state);\n      } else {\n        this.addStateOfGraphics(trigger, newStatedGraphics, state);\n      }\n    }\n\n    return newStatedGraphics;\n  }\n\n  protected toggleReverseStateOfGraphics(\n    trigger: ITrigger,\n    newStatedGraphics: IMarkGraphic[],\n    prevStatedGraphics: IMarkGraphic[],\n    reverseState: string\n  ) {\n    const markIdByState = trigger.getMarkIdByState();\n\n    prevStatedGraphics.forEach(g => {\n      const hasReverse =\n        reverseState && markIdByState[reverseState] && markIdByState[reverseState].includes(g.context.markId);\n\n      if (hasReverse) {\n        const m = g.parent?.mark;\n        const hasAnimation = (m as any).hasAnimationByState && (m as any).hasAnimationByState('state');\n        g.addState(reverseState, true, hasAnimation);\n      }\n    });\n\n    newStatedGraphics.forEach(g => {\n      const hasReverse =\n        reverseState && markIdByState[reverseState] && markIdByState[reverseState].includes(g.context.markId);\n\n      if (hasReverse) {\n        const m = g.parent?.mark;\n        const hasAnimation = (m as any).hasAnimationByState && (m as any).hasAnimationByState('state');\n        g.removeState(reverseState, hasAnimation);\n      }\n    });\n  }\n\n  protected toggleStateOfGraphics(\n    trigger: ITrigger,\n    newStatedGraphics: IMarkGraphic[],\n    prevStatedGraphics: IMarkGraphic[],\n    state: string\n  ) {\n    const markIdByState = trigger.getMarkIdByState();\n\n    prevStatedGraphics.forEach(g => {\n      const hasState = state && markIdByState[state] && markIdByState[state].includes(g.context.markId);\n\n      if (hasState) {\n        const m = g.parent?.mark;\n        const hasAnimation = (m as any).hasAnimationByState && (m as any).hasAnimationByState('state');\n        g.removeState(state, hasAnimation);\n      }\n    });\n\n    newStatedGraphics.forEach(g => {\n      const hasState = state && markIdByState[state] && markIdByState[state].includes(g.context.markId);\n      if (hasState) {\n        const m = g.parent?.mark;\n        const hasAnimation = (m as any).hasAnimationByState && (m as any).hasAnimationByState('state');\n        g.addState(state, true, hasAnimation);\n      }\n    });\n  }\n\n  protected addBothStateOfGraphics(\n    trigger: ITrigger,\n    statedGraphics: IMarkGraphic[],\n    state: string,\n    reverseState: string\n  ) {\n    const marks = trigger.getMarks();\n    const markIdByState = trigger.getMarkIdByState();\n\n    marks.forEach(m => {\n      const hasReverse = reverseState && markIdByState[reverseState] && markIdByState[reverseState].includes(m.id);\n      const hasState = state && markIdByState[state] && markIdByState[state].includes(m.id);\n\n      if (!hasReverse && !hasState) {\n        return;\n      }\n\n      const hasAnimation = (m as any).hasAnimationByState && (m as any).hasAnimationByState('state');\n      m.getGraphics()?.forEach(g => {\n        const isStated = statedGraphics && statedGraphics.includes(g);\n        if (isStated) {\n          if (hasState) {\n            g.addState(state, true, hasAnimation);\n          }\n        } else {\n          if (hasReverse) {\n            g.addState(reverseState, true, hasAnimation);\n          }\n        }\n      });\n    });\n  }\n\n  protected addStateOfGraphics(trigger: ITrigger, statedGraphics: IMarkGraphic[], state: string) {\n    const marks = trigger.getMarks();\n    const markIdByState = trigger.getMarkIdByState();\n\n    marks.forEach(mark => {\n      const hasState = state && markIdByState[state] && markIdByState[state].includes(mark.id);\n\n      if (!hasState) {\n        return;\n      }\n\n      const hasAnimation = (mark as any).hasAnimationByState && (mark as any).hasAnimationByState('state');\n\n      mark.getGraphics()?.forEach(g => {\n        const isStated = statedGraphics && statedGraphics.includes(g);\n\n        if (isStated) {\n          if (hasState) {\n            g.addState(state, true, hasAnimation);\n          }\n        }\n      });\n    });\n  }\n\n  clearAllStatesOfTrigger(trigger: ITrigger, state?: string, reverseState?: string) {\n    if (this._disableTriggerEvent) {\n      return;\n    }\n\n    const statedGraphics = this.getStatedGraphics(trigger);\n\n    if (!statedGraphics || !statedGraphics.length) {\n      return;\n    }\n    const marks = trigger.getMarks();\n    const markIdByState = trigger.getMarkIdByState();\n\n    marks.forEach(mark => {\n      if (mark) {\n        const graphics = mark.getGraphics();\n        const hasAnimation = (mark as any).hasAnimationByState && (mark as any).hasAnimationByState('state');\n        if (graphics && graphics.length) {\n          if (reverseState && markIdByState[reverseState] && markIdByState[reverseState].includes(mark.id)) {\n            graphics.forEach(g => {\n              g.removeState(reverseState, hasAnimation);\n            });\n          }\n\n          if (state && markIdByState[state] && markIdByState[state].includes(mark.id)) {\n            graphics.forEach(g => {\n              if (statedGraphics.includes(g)) {\n                g.removeState(state, hasAnimation);\n              }\n            });\n          }\n        }\n      }\n    });\n  }\n\n  clearAllStates() {\n    if (this._disableTriggerEvent) {\n      return;\n    }\n\n    this._triggerMapByState.forEach((triggers, state) => {\n      triggers.forEach(trigger => {\n        this.clearAllStatesOfTrigger(trigger, state, trigger.getResetState());\n      });\n    });\n  }\n\n  clearByState(stateValue: string) {\n    if (this._disableTriggerEvent) {\n      return;\n    }\n\n    const triggers = this._triggerMapByState.get(stateValue);\n\n    if (triggers && triggers.length) {\n      triggers.forEach(t => {\n        this.clearAllStatesOfTrigger(t, stateValue, t.getResetState());\n\n        // 更新缓存\n        this.setStatedGraphics(t, []);\n      });\n    }\n  }\n\n  updateStateOfGraphics(stateValue: string, markGraphics: IMarkGraphic[]) {\n    if (this._disableTriggerEvent) {\n      return;\n    }\n    const triggers = this._triggerMapByState.get(stateValue);\n\n    if (triggers && triggers.length) {\n      triggers.forEach(t => {\n        const newStatedGraphics = markGraphics.filter(mg => {\n          return t.getMarks().some(m => {\n            const graphics = m && m.getGraphics();\n\n            return graphics && graphics.includes(mg);\n          });\n        });\n\n        this.updateStates(t, newStatedGraphics, this.getStatedGraphics(t), t.getStartState(), t.getResetState());\n\n        this.setStatedGraphics(t, newStatedGraphics);\n      });\n    }\n  }\n}\n"]}