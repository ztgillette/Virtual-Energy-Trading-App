{"version":3,"sources":["../src/data/initialize.ts"],"names":[],"mappings":"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","file":"initialize.js","sourcesContent":["import { warn } from '../util/debug';\nimport { isString, cloneDeep } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { DataSet, DataView } from '@visactor/vdataset';\nimport type { IDataViewOptions, IFields, ITransformOptions } from '@visactor/vdataset';\nimport type { IDataValues, SheetParseOptions } from '../typings/spec/common';\nimport { registerDataSetInstanceTransform } from './register';\nimport { copyDataView } from './transforms/copy-data-view';\nimport type { IParserOptions } from '@visactor/vdataset';\n\nexport function initializeData() {\n  // todo\n}\n\nexport function initCSVData() {\n  // todo\n}\n\nexport function initData() {\n  // todo\n}\n\nexport function initFoldData() {\n  // todo\n}\n\nexport function dataViewFromDataView(rawData: DataView, dataSet?: DataSet, op?: IDataViewOptions) {\n  dataSet = dataSet instanceof DataSet ? dataSet : rawData.dataSet;\n  registerDataSetInstanceTransform(dataSet, 'copyDataView', copyDataView);\n  const viewData = new DataView(dataSet, op);\n  viewData.parse([rawData], {\n    type: 'dataview'\n  });\n  viewData.transform({\n    type: 'copyDataView',\n    level: TransformLevel.copyDataView\n  });\n  return viewData;\n}\n\n/**\n * 将数据实例化为 DataView\n * @param data 数据\n * @param dataSet 数据集\n * @returns\n */\nexport function dataToDataView(data: DataView | IDataValues, dataSet: DataSet, sourceDataViews: DataView[] = []) {\n  if (data instanceof DataView) {\n    return data;\n  }\n\n  const { id, values = [], fromDataIndex, fromDataId, transforms = [] } = data;\n  const parser = (data.parser ? cloneDeep(data.parser) : { clone: true }) as IParserOptions;\n  const fields = cloneDeep(data.fields);\n  // set parser.clone default value to true\n  parser.clone = !(parser.clone === false);\n  let dataView: DataView;\n  const existDataView = sourceDataViews.find(dv => dv.name === id);\n  if (existDataView) {\n    dataView = existDataView;\n  } else {\n    const initOption: IDataViewOptions = { name: id };\n    // fields 支持在dataView初始化参数中传入\n    if (fields) {\n      initOption.fields = fields as IFields;\n    }\n    dataView = new DataView(dataSet, initOption);\n    if (typeof fromDataId === 'string') {\n      // 使用id查找上游dataview\n      const fromDataView = sourceDataViews.find(dv => dv.name === fromDataId);\n      if (!fromDataView) {\n        warn(`no data matches fromDataId ${fromDataId}`);\n        return null;\n      }\n\n      dataView.parse([fromDataView], {\n        type: 'dataview'\n      });\n      dataView.transform({\n        type: 'copyDataView'\n      });\n    } else if (typeof fromDataIndex === 'number') {\n      // 使用index查找上游dataview\n      const fromDataView = sourceDataViews[fromDataIndex];\n      if (!fromDataView) {\n        warn(`no data matches fromDataIndex ${fromDataIndex}`);\n        return null;\n      }\n\n      dataView.parse([fromDataView], {\n        type: 'dataview'\n      });\n      dataView.transform({\n        type: 'copyDataView'\n      });\n    } else if (Array.isArray(values)) {\n      dataView.parse(values, parser);\n    } else if (isString(values) && (!parser || ['csv', 'dsv', 'tsv'].includes((parser as SheetParseOptions).type))) {\n      // 内置 csv parser\n      dataView.parse(values, (parser as SheetParseOptions) ?? { type: 'csv' });\n    } else {\n      // 如果 values 不符合要求，则默认设置为 []，同时打印错误信息\n      dataView.parse([]);\n      warn('values should be array');\n    }\n    // 处理transform\n    if (transforms && transforms.length) {\n      transforms.forEach((transform: ITransformOptions) => {\n        if (dataSet.getTransform(transform.type)) {\n          dataView.transform(transform);\n        }\n      });\n    }\n  }\n\n  return dataView;\n}\n\nexport function updateDataViewInData(dataView: DataView, data: IDataValues, forceMerge: boolean) {\n  if (!dataView) {\n    return;\n  }\n  if (data.fields) {\n    dataView.setFields(data.fields as any, forceMerge);\n  }\n  dataView.parseNewData(data.values, data.parser as any);\n}\n\nexport enum TransformLevel {\n  copyDataView = -10,\n\n  treemapFilter = -8,\n  treemapFlatten = -7,\n\n  dotObjFlat = -7,\n  linkDotInfo = -7,\n  sankeyLayout = -7,\n\n  dataZoomFilter = -6,\n  legendFilter = -5\n}\n"]}