{"version":3,"sources":["../src/data/transforms/legend-data/continuous/continuous.ts"],"names":[],"mappings":"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","file":"continuous.js","sourcesContent":["import { isEmpty, isValidNumber } from '@visactor/vutils';\nimport type { ISeries } from '../../../../series/interface';\nimport type { IContinuousLegendDataMakeOption, IContinuousLegendFilterOption } from './interface';\nimport { filterHierarchyDataByRange, isHierarchyItem } from '../../../../util';\n\n// 获取数值范围\nexport const continuousLegendDataMake = (data: Array<ISeries>, op: IContinuousLegendDataMakeOption) => {\n  const { series, field, scale } = op;\n  const datumField = field();\n  if (field && datumField) {\n    let min: number = Infinity;\n    let max: number = -Infinity;\n    series().forEach(s => {\n      const statisticData = s.getRawDataStatisticsByField(datumField, true);\n      const seriesMin = statisticData?.min;\n      const seriesMax = statisticData?.max;\n      if (isValidNumber(seriesMin)) {\n        min = Math.min(seriesMin, min);\n      }\n      if (isValidNumber(seriesMax)) {\n        max = Math.max(seriesMax, max);\n      }\n    });\n    return [min, max];\n  }\n  if (scale) {\n    const _scale = scale();\n    if (!_scale) {\n      return [];\n    }\n    return _scale.domain();\n  }\n  return [];\n};\n\n// 连续数据过滤\nexport const continuousLegendFilter = (data: Array<any>, op: IContinuousLegendFilterOption) => {\n  const { selected, field, data: legendData, isHierarchyData, customFilter } = op;\n  const selectedRange = selected();\n  const datumField = field();\n  const dataRange = legendData();\n  const isHierarchy = isHierarchyData\n    ? isHierarchyData\n    : (data: Array<any>) => data && data.some(d => d && isHierarchyItem(d));\n\n  // 如果数值范围相等，就不进行返回 data，不需要进行过滤\n  if (selectedRange === dataRange) {\n    return data;\n  }\n  if (datumField && !isEmpty(selectedRange)) {\n    const [min, max] = selectedRange;\n\n    if (customFilter) {\n      return customFilter(data, selectedRange, datumField);\n    } else if (isHierarchy(data)) {\n      return filterHierarchyDataByRange(data, +min, +max, datumField);\n    }\n    return data.filter(datum => {\n      return datum[datumField] >= min && datum[datumField] <= max;\n    });\n  }\n\n  return data;\n};\n"]}