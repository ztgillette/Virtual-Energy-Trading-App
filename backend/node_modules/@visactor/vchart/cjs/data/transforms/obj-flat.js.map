{"version":3,"sources":["../src/data/transforms/obj-flat.ts"],"names":[],"mappings":";;;AACA,8CAA6C;AAC7C,8CAA2E;AAC3E,6CAA2C;AAIpC,MAAM,OAAO,GAAG,CAAC,IAAqB,EAAE,EAAU,EAAE,EAAE;;IAE3D,MAAM,WAAW,GAAG,CAAA,MAAA,IAAI,CAAC,CAAC,CAAC,0CAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;IAC1E,MAAM,MAAM,GAAU,EAAE,CAAC;IACzB,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,WAAW,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;QACjC,MAAM,UAAU,GAAQ,EAAE,CAAC;QAC3B,IAAI,OAAe,CAAC;QAEpB,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;YACvB,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,aAAM,CAAC,EAAE;gBACzC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7B,OAAO,GAAG,IAAA,gBAAO,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;aAC3E;SACF;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;QACzB,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,CAAC,CAAM,EAAE,CAAS,EAAE,EAAE;YACpC,MAAM,CAAC,IAAI,CACT,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE;gBAC/B,CAAC,yBAAkB,CAAC,EAAE,KAAK;gBAC3B,CAAC,uBAAgB,CAAC,EAAE,GAAG,OAAO,IAAI,CAAC,EAAE;aACtC,CAAC,CACH,CAAC;YAEF,KAAK,EAAE,CAAC;QACV,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AA7BW,QAAA,OAAO,WA6BlB","file":"obj-flat.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport { PREFIX } from '../../constant/base';\nimport { DEFAULT_DATA_INDEX, DEFAULT_DATA_KEY } from '../../constant/data';\nimport { isValid } from '@visactor/vutils';\n/**\n * @description 针对某个数组进行数据展开，将数组中的每个元素拆出来加入数据集\n */\nexport const objFlat = (data: Array<DataView>, op: string) => {\n  // 数据处理\n  const dataCollect = data[0]?.latestData ? data[0].latestData : data || [];\n  const result: any[] = [];\n  let index = 0;\n  dataCollect.forEach((datum: any) => {\n    const dataKeyObj: any = {};\n    let dataKey: string;\n\n    for (const key in datum) {\n      if (key !== op && !key.startsWith(PREFIX)) {\n        dataKeyObj[key] = datum[key];\n        dataKey = isValid(dataKey) ? `${dataKey}_${datum[key]}` : `${datum[key]}`;\n      }\n    }\n\n    const dataOp = datum[op];\n    dataOp?.forEach((d: any, i: number) => {\n      result.push(\n        Object.assign({}, dataKeyObj, d, {\n          [DEFAULT_DATA_INDEX]: index,\n          [DEFAULT_DATA_KEY]: `${dataKey}_${i}`\n        })\n      );\n\n      index++;\n    });\n  });\n  return result;\n};\n"]}