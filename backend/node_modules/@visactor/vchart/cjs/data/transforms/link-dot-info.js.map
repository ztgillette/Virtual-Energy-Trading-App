{"version":3,"sources":["../src/data/transforms/link-dot-info.ts"],"names":[],"mappings":";;;AAiBO,MAAM,WAAW,GAAG,CAAC,IAAqB,EAAE,EAAmB,EAAE,EAAE;IACxE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;IAClD,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,EAAE,CAAC;IACxD,MAAM,WAAW,GAAG,QAAQ,EAAE,CAAC;IAC/B,MAAM,UAAU,GAAG,OAAO,EAAE,CAAC;IAC7B,MAAM,eAAe,GAAG,EAAE,CAAC;IAG3B,UAAU,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;QAChC,MAAM,QAAQ,GAAQ,EAAE,CAAC;QACzB,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;YACvB,IAAI,GAAG,KAAK,OAAO,EAAE;gBACnB,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;aAC5B;SACF;QACD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9B,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YACzB,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAGH,WAAW,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;;QACjC,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,KAAK,CAAC,SAAS,CAAC,CAAC,0CAAG,MAAM,CAAC,CAAC;QAC7E,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,KAAK,CAAC,SAAS,CAAC,CAAC,0CAAG,MAAM,CAAC,CAAC;QAC7E,KAAK,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,KAAK,CAAC,OAAO,CAAC,CAAC,0CAAG,MAAM,CAAC,CAAC;QACzE,KAAK,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,KAAK,CAAC,OAAO,CAAC,CAAC,0CAAG,MAAM,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA7BW,QAAA,WAAW,eA6BtB","file":"link-dot-info.js","sourcesContent":["import type { Datum } from '../../typings';\n\nexport interface ILinkDotInfoOpt {\n  infoKey: string;\n  fields: () => {\n    fromField: string;\n    toField: string;\n    xField: string | string[];\n    yField: string | string[];\n  };\n  linkData: () => Datum[];\n  dotData: () => Datum[];\n}\n\n/**\n * @description 根据link数据以及对应的dot数据生成node name和node data的哈希表，并将node data的信息放进来\n */\nexport const linkDotInfo = (data: Array<DataView>, op: ILinkDotInfoOpt) => {\n  const { infoKey, fields, linkData, dotData } = op;\n  const { fromField, toField, xField, yField } = fields();\n  const dataLinkObj = linkData();\n  const dataDotObj = dotData();\n  const dataLinkDotHash = {};\n\n  // 遍历dot数据，生成哈希表\n  dataDotObj.forEach((datum: any) => {\n    const dataCopy: any = {};\n    for (const key in datum) {\n      if (key !== infoKey) {\n        dataCopy[key] = datum[key];\n      }\n    }\n    const dataOp = datum[infoKey];\n    dataOp?.forEach((d: any) => {\n      dataLinkDotHash[d.node_name] = Object.assign({}, dataCopy, d);\n    });\n  });\n\n  // 将起始点的node data加入进来\n  dataLinkObj.forEach((datum: any) => {\n    datum[fromField + '_xField'] = dataLinkDotHash?.[datum[fromField]]?.[xField];\n    datum[fromField + '_yField'] = dataLinkDotHash?.[datum[fromField]]?.[yField];\n    datum[toField + '_xField'] = dataLinkDotHash?.[datum[toField]]?.[xField];\n    datum[toField + '_yField'] = dataLinkDotHash?.[datum[toField]]?.[yField];\n  });\n  return dataLinkObj;\n};\n"]}