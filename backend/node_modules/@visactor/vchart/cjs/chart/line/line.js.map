{"version":3,"sources":["../src/chart/line/line.ts"],"names":[],"mappings":";;;AAAA,sDAA6D;AAG7D,iDAA4D;AAC5D,gDAA6C;AAC7C,yDAA8D;AAC9D,kCAAoC;AACpC,oCAA2C;AAC3C,6CAAyC;AACzC,gFAAoF;AACpF,+CAA6D;AAC7D,2EAAiH;AACjH,yEAAsF;AACtF,2FAAwG;AACxG,iFAA8F;AAC9F,mFAAgG;AAEhG,MAAa,SAAoC,SAAQ,gBAAY;IAArE;;QAIW,2BAAsB,GAAG,2CAAwB,CAAC;QAClD,SAAI,UAA8B;QAClC,eAAU,GAAW,qBAAc,CAAC,IAAI,CAAC;IAQpD,CAAC;IANW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,qCAAyB,CAAC;QAE/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,mCAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,qCAAyB,CAAC;IACvE,CAAC;;AAbH,8BAcC;AAbiB,cAAI,UAA8B;AAClC,oBAAU,GAAW,qBAAc,CAAC,IAAI,CAAC;AACzC,gCAAsB,GAAG,2CAAwB,CAAC;AAapE,IAAA,cAAK,EAAC,SAAS,EAAE,uBAAe,CAAC,CAAC;AAE3B,MAAM,iBAAiB,GAAG,GAAG,EAAE;IACpC,IAAA,qDAAiC,GAAE,CAAC;IACpC,IAAA,2CAA4B,GAAE,CAAC;IAC/B,IAAA,6CAA6B,GAAE,CAAC;IAChC,IAAA,gCAAuB,GAAE,CAAC;IAC1B,IAAA,wCAAsB,GAAE,CAAC;IACzB,IAAA,yBAAkB,GAAE,CAAC;IACrB,iBAAO,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACnD,CAAC,CAAC;AARW,QAAA,iBAAiB,qBAQ5B","file":"line.js","sourcesContent":["import { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport type { ILineChartSpec } from './interface';\nimport { registerLineSeries } from '../../series/line/line';\nimport { Factory } from '../../core/factory';\nimport { LineChartSpecTransformer } from './line-transformer';\nimport { BaseChart } from '../base';\nimport { StackChartMixin } from '../stack';\nimport { mixin } from '@visactor/vutils';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class LineChart<T extends ILineChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.line;\n  static readonly seriesType: string = SeriesTypeEnum.line;\n  static readonly transformerConstructor = LineChartSpecTransformer;\n  readonly transformerConstructor = LineChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.line;\n  readonly seriesType: string = SeriesTypeEnum.line;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nmixin(LineChart, StackChartMixin);\n\nexport const registerLineChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  registerLineSeries();\n  Factory.registerChart(LineChart.type, LineChart);\n};\n"]}