{"version":3,"sources":["../src/chart/mosaic/mosaic.ts"],"names":[],"mappings":";;;AACA,sDAA6D;AAE7D,gDAA6C;AAC7C,6DAAkE;AAClE,kCAAoC;AACpC,uDAAkE;AAClE,oCAAiC;AAGjC,0CAAgE;AAChE,mEAA+D;AAC/D,kDAAuE;AACvE,gFAAoF;AACpF,+CAA6D;AAC7D,2EAAiH;AACjH,yEAAsF;AAEtF,2FAAwG;AACxG,iFAA8F;AAC9F,mFAAgG;AAEhG,MAAa,WAA2D,SAAQ,gBAAY;IAA5F;;QAIW,2BAAsB,GAAG,+CAA0B,CAAC;QACpD,SAAI,YAAgC;QACpC,eAAU,GAAW,qBAAc,CAAC,MAAM,CAAC;QAgBpD,2BAAsB,GAAG,CAAC,MAAe,EAAE,eAAmD,EAAE,EAAE;YAChG,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAC7B,MAAM,SAAS,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC;gBACnC,MAAM,UAAU,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;gBACrC,MAAM,eAAe,GAAG,CAAC,CAAC,kBAAkB,EAAE,CAAC;gBAC/C,IAAI,SAAS,IAAI,eAAe,EAAE;oBAChC,IAAA,uBAAgB,EAAC,eAAe,CAAC,UAAU,CAAoB,EAAE,eAAe,CAAC,CAAC;oBAClF,IAAA,kBAAW,EAAC,CAAC,EAAE,eAAe,CAAC,UAAU,CAAoB,CAAC,CAAC;iBAChE;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IAQJ,CAAC;IA/BW,WAAW;QACnB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAA,2CAAgC,EAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,wBAAU,CAAC,CAAC;SAC3E;IACH,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,IAAI,EAAE;YAC5B,gBAAgB,EAAE,IAAI,CAAC,sBAAsB;SAC9C,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC;IAcS,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,qCAAyB,CAAC;QAE/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,mCAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,qCAAyB,CAAC;IACvE,CAAC;;AAvCH,kCAwCC;AAvCiB,gBAAI,YAAgC;AACpC,sBAAU,GAAW,qBAAc,CAAC,MAAM,CAAC;AAC3C,kCAAsB,GAAG,+CAA0B,CAAC;AAuC/D,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,IAAA,qDAAiC,GAAE,CAAC;IACpC,IAAA,2CAA4B,GAAE,CAAC;IAC/B,IAAA,6CAA6B,GAAE,CAAC;IAChC,IAAA,gCAAuB,GAAE,CAAC;IAC1B,IAAA,wCAAsB,GAAE,CAAC;IACzB,IAAA,6BAAoB,GAAE,CAAC;IACvB,iBAAO,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACvD,CAAC,CAAC;AARW,QAAA,mBAAmB,uBAQ9B","file":"mosaic.js","sourcesContent":["import { ChartTypeEnum } from '../interface/type';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport type { IMosaicChartSpec } from './interface';\nimport { Factory } from '../../core/factory';\nimport { MosaicChartSpecTransformer } from './mosaic-transformer';\nimport { BaseChart } from '../base';\nimport { registerMosaicSeries } from '../../series/mosaic/mosaic';\nimport { Stack } from '../stack';\nimport type { IRegion } from '../../region';\nimport type { IStackCacheNode, IStackCacheRoot } from '../../util/data';\nimport { stackMosaic, stackMosaicTotal } from '../../util/data';\nimport { stackSplit } from '../../data/transforms/stack-split';\nimport { registerDataSetInstanceTransform } from '../../data/register';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { TooltipType } from '../../component/tooltip/constant';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class MosaicChart<T extends IMosaicChartSpec = IMosaicChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.mosaic;\n  static readonly seriesType: string = SeriesTypeEnum.mosaic;\n  static readonly transformerConstructor = MosaicChartSpecTransformer;\n  readonly transformerConstructor = MosaicChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.mosaic;\n  readonly seriesType: string = SeriesTypeEnum.mosaic;\n  protected _stack: Stack;\n\n  protected _beforeInit() {\n    if (this._dataSet) {\n      registerDataSetInstanceTransform(this._dataSet, 'stackSplit', stackSplit);\n    }\n  }\n\n  protected _initStack() {\n    this._stack = new Stack(this, {\n      afterStackRegion: this.handleAfterStackRegion\n    });\n    this._stack.init();\n  }\n\n  handleAfterStackRegion = (region: IRegion, stackValueGroup: { [key: string]: IStackCacheRoot }) => {\n    region.getSeries().forEach(s => {\n      const stackData = s.getStackData();\n      const stackValue = s.getStackValue();\n      const stackValueField = s.getStackValueField(); // yField\n      if (stackData && stackValueField) {\n        stackMosaicTotal(stackValueGroup[stackValue] as IStackCacheNode, stackValueField);\n        stackMosaic(s, stackValueGroup[stackValue] as IStackCacheNode);\n      }\n    });\n  };\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nexport const registerMosaicChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  registerMosaicSeries();\n  Factory.registerChart(MosaicChart.type, MosaicChart);\n};\n"]}