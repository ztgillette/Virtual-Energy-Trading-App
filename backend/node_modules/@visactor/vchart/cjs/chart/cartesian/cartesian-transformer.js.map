{"version":3,"sources":["../src/chart/cartesian/cartesian-transformer.ts"],"names":[],"mappings":"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","file":"cartesian-transformer.js","sourcesContent":["import type { ICartesianAxisSpec } from '../../component';\nimport type { ISeriesSpec } from '../../typings';\nimport { get, isNil } from '../../util';\nimport { BaseChartSpecTransformer } from '../base';\nimport { getTrimPaddingConfig } from '../util';\nimport type { ICartesianChartSpec } from './interface';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport class CartesianChartSpecTransformer<T extends ICartesianChartSpec> extends BaseChartSpecTransformer<T> {\n  protected needAxes(): boolean {\n    return true;\n  }\n\n  protected _isValidSeries(type: string): boolean {\n    return this.seriesType ? type === this.seriesType : true;\n  }\n\n  protected _getDefaultSeriesSpec(spec: any, pickKeys?: string[]): any {\n    const series: any = super._getDefaultSeriesSpec(\n      spec,\n      [\n        'xField',\n        'yField',\n        'zField',\n        'direction',\n        'stack', // 是否堆叠\n        'percent', // 是否百分比堆叠\n        'stackOffsetSilhouette', // 是否围绕中心轴偏移轮廓,\n        'totalLabel',\n        'sortDataByAxis'\n      ],\n      pickKeys\n    );\n\n    return series;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n    super.transformSeriesSpec(spec);\n\n    this._transformAxisSpec(spec);\n  }\n\n  protected _setDefaultXAxisSpec(spec: T): ICartesianAxisSpec {\n    return {\n      orient: 'bottom'\n    } as ICartesianAxisSpec;\n  }\n\n  protected _setDefaultYAxisSpec(spec: T): ICartesianAxisSpec {\n    return {\n      orient: 'left'\n    } as ICartesianAxisSpec;\n  }\n\n  protected _setDefaultZAxisSpec(spec: T): ICartesianAxisSpec {\n    return {\n      orient: 'z'\n    } as ICartesianAxisSpec;\n  }\n\n  protected _transformAxisSpec(spec: T) {\n    if (this.needAxes()) {\n      if (!spec.axes) {\n        spec.axes = [];\n      }\n      const haxAxes = { x: false, y: false, z: false };\n      spec.axes.forEach((axis: ICartesianAxisSpec) => {\n        const { orient } = axis;\n        let defaultSpec: ICartesianAxisSpec = null;\n        if (orient === 'top' || orient === 'bottom') {\n          haxAxes.x = true;\n          defaultSpec = this._setDefaultXAxisSpec(spec);\n        }\n        if (orient === 'left' || orient === 'right') {\n          haxAxes.y = true;\n\n          defaultSpec = this._setDefaultYAxisSpec(spec);\n        }\n        if (orient === 'z') {\n          haxAxes.z = true;\n\n          defaultSpec = this._setDefaultZAxisSpec(spec);\n        }\n\n        if (defaultSpec) {\n          Object.keys(defaultSpec).forEach(key => {\n            if (isNil(axis[key])) {\n              axis[key] = defaultSpec[key];\n            }\n          });\n        }\n        if (get(axis, 'trimPadding')) {\n          mergeSpec(axis, getTrimPaddingConfig(this.type, spec));\n        }\n      });\n      if (!haxAxes.x) {\n        spec.axes.push(this._setDefaultXAxisSpec(spec));\n      }\n      if (!haxAxes.y) {\n        spec.axes.push(this._setDefaultYAxisSpec(spec));\n      }\n      // 如果有zField字段，但是没有配置z轴，那么添加一个z轴\n      if ((spec as any).zField && !haxAxes.z) {\n        spec.axes.push(this._setDefaultZAxisSpec(spec));\n      }\n    }\n  }\n}\n"]}