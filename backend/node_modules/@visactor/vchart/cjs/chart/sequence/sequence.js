"use strict";

var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
    if (null != s && "function" == typeof Object.getOwnPropertySymbols) {
        var i = 0;
        for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
    }
    return t;
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerSequenceChart = exports.SequenceChart = void 0;

const link_1 = require("../../series/link/link"), dot_1 = require("../../series/dot/dot"), base_chart_1 = require("../base/base-chart"), factory_1 = require("../../core/factory"), type_1 = require("../../series/interface/type"), sequence_transformer_1 = require("./sequence-transformer"), cartesian_1 = require("../../component/axis/cartesian"), mark_tooltip_1 = require("../../component/tooltip/processor/mark-tooltip"), dimension_tooltip_1 = require("../../component/tooltip/processor/dimension-tooltip");

class SequenceChart extends base_chart_1.BaseChart {
    constructor() {
        super(...arguments), this.transformerConstructor = sequence_transformer_1.SequenceChartSpecTransformer, 
        this.type = "sequence";
    }
    _createSeries(constructor, specInfo) {
        if (!constructor) return;
        const {spec: spec} = specInfo, others = __rest(specInfo, [ "spec" ]);
        let region;
        if (spec.type === type_1.SeriesTypeEnum.link && (spec.dotSeriesSpec = this._spec.series[spec.dotSeriesIndex]), 
        spec.regionId && (region = this.getRegionsInUserId(spec.regionId)), region || (region = this.getRegionsInIndex(spec.regionIndex ? [ spec.regionIndex ] : void 0)[0]), 
        !region) return;
        const series = new constructor(spec, Object.assign(Object.assign(Object.assign({}, this._modelOption), others), {
            region: region,
            specKey: "series",
            globalScale: this._globalScale
        }));
        series && (series.created(), this._series.push(series), region.addSeries(series));
    }
}

exports.SequenceChart = SequenceChart, SequenceChart.type = "sequence", SequenceChart.transformerConstructor = sequence_transformer_1.SequenceChartSpecTransformer;

const registerSequenceChart = () => {
    (0, dimension_tooltip_1.registerDimensionTooltipProcessor)(), (0, mark_tooltip_1.registerMarkTooltipProcessor)(), 
    (0, dot_1.registerDotSeries)(), (0, link_1.registerLinkSeries)(), (0, cartesian_1.registerCartesianBandAxis)(), 
    (0, cartesian_1.registerCartesianLinearAxis)(), factory_1.Factory.registerChart(SequenceChart.type, SequenceChart);
};

exports.registerSequenceChart = registerSequenceChart;
//# sourceMappingURL=sequence.js.map
