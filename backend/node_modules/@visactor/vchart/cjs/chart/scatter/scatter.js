"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerScatterChart = exports.ScatterChart = void 0;

const scatter_1 = require("../../series/scatter/scatter"), type_1 = require("../../series/interface/type"), factory_1 = require("../../core/factory"), scatter_transformer_1 = require("./scatter-transformer"), base_1 = require("../base"), stack_1 = require("../stack"), vutils_1 = require("@visactor/vutils"), dimension_hover_1 = require("../../interaction/triggers/dimension-hover"), events_1 = require("../../event/events"), cartesian_1 = require("../../event/events/dimension/util/cartesian"), cartesian_2 = require("../../component/crosshair/utils/cartesian"), dimension_tooltip_1 = require("../../component/tooltip/processor/dimension-tooltip"), mark_tooltip_1 = require("../../component/tooltip/processor/mark-tooltip");

class ScatterChart extends base_1.BaseChart {
    constructor() {
        super(...arguments), this.transformerConstructor = scatter_transformer_1.ScatterChartSpecTransformer, 
        this.type = "scatter", this.seriesType = type_1.SeriesTypeEnum.scatter;
    }
    _setModelOption() {
        this._modelOption.getDimensionInfo = cartesian_1.getCartesianDimensionInfo, this._modelOption.getDimensionInfoByValue = cartesian_1.getDimensionInfoByValue, 
        this._modelOption.getRectByDimensionData = cartesian_2.getCartesianCrosshairRect;
    }
}

exports.ScatterChart = ScatterChart, ScatterChart.type = "scatter", ScatterChart.seriesType = type_1.SeriesTypeEnum.scatter, 
ScatterChart.transformerConstructor = scatter_transformer_1.ScatterChartSpecTransformer, 
(0, vutils_1.mixin)(ScatterChart, stack_1.StackChartMixin);

const registerScatterChart = () => {
    (0, dimension_tooltip_1.registerDimensionTooltipProcessor)(), (0, mark_tooltip_1.registerMarkTooltipProcessor)(), 
    (0, events_1.registerDimensionEvents)(), (0, dimension_hover_1.registerDimensionHover)(), 
    (0, scatter_1.registerScatterSeries)(), factory_1.Factory.registerChart(ScatterChart.type, ScatterChart);
};

exports.registerScatterChart = registerScatterChart;
//# sourceMappingURL=scatter.js.map
