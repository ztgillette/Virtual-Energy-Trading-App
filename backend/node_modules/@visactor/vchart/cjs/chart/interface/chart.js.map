{"version":3,"sources":["../src/chart/interface/chart.ts"],"names":[],"mappings":"","file":"chart.js","sourcesContent":["import type { IEvent } from '../../event/interface';\nimport type { LayoutCallBack } from '../../layout/interface';\nimport type { IParserOptions } from '@visactor/vdataset';\nimport type { IComponent, IComponentConstructor } from '../../component/interface';\nimport type { IMark } from '../../mark/interface';\nimport type { IModel, IModelConstructor, IModelOption, IModelSpecInfo, IUpdateSpecResult } from '../../model/interface';\nimport type { IRegion, IRegionConstructor } from '../../region/interface';\nimport type { ISeries, ISeriesConstructor } from '../../series/interface';\nimport type {\n  IChartEvaluateOption,\n  IChartLayoutOption,\n  IChartOption,\n  IChartRenderOption,\n  IChartSpecInfo,\n  IChartSpecTransformerOption\n} from './common';\nimport type { IBoundsLike, IPadding, Maybe } from '@visactor/vutils';\nimport type { ICompilable } from '../../compile/interface';\nimport type {\n  IRegionQuerier,\n  MaybeArray,\n  Datum,\n  IMarkStateSpec,\n  StringOrNumber,\n  IShowTooltipOption,\n  IDataValues,\n  ILayoutRect,\n  IData\n} from '../../typings';\n// eslint-disable-next-line no-duplicate-imports\nimport type { DataView } from '@visactor/vdataset';\nimport type { IGlobalScale } from '../../scale/interface';\nimport type { IMorphConfig } from '../../animation/spec';\nimport type { IMarkGraphic } from '../../mark/interface/common';\n\nexport type DimensionIndexOption = {\n  filter?: (cmp: IComponent) => boolean;\n  tooltip?: boolean;\n  showTooltipOption?: IShowTooltipOption;\n  crosshair?: boolean;\n};\n\nexport interface IChartData {\n  parseData: (dataSpec: IData) => void;\n  updateData: (dataSpec: IData, fullUp?: boolean, forceMerge?: boolean) => boolean;\n  getSeriesData: (id: StringOrNumber | undefined, index: number | undefined) => DataView | undefined;\n}\n\nexport interface IChart extends ICompilable {\n  padding: IPadding;\n\n  readonly type: string;\n  readonly chartData: IChartData;\n  readonly transformerConstructor: new (option: IChartSpecTransformerOption) => IChartSpecTransformer;\n\n  getSpec: () => any;\n  setSpec: (s: any) => void;\n\n  // data flow\n  reDataFlow: () => void;\n\n  setCanvasRect: (width: number, height: number) => void;\n  getCanvasRect: () => ILayoutRect;\n  getViewRect: () => ILayoutRect;\n\n  getOption: () => IChartOption;\n\n  getModelOption: () => IModelOption;\n  /**\n   * 图表更新的时候按需调用\n   * @since 1.11.0\n   */\n\n  /** event */\n  getEvent: () => IEvent;\n\n  /**\n   * @since 1.10.4\n   */\n  getGlobalScale: () => IGlobalScale;\n\n  /** layout */\n  setLayout: (layout: LayoutCallBack) => void;\n  layout: () => void;\n  getLayoutTag: () => boolean;\n  setLayoutTag: (tag: boolean, morphConfig?: IMorphConfig, renderNextTick?: boolean) => boolean;\n  resetLayoutItemTag: () => void;\n\n  // 使用parse前的原始数据结构更新数据\n  updateData: (id: StringOrNumber, data: unknown, updateGlobalScale?: boolean, options?: IParserOptions) => void;\n  // 使用 IData 更新数据\n  updateFullData: (data: IDataValues | IDataValues[]) => void;\n  // update scale domain which in GlobalScale\n  updateGlobalScaleDomain: () => void;\n  //生命周期\n  created: (transformer: Maybe<IChartSpecTransformer>) => void;\n  init: () => void;\n  onLayoutStart: (ctx: IChartLayoutOption) => void;\n  onLayoutEnd: (ctx: IChartLayoutOption) => void;\n  onEvaluateEnd: (ctx: IChartEvaluateOption) => void;\n  onResize: (width: number, height: number, reRender: boolean) => void;\n  onLayout: () => void;\n  onBeforeRender: () => void;\n\n  /**\n   * 图表更新的时候按需调用\n   * @since 1.11.0\n   */\n  reInit: () => void;\n\n  // series\n  getAllSeries: () => ISeries[];\n\n  // region\n  getRegionsInIndex: (index?: number[]) => IRegion[];\n  getRegionsInIds: (ids: number[]) => IRegion[];\n  getAllRegions: () => IRegion[];\n  getRegionsInUserIdOrIndex: (user_ids?: StringOrNumber[], index?: number[]) => IRegion[];\n  getRegionsInQuerier: (query: MaybeArray<IRegionQuerier>) => IRegion[];\n\n  // series\n  getSeriesInIndex: (index?: number[]) => ISeries[];\n  getSeriesInIds: (ids?: number[]) => ISeries[];\n  getSeriesInUserIdOrIndex: (user_ids?: StringOrNumber[], index?: number[]) => ISeries[];\n  getSeriesInUserId: (userId: StringOrNumber) => ISeries | undefined;\n\n  // component\n  getComponentByIndex: (key: string, index: number) => IComponent | undefined;\n  getComponentByUserId: (userId: StringOrNumber) => IComponent | undefined;\n  getComponentsByKey: (key: string) => IComponent[];\n  getComponentsByType: (type: string) => IComponent[];\n  getAllComponents: () => IComponent[];\n\n  // model\n  getModelById: (id: number) => IModel | undefined;\n  getModelByUserId: (userId: StringOrNumber) => IModel | undefined;\n  getModelInFilter: (\n    filter: string | { type: string; index: number } | ((model: IModel) => boolean)\n  ) => IModel | undefined;\n  getAllModels: () => IModel[];\n\n  // mark\n  getMarkById: (id: number) => IMark | undefined;\n  getAllMarks: () => IMark[];\n  getMarkByUserName: (name: string) => IMark[];\n\n  // spec\n  updateSpec: (spec: any) => IUpdateSpecResult;\n\n  // state\n  /**\n   * 更新或设置图元状态\n   * @param state 状态筛选器\n   * @param filter 筛选器\n   */\n  updateState: (\n    state: Record<string, Omit<IMarkStateSpec<unknown>, 'style'>>,\n    filter?: (series: ISeries, mark: IMark, stateKey: string) => boolean //series + mark 筛选\n  ) => void;\n\n  /**\n   * 更新图元选中状态\n   * @param datum hover 图元数据\n   * @param filter 筛选器 用来筛选系列与mark\n   * @param region region 筛选器\n   */\n  setSelected: (\n    datum: MaybeArray<any> | null,\n    filter?: (series: ISeries, mark: IMark) => boolean,\n    region?: IRegionQuerier\n  ) => void;\n\n  /**\n   * 更新图元 hover 状态\n   * @param datum hover 图元数据\n   * @param filter 筛选器 用来筛选系列与mark\n   * @param region region 筛选器\n   */\n  setHovered: (\n    datum: MaybeArray<Datum> | null,\n    filter?: (series: ISeries, mark: IMark) => boolean,\n    region?: IRegionQuerier\n  ) => void;\n  /**\n   * 清除所有图元的状态\n   *\n   * @since 1.11.0\n   */\n  clearState: (state: string) => void;\n  /**\n   * 清除所有图元的所有状态\n   *\n   * @since 1.12.4\n   */\n  clearAllStates: () => void;\n  /**\n   * 清除所有图元的选中状态\n   *\n   * @since 1.11.0\n   */\n  clearSelected: () => void;\n  /**\n   * 清除所有图元的hover状态\n   *\n   * @since 1.11.0\n   */\n  clearHovered: () => void;\n\n  // 更新 viewBox\n  updateViewBox: (viewBox: IBoundsLike, reLayout: boolean) => void;\n\n  // 获取实际渲染的 canvas\n  getCanvas: () => HTMLCanvasElement | undefined;\n\n  setCurrentTheme: () => void;\n\n  getSeriesData: (id: StringOrNumber | undefined, index: number | undefined) => DataView | undefined;\n  // setDimensionIndex\n  setDimensionIndex: (value: StringOrNumber, opt: DimensionIndexOption) => void;\n  /**\n   * 根据数据筛选图元\n   * @since 1.13.9\n   */\n  filterGraphicsByDatum: (\n    datum: MaybeArray<Datum> | null,\n    opt?: {\n      filter?: (series: ISeries, mark: IMark) => boolean;\n      region?: IRegionQuerier;\n      getDatum?: (el: IMarkGraphic, mark: IMark, s: ISeries, r: IRegion) => Datum;\n      callback?: (el: IMarkGraphic, mark: IMark, s: ISeries, r: IRegion) => void;\n      regionCallback?: (pickElements: IMarkGraphic[], r: IRegion) => void;\n    }\n  ) => IMarkGraphic[];\n}\n\nexport interface IChartSpecTransformer {\n  readonly type: string;\n  readonly seriesType: string;\n\n  /** 此方法不建议重写 */\n  initChartSpec: (spec: any) => IChartSpecInfo;\n  /** 将图表 spec 统一转换为 common chart spec */\n  transformSpec: (spec: any) => void;\n  /** 转换 model spec，应用主题 */\n  transformModelSpec: (spec: any) => IChartSpecInfo;\n  /** 根据图表 spec 生成 spec info */\n  createSpecInfo: (\n    chartSpec: any,\n    transform?: (constructor: IModelConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => void\n  ) => IChartSpecInfo;\n  /** 枚举 spec 中每个有效的 region */\n  forEachRegionInSpec: <K>(\n    spec: any,\n    callbackfn: (constructor: IRegionConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ) => K[];\n  /** 枚举 spec 中每个有效的 series */\n  forEachSeriesInSpec: <K>(\n    spec: any,\n    callbackfn: (constructor: ISeriesConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ) => K[];\n  /** 枚举 spec 中每个有效的 component */\n  forEachComponentInSpec: <K>(\n    spec: any,\n    callbackfn: (constructor: IComponentConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ) => K[];\n}\n\nexport interface IChartConstructor {\n  readonly type: string;\n  readonly seriesType?: string;\n  readonly series?: string | string[];\n  readonly transformerConstructor: new (option: IChartSpecTransformerOption) => IChartSpecTransformer;\n  new (spec: any, options: IChartOption): IChart;\n}\n"]}