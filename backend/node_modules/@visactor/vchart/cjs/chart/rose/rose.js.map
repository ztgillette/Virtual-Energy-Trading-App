{"version":3,"sources":["../src/chart/rose/rose.ts"],"names":[],"mappings":";;;AAAA,iDAA4D;AAC5D,sDAA6D;AAE7D,gDAA6C;AAE7C,yDAA8D;AAC9D,kCAAoC;AACpC,oCAA2C;AAC3C,6CAAyC;AACzC,gFAAoF;AACpF,+CAA6D;AAC7D,mEAAgF;AAChF,2FAAwG;AACxG,iFAA8F;AAE9F,MAAa,SAAqD,SAAQ,gBAAY;IAAtF;;QAIW,2BAAsB,GAAG,2CAAwB,CAAC;QAClD,SAAI,UAA8B;QAClC,eAAU,GAAW,qBAAc,CAAC,IAAI,CAAC;IAKpD,CAAC;IAHW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,6BAAqB,CAAC;IAC7D,CAAC;;AAVH,8BAWC;AAViB,cAAI,UAA8B;AAClC,oBAAU,GAAW,qBAAc,CAAC,IAAI,CAAC;AACzC,gCAAsB,GAAG,2CAAwB,CAAC;AAUpE,IAAA,cAAK,EAAC,SAAS,EAAE,uBAAe,CAAC,CAAC;AAE3B,MAAM,iBAAiB,GAAG,GAAG,EAAE;IACpC,IAAA,qDAAiC,GAAE,CAAC;IACpC,IAAA,2CAA4B,GAAE,CAAC;IAC/B,IAAA,gCAAuB,GAAE,CAAC;IAC1B,IAAA,wCAAsB,GAAE,CAAC;IACzB,IAAA,yBAAkB,GAAE,CAAC;IACrB,iBAAO,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACnD,CAAC,CAAC;AAPW,QAAA,iBAAiB,qBAO5B","file":"rose.js","sourcesContent":["import { registerRoseSeries } from '../../series/rose/rose';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport { Factory } from '../../core/factory';\nimport type { IRoseChartSpec } from './interface';\nimport { RoseChartSpecTransformer } from './rose-transformer';\nimport { BaseChart } from '../base';\nimport { StackChartMixin } from '../stack';\nimport { mixin } from '@visactor/vutils';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getPolarDimensionInfo } from '../../event/events/dimension/util/polar';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\n\nexport class RoseChart<T extends IRoseChartSpec = IRoseChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.rose;\n  static readonly seriesType: string = SeriesTypeEnum.rose;\n  static readonly transformerConstructor = RoseChartSpecTransformer;\n  readonly transformerConstructor = RoseChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.rose;\n  readonly seriesType: string = SeriesTypeEnum.rose;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getPolarDimensionInfo;\n  }\n}\n\nmixin(RoseChart, StackChartMixin);\n\nexport const registerRoseChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  registerRoseSeries();\n  Factory.registerChart(RoseChart.type, RoseChart);\n};\n"]}