{"version":3,"sources":["../src/chart/rose/rose-transformer.ts"],"names":[],"mappings":";;;AAAA,6CAAgD;AAEhD,gDAA4D;AAC5D,oCAAwD;AAExD,iEAAuD;AAEvD,MAAa,wBAEX,SAAQ,oCAA+B;IAC7B,qBAAqB,CAAC,IAAO;;QACrC,MAAM,MAAM,GAAG,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,GAAG,MAAA,IAAI,CAAC,MAAM,mCAAI,4BAAoB,CAAC;QACpD,MAAM,CAAC,WAAW,GAAG,MAAA,IAAI,CAAC,WAAW,mCAAI,4BAAoB,CAAC;QAC9D,MAAM,CAAC,WAAW,GAAG,MAAA,IAAI,CAAC,WAAW,mCAAI,CAAC,CAAC;QAE3C,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC9B,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAO;;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE1B,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAoB,EAAE,EAAE;YACjD,CAAC,YAAY,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC3D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACrB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;iBACvC;YACH,CAAC,CAAC,CAAC;YACH,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,IAAI,IAAA,cAAK,EAAE,IAA2B,CAAC,YAAY,CAAC,EAAE;gBAE9E,IAA2B,CAAC,YAAY,GAAG,GAAG,CAAC;aACjD;QACH,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,SAAS,GAAG,IAAA,cAAK,EAAC,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YAC9D,OAAO,IAAA,4BAAS,EACd;gBACE,aAAa,EAAE;oBACb,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE;wBACJ,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,MAAM;qBACb;iBACF;aACF,EACD,YAAY,CACb,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA7CD,4DA6CC","file":"rose-transformer.js","sourcesContent":["import { array, isNil } from '@visactor/vutils';\nimport type { IPolarAxisSpec, IPolarBandAxisSpec } from '../../component';\nimport { POLAR_DEFAULT_RADIUS } from '../../constant/polar';\nimport { RoseLikeChartSpecTransformer } from '../polar';\nimport type { IRoseChartSpec } from './interface';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport class RoseChartSpecTransformer<\n  T extends IRoseChartSpec = IRoseChartSpec\n> extends RoseLikeChartSpecTransformer<T> {\n  protected _getDefaultSeriesSpec(spec: T): any {\n    const series = super._getDefaultSeriesSpec(spec);\n    series.radius = spec.radius ?? POLAR_DEFAULT_RADIUS;\n    series.outerRadius = spec.outerRadius ?? POLAR_DEFAULT_RADIUS;\n    series.innerRadius = spec.innerRadius ?? 0;\n\n    series.stack = spec.stack;\n    series.percent = spec.percent;\n    return series;\n  }\n\n  transformSpec(spec: T) {\n    super.transformSpec(spec);\n    //默认不显示轴\n    (spec.axes ?? []).forEach((axis: IPolarAxisSpec) => {\n      ['domainLine', 'grid', 'label', 'tick'].forEach(configName => {\n        if (!axis[configName]) {\n          axis[configName] = { visible: false };\n        }\n      });\n      if (axis.orient === 'angle' && isNil((axis as IPolarBandAxisSpec).bandPosition)) {\n        // 玫瑰图的中心点应该是带宽的中心，保证第一个扇形是从坐标系的 startAngle 开始的\n        (axis as IPolarBandAxisSpec).bandPosition = 0.5;\n      }\n    });\n\n    // set default config for crosshair\n    spec.crosshair = array(spec.crosshair || {}).map(crosshairCfg => {\n      return mergeSpec(\n        {\n          categoryField: {\n            visible: true,\n            line: {\n              visible: true,\n              type: 'rect'\n            }\n          }\n        },\n        crosshairCfg\n      );\n    });\n  }\n}\n"]}