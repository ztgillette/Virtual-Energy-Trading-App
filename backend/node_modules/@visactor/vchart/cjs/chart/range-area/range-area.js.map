{"version":3,"sources":["../src/chart/range-area/range-area.ts"],"names":[],"mappings":";;;AACA,sDAA6D;AAC7D,mEAA6E;AAC7E,gDAA6C;AAE7C,qEAAyE;AACzE,kCAAoC;AACpC,gFAAoF;AACpF,+CAA6D;AAC7D,2EAAiH;AACjH,yEAAsF;AACtF,2FAAwG;AACxG,iFAA8F;AAC9F,mFAAgG;AAEhG,MAAa,cAAoE,SAAQ,gBAAY;IAArG;;QAIW,2BAAsB,GAAG,sDAA6B,CAAC;QACvD,SAAI,eAAmC;QACvC,eAAU,GAAW,qBAAc,CAAC,SAAS,CAAC;IASzD,CAAC;IAPW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,qCAAyB,CAAC;QAE/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,mCAAuB,CAAC;QAEpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,qCAAyB,CAAC;IACvE,CAAC;;AAdH,wCAeC;AAdiB,mBAAI,eAAmC;AACvC,yBAAU,GAAW,qBAAc,CAAC,SAAS,CAAC;AAC9C,qCAAsB,GAAG,sDAA6B,CAAC;AAclE,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,IAAA,qDAAiC,GAAE,CAAC;IACpC,IAAA,2CAA4B,GAAE,CAAC;IAC/B,IAAA,6CAA6B,GAAE,CAAC;IAChC,IAAA,gCAAuB,GAAE,CAAC;IAC1B,IAAA,wCAAsB,GAAE,CAAC;IACzB,IAAA,oCAAuB,GAAE,CAAC;IAC1B,iBAAO,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AAC7D,CAAC,CAAC;AARW,QAAA,sBAAsB,0BAQjC","file":"range-area.js","sourcesContent":["import { ChartTypeEnum } from '../interface/type';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { registerRangeAreaSeries } from '../../series/range-area/range-area';\nimport { Factory } from '../../core/factory';\nimport type { IRangeAreaChartSpec } from './interface';\nimport { RangeAreaChartSpecTransformer } from './range-area-transformer';\nimport { BaseChart } from '../base';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class RangeAreaChart<T extends IRangeAreaChartSpec = IRangeAreaChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.rangeArea;\n  static readonly seriesType: string = SeriesTypeEnum.rangeArea;\n  static readonly transformerConstructor = RangeAreaChartSpecTransformer;\n  readonly transformerConstructor = RangeAreaChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.rangeArea;\n  readonly seriesType: string = SeriesTypeEnum.rangeArea;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nexport const registerRangeAreaChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  registerRangeAreaSeries();\n  Factory.registerChart(RangeAreaChart.type, RangeAreaChart);\n};\n"]}