{"version":3,"sources":["../src/chart/progress/linear/linear-progress-transformer.ts"],"names":[],"mappings":"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","file":"linear-progress-transformer.js","sourcesContent":["import { isNil } from '@visactor/vutils';\nimport type { ICartesianAxisSpec, ICartesianBandAxisSpec, ICartesianLinearAxisSpec } from '../../../component';\nimport { CartesianChartSpecTransformer } from '../../cartesian';\nimport type { ILinearProgressChartSpec } from './interface';\nimport { getLinearAxisSpecDomain } from '../../../component/axis/util';\n\nexport class LinearProgressChartSpecTransformer<\n  T extends ILinearProgressChartSpec = ILinearProgressChartSpec\n> extends CartesianChartSpecTransformer<T> {\n  protected needAxes(): boolean {\n    return false;\n  }\n\n  protected _getDefaultSeriesSpec(spec: T): ILinearProgressChartSpec {\n    const series = super._getDefaultSeriesSpec(spec, ['bandWidth', 'progress', 'track', 'clamp']);\n    series.direction = spec.direction ?? 'horizontal';\n\n    series.cornerRadius = spec.cornerRadius ?? 0;\n    return series;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n\n    if (!spec.axes) {\n      spec.axes = [];\n    }\n\n    if (spec.direction === 'vertical') {\n      let leftAxis: ICartesianLinearAxisSpec = null;\n      let bottomAxis: ICartesianBandAxisSpec = null;\n      (spec.axes ?? []).forEach((axis: ICartesianAxisSpec) => {\n        const { orient } = axis;\n        if (orient === 'left') {\n          leftAxis = axis;\n        }\n        if (orient === 'bottom') {\n          bottomAxis = axis;\n        }\n      });\n      if (!leftAxis) {\n        leftAxis = {\n          orient: 'left',\n          visible: false\n        };\n        spec.axes.push(leftAxis);\n      }\n      if (!bottomAxis) {\n        bottomAxis = {\n          orient: 'bottom',\n          visible: false\n        };\n        spec.axes.push(bottomAxis);\n      }\n\n      // 自动补全轴类型类型和range\n      if (isNil(bottomAxis.type)) {\n        bottomAxis.type = 'band';\n      }\n      if (isNil(leftAxis.type)) {\n        leftAxis.type = 'linear';\n      }\n      const domain = getLinearAxisSpecDomain(leftAxis, { min: 0, max: 1 });\n      if (isNil(leftAxis.min)) {\n        leftAxis.min = domain.min;\n      }\n      if (isNil(leftAxis.max)) {\n        leftAxis.max = domain.max;\n      }\n    } else {\n      let leftAxis: ICartesianBandAxisSpec = null;\n      let bottomAxis: ICartesianLinearAxisSpec = null;\n      (spec.axes ?? []).forEach((axis: ICartesianAxisSpec) => {\n        const { orient } = axis;\n        if (orient === 'left') {\n          leftAxis = axis;\n        }\n        if (orient === 'bottom') {\n          bottomAxis = axis;\n        }\n      });\n      if (!leftAxis) {\n        leftAxis = {\n          type: 'band',\n          orient: 'left',\n          visible: false\n        };\n        spec.axes.push(leftAxis);\n      }\n      if (!bottomAxis) {\n        bottomAxis = {\n          orient: 'bottom',\n          visible: false\n        };\n        spec.axes.push(bottomAxis);\n      }\n\n      // 自动补全轴类型类型和range\n      if (isNil(bottomAxis.type)) {\n        bottomAxis.type = 'linear';\n      }\n      if (isNil(leftAxis.type)) {\n        leftAxis.type = 'band';\n      }\n      const domain = getLinearAxisSpecDomain(bottomAxis, { min: 0, max: 1 });\n      if (isNil(bottomAxis.min)) {\n        bottomAxis.min = domain.min;\n      }\n      if (isNil(bottomAxis.max)) {\n        bottomAxis.max = domain.max;\n      }\n    }\n  }\n}\n"]}