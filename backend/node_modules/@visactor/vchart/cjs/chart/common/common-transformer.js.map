{"version":3,"sources":["../src/chart/common/common-transformer.ts"],"names":[],"mappings":";;;AACA,qCAA2C;AAC3C,kCAAmD;AACnD,kCAA+C;AAE/C,iEAAuD;AAEvD,MAAa,0BAA0E,SAAQ,+BAE9F;IACW,qBAAqB,CAAC,IAA+B;QAC7D,MAAM,WAAW,GAAG,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAEtD,OAAO,WAAW,CAAC,IAAI,CAAC;QACxB,OAAO,WAAW,CAAC;IACrB,CAAC;IAGS,kBAAkB,CAAC,IAA+B;QAC1D,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO;SACR;QACD,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YAMvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,WAAmB,EAAE,EAAE;;gBACvD,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE;oBACzB,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC/E,IAAI,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;wBAChG,MAAM,MAAM,GAAG,IAAA,eAAQ,EAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAA,MAAM,CAAC,YAAY,CAAC,MAAM,mCAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnF,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;wBACrE,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC;qBACrG;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,aAAa,CAAC,IAA+B;QAC3C,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACrC,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAc,EAAE,EAAE;gBACrC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;oBAChC,OAAO;iBACR;gBACD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACzC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;wBACb,CAAC,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;qBAC7B;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;gBAC9B,IAAI,IAAA,UAAG,EAAC,IAAI,EAAE,aAAa,CAAC,EAAE;oBAC5B,IAAA,4BAAS,EAAC,IAAI,EAAE,IAAA,2BAAoB,EAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;iBACxD;YACH,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CACF;AA1DD,gEA0DC","file":"common-transformer.js","sourcesContent":["import type { AdaptiveSpec, ISeriesSpec } from '../../typings';\nimport { get, isObject } from '../../util';\nimport { BaseChartSpecTransformer } from '../base';\nimport { getTrimPaddingConfig } from '../util';\nimport type { ICommonChartSpec } from './interface';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport class CommonChartSpecTransformer<T extends ICommonChartSpec = ICommonChartSpec> extends BaseChartSpecTransformer<\n  AdaptiveSpec<T, 'series'>\n> {\n  protected _getDefaultSeriesSpec(spec: AdaptiveSpec<T, 'series'>) {\n    const defaultSpec = super._getDefaultSeriesSpec(spec);\n    // 组合图系列的默认配置由系列自身配置 data/dataIndex/dataId 决定，无需默认配置\n    delete defaultSpec.data;\n    return defaultSpec;\n  }\n\n  // common chart 支持 autoBandSize 配置\n  protected _transformAxisSpec(spec: AdaptiveSpec<T, 'series'>) {\n    if (!spec.axes) {\n      return;\n    }\n    if (!!spec.autoBandSize) {\n      // 遍历series\n      // 1. 找到bar系列\n      // 2. 如果bar系列配置了autoBandSize\n      // 3. 找到bar系列对应的axis\n      // 4. 为该axis配置bandSize\n      spec.series.forEach((series: any, seriesIndex: number) => {\n        if (series.type === 'bar') {\n          const relatedAxis = this._findBandAxisBySeries(series, seriesIndex, spec.axes);\n          if (relatedAxis && !relatedAxis.bandSize && !relatedAxis.maxBandSize && !relatedAxis.minBandSize) {\n            const extend = isObject(series.autoBandSize) ? series.autoBandSize.extend ?? 0 : 0;\n            const { barMaxWidth, barMinWidth, barWidth, barGapInGroup } = series;\n            this._applyAxisBandSize(relatedAxis, extend, { barMaxWidth, barMinWidth, barWidth, barGapInGroup });\n          }\n        }\n      });\n    }\n  }\n\n  transformSpec(spec: AdaptiveSpec<T, 'series'>): void {\n    super.transformSpec(spec);\n    if (spec.series && spec.series.length) {\n      const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);\n      spec.series.forEach((s: ISeriesSpec) => {\n        if (!this._isValidSeries(s.type)) {\n          return;\n        }\n        Object.keys(defaultSeriesSpec).forEach(k => {\n          if (!(k in s)) {\n            s[k] = defaultSeriesSpec[k];\n          }\n        });\n      });\n    }\n    if (spec.axes && spec.axes.length) {\n      spec.axes.forEach((axis: any) => {\n        if (get(axis, 'trimPadding')) {\n          mergeSpec(axis, getTrimPaddingConfig(this.type, spec));\n        }\n      });\n    }\n    this._transformAxisSpec(spec);\n  }\n}\n"]}