{"version":3,"sources":["../src/chart/radar/radar-transformer.ts"],"names":[],"mappings":";;;AAAA,qCAAmC;AACnC,oCAAwD;AAExD,iEAAuD;AAEvD,MAAa,yBAEX,SAAQ,oCAA+B;IAC7B,qBAAqB,CAAC,IAAS;;QACvC,MAAM,MAAM,GAAG,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC9B,MAAM,CAAC,IAAI,GAAG,IAAA,4BAAS,EACrB;YACE,OAAO,EAAE,KAAK;SACf,EACD,IAAI,CAAC,IAAI,CACV,CAAC;QACF,MAAM,CAAC,UAAU,GAAG,MAAA,IAAI,CAAC,UAAU,mCAAI,MAAM,CAAC;QAC9C,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACtC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACtC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACtC,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAO;;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE1B,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC5B,CAAC,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;oBACnD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;wBACrB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;qBACvC;gBACH,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;oBACd,IAAI,CAAC,IAAI,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;iBAC/B;aACF;QACH,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,SAAS,GAAG,IAAA,YAAK,EAAC,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YAC9D,OAAO,IAAA,4BAAS,EACd;gBACE,aAAa,EAAE;oBACb,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE;wBACJ,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,MAAM;qBACb;iBACF;aACF,EACD,YAAY,CACb,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAvDD,8DAuDC","file":"radar-transformer.js","sourcesContent":["import { array } from '../../util';\nimport { RoseLikeChartSpecTransformer } from '../polar';\nimport type { IRoseChartSpec } from '../rose';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport class RadarChartSpecTransformer<\n  T extends IRoseChartSpec = IRoseChartSpec\n> extends RoseLikeChartSpecTransformer<T> {\n  protected _getDefaultSeriesSpec(spec: any): any {\n    const series = super._getDefaultSeriesSpec(spec);\n    series.line = spec.line;\n    series.point = spec.point;\n    series.stack = spec.stack;\n    series.percent = spec.percent;\n    series.area = mergeSpec(\n      {\n        visible: false\n      },\n      spec.area\n    );\n    series.seriesMark = spec.seriesMark ?? 'area';\n    series.activePoint = spec.activePoint;\n    series.pointDis = spec.pointDis;\n    series.pointDisMul = spec.pointDisMul;\n    series.markOverlap = spec.markOverlap;\n    return series;\n  }\n\n  transformSpec(spec: T) {\n    super.transformSpec(spec);\n    //默认不显示轴的domainLine和Tick\n    (spec.axes ?? []).forEach((axis: any) => {\n      if (axis.orient === 'radius') {\n        ['domainLine', 'label', 'tick'].forEach(configName => {\n          if (!axis[configName]) {\n            axis[configName] = { visible: false };\n          }\n        });\n        if (!axis.grid) {\n          axis.grid = { visible: true };\n        }\n      }\n    });\n\n    // set default config for crosshair\n    spec.crosshair = array(spec.crosshair || {}).map(crosshairCfg => {\n      return mergeSpec(\n        {\n          categoryField: {\n            visible: true,\n            line: {\n              visible: true,\n              type: 'line'\n            }\n          }\n        },\n        crosshairCfg\n      );\n    });\n  }\n}\n"]}