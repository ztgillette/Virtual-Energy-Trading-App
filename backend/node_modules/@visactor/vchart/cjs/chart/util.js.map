{"version":3,"sources":["../src/chart/util.ts"],"names":[],"mappings":"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","file":"util.js","sourcesContent":["import { getContainerSize, isString } from '@visactor/vutils';\nimport type { IChartSpec } from '../typings';\n// eslint-disable-next-line no-duplicate-imports\nimport { Direction } from '../typings';\nimport { array, isMiniAppLikeMode, isTrueBrowser, isValid } from '../util';\nimport { mergeSpec } from '@visactor/vutils-extension';\nimport type { ICartesianChartSpec } from './cartesian/interface';\nimport type { IChartOption } from './interface/common';\nimport type { IUpdateSpecResult } from '../model/interface';\nimport { vglobal } from '@visactor/vrender-core';\n\nexport function setDefaultCrosshairForCartesianChart(spec: ICartesianChartSpec) {\n  spec.crosshair = array(spec.crosshair || {}).map(crosshairCfg => {\n    return mergeSpec(\n      {\n        [spec.direction === Direction.horizontal ? 'yField' : 'xField']: {\n          visible: true,\n          line: {\n            visible: true,\n            type: 'rect'\n          }\n        }\n      },\n      crosshairCfg\n    );\n  });\n}\n\nexport function calculateChartSize(\n  spec: { width?: number; height?: number },\n  option: Pick<IChartOption, 'canvas' | 'container' | 'mode' | 'modeParams'>,\n  defaultSize: { width: number; height: number }\n) {\n  const { width: userWidth, height: userHeight } = spec;\n  if (isValid(userWidth) && isValid(userHeight)) {\n    return {\n      width: userWidth,\n      height: userHeight\n    };\n  }\n  let width = defaultSize.width;\n  let height = defaultSize.height;\n  const container = option.container;\n  const canvas = option.canvas;\n  if (container) {\n    const { width: containerWidth, height: containerHeight } = getContainerSize(\n      container,\n      defaultSize.width,\n      defaultSize.height\n    );\n    width = containerWidth;\n    height = containerHeight;\n  } else if (canvas && isTrueBrowser(option.mode)) {\n    let canvasNode;\n    if (isString(canvas)) {\n      canvasNode = vglobal.getElementById(canvas);\n    } else {\n      canvasNode = canvas;\n    }\n    const { width: containerWidth, height: containerHeight } = getContainerSize(\n      canvasNode as HTMLCanvasElement,\n      defaultSize.width,\n      defaultSize.height\n    );\n    width = containerWidth;\n    height = containerHeight;\n  } else if (isMiniAppLikeMode(option.mode) && (option.modeParams as any)?.domref) {\n    const domRef = (option.modeParams as any).domref;\n    width = domRef.width;\n    height = domRef.height;\n  }\n\n  width = userWidth ?? width;\n  height = userHeight ?? height;\n\n  return {\n    width,\n    height\n  };\n}\n\nexport function mergeUpdateResult(target: IUpdateSpecResult, ...sources: IUpdateSpecResult[]) {\n  const merge = (key: keyof IUpdateSpecResult) => sources.reduce((value, cur) => value || cur?.[key], target[key]);\n\n  Object.assign(target, {\n    change: merge('change'),\n    reCompile: merge('reCompile'),\n    reMake: merge('reMake'),\n    reRender: merge('reRender'),\n    reSize: merge('reSize'),\n    reTransformSpec: merge('reTransformSpec'),\n    changeTheme: merge('changeTheme'),\n    changeBackground: merge('changeBackground')\n  } as Required<IUpdateSpecResult>);\n  return target;\n}\n\nexport function getTrimPaddingConfig(chartType: string, spec: IChartSpec) {\n  if (\n    chartType === 'line' ||\n    chartType === 'area' ||\n    (chartType === 'common' && spec.series.every(item => item.type === 'area' || item.type === 'line'))\n  ) {\n    return {\n      paddingInner: 1,\n      paddingOuter: 0\n    };\n  }\n\n  return {\n    paddingOuter: 0\n  };\n}\n"]}