{"version":3,"sources":["../src/chart/bar/bar-transformer.ts"],"names":[],"mappings":";;;AAAA,6CAA4C;AAE5C,4CAA6D;AAC7D,kCAA+D;AAI/D,MAAa,uBAAiE,SAAQ,yCAAgC;IAC1G,qBAAqB,CAAC,IAAO;QACrC,OAAO,KAAK,CAAC,qBAAqB,CAAC,IAAI,EAAE;YACvC,UAAU;YACV,aAAa;YACb,aAAa;YACb,eAAe;YACf,cAAc;YACd,UAAU;YACV,gBAAgB;YAChB,eAAe;YACf,mBAAmB;YACnB,wBAAwB;SACzB,CAAmB,CAAC;IACvB,CAAC;IAED,aAAa,CAAC,IAAO;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAA,2CAAoC,EAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAES,kBAAkB,CAAC,IAAO;;QAClC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO;SACR;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,KAAK,YAAY,CAAC,CAAC;QACnF,MAAM,QAAQ,GACZ,MAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,mCAC5C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACvG,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;YAEpF,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;gBACvB,MAAM,MAAM,GAAG,IAAA,iBAAQ,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAA,IAAI,CAAC,YAAY,CAAC,MAAM,mCAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/E,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAC5E,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK,CACd,CAAC;gBACpB,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC;aAClG;SACF;IACH,CAAC;CACF;AAzCD,0DAyCC","file":"bar-transformer.js","sourcesContent":["import { isObject } from '@visactor/vutils';\nimport type { IBarSeriesSpec } from '../../series';\nimport { CartesianChartSpecTransformer } from '../cartesian';\nimport { setDefaultCrosshairForCartesianChart } from '../util';\nimport type { IBarChartSpec } from './interface';\nimport type { ICartesianBandAxisSpec } from '../../component';\n\nexport class BarChartSpecTransformer<T extends IBarChartSpec = IBarChartSpec> extends CartesianChartSpecTransformer<T> {\n  protected _getDefaultSeriesSpec(spec: T): any {\n    return super._getDefaultSeriesSpec(spec, [\n      'barWidth',\n      'barMaxWidth',\n      'barMinWidth',\n      'barGapInGroup',\n      'barMinHeight',\n      'sampling',\n      'samplingFactor',\n      'barBackground',\n      'stackCornerRadius',\n      'useSequentialAnimation'\n    ]) as IBarSeriesSpec;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n    setDefaultCrosshairForCartesianChart(spec);\n  }\n\n  protected _transformAxisSpec(spec: T) {\n    super._transformAxisSpec(spec);\n    if (!spec.axes) {\n      return;\n    }\n    const isHorizontal = spec.series.some(series => series.direction === 'horizontal');\n    const bandAxis: ICartesianBandAxisSpec =\n      spec.axes.find(axis => axis.type === 'band') ??\n      spec.axes.find(axis => (isHorizontal ? ['left', 'right'] : ['top', 'bottom']).includes(axis.orient));\n    if (bandAxis && !bandAxis.bandSize && !bandAxis.maxBandSize && !bandAxis.minBandSize) {\n      // 将 autoBandSize 应用在轴上\n      if (!!spec.autoBandSize) {\n        const extend = isObject(spec.autoBandSize) ? spec.autoBandSize.extend ?? 0 : 0;\n        const { barMaxWidth, barMinWidth, barWidth, barGapInGroup } = spec.series.find(\n          series => series.type === 'bar'\n        ) as IBarSeriesSpec;\n        this._applyAxisBandSize(bandAxis, extend, { barMaxWidth, barMinWidth, barWidth, barGapInGroup });\n      }\n    }\n  }\n}\n"]}