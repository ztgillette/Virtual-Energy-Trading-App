{"version":3,"sources":["../src/chart/bar/bar.ts"],"names":[],"mappings":";;;AAAA,8CAAyD;AACzD,sDAA6D;AAG7D,gDAA6C;AAC7C,uDAA4D;AAC5D,kCAAoC;AACpC,6CAAyC;AACzC,oCAA2C;AAC3C,gFAAoF;AACpF,+CAA6D;AAC7D,2EAAiH;AACjH,yEAAsF;AACtF,2FAAwG;AACxG,iFAA8F;AAC9F,mFAAgG;AAEhG,MAAa,QAAkD,SAAQ,gBAAY;IAAnF;;QAIW,2BAAsB,GAAG,yCAAuB,CAAC;QACjD,SAAI,SAA6B;QACjC,eAAU,GAAW,qBAAc,CAAC,GAAG,CAAC;IAOnD,CAAC;IALW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,qCAAyB,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,mCAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,qCAAyB,CAAC;IACvE,CAAC;;AAZH,4BAaC;AAZiB,aAAI,SAA6B;AACjC,mBAAU,GAAW,qBAAc,CAAC,GAAG,CAAC;AACxC,+BAAsB,GAAG,yCAAuB,CAAC;AAYnE,IAAA,cAAK,EAAC,QAAQ,EAAE,uBAAe,CAAC,CAAC;AAE1B,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,IAAA,qDAAiC,GAAE,CAAC;IACpC,IAAA,2CAA4B,GAAE,CAAC;IAC/B,IAAA,6CAA6B,GAAE,CAAC;IAChC,IAAA,wCAAsB,GAAE,CAAC;IACzB,IAAA,uBAAiB,GAAE,CAAC;IACpB,IAAA,gCAAuB,GAAE,CAAC;IAC1B,iBAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACjD,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B","file":"bar.js","sourcesContent":["import { registerBarSeries } from '../../series/bar/bar';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport type { IBarChartSpec } from './interface';\nimport { Factory } from '../../core/factory';\nimport { BarChartSpecTransformer } from './bar-transformer';\nimport { BaseChart } from '../base';\nimport { mixin } from '@visactor/vutils';\nimport { StackChartMixin } from '../stack';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class BarChart<T extends IBarChartSpec = IBarChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.bar;\n  static readonly seriesType: string = SeriesTypeEnum.bar;\n  static readonly transformerConstructor = BarChartSpecTransformer;\n  readonly transformerConstructor = BarChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.bar;\n  readonly seriesType: string = SeriesTypeEnum.bar;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nmixin(BarChart, StackChartMixin);\n\nexport const registerBarChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionHover();\n  registerBarSeries();\n  registerDimensionEvents();\n  Factory.registerChart(BarChart.type, BarChart);\n};\n"]}