{"version":3,"sources":["../src/chart/base/util.ts"],"names":[],"mappings":";;;AAAA,6CAAkD;AAS3C,MAAM,oBAAoB,GAAG,CAClC,SAAyB,EACzB,oBAAoC,EACY,EAAE;;IAClD,MAAM,IAAI,GAAG,SAAS,CAAC,IAAsB,CAAC;IAC9C,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;IACvC,IAAI,IAAA,gBAAO,EAAC,QAAQ,CAAC,EAAE;QACrB,MAAM,YAAY,GAAG,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAC;QACrC,OAAO,MAAA,oBAAoB,CAAC,MAAM,0CAAE,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1F;SAAM,IAAI,IAAA,gBAAO,EAAC,WAAW,CAAC,EAAE;QAC/B,OAAO,IAAA,cAAK,EAAC,WAAW,CAAC;aACtB,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,WAAC,OAAA,MAAA,oBAAoB,CAAC,MAAM,0CAAG,KAAK,CAAC,CAAA,EAAA,CAAC;aAC5D,MAAM,CAAC,gBAAO,CAAC,CAAC;KACpB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAfW,QAAA,oBAAoB,wBAe/B;AAGK,MAAM,oBAAoB,GAAG,CAClC,SAAyB,EACzB,oBAAoC,EACa,EAAE;;IACnD,MAAM,IAAI,GAAG,SAAS,CAAC,IAAsB,CAAC;IAC9C,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;IACvC,IAAI,IAAA,gBAAO,EAAC,QAAQ,CAAC,EAAE;QACrB,MAAM,YAAY,GAAG,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAC;QACrC,OAAO,MAAA,oBAAoB,CAAC,MAAM,0CAAE,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1F;SAAM,IAAI,IAAA,gBAAO,EAAC,WAAW,CAAC,EAAE;QAC/B,OAAO,IAAA,cAAK,EAAC,WAAW,CAAC;aACtB,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,WAAC,OAAA,MAAA,oBAAoB,CAAC,MAAM,0CAAG,KAAK,CAAC,CAAA,EAAA,CAAC;aAC5D,MAAM,CAAC,gBAAO,CAAC,CAAC;KACpB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAfW,QAAA,oBAAoB,wBAe/B","file":"util.js","sourcesContent":["import { array, isValid } from '@visactor/vutils';\nimport type { IModelSpecInfo } from '../../model/interface';\nimport type { RegionSpec, IRegionSpecInfo } from '../../region/interface';\nimport type { IChartSpecInfo } from '../interface';\nimport type { ISeriesSpecInfo } from '../../series/interface';\nimport type { ISeriesSpec } from '../../typings';\nimport type { IComponentSpec } from '../../component/base/interface';\n\n/** 寻找和 model 关联的 region info */\nexport const getRelatedRegionInfo = (\n  modelInfo: IModelSpecInfo,\n  currentChartSpecInfo: IChartSpecInfo\n): Array<IRegionSpecInfo<RegionSpec>> | undefined => {\n  const spec = modelInfo.spec as IComponentSpec;\n  const { regionId, regionIndex } = spec;\n  if (isValid(regionId)) {\n    const regionIdList = array(regionId);\n    return currentChartSpecInfo.region?.filter(({ spec }) => regionIdList.includes(spec.id));\n  } else if (isValid(regionIndex)) {\n    return array(regionIndex)\n      .map((index: number) => currentChartSpecInfo.region?.[index])\n      .filter(isValid);\n  }\n  return undefined;\n};\n\n/** 寻找和 model 关联的 series info */\nexport const getRelatedSeriesInfo = (\n  modelInfo: IModelSpecInfo,\n  currentChartSpecInfo: IChartSpecInfo\n): Array<ISeriesSpecInfo<ISeriesSpec>> | undefined => {\n  const spec = modelInfo.spec as IComponentSpec;\n  const { seriesId, seriesIndex } = spec;\n  if (isValid(seriesId)) {\n    const seriesIdList = array(seriesId);\n    return currentChartSpecInfo.series?.filter(({ spec }) => seriesIdList.includes(spec.id));\n  } else if (isValid(seriesIndex)) {\n    return array(seriesIndex)\n      .map((index: number) => currentChartSpecInfo.series?.[index])\n      .filter(isValid);\n  }\n  return undefined;\n};\n"]}