{"version":3,"sources":["../src/compile/data/compilable-data.ts"],"names":[],"mappings":";;;AACA,kDAA8C;AAO9C,MAAa,cAAe,SAAQ,0BAAW;IAK7C,UAAU;QACR,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAa,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAEtF,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAID,WAAW;QACT,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,WAAW,CAAC,CAAY;QACtB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,aAAa;;QACX,OAAO,MAAA,IAAI,CAAC,KAAK,0CAAE,UAAU,CAAC;IAChC,CAAC;IAED,YAAY,MAA6B,EAAE,QAAmB;QAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;QAbN,UAAK,GAAoB,IAAI,CAAC;QActC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACjC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAID,cAAc,CAAC,IAAqB;QAClC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SACzB;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IACrC,CAAC;IAGD,UAAU,CAAC,QAAkB;QAC3B,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,WAAW,GAAG,KAAK,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBAC3C,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE;oBAC1B,WAAW,GAAG,IAAI,CAAC;oBACnB,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;iBACjC;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,IAAI,WAAW,EAAE;gBAE5B,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,cAAc,EAAE,CAAC;aAC5C;SACF;QAED,OAAO;IACT,CAAC;IAES,eAAe;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,iBAAiB;;QACf,OAAO,GAAG,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,IAAI,EAAE,CAAC;IACvC,CAAC;CACF;AAtFD,wCAsFC","file":"compilable-data.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport { GrammarItem } from '../grammar-item';\nimport type { Maybe } from '../../typings';\nimport type { ICompilableData } from './interface';\nimport type { GrammarItemInitOption } from '../interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type { ICompilableMark } from '../mark';\n\nexport class CompilableData extends GrammarItem implements ICompilableData {\n  protected declare _product: Maybe<any>;\n\n  protected _prevProduct: Maybe<any>;\n\n  getProduct() {\n    if (this._product) {\n      return this._product;\n    }\n\n    this._product = this.runTransforms<Maybe<any>>(this._transform, this.getLatestData());\n\n    return this._product;\n  }\n\n  /** 原始DataView */\n  protected _data: Maybe<DataView> = null;\n  getDataView() {\n    return this._data;\n  }\n  setDataView(d?: DataView) {\n    this._data = d;\n  }\n\n  getLatestData() {\n    return this._data?.latestData;\n  }\n\n  constructor(option: GrammarItemInitOption, dataView?: DataView) {\n    super(option);\n    this._data = dataView;\n  }\n\n  removeProduct() {\n    this._product = null;\n    this._prevProduct = null;\n    this._compiledProductId = null;\n  }\n\n  release() {\n    this.removeProduct();\n    super.release();\n    this._data = null;\n  }\n\n  protected _relatedMarks?: Record<string, ICompilableMark>;\n\n  addRelatedMark(mark: ICompilableMark) {\n    if (!this._relatedMarks) {\n      this._relatedMarks = {};\n    }\n\n    this._relatedMarks[mark.id] = mark;\n  }\n\n  /** 更新数据并默认重新渲染 */\n  updateData(noRender?: boolean) {\n    this._compileProduct();\n\n    if (this._relatedMarks) {\n      let hasCommited = false;\n      Object.keys(this._relatedMarks).forEach(id => {\n        if (this._relatedMarks[id]) {\n          hasCommited = true;\n          this._relatedMarks[id].commit();\n        }\n      });\n\n      if (!noRender && hasCommited) {\n        // 将实际的 dataflow 推迟到下一次异步操作，以避免同步的数据更新内容被忽略\n        return this.getCompiler().renderNextTick();\n      }\n    }\n\n    return;\n  }\n\n  protected _compileProduct() {\n    this._prevProduct = this._product;\n    // do nothing\n    this._product = null;\n  }\n\n  generateProductId(): string {\n    return `${this.getDataView()?.name}`;\n  }\n}\n"]}