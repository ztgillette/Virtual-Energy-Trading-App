{"version":3,"sources":["../src/scale/global-scale.ts"],"names":[],"mappings":"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","file":"global-scale.js","sourcesContent":["import type { IGlobalScale } from './interface';\nimport { isArray, isEmpty, isEqual, isNil } from '@visactor/vutils';\nimport type { IBaseScale, LinearScale, OrdinalScale } from '@visactor/vscale';\nimport { isContinuous } from '@visactor/vscale';\nimport type { IChart } from '../chart/interface';\nimport type { IChartSpec } from '../typings/spec';\nimport { createScale } from '../util/scale';\nimport { isDataDomainSpec } from '../util/type';\nimport { mergeFields } from '../util/data';\nimport type { IVisualScale, IVisualSpecScale } from '../typings';\nimport type { StatisticOperations } from '../data/transforms/interface';\nimport type { ISeries } from '../series';\n\nexport class GlobalScale implements IGlobalScale {\n  private _scaleSpecMap: Map<string, IVisualSpecScale<unknown, unknown>> = new Map();\n  private _scaleMap: Map<string, IBaseScale> = new Map();\n  private _modelScaleSpecMap: Map<string, IVisualSpecScale<unknown, unknown>> = new Map();\n  private _markAttributeScaleMap: Map<string, (IVisualScale & { seriesId: number; markScale: IBaseScale })[]> =\n    new Map();\n  private _spec: IChartSpec['scales'] = null;\n  private readonly _chart: IChart = null;\n  constructor(spec: IChartSpec['scales'], chart: IChart) {\n    this._spec = spec;\n    this._chart = chart;\n    this._setAttrFromSpec();\n  }\n\n  private _createFromSpec(s: IVisualSpecScale<unknown, unknown>): IBaseScale {\n    if (!s.id) {\n      return null;\n    }\n    let scale = this._scaleMap.get(s.id);\n    if (!scale) {\n      if (s.type === 'ordinal' && s.id === 'color') {\n        scale = createScale('colorOrdinal'); // 全局颜色色板的特殊逻辑\n      } else {\n        scale = createScale(s.type);\n      }\n    }\n    if (!scale) {\n      return null;\n    }\n    if (isArray(s.range)) {\n      scale.range(s.range);\n    }\n    if (isArray(s.domain)) {\n      if (!isDataDomainSpec(s.domain)) {\n        scale.domain(s.domain);\n      }\n    }\n    if (s.specified && (<OrdinalScale>scale).specified) {\n      (<OrdinalScale>scale).specified(s.specified);\n    }\n\n    if (s.clamp && (<LinearScale>scale).clamp) {\n      (<LinearScale>scale).clamp(s.clamp);\n    }\n\n    return scale;\n  }\n\n  private _setAttrFromSpec() {\n    if (!this._spec?.length) {\n      return;\n    }\n    const newScaleMap: Map<string, IBaseScale> = new Map();\n    const newScaleSpecMap: Map<string, IVisualSpecScale<unknown, unknown>> = new Map();\n    this._spec.forEach(s => {\n      const scale = this._createFromSpec(s);\n      if (!scale) {\n        return;\n      }\n      newScaleMap.set(s.id, scale);\n      newScaleSpecMap.set(s.id, s);\n    });\n    this._modelScaleSpecMap.forEach(s => {\n      const scale = this._createFromSpec(s);\n      if (!scale) {\n        return;\n      }\n      newScaleMap.set(s.id, scale);\n      newScaleSpecMap.set(s.id, s);\n    });\n\n    this._scaleSpecMap = newScaleSpecMap;\n    this._scaleMap = newScaleMap;\n  }\n\n  updateSpec(spec: IChartSpec['scales']) {\n    const result = {\n      change: false,\n      reMake: false,\n      reRender: false,\n      reSize: false,\n      reCompile: false\n    };\n    if (isEqual(spec, this._spec)) {\n      return result;\n    }\n    result.change = true;\n    for (let i = 0; i < spec.length; i++) {\n      const s = spec[i];\n      const scale = this._scaleMap.get(s.id);\n      if (!scale) {\n        // new global scale need remake chart\n        result.reMake = true;\n        return result;\n      }\n      const lastSpec = this._spec.find(_s => _s.id === s.id);\n      if (!lastSpec.id) {\n        // new global scale need remake chart\n        result.reMake = true;\n        return result;\n      }\n      if (lastSpec.type !== s.type) {\n        // scale cannot change type, need remake chart\n        result.reMake = true;\n        return result;\n      }\n      if (!isEqual(lastSpec.specified, s.specified)) {\n        result.reMake = true;\n        return result;\n      }\n      if (s.range && !isEqual(s.range, scale.range())) {\n        scale.range(s.range);\n        result.reRender = true;\n      }\n      if (isDataDomainSpec(s.domain)) {\n        result.reRender = true;\n      } else if (!isEqual(s.domain, scale.domain())) {\n        scale.domain(s.domain);\n        result.reRender = true;\n      }\n      // replace specMap, this use for data domain\n      this._scaleSpecMap.set(s.id, s);\n    }\n    this._spec = spec;\n    return result;\n  }\n\n  registerModelScale(spec: IVisualSpecScale<unknown, unknown>) {\n    const scale = this._createFromSpec(spec);\n    if (!scale) {\n      return;\n    }\n    this._modelScaleSpecMap.set(spec.id, spec);\n    this._scaleSpecMap.set(spec.id, spec);\n    this._scaleMap.set(spec.id, scale);\n  }\n\n  removeModelScale(filter: (spec: IVisualSpecScale<unknown, unknown>) => boolean) {\n    this._modelScaleSpecMap.forEach(spec => {\n      if (filter(spec)) {\n        this._modelScaleSpecMap.delete(spec.id);\n        this._scaleSpecMap.delete(spec.id);\n        this._scaleMap.delete(spec.id);\n      }\n    });\n  }\n\n  getScale(user_id: string): IBaseScale | null {\n    return this._scaleMap.get(user_id);\n  }\n\n  getScaleSpec(user_id: string): IVisualSpecScale<unknown, unknown> | null {\n    return this._scaleSpecMap.get(user_id);\n  }\n\n  getStatisticalFields = (\n    dataId: string\n  ): {\n    key: string;\n    operations: StatisticOperations;\n  }[] => {\n    const result: {\n      key: string;\n      operations: StatisticOperations;\n    }[] = [];\n    this._scaleSpecMap.forEach((v, k) => {\n      if (!isDataDomainSpec(v.domain)) {\n        return;\n      }\n      v.domain.forEach(spec => {\n        if (spec.dataId === dataId) {\n          spec.fields.forEach(key => {\n            mergeFields(result, [\n              {\n                key,\n                operations: isContinuous(v.type) ? ['max', 'min'] : ['values']\n              }\n            ]);\n          });\n        }\n      });\n    });\n    this._markAttributeScaleMap.forEach((specList, scaleName) => {\n      const scale = this.getScale(scaleName);\n      specList.forEach(spec => {\n        const series = this._getSeriesBySeriesId(spec.seriesId);\n\n        if (series.getRawData().name === dataId && spec.field) {\n          mergeFields(result, [\n            {\n              key: spec.field,\n              operations: isContinuous(scale.type) ? ['max', 'min'] : ['values']\n            }\n          ]);\n        }\n      });\n    });\n    return result;\n  };\n\n  private _getSeriesByRawDataId(id: string): ISeries {\n    const series = this._chart.getAllSeries();\n\n    for (let i = 0; i < series.length; i++) {\n      const s = series[i];\n      if (s.getRawData().name === id) {\n        return s;\n      }\n    }\n    return null;\n  }\n\n  private _getSeriesBySeriesId(id: number): ISeries {\n    const series = this._chart.getAllSeries();\n\n    for (let i = 0; i < series.length; i++) {\n      const s = series[i];\n      if (s.id === id) {\n        return s;\n      }\n    }\n    return null;\n  }\n\n  updateScaleDomain(defaultDomain: unknown[]) {\n    this._scaleSpecMap.forEach((scaleSpec, id) => {\n      const scale = this._scaleMap.get(id);\n      if (!scale) {\n        return;\n      }\n      if (!isDataDomainSpec(scaleSpec.domain)) {\n        if (!scaleSpec.domain || scaleSpec.domain.length === 0) {\n          scale.domain(defaultDomain);\n        }\n        this._updateMarkScale(id, scale, scale.domain().slice());\n        return;\n      }\n      let domain: unknown[] | Set<string>;\n      if (isContinuous(scaleSpec.type)) {\n        domain = [null, null];\n      } else {\n        domain = new Set();\n      }\n      scaleSpec.domain.forEach(spec => {\n        const series = this._getSeriesByRawDataId(spec.dataId);\n\n        if (!series) {\n          return;\n        }\n\n        const isContinuousField = isContinuous(scaleSpec.type);\n        spec.fields.forEach(key => {\n          const statistics = series.getRawDataStatisticsByField(key, isContinuousField);\n          if (!statistics) {\n            return;\n          }\n          if (isContinuousField) {\n            if (isNil(domain[0])) {\n              domain[0] = statistics.min;\n            } else {\n              domain[0] = Math.min(statistics.min, domain[0]);\n            }\n            if (isNil(domain[1])) {\n              domain[1] = statistics.max;\n            } else {\n              domain[1] = Math.max(statistics.max, domain[1]);\n            }\n          } else {\n            statistics.values.forEach((value: string) => {\n              (domain as Set<string>).add(value);\n            });\n          }\n        });\n      });\n\n      const scaleDomain = domain;\n      if (!isContinuous(scaleSpec.type)) {\n        domain = Array.from(domain);\n      }\n      scale.domain(domain as unknown[]);\n      this._updateMarkScale(id, scale, scaleDomain);\n    });\n  }\n\n  private _updateMarkScale(id: string, scale: IBaseScale, domain: unknown[] | Set<string>) {\n    const list = this._markAttributeScaleMap.get(id);\n    if (!list || list.length === 0) {\n      return;\n    }\n    list.forEach(info => {\n      if (!info.field || !info.markScale || info.markScale === scale) {\n        return;\n      }\n      if (isNil(info.changeDomain) || info.changeDomain === 'none' || isNil(info.seriesId)) {\n        isContinuous(scale.type) ? info.markScale.domain(domain as unknown[]) : scale.domain(Array.from(domain));\n        return;\n      }\n\n      const series = this._getSeriesBySeriesId(info.seriesId);\n      const isContinuousScale = isContinuous(scale.type);\n      const statistics = series.getRawDataStatisticsByField(info.field, isContinuousScale);\n\n      if (isEmpty(statistics)) {\n        isContinuous(scale.type) ? info.markScale.domain(domain as unknown[]) : scale.domain(Array.from(domain));\n        return;\n      }\n\n      if (info.changeDomain === 'expand') {\n        if (isContinuousScale) {\n          domain[0] = Math.min(domain[0], statistics.min);\n          domain[1] = Math.max(domain[1], statistics.max);\n        } else {\n          statistics.values.forEach((value: string) => {\n            (domain as Set<string>).add(value);\n          });\n          domain = Array.from(domain);\n        }\n        info.markScale.domain(domain as any[]);\n        return;\n      }\n      if (info.changeDomain === 'replace') {\n        if (isContinuousScale) {\n          info.markScale.domain([statistics.min, statistics.max]);\n        } else {\n          info.markScale.domain(statistics.values);\n        }\n        return;\n      }\n    });\n  }\n\n  registerMarkAttributeScale(spec: IVisualScale, seriesId: number): IBaseScale {\n    const scale = this._scaleMap.get(spec.scale);\n    let list = this._markAttributeScaleMap.get(spec.scale);\n    if (!list) {\n      list = [];\n      this._markAttributeScaleMap.set(spec.scale, list);\n    }\n    let markScale = scale;\n    if (isNil(spec.field) || (!isNil(spec.changeDomain) && spec.changeDomain !== 'none' && !isNil(seriesId))) {\n      markScale = scale.clone();\n    }\n    list.push({\n      ...spec,\n      seriesId,\n      markScale\n    });\n    return markScale;\n  }\n}\n"]}