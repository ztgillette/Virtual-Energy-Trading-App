{"version":3,"sources":["../src/theme/theme-manager.ts"],"names":[],"mappings":";;;AAAA,uCAAuG;AAEvG,+DAA2D;AAG3D,MAAa,YAAY;IAYvB,MAAM,CAAC,aAAa,CAAC,IAAY,EAAE,KAAsB;QACvD,IAAA,uBAAa,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAOD,MAAM,CAAC,QAAQ,CAAC,IAAY,EAAE,cAAuB,KAAK;QACxD,OAAO,IAAA,kBAAQ,EAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAOD,MAAM,CAAC,WAAW,CAAC,IAAY;QAC7B,OAAO,IAAA,qBAAW,EAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAOD,MAAM,CAAC,UAAU,CAAC,IAAS;QACzB,OAAO,IAAA,oBAAU,EAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAGD,MAAM,CAAC,eAAe;QACpB,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,0BAAgB,CAAC,CAAC;IACnD,CAAC;IAGD,MAAM,CAAC,eAAe,CAAC,IAAY;QACjC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAClC,OAAO;SACR;QACD,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC;QACtC,kCAAe,CAAC,OAAO,CAAC,CAAC,QAAiB,EAAE,EAAE,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IAClF,CAAC;IAGD,MAAM,CAAC,eAAe,CAAC,cAAuB,KAAK;QACjD,OAAO,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IAC5E,CAAC;IAGD,MAAM,CAAC,mBAAmB;QACxB,OAAO,YAAY,CAAC,iBAAiB,CAAC;IACxC,CAAC;;AAjEH,oCAkEC;AAhEiB,mBAAM,GAAG,gBAAM,CAAC;AAEjB,8BAAiB,GAAW,0BAAgB,CAAC","file":"theme-manager.js","sourcesContent":["import { defaultThemeName, getTheme, registerTheme, removeTheme, themeExist, themes } from './builtin';\nimport type { ITheme } from './interface';\nimport { InstanceManager } from '../core/instance-manager';\nimport type { IVChart } from '../core/interface';\n\nexport class ThemeManager {\n  /** 主题字典 */\n  static readonly themes = themes;\n\n  private static _currentThemeName: string = defaultThemeName; // 设置缺省为默认主题\n\n  /**\n   * 注册主题\n   * @param name 主题名称\n   * @param theme 主题配置\n   * @returns\n   */\n  static registerTheme(name: string, theme: Partial<ITheme>) {\n    registerTheme(name, theme);\n  }\n\n  /**\n   * 获取主题\n   * @param name 主题名称\n   * @returns\n   */\n  static getTheme(name: string, transformed: boolean = false) {\n    return getTheme(name);\n  }\n\n  /**\n   * 移除主题\n   * @param name 主题名称\n   * @returns 是否移除成功\n   */\n  static removeTheme(name: string): boolean {\n    return removeTheme(name);\n  }\n\n  /**\n   * 判断主题是否存在\n   * @param name 主题名称\n   * @returns 是否存在\n   */\n  static themeExist(name: any) {\n    return themeExist(name);\n  }\n\n  /** 获取图表默认主题（非用户配置） */\n  static getDefaultTheme(): ITheme {\n    return ThemeManager.themes.get(defaultThemeName);\n  }\n\n  /** 设置当前主题（所有实例生效） */\n  static setCurrentTheme(name: string) {\n    if (!ThemeManager.themeExist(name)) {\n      return;\n    }\n    ThemeManager._currentThemeName = name;\n    InstanceManager.forEach((instance: IVChart) => instance?.setCurrentTheme(name));\n  }\n\n  /** 获取当前主题（只能获取用户通过`setCurrentTheme`方法设置过的主题，默认值为默认主题） */\n  static getCurrentTheme(transformed: boolean = false): ITheme {\n    return ThemeManager.getTheme(ThemeManager._currentThemeName, transformed);\n  }\n\n  /** 获取当前主题名称（只能获取用户通过`setCurrentTheme`方法设置过的主题，默认值为默认主题） */\n  static getCurrentThemeName(): string {\n    return ThemeManager._currentThemeName;\n  }\n}\n"]}