{"version":3,"sources":["../src/theme/builtin/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0CAAwB;AACxB,yCAAuB;AAEvB,6CAA4C;AAC5C,8DAA0D;AAE1D,mCAAqC;AACrC,mDAAwD;AAsE/C,+FAtEA,uBAAc,OAsEA;AAjEV,QAAA,aAAa,GAA2B;IACnD,CAAC,kBAAU,CAAC,IAAI,CAAC,EAAE,kBAAU;CAE9B,CAAC;AAEW,QAAA,gBAAgB,GAAG,kBAAU,CAAC,IAAI,CAAC;AAGnC,QAAA,MAAM,GAAwB,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAa,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,qBAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAGrH,MAAM,iBAAiB,GAAwB,IAAI,GAAG,EAAE,CAAC;AAI5C,QAAA,cAAc,GAAyB,IAAI,GAAG,CACzD,MAAM,CAAC,IAAI,CAAC,qBAAa,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,wBAAgB,CAAC,CAAC,CACvE,CAAC;AAGK,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,KAAsB,EAAE,EAAE;IACpE,IAAI,CAAC,IAAI,EAAE;QACT,OAAO;KACR;IAED,MAAM,WAAW,GAAG,IAAA,sBAAc,EAAC,KAAK,CAAC,CAAC;IAC1C,cAAM,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAE9B,sBAAc,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACjC,CAAC,CAAC;AATW,QAAA,aAAa,iBASxB;AAOK,MAAM,QAAQ,GAAG,CAAC,OAAe,wBAAgB,EAAE,EAAE;IAC1D,IAAI,sBAAc,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAEzD,IAAA,qBAAa,EAAC,IAAI,EAAE,cAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;KACvC;IAED,OAAO,cAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC,CAAC;AAPW,QAAA,QAAQ,YAOnB;AAGK,MAAM,WAAW,GAAG,CAAC,IAAY,EAAW,EAAE;IACnD,OAAO,cAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,sBAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9F,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAGK,MAAM,UAAU,GAAG,CAAC,IAAS,EAAE,EAAE;IACtC,IAAI,CAAC,IAAA,iBAAQ,EAAC,IAAI,CAAC,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,OAAO,cAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC,CAAC;AALW,QAAA,UAAU,cAKrB;AAGK,MAAM,cAAc,GAAG,CAAC,KAAsB,EAAU,EAAE;;IAC/D,MAAM,aAAa,GAAG,MAAA,KAAK,CAAC,IAAI,mCAAI,wBAAgB,CAAC;IACrD,MAAM,SAAS,GAAG,IAAA,gBAAQ,EAAC,aAAa,CAAC,CAAC;IAC1C,OAAO,IAAA,wBAAU,EAAC,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC1C,CAAC,CAAC;AAJW,QAAA,cAAc,kBAIzB","file":"index.js","sourcesContent":["export * from './light';\nexport * from './dark';\n\nimport { isString } from '@visactor/vutils';\nimport { mergeTheme } from '../../util/theme/merge-theme';\nimport type { ITheme } from '../interface';\nimport { lightTheme } from './light';\nimport { getFunnelTheme } from './common/series/funnel';\n// import { darkTheme } from './dark';\n// import { preprocessTheme } from '../../util/theme/preprocess';\n\n/** 声明内置主题(含 token 未转换) */\nexport const builtinThemes: Record<string, ITheme> = {\n  [lightTheme.name]: lightTheme\n  // [darkTheme.name]: darkTheme\n};\n/** 默认主题名称 */\nexport const defaultThemeName = lightTheme.name;\n\n/** 全局主题 map (包含用户新注册的主题)(含 token 未转换) */\nexport const themes: Map<string, ITheme> = new Map(Object.keys(builtinThemes).map(key => [key, builtinThemes[key]]));\n\n/** 全局已将 token 转换的主题 map (包含用户新注册的主题) */\nconst transformedThemes: Map<string, ITheme> = new Map();\n// Object.keys(builtinThemes).map(key => [key, preprocessTheme(builtinThemes[key])] as [string, ITheme])\n\n/** 主题 map 中的元素是否 merge 过默认主题 (非默认主题的其他内置主题没有 merge 过默认主题) */\nexport const hasThemeMerged: Map<string, boolean> = new Map(\n  Object.keys(builtinThemes).map(key => [key, key === defaultThemeName])\n);\n\n/** 注册主题 */\nexport const registerTheme = (name: string, theme: Partial<ITheme>) => {\n  if (!name) {\n    return;\n  }\n  // 所有主题基于默认主题扩展，保证基础值\n  const mergedTheme = getMergedTheme(theme);\n  themes.set(name, mergedTheme);\n\n  hasThemeMerged.set(name, true);\n};\n/**\n * 获取注册过的主题\n * @param name 主题名称\n * @param transformed 是否获取 token 转换后的主题\n * @returns 返回主题\n */\nexport const getTheme = (name: string = defaultThemeName) => {\n  if (hasThemeMerged.has(name) && !hasThemeMerged.get(name)) {\n    // 重新 merge 默认主题\n    registerTheme(name, themes.get(name));\n  }\n\n  return themes.get(name);\n};\n\n/** 删除主题 */\nexport const removeTheme = (name: string): boolean => {\n  return themes.delete(name) && transformedThemes.delete(name) && hasThemeMerged.delete(name);\n};\n\n/** 主题是否存在 */\nexport const themeExist = (name: any) => {\n  if (!isString(name)) {\n    return false;\n  }\n  return themes.has(name);\n};\n\n/** 使新主题基于默认主题扩展，保证基础值 */\nexport const getMergedTheme = (theme: Partial<ITheme>): ITheme => {\n  const baseThemeName = theme.type ?? defaultThemeName;\n  const baseTheme = getTheme(baseThemeName);\n  return mergeTheme({}, baseTheme, theme);\n};\n\nexport { getFunnelTheme };\n"]}