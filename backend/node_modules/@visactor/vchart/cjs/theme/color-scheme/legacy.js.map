{"version":3,"sources":["../src/theme/color-scheme/legacy.ts"],"names":[],"mappings":";;;AAQa,QAAA,qBAAqB,GAA8C;IAC9E,gBAAgB,EAAE,gBAAgB;IAClC,iBAAiB,EAAE,gBAAgB;IACnC,kBAAkB,EAAE,eAAe;IACnC,mBAAmB,EAAE,uBAAuB;IAC5C,yBAAyB,EAAE,4BAA4B;IACvD,iBAAiB,EAAE,0BAA0B;IAC7C,eAAe,EAAE,yBAAyB;IAC1C,gBAAgB,EAAE,uBAAuB;IACzC,qBAAqB,EAAE,uBAAuB;IAC9C,oBAAoB,EAAE,wBAAwB;IAC9C,oBAAoB,EAAE,eAAe;CAItC,CAAC;AAEW,QAAA,qBAAqB,GAA8C;IAC9E,cAAc,EAAE,kBAAkB;IAClC,cAAc,EAAE,mBAAmB;IACnC,aAAa,EAAE,oBAAoB;IACnC,qBAAqB,EAAE,qBAAqB;IAC5C,0BAA0B,EAAE,2BAA2B;IACvD,wBAAwB,EAAE,mBAAmB;IAC7C,uBAAuB,EAAE,iBAAiB;IAC1C,qBAAqB,EAAE,kBAAkB;IACzC,sBAAsB,EAAE,sBAAsB;CAC/C,CAAC;AAEF,SAAgB,qBAAqB,CAAC,OAAsC,EAAE,GAAW;IAEvF,MAAM,SAAS,GAAG,6BAAqB,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAI,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;QACnC,OAAO,OAAO,CAAC,SAAS,CAAC,CAAC;KAC3B;IAED,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;QAChB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;KACrB;IAED,MAAM,MAAM,GAAG,6BAAqB,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAI,MAAM,EAAE;QACV,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;KACxB;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAjBD,sDAiBC","file":"legacy.js","sourcesContent":["// FIXME: token 兼容策略，照目前的设计不应该硬编码。\n// 后续需要二选一：\n// - 主题模块指定唯一一套支持的 token（可以保留这段硬编码）\n// - 在默认主题中做声明式的兼容（需要删除这段硬编码，并在 IColorKey 中支持新属性）\n\nimport type { BuiltinColorPalette } from './builtin';\nimport type { ColorSchemeItem, IColorSchemeStruct } from './interface';\n\nexport const newTokenToLegacyToken: Record<keyof BuiltinColorPalette, string> = {\n  primaryFontColor: 'titleFontColor',\n  tertiaryFontColor: 'labelFontColor',\n  axisLabelFontColor: 'axisFontColor',\n  axisMarkerFontColor: 'labelReverseFontColor',\n  dataZoomHandleStrokeColor: 'dataZoomHandlerStrokeColor',\n  sliderHandleColor: 'dataZoomHandlerFillColor',\n  sliderRailColor: 'dataZoomBackgroundColor',\n  sliderTrackColor: 'dataZoomSelectedColor',\n  playerControllerColor: 'dataZoomSelectedColor',\n  popupBackgroundColor: 'tooltipBackgroundColor',\n  hoverBackgroundColor: 'axisGridColor'\n  // 以下两个新 token 不做兼容策略，因为其对应的 legacy token 仍在使用\n  // axisMarkerBackgroundColor: 'primaryFontColor',\n  // markLineStrokeColor: 'primaryFontColor',\n};\n\nexport const legacyTokenToNewToken: Record<string, keyof BuiltinColorPalette> = {\n  titleFontColor: 'primaryFontColor',\n  labelFontColor: 'tertiaryFontColor',\n  axisFontColor: 'axisLabelFontColor',\n  labelReverseFontColor: 'axisMarkerFontColor',\n  dataZoomHandlerStrokeColor: 'dataZoomHandleStrokeColor',\n  dataZoomHandlerFillColor: 'sliderHandleColor',\n  dataZoomBackgroundColor: 'sliderRailColor',\n  dataZoomSelectedColor: 'sliderTrackColor',\n  tooltipBackgroundColor: 'popupBackgroundColor'\n};\n\nexport function getUpgradedTokenValue(palette: IColorSchemeStruct['palette'], key: string): ColorSchemeItem {\n  // 情况一：用户定义了包含旧 token 的新色板\n  const legacyKey = newTokenToLegacyToken[key];\n  if (legacyKey && palette[legacyKey]) {\n    return palette[legacyKey];\n  }\n  // 情况二：默认情况，用户尝试取色（大部分情况下在此退出）\n  if (palette[key]) {\n    return palette[key];\n  }\n  // 情况三：用户没有取到颜色，判断用户是否在尝试用旧 token 取色\n  const newKey = legacyTokenToNewToken[key];\n  if (newKey) {\n    return palette[newKey];\n  }\n  // 情况四：真的取不到颜色\n  return undefined;\n}\n"]}