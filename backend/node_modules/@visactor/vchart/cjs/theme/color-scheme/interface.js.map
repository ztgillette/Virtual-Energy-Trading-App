{"version":3,"sources":["../src/theme/color-scheme/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { SeriesTypeEnum, SeriesTypeForThemeEnum } from '../../series/interface';\nimport type { IGradient } from '../../typings';\n\n/** 色板总结构，包含数据色板和语义色板 */\nexport type IColorSchemeStruct = {\n  /** 数据色板 */\n  dataScheme: Array<DataSchemeItem> | ProgressiveDataScheme<DataSchemeItem>;\n\n  /** 语义色板 */\n  palette?: {\n    /** 主色调（可选） */\n    bandColor?: ColorSchemeItem;\n    /** 背景颜色（可选） */\n    backgroundColor?: ColorSchemeItem;\n    /** 其他的语义化色值 */\n    [key: string]: ColorSchemeItem;\n  };\n};\n\n/** 渐进式数据色板：由多个色板组成，应用时会依次调用色板的 `isAvailable` 回调，如果当前回调返回 true 则立即应用对应色板 */\nexport type ProgressiveDataScheme<T> = Array<IProgressiveDataSchemeCase<T>>;\n\nexport interface IProgressiveDataSchemeCase<T> {\n  /** 可选，适合此色板的 domain 数量 */\n  maxDomainLength?: number;\n  /** 可选，自定义回调，返回是否应用此色板，将覆盖 maxDomainLength 等配置 */\n  isAvailable?: boolean | IsProgressiveDataSchemeAvailableCallback;\n  /** 色板 */\n  scheme: T[];\n}\n\nexport type IsProgressiveDataSchemeAvailableCallback = (domain: any[]) => boolean;\n\n/** 语义化色值的色值索引 */\nexport interface IColorKey {\n  /** 颜色type声明 */\n  type: 'palette';\n\n  /** 颜色 token */\n  key: string;\n\n  /** 明度系数（可选，0~1） */\n  l?: number;\n\n  /** 透明度系数（可选，0~1） */\n  a?: number;\n\n  /**\n   * 默认色值，在没有取到 key 对应的色值时返回\n   * @since 1.3.0\n   */\n  default?: ColorSchemeItem;\n}\n\nexport type DataSchemeItem = string | IColorKey;\n\nexport type ColorSchemeItem = string | IGradient; // 纯色或渐变色\n\nexport type ColorScheme = Array<string> | ProgressiveDataScheme<string> | IColorSchemeStruct;\n\nexport type IThemeColorScheme = {\n  /** 必选 */\n  default: ColorScheme;\n} & Partial<Record<SeriesTypeEnum, ColorScheme>> &\n  Partial<Record<SeriesTypeForThemeEnum, ColorScheme>>;\n"]}