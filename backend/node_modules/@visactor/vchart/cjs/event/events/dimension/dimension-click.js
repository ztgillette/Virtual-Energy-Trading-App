"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.DimensionClickEvent = void 0;

const event_1 = require("../../../constant/event"), base_1 = require("./base");

class DimensionClickEvent extends base_1.DimensionEvent {
    constructor() {
        super(...arguments), this.onClick = params => {
            if (!params) return;
            const x = params.event.viewX, y = params.event.viewY, targetDimensionInfo = this.getTargetDimensionInfo(x, y);
            targetDimensionInfo && this._callback.call(null, Object.assign(Object.assign({}, params), {
                action: "click",
                dimensionInfo: targetDimensionInfo.slice()
            }));
        };
    }
    register(eType, handler) {
        this._callback = handler.callback, this._eventDispatcher.register("pointertap", {
            query: Object.assign(Object.assign({}, handler.query), {
                source: event_1.Event_Source_Type.chart
            }),
            callback: this.onClick
        });
    }
    unregister() {
        this._eventDispatcher.unregister("pointertap", {
            query: null,
            callback: this.onClick
        });
    }
}

exports.DimensionClickEvent = DimensionClickEvent;
//# sourceMappingURL=dimension-click.js.map
