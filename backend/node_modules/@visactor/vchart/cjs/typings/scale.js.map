{"version":3,"sources":["../src/typings/scale.ts"],"names":[],"mappings":"","file":"scale.js","sourcesContent":["export type DomainType = any;\nexport type RangeType = any;\n\nexport type QuantScaleType = 'linear';\n// | 'pow'\n// | 'sqrt'\n// | 'log'\n// | 'time'\n// | 'utc'\n// | 'sequential';\nexport type DiscreteScaleType = 'ordinal' | 'band' | 'point' | 'threshold';\n// export type DiscretizingScaleType =\n//   | 'quantile'\n//   | 'quantize'\n//   | 'threshold'\n//   | 'bin-ordinal';\nexport type ScaleType = QuantScaleType | DiscreteScaleType;\n// | DiscretizingScaleType\n// | 'identity';\n\nexport interface IBaseScaleSpec {\n  name: string;\n  type?: ScaleType;\n  domain?: DomainType[];\n  unknown?: any;\n}\n\nexport interface IContinuousScaleSpec extends IBaseScaleSpec {\n  range?: RangeType[];\n  // bins?: number[] | { step: number; start?: number; stop?: number };\n  clamp?: boolean;\n  padding?: number;\n}\n\nexport interface IBaseBandScaleSpec extends IBaseScaleSpec {\n  range?: RangeType[];\n  padding?: number;\n  paddingOuter?: number;\n  align?: number;\n  round?: boolean;\n}\n\nexport type INumericScaleSpec = IContinuousScaleSpec;\nexport interface ILinearScaleSpec extends INumericScaleSpec {\n  type: 'linear';\n}\n\nexport interface IPointScaleSpec extends IBaseBandScaleSpec {\n  type: 'point';\n}\n\nexport interface IOrdinalScaleSpec extends IBaseScaleSpec {\n  type: 'ordinal';\n}\n"]}