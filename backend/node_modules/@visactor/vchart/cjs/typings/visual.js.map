{"version":3,"sources":["../src/typings/visual.ts"],"names":[],"mappings":"","file":"visual.js","sourcesContent":["import type { PopTipAttributes } from '@visactor/vrender-components';\nimport type { DataView } from '@visactor/vdataset';\nimport type { Cursor } from './cursor';\nimport type { InterpolateType } from './interpolate';\nimport type { ScaleType } from './scale';\nimport type { ShapeType } from './shape';\nimport type { IPoint } from './coordinate';\nimport type { IModelMarkAttributeContext } from '../compile/mark/interface';\nimport type { Datum } from './common';\nimport type { IPadding } from '@visactor/vutils';\nimport type { IColorKey } from '../theme/color-scheme/interface';\nimport type { ITokenKey } from '../theme/token/interface';\nimport type {\n  IRepeatType,\n  TextAlignType,\n  TextBaselineType,\n  IRichTextAttribute,\n  IGraphicStyle,\n  IColor\n} from '@visactor/vrender-core';\n\n// 基础的visual 对应 scale 的属性\nexport interface IVisualSpecBase<D, T> {\n  /**\n   * type of scale\n   */\n  type: ScaleType;\n  /**\n   * will set to scale.domain, it means input of scale\n   */\n  domain: D[];\n  /**\n   * will set to scale.range, it means output of scale\n   */\n  range: T[];\n  /**\n   * will set to scale.specified if scale support, as a key-value pair matching capability\n   * @since 1.1.0\n   */\n  specified?: { [key: string]: unknown };\n  /**\n   * enable clamp in linear scale\n   * If clamp is enabled, the return value of the scale is always within the scale’s range.\n   * @since 1.13.6\n   * @default false\n   */\n  clamp?: boolean;\n}\n// 用来给用户进行mark.style上的映射配置。所以要配置数据维度\nexport interface IVisualSpecStyle<D, T> extends IVisualSpecBase<D, T> {\n  /**\n   * 指定映射对应的数据字段\n   */\n  field?: string;\n}\n\nexport type IDataDomainSpec = {\n  /**\n   * 数据的id\n   */\n  dataId: string;\n  /**\n   * 数据字段\n   */\n  fields: string[];\n};\n\n// 用来提供给用户进行 scale 配置 所以名字是必选的 对用户配置\nexport interface IVisualSpecScale<D, T> extends Omit<IVisualSpecBase<D, T>, 'domain'> {\n  /**\n   * scale 的id\n   */\n  id: string;\n  /**\n   * 定义域范围\n   */\n  domain:\n    | IVisualSpecBase<D, T>['domain']\n    // 使用数据的字段值，如果 scale 是连续的，就取区间，如果是离散的就使用 values 。\n    // 不考虑图表内的交互等数据筛选，这里只用原始数据的统计信息\n    | IDataDomainSpec[];\n}\n// 对用户配置\nexport type IVisual<D = any, R = any> = IVisualSpecStyle<D, R> | IVisualScale;\n\nexport interface IVisualScale {\n  /**\n   * 对应 IVisualSpecScale 的用户配置 scale-id\n   */\n  scale: string;\n  /**\n   * 指定参与映射的数据字段\n   */\n  field?: string;\n  /**\n   * 当用户指定 field 后，用该属性来控制值域。\n   * @default 'none'\n   */\n  changeDomain?: 'none' | 'replace' | 'expand';\n}\n\nexport type FunctionType<T> = (datum: Datum, context: IModelMarkAttributeContext, source?: DataView) => T;\nexport type ValueType<T> = T;\nexport type VisualType<T> = ValueType<T> | FunctionType<T> | IVisual<unknown, T>;\n\nexport type TextureType =\n  | 'circle'\n  | 'dimond'\n  | 'rect'\n  | 'vertical-line'\n  | 'horizontal-line'\n  | 'bias-lr'\n  | 'bias-rl'\n  | 'grid';\n\n/**\n * style格式转换\n */\nexport type ConvertToMarkStyleSpec<T extends Record<string, any>> = {\n  [key in keyof T]: VisualType<T[key]>;\n};\n\n/**\n * border\n */\nexport interface IBorder {\n  /**\n   * 边框离图形边缘的距离\n   */\n  distance: number | string;\n  /**\n   * 边框的颜色\n   */\n  stroke?: string | IGradient;\n  /**\n   * 边框的透明度\n   */\n  strokeOpacity?: number;\n  /**\n   * 边框线的宽度\n   */\n  lineWidth?: number;\n  /**\n   * 给边框配置虚线模式。它使用一组值来指定描述模式的线和间隙的交替长度\n   */\n  lineDash?: number[];\n  /**\n   * 设置边框的虚线偏移量\n   */\n  lineDashOffset?: number;\n}\n\nexport interface ICommonSpec {\n  /**\n   * 图形是否可见\n   */\n  visible?: boolean;\n  /**\n   * 图形的x坐标\n   */\n  x?: number;\n  /**\n   * 图形的y坐标\n   */\n  y?: number;\n  /**\n   * 图形的z坐标，仅适用于3D图表\n   */\n  z?: number;\n  /**\n   * 图形的描边颜色。\n   * 支持使用 'rgb(255,255,255)'，'rgba(255,255,255,1)'，'#fff' 等方式设置为纯色，也支持设置为渐变色描边\n   * @todo 隔离主题和 spec 配置\n   * IColorKey 类型只适用于主题\n   */\n  stroke?: string | IGradient | false | (number | boolean)[] | IColorKey | null;\n  /**\n   * 描边透明度\n   */\n  strokeOpacity?: number;\n  /**\n   * 图形的透明度，既影响描边也影响填充\n   */\n  opacity?: number;\n  /**\n   * 图形的描边宽度\n   */\n  lineWidth?: number;\n  /**\n   * 给描边配置虚线模式。它使用一组值来指定描述模式的线和间隙的交替长度\n   */\n  lineDash?: number[];\n  /**\n   * 设置虚线偏移量的属性\n   */\n  lineDashOffset?: number;\n  /**\n   * 设置图形的鼠标样式\n   */\n  cursor?: Cursor;\n  /**\n   * 设置图形的层级，主意这个是相对层级，图形引擎绘制的时候，会对相同group下的所有图形根据zIndex进行排序，然后从小到大进行渲染\n   */\n  zIndex?: number;\n  /**\n   * 图形的旋转角度\n   */\n  angle?: number;\n  /**\n   * 基于AABB的锚点位置，用于简单的定位某些path的位置\n   */\n  anchor?: [number, number];\n\n  /**\n   * x方向的缩放比例，默认为1，即不进行缩放\n   */\n  scaleX?: number;\n  /**\n   * y方向的缩放比例，默认为1，即不进行缩放\n   */\n  scaleY?: number;\n  /**\n   * 图形缩放中心\n   * @since 1.4.0\n   * 可以配置固定坐标，例如 [100, 100]；或者百分比坐标，例如 ['50%', '50%']，代表以图元中心为缩放中心\n   * */\n  scaleCenter?: [number | string, number | string];\n\n  // 3d旋转的属性\n  /**\n   * x方向的旋转角度\n   */\n  alpha?: number;\n  /**\n   * y方向的旋转角度\n   */\n  beta?: number;\n  /**\n   * 3d的锚点位置\n   */\n  anchor3d?: [number, number];\n\n  /**\n   * 选择模式，精确模式，粗糙模式（包围盒模式），自定义模式\n   */\n  pickMode?: 'accurate' | 'imprecise' | 'custom';\n  /**\n   * bounds的计算模式\n   */\n  boundsMode?: 'accurate' | 'imprecise';\n\n  /**\n   * 用于扩展描边的拾取范围，为 0 就是默认线宽，正数就加宽，负数就减宽\n   * @default 0\n   * @since 1.7.3\n   */\n  pickStrokeBuffer?: number;\n\n  // 以下是纹理相关的属性\n  /**\n   * 纹理的类型\n   */\n  texture?: TextureType | string;\n  /**\n   * 纹理的颜色\n   */\n  textureColor?: string;\n  /**\n   * 纹理单元的大小\n   */\n  textureSize?: number; // 纹理大小\n  /**\n   * 纹理之间空隙的大小\n   */\n  texturePadding?: number;\n\n  /**\n   * 外边框，外描边，描边位于图形外侧\n   */\n  outerBorder?: IBorder;\n  /**\n   * 内边框，内描边，描边位于图形内侧\n   */\n  innerBorder?: IBorder;\n  /**\n   * html 浮层，会将配置的html相关内容，绝对定位到图元的位置\n   * @experimental\n   * @since 1.10.0\n   */\n  html?: IMarkHtmlSpec;\n\n  [key: string]: any;\n}\n\nexport interface IFillMarkSpec extends ICommonSpec {\n  /**\n   * 图形的填充颜色\n   * @todo 隔离主题和 spec 配置\n   * IColorKey 类型只适用于主题\n   */\n  fill?: VisualType<string> | IGradient | false | IColorKey;\n  /**\n   * 填充的透明度\n   */\n  fillOpacity?: number;\n\n  /**\n   * 图形的背景色，支持纯色、image元素、canvas元素\n   */\n  background?: IColor | HTMLImageElement | HTMLCanvasElement | null;\n}\n\nexport type IMarkHtmlSpec = Partial<IGraphicStyle['html']>;\n\nexport interface ISymbolMarkSpec extends IFillMarkSpec {\n  /**\n   * x方向的偏移量\n   */\n  dx?: number;\n  /**\n   * y方向的偏移量\n   */\n  dy?: number;\n  /**\n   * 大小，相当于外接圆的半径\n   */\n  size?: number | number[];\n  /** 对外声明使用shape，vrender图形属性对应的是shape */\n  shape?: ShapeType | string;\n  /**\n   * 标记的类型\n   * FIXME:  vrender Symbol接收的图形属性，暂时都申明一下\n   * */\n  symbolType?: ShapeType | string;\n  /**\n   * x方向的缩放比例，默认为1，即不进行缩放\n   */\n  scaleX?: number;\n  /**\n   * y方向的缩放比例，默认为1，即不进行缩放\n   */\n  scaleY?: number;\n}\n\n// lineMark 和 areaMark 共同配置\nexport interface ILineLikeMarkSpec extends IFillMarkSpec {\n  /**\n   * 取消的差值类型，默认为线性插值，也就是普通的折线\n   */\n  curveType?: InterpolateType;\n  /**\n   * 设置点是否有效，也就是是否合法\n   */\n  defined?: boolean;\n}\n\nexport interface IAreaMarkSpec extends ILineLikeMarkSpec {\n  /**\n   * 面积的x1值\n   */\n  x1?: number;\n  /**\n   * 面积的y1值\n   */\n  y1?: number;\n  /**\n   * 面积图元的方向，\n   * horizontal - 水平方向\n   * vertical - 垂直方向\n   */\n  orient?: 'horizontal' | 'vertical';\n}\n\nexport interface ILineMarkSpec extends ILineLikeMarkSpec {\n  /**\n   * 指定如何绘制每一条线段末端的属性。有 3 个可能的值，分别是：'butt', 'round' and 'square'。默认值是 butt。\n   */\n  lineCap?: LineStrokeCap;\n  /**\n   * 用来设置 2 个长度不为 0 的相连部分（线段、圆弧、曲线）如何连接在一起的属性（长度为 0 的变形部分，其指定的末端和控制点在同一位置，会被忽略）。此属性有 3 个值： 'round', 'bevel' and 'miter'。默认值是 'miter'\n   */\n  lineJoin?: LineStrokeJoin;\n  /**\n   * 设置斜接面限制比例的属性。当获取属性值时，会返回当前的值（默认值是 10.0 ）。当给属性赋值时，0、负数、 Infinity 和 NaN 都会被忽略；除此之外都会被赋予一个新值。\n   */\n  miterLimit?: number;\n  /**\n   * stroke 的有界缓冲区\n   */\n  strokeBoundsBuffer?: number;\n}\n\nexport interface IRuleMarkSpec extends ILineMarkSpec {\n  /**\n   * 终点x坐标\n   */\n  x1?: number;\n  /**\n   * 终点y坐标\n   */\n  y1?: number;\n}\n\nexport interface ITextMarkSpec extends IFillMarkSpec {\n  /**\n   * 文字内容\n   */\n  text?: string | number | string[] | number[];\n  /**\n   * x 方向偏移\n   */\n  dx?: number;\n  /**\n   * y 方向偏移\n   */\n  dy?: number;\n  /**\n   * 字号\n   */\n  fontSize?: number | ITokenKey;\n  /**\n   * 文字水平方向的对齐方式\n   */\n  textAlign?: TextAlign;\n  /**\n   * 文字竖直方向的对齐方式\n   */\n  textBaseline?: TextBaseLine;\n  /**\n   * 字体\n   */\n  fontFamily?: string;\n  /**\n   * 字重\n   */\n  fontWeight?: FontWeight;\n  /**\n   * 字体样式，是否为斜体等\n   */\n  fontStyle?: FontStyle;\n  /**\n   * 文字的最大长度\n   */\n  maxLineWidth?: number;\n  /**\n   * 文字超出 maxLineWidth 后的省略符\n   */\n  ellipsis?: string;\n  /**\n   * 文本省略的位置，默认尾部省略\n   * 1. 'start' 文字首部省略\n   * 2. 'middle' 文本中间省略\n   * 3. 'end' 文本尾部省略\n   * @default 'end'\n   * @since 1.7.3\n   */\n  suffixPosition?: 'start' | 'end' | 'middle';\n  /**\n   * 下划线\n   */\n  underline?: boolean;\n  /**\n   * 下划线的虚线样式\n   */\n  underlineDash?: number[];\n  /**\n   * 下划线的虚线偏移量\n   */\n  underlineOffset?: number;\n  /**\n   * 中划线\n   */\n  lineThrough?: boolean;\n  /**\n   * 行高（1.3.1 版本新增字符串类型表示比例值，如\"150%\"）\n   * @since 1.3.1\n   */\n  lineHeight?: number | string | ITokenKey;\n  /**\n   * poptip 相关配置\n   */\n  poptip?: PopTipAttributes;\n  /**\n   * 文本的排布方向，如果需要文本纵向排布，可以配置为 'vertical'\n   * @default 'horizontal'\n   */\n  direction?: 'horizontal' | 'vertical';\n  /*\n   * 单词断行\n   */\n  wordBreak?: 'break-word' | 'break-all' | 'keep-all';\n  /**\n   * 高度限制控制显示内容及省略号\n   */\n  heightLimit?: number;\n  /**\n   * 按照行数限制显示内容及省略号\n   */\n  lineClamp?: number;\n  /**\n   * 设置如何处理空白字符\n   */\n  whiteSpace?: 'normal' | 'no-wrap';\n}\n\nexport type IRichTextMarkSpec = IRichTextAttribute &\n  IFillMarkSpec & { type: 'rich'; text: IRichTextAttribute['textConfig'] };\n\nexport type IComposedTextMarkSpec = ITextMarkSpec | IRichTextMarkSpec;\n\nexport type IPositionedTextMarkSpec = Omit<ITextMarkSpec, 'align' | 'textAlign' | 'baseline' | 'textBaseline'>;\n\nexport interface IRectMarkSpec extends IFillMarkSpec {\n  /**\n   * 圆角配置。\n   * 1. 如果传入数值，则统一为四个角设置圆角\n   * 2. 如果传入数组，则分别为 [上左, 上右, 下右, 下左]\n   */\n  cornerRadius?: number | number[];\n  /**\n   * 宽度\n   */\n  width?: number;\n  /**\n   * 高度\n   */\n  height?: number;\n  /**\n   * x方向终点坐标\n   */\n  x1?: number;\n  /**\n   * y方向终点坐标\n   */\n\n  y1?: number;\n}\n\nexport interface IBoxPlotMarkSpec extends ICommonSpec {\n  /**\n   * box描边宽度\n   */\n  lineWidth?: number;\n  /**\n   * box宽度\n   */\n  boxWidth?: number;\n  /**\n   * 最大最小值宽度\n   */\n  shaftWidth?: number;\n  /**\n   * 中轴线类型\n   */\n  shaftShape?: BoxPlotShaftShape;\n  /**\n   * 盒子填充颜色，为空则不填充\n   */\n  boxFill?: string;\n  // /**\n  //  * 描边颜色\n  //  */\n  // stroke?: string;\n  /**\n   * 中轴线透明度，仅当shaftType=bar时生效\n   */\n  shaftFillOpacity?: number;\n  /**\n   * 最小值\n   */\n  min?: (datum: Datum) => number;\n  /**\n   * 25%分位数\n   */\n  q1?: (datum: Datum) => number;\n  /**\n   * 中位数\n   */\n  median?: (datum: Datum) => number;\n  /**\n   * 75%分位数\n   */\n  q3?: (datum: Datum) => number;\n  /**\n   * 最大值\n   */\n  max?: (datum: Datum) => number;\n}\n\nexport interface IRippleMarkSpec extends ICommonSpec {\n  /**\n   * 波纹密度ripple\n   * ripple 取值范为[0,1]\n   */\n  ripple?: number;\n  /**\n   * 水波纹最大半径\n   */\n  size?: number;\n}\n\nexport interface ILiquidMarkSpec extends ICommonSpec {\n  /**\n   * 波浪的变化状态，范围为 [0, 1]\n   */\n  wave?: number;\n}\n\nexport interface ILiquidOutlineSpec extends ISymbolMarkSpec {\n  /**\n   * 描边的宽度\n   */\n  lineWidth: number;\n}\n\nexport interface IOutlierMarkSpec {\n  /**\n   * 异常点填充颜色\n   */\n  fill?: string;\n  /**\n   * 异常点大小\n   */\n  size?: number;\n}\n\nexport interface IPathMarkSpec extends IFillMarkSpec {\n  path?: string;\n  // TODO: 该属性后续可能会删除，未定\n  /**\n   * 平滑缩放，不然会发生跳变，在地图交互场景需要配置为true；常规path缩放不需要\n   */\n  smoothScale?: boolean;\n}\n\nexport interface ILinkPathMarkSpec extends IFillMarkSpec {\n  /**\n   * 连边起点的x坐标\n   */\n  x0?: number;\n  /**\n   * 连边起点的y坐标\n   */\n  y0?: number;\n  /**\n   * 连边终点的x坐标\n   */\n  x1?: number;\n  /**\n   * 连边终点的y坐标\n   */\n  y1?: number;\n  /**\n   * 连边的厚度，也可以理解为宽度\n   */\n  thickness?: number;\n  /**\n   * 连边的曲度，决定了连边的弯曲程度，取值范围为0-1，\n   * 0表示不弯曲，也就是直线\n   * 1表示最大的弯曲度，\n   * 默认值为0.5\n   */\n  curvature?: number;\n  /** round all the coordinates */\n  round?: boolean;\n  /** the ratio of normal style path */\n  ratio?: number;\n  /**\n   * 对齐方式\n   */\n  align?: 'start' | 'end' | 'center';\n  /**\n   * 连边的类型\n   *\n   */\n  pathType?: 'line' | 'smooth' | 'polyline';\n  /**\n   * 是否展示终点的箭头\n   */\n  endArrow?: boolean;\n  /**\n   * 是否展示起点的箭头\n   */\n  startArrow?: boolean;\n  /**\n   * 背景线的样式，主要用于部分高亮的场景\n   */\n  backgroundStyle?: any;\n  /**\n   * 连边的方向\n   */\n  direction?: 'horizontal' | 'vertical' | 'LR' | 'RL' | 'TB' | 'BL' | 'radial';\n}\n\n/**\n * arc图元的视觉通道配置\n */\nexport interface IArcMarkSpec extends IFillMarkSpec {\n  /**\n   * 圆弧的开始角度\n   */\n  startAngle?: number;\n  /**\n   * 圆弧的结束角度\n   */\n  endAngle?: number;\n  /**\n   * 间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 padRadius * | padAngle |\n   * 这个距离在弧的开始和结束处都是相等的；\n   * 间隔角度通常只应用于环形扇区（即当内半径大于 0）\n   */\n  padAngle?: number;\n\n  /**\n   * 外径，既外半径\n   */\n  outerRadius?: number;\n  /**\n   * 内径，既内半径\n   */\n  innerRadius?: number;\n  /**\n   * 圆角\n   */\n  cornerRadius?: number;\n  /**\n   * 内边距\n   */\n  innerPadding?: number;\n  /**\n   * 外边距\n   */\n  outerPadding?: number;\n  /**\n   * arc的中心点偏移距离，一般是通过在交互状态下设置这个属性来实现将扇区移出中心的一个效果\n   */\n  centerOffset?: number;\n  /**\n   * arc 的 roundCap 属性，即圆角是否伸出 startAngle 和 endAngle 之外\n   */\n  cap?: boolean | [boolean, boolean];\n  /**\n   * arc 在 roundCap 打开且应用环形渐变时是否对 cap 部分生效\n   */\n  autoCapConical?: boolean;\n}\n\nexport interface ICellMarkSpec extends ISymbolMarkSpec {\n  /**\n   * 内边距\n   */\n  padding?: number | number[] | IPadding;\n}\n\nexport interface IGroupMarkSpec extends IFillMarkSpec {\n  /**\n   * 是否开启裁剪\n   */\n  clip?: boolean;\n  /**\n   * 宽度\n   */\n  width?: number;\n  /**\n   * 高度\n   */\n  height?: number;\n  /**\n   * 圆角配置。\n   * 1. 如果传入数值，则统一为四个角设置圆角\n   * 2. 如果传入数组，则分别为 [上左, 上右, 下右, 下左]\n   */\n  cornerRadius?: number | number[];\n}\n\nexport interface IPolygonMarkSpec extends ICommonSpec, IFillMarkSpec {\n  /**\n   * 顶点坐标\n   */\n  points?: IPoint[];\n  /**\n   * 圆角配置，支持数组配置，数组的顺序同组成 polygon 的顺序对应\n   */\n  cornerRadius?: number | number[];\n  /**\n   * x方向的缩放比例，默认为1，即不进行缩放\n   */\n  scaleX?: number;\n  /**\n   * y方向的缩放比例，默认为1，即不进行缩放\n   */\n  scaleY?: number;\n}\n\n/**\n * ImageFill\n */\nexport type RepeatType = 'no-repeat' | 'repeat-x' | 'repeat-y' | 'repeat';\nexport type RepeatXYType = 'no-repeat' | 'repeat' | 'stretch';\nexport type ImageOriginType = 'top' | 'bottom';\n\n/**\n *  gradient\n */\nexport type GradientPropValue<T> = ValueType<T> | FunctionType<T>;\nexport type GradientStop = {\n  /**\n   * 渐变色的偏移量，0-1的值\n   */\n  offset: GradientPropValue<number>;\n  /**\n   * 渐变色的颜色\n   */\n  color?: GradientPropValue<string>;\n  /**\n   * 渐变色的透明度\n   */\n  opacity?: number;\n};\nexport interface IGradientLinear {\n  /**\n   * 渐变色的起点x坐标，0-1的值，相对于图形包围盒x方向取值的比例值\n   */\n  x0?: GradientPropValue<number>;\n  /**\n   * 渐变色的起点y坐标，0-1的值，相对于图形包围盒y方向取值的比例值\n   */\n  y0?: GradientPropValue<number>;\n  /**\n   * 渐变色的终点x坐标，0-1的值，相对于图形包围盒x方向取值的比例值\n   */\n  x1?: GradientPropValue<number>;\n  /**\n   * 渐变色的终点y坐标，0-1的值，相对于图形包围盒y方向取值的比例值\n   */\n  y1?: GradientPropValue<number>;\n  /**\n   * 渐变色的颜色\n   */\n  stops: GradientStop[];\n  /**\n   * 渐变色的类型设置为 'linear'，即线形渐变\n   */\n  gradient: 'linear';\n}\n\nexport interface IGradientRadial {\n  /**\n   * 径向渐变的起点的半径\n   */\n  r0?: GradientPropValue<number>;\n  /**\n   * 径向渐变的起点的x坐标\n   */\n  x0?: GradientPropValue<number>;\n  /**\n   * 径向渐变的起点的y坐标\n   */\n  y0?: GradientPropValue<number>;\n  /**\n   * 径向渐变的终点的x坐标\n   */\n  x1?: GradientPropValue<number>;\n  /**\n   * 径向渐变的终点的y坐标\n   */\n  y1?: GradientPropValue<number>;\n  /**\n   * 径向渐变的终点的半径\n   */\n  r1?: GradientPropValue<number>;\n  /**\n   * 渐变色的颜色\n   */\n  stops: GradientStop[];\n  /**\n   * 渐变色的类型设置为 'radial'，即径向渐变\n   */\n  gradient: 'radial';\n}\n\nexport interface IGradientConical {\n  /**\n   * 锥形渐变的中心点x坐标\n   */\n  x?: GradientPropValue<number>;\n  /**\n   * 锥形渐变的中心点y坐标\n   */\n  y?: GradientPropValue<number>;\n  /**\n   * 锥形渐变的开始角度\n   */\n  startAngle?: GradientPropValue<number>;\n  /**\n   * 锥形渐变的结束角度\n   */\n  endAngle?: GradientPropValue<number>;\n  /**\n   * 锥形渐变的颜色\n   */\n  stops: GradientStop[];\n  /**\n   * 渐变色的类型设置为 'conical'，即锥形渐变\n   */\n  gradient: 'conical';\n}\n\nexport type GradientType = 'linear' | 'radial' | 'conical';\nexport type IGradient = IGradientLinear | IGradientRadial | IGradientConical;\n\nexport type LineStrokeCap = 'butt' | 'round' | 'square';\nexport type LineStrokeJoin = 'arcs' | 'bevel' | 'miter' | 'miter-clip' | 'round';\n\nexport type BoxPlotShaftShape = 'line' | 'bar';\n/**\n *  threshold\n */\nexport interface IThresholdStyle extends IVisualSpecStyle<number, string> {\n  domain: number[];\n  field: string;\n  range: string[];\n  type: 'threshold';\n}\n\n// FIXME: For some tool methods that need to use common configuration types\nexport interface IUnknownMarkSpec extends ICommonSpec {\n  [key: string]: unknown;\n}\n\nexport interface IImageMarkSpec extends IFillMarkSpec {\n  /**\n   * 圆角配置。\n   * 1. 如果传入数值，则统一为四个角设置圆角\n   * 2. 如果传入数组，则分别为 [上左, 上右, 下右, 下左]\n   */\n  cornerRadius?: number | number[];\n  /**\n   * 图片的宽度\n   */\n  width?: number;\n  /**\n   * 图片的高度\n   */\n  height?: number;\n  /**\n   * 当图片的宽度小于 width 时，图片的重复方式\n   */\n  repeatX?: IRepeatType;\n  /**\n   * 当图片的高度小于 height 时，图片的重复方式\n   */\n  repeatY?: IRepeatType;\n  /**\n   * 设置图片的内容，支持三种类型：\n   * 1. string类型，可以是图片资源的路径或者是svg 标签字符串\n   * 2. image 元素\n   * 3. canvas 元素\n   */\n  image?: string | HTMLImageElement | HTMLCanvasElement;\n}\n\n/**\n * text\n */\nexport type TextAlign = TextAlignType;\nexport type TextBaseLine = TextBaselineType;\nexport type FontStyle = 'normal' | 'italic' | 'oblique' | string;\nexport type FontWeight = 'normal' | 'bold' | 'lighter' | 'bolder' | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\n"]}