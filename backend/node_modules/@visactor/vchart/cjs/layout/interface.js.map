{"version":3,"sources":["../src/layout/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IBoundsLike } from '@visactor/vutils';\nimport type { StringOrNumber } from '../typings/common';\nimport type { IOrientType, IPadding, IRect } from '../typings/space';\nimport type { IPoint } from '../typings/coordinate';\nimport type { ILayoutNumber, ILayoutPaddingSpec, ILayoutPoint, ILayoutRect, ILayoutType } from '../typings/layout';\nimport type { ILayoutModel } from '../model/interface';\n\nexport interface IBaseLayout {\n  /**\n   * 对一组布局元素布局\n   * 布局策略随意\n   * @param item 布局元素数组\n   * @param chartLayoutRect 排除图表 padding 后的图表的布局矩形，原点是图表绘制区域左上角。\n   * @param chartViewBox 图表在画布中的可用空间，包含图表padding，原点是画布左上角\n   * @returns\n   */\n  layoutItems: LayoutCallBack;\n}\n\nexport type LayoutCallBack = (\n  chart: any,\n  item: ILayoutItem[],\n  chartLayoutRect: IRect,\n  chartViewBox: IBoundsLike\n) => void;\n\nexport interface ILayoutSpecBase {\n  /**\n   * 布局的类型，现在支持 grid布局和默认布局（基于占位的布局）\n   */\n  type: string;\n}\n\nexport type ElementSpec = (\n  | {\n      /**\n       * 组件对应的spec key，如'legends'表示图例\n       */\n      modelKey: string;\n      /**\n       * 组件对应的序号\n       */\n      modelIndex: number;\n    }\n  | {\n      /**\n       * 组件对应的id\n       */\n      modelId: string;\n    }\n) & {\n  /**\n   * 组件在grid布局中所在的列。从左向右，从 0 开始计数\n   */\n  col: number;\n  /**\n   * 组件在grid布局中所在的列跨度，即占了几列，默认值为1\n   */\n  colSpan?: number;\n  /**\n   * 组件在grid布局中所在的行。从上向下，从 0 开始计数。\n   */\n  row: number;\n  /**\n   * 组件在grid布局中所在的行跨度，即占了几行，默认值为1\n   */\n  rowSpan?: number;\n};\n\nexport interface IGridLayoutSpec extends ILayoutSpecBase {\n  /**\n   * 设置布局类型为grid布局\n   */\n  type: 'grid';\n  /**\n   * grid布局的总列数\n   */\n  col: number;\n  /**\n   * grid布局的总行数\n   */\n  row: number;\n  /**\n   * 可选配置，指定某几列的宽度\n   */\n  colWidth?: {\n    /**\n     * 指定列数，序号从 0 开始\n     */\n    index: number;\n    /**\n     * 设置指定列的宽度，单位为像素\n     */\n    size: number | ((maxSize: number) => number);\n  }[];\n  /**\n   * 可选配置，指定某几行的高度\n   */\n  rowHeight?: {\n    /**\n     * 指定行数，序号从 0 开始\n     */\n    index: number;\n    /**\n     * 设置指定行的高度，单位为像素\n     */\n    size: number | ((maxSize: number) => number);\n  }[];\n  /**\n   *\n   * 指定所有图表元素所在位置，图表元素的位置起点和占几行几列，可以占多行多列\n   * 图表元素位置允许配置重叠。\n   */\n  elements: ElementSpec[];\n}\n\nexport interface IBaseLayoutSpec extends ILayoutSpecBase {\n  /**\n   * 设置布局类型为默认布局\n   */\n  type: 'base';\n}\n\nexport type ILayoutSpec = IBaseLayoutSpec | IGridLayoutSpec;\n\nexport interface ILayoutConstructor {\n  type: string;\n  // TODO: spec 类型生命\n  new (spec: ILayoutSpec | any, ctx?: any): IBaseLayout;\n}\n\n/**\n * 因为这些元素都会继承到各个模块，所以这里统一有前缀避免语意冲突\n */\nexport interface ILayoutItem {\n  readonly type: string;\n  /**\n   * 标记当前布局元素是否需要重新计算布局属性\n   * 图表模块可能部分需要重新布局，部分不需要，根据这个tag在布局过程中进行优化\n   */\n  readonly willLayoutTag: boolean;\n  /**\n   * 上一次布局的布局尺寸\n   */\n  readonly lastComputeRect: ILayoutRect;\n  /**\n   * 标记这个布局Item的方向（left->right, right->left, top->bottom, bottom->top）\n   */\n  directionStr?: 'l2r' | 'r2l' | 't2b' | 'b2t';\n  layoutClip: boolean;\n  layoutType: ILayoutType;\n  layoutBindRegionID: number | number[];\n  layoutOrient: IOrientType;\n  /** 是否自动缩进 */\n  autoIndent: boolean;\n\n  /**\n   * inline元素和其他同行元素的对齐方式\n   * 顶部的inline元素，'start' - 顶部对齐；'end' - '底部对齐'; 'middle' - 居中对齐\n   * 底部的inline元素，'start' - 底部对齐；'end' - '顶部对齐'; 'middle' - 居中对齐\n   * 左侧的inline元素，'start' - 左侧对齐；'end' - '右侧对齐'; 'middle' - 居中对齐\n   * 右侧的inline元素，'start' - 右侧对齐；'end' - '左侧对齐'; 'middle' - 居中对齐\n   */\n  alignSelf?: 'start' | 'end' | 'middle';\n\n  layoutPaddingLeft: number;\n  layoutPaddingTop: number;\n  layoutPaddingRight: number;\n  layoutPaddingBottom: number;\n\n  layoutOffsetX: number;\n  layoutOffsetY: number;\n\n  // 越大越先处理\n  layoutLevel: number;\n\n  chartLayoutRect: ILayoutRect;\n\n  readonly layoutRectLevelMap: ILayoutRect;\n  minWidth: number;\n  maxWidth: number;\n  minHeight: number;\n  maxHeight: number;\n\n  readonly model: ILayoutModel;\n\n  getModelId: () => StringOrNumber;\n  getModelVisible: () => boolean;\n\n  getSpec?: () => any;\n  setAttrFromSpec: (spec: ILayoutItemSpec, chartViewRect: ILayoutRect) => void;\n\n  setRectInSpec: (rect: ILayoutRect) => ILayoutRect;\n\n  getLayoutStartPoint: () => ILayoutPoint;\n  getLayoutRect: () => ILayoutRect;\n  getLayout: () => IRect;\n  getLastComputeOutBounds: () => IBoundsLike;\n\n  /** 生命周期 */\n  onLayoutStart: (layoutRect: IRect, viewRect: ILayoutRect) => void;\n  onLayoutEnd: () => void;\n\n  /**\n   * 更新元素布局的 layoutRect 大小，用来更新指定布局空间\n   */\n  setLayoutRect: (rect: Partial<ILayoutRect>, levelMap?: Partial<ILayoutRect>) => void;\n  /**\n   * 基于元素内部逻辑计算占位空间，rect表示可用空间\n   */\n  computeBoundsInRect: (rect: ILayoutRect) => ILayoutRect;\n  /**\n   * 更新元素布局的起始点位置\n   */\n  setLayoutStartPosition: (pos: Partial<IPoint>) => void;\n  /**\n   * 更新绝对布局元素的位置信息\n   */\n  absoluteLayoutInRect: (rect: IRect) => void;\n  /**\n   * 布局完成后，清楚标记\n   */\n  clearWillLayoutTag: () => void;\n  /**\n   * 标记要重新布局\n   */\n  setWillLayoutTag: () => void;\n}\n\nexport interface ILayoutItemSpec {\n  /** 当前模块的布局类型，配置为 absolute 的话，当前元素会以图表左上角为原点进行绝对布局 */\n  layoutType?: ILayoutType;\n  /**\n   * 布局顺序等级，等级越大的，越优先布局\n   * 比如顶部同时有标题和图例的场景，期望标题先放在顶部，然后放置图例。\n   */\n  layoutLevel?: number;\n\n  /**\n   * inline元素和其他同行元素的对齐方式\n   * 顶部的inline元素，'start' - 顶部对齐；'end' - '底部对齐'; 'middle' - 居中对齐\n   * 底部的inline元素，'start' - 底部对齐；'end' - '顶部对齐'; 'middle' - 居中对齐\n   * 左侧的inline元素，'start' - 左侧对齐；'end' - '右侧对齐'; 'middle' - 居中对齐\n   * 右侧的inline元素，'start' - 右侧对齐；'end' - '左侧对齐'; 'middle' - 居中对齐\n   */\n  alignSelf?: 'start' | 'end' | 'middle';\n\n  // 基础的布局配置\n  /** 模块布局位置 */\n  orient?: IOrientType;\n  /** 模块的布局间距 */\n  padding?: ILayoutPaddingSpec;\n  /** 是否按照 orient 自动修改 padding，隐藏位于外侧的 padding。目前只在组件上生效 */\n  noOuterPadding?: boolean;\n  /** 模块的布局大小：宽度 */\n  width?: ILayoutNumber;\n  /** 模块的布局最大宽度 */\n  maxWidth?: ILayoutNumber;\n  /** 模块的布局最小宽度 */\n  minWidth?: ILayoutNumber;\n  /** 模块的布局大小：高度 */\n  height?: ILayoutNumber;\n  /** 模块的布局最大高度 */\n  maxHeight?: ILayoutNumber;\n  /** 模块的布局最小高度 */\n  minHeight?: ILayoutNumber;\n  /** 模块的布局位置偏移：X */\n  offsetX?: ILayoutNumber;\n  /** 模块的布局位置偏移：Y */\n  offsetY?: ILayoutNumber;\n\n  /** 模块的展示层级，当2个模块重叠时，层级较大的展示在上方 */\n  zIndex?: number;\n  /** 模块是否裁剪超出布局区域外的绘图内容 */\n  clip?: boolean;\n\n  // 绝对布局下的对齐设置\n\n  /** 模块绝对布局下，与图表左侧的距离。注意仅在 layoutType === 'absolute' 时生效  */\n  left?: ILayoutNumber;\n  /** 模块绝对布局下，与图表右侧的距离。注意仅在 layoutType === 'absolute' 时生效  */\n  right?: ILayoutNumber;\n  /** 模块绝对布局下，与图表顶部的距离。注意仅在 layoutType === 'absolute' 时生效  */\n  top?: ILayoutNumber;\n  /** 模块绝对布局下，与图表底部的距离。注意仅在 layoutType === 'absolute' 时生效  */\n  bottom?: ILayoutNumber;\n  /** 模块绝对布局下，元素将放置在图表的正中间。注意仅在 layoutType === 'absolute' 时生效，同时将忽略 padding 属性  */\n  center?: boolean;\n}\n\nexport interface ILayoutItemInitOption {\n  layoutType: ILayoutType;\n  layoutLevel: number;\n  layoutOrient?: IOrientType;\n  transformLayoutRect?: (rect: ILayoutRect) => ILayoutRect;\n  transformLayoutPosition?: (pos: Partial<IPoint>) => Partial<IPoint>;\n  transformLayoutPadding?: (padding: IPadding) => IPadding;\n}\n"]}