{"version":3,"sources":["../src/util/spec/transform.ts"],"names":[],"mappings":";;;AAAA,6CAAoE;AAKpE,SAAgB,aAAa,CAC3B,IAAa,EACb,UAEI;IACF,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;CACb;IAED,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,IAAI,IAAI,CAAC,WAAW,KAAK,MAAM,EAAE;QAC/B,MAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,KAAK,MAAM,GAAG,IAAI,IAAW,EAAE;YAC7B,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBAEnD,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;oBAChB,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtC,SAAS;iBACV;gBACD,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;aACjD;SACF;QACD,OAAO,MAAM,CAAC;KACf;IAED,IAAI,IAAA,gBAAO,EAAC,IAAI,CAAC,EAAE;QACjB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;KACjD;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AA/BD,sCA+BC;AAOD,SAAgB,iBAAiB,CAAC,IAAiB,EAAE,MAAW;IAC9D,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,IAAI,IAAA,sBAAa,EAAC,IAAI,CAAC,EAAE;QACvB,MAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,KAAK,MAAM,GAAG,IAAI,IAAW,EAAE;YAC7B,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBAEnD,IAAI,IAAA,iBAAQ,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;oBACxD,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC5C,SAAS;iBACV;gBACD,MAAM,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;aACpD;SACF;QACD,OAAO,MAAM,CAAC;KACf;IAED,IAAI,IAAA,gBAAO,EAAC,IAAI,CAAC,EAAE;QACjB,OAAQ,IAAsB,CAAC,GAAG,CAAC,CAAC,CAAc,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;KACtF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAxBD,8CAwBC","file":"transform.js","sourcesContent":["import { isArray, isPlainObject, isString } from '@visactor/vutils';\nimport type { ISeriesSpec } from '../../typings';\n\n// todo 以目前的场景来看，并没有递归的需要。\n// 考虑到不确定性，还是递归处理spec对象，时间消耗很少\nexport function specTransform(\n  spec: unknown,\n  special: {\n    [key: string]: (v: unknown) => unknown;\n  } = {\n    data: v => v\n  }\n): unknown {\n  if (!spec) {\n    return spec;\n  }\n  // 如果是普通对象\n  if (spec.constructor === Object) {\n    const result: any = {};\n    for (const key in spec as any) {\n      if (Object.prototype.hasOwnProperty.call(spec, key)) {\n        // todo 特殊处理怎样更合理?\n        if (special[key]) {\n          result[key] = special[key](spec[key]);\n          continue;\n        }\n        result[key] = specTransform(spec[key], special);\n      }\n    }\n    return result;\n  }\n  // 如果是数组\n  if (isArray(spec)) {\n    return spec.map(s => specTransform(s, special));\n  }\n  return spec;\n}\n\n/**\n * functionTransform is used to replace the function registered by the instance\n * @param spec\n * @returns\n */\nexport function functionTransform(spec: ISeriesSpec, VChart: any): any {\n  if (!spec) {\n    return spec;\n  }\n  // 如果是普通对象\n  if (isPlainObject(spec)) {\n    const result: any = {};\n    for (const key in spec as any) {\n      if (Object.prototype.hasOwnProperty.call(spec, key)) {\n        // 如果使用了注册函数\n        if (isString(spec[key]) && VChart.getFunction(spec[key])) {\n          result[key] = VChart.getFunction(spec[key]);\n          continue;\n        }\n        result[key] = functionTransform(spec[key], VChart);\n      }\n    }\n    return result;\n  }\n  // 如果是数组\n  if (isArray(spec)) {\n    return (spec as ISeriesSpec[]).map((s: ISeriesSpec) => functionTransform(s, VChart));\n  }\n  return spec;\n}\n"]}