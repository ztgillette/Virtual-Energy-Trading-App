{"version":3,"sources":["../src/animation/strategy/horizontal-bar-split.ts"],"names":[],"mappings":"AAQA,MAAM,OAAO,0BAA0B;IAAvC;QACE,SAAI,GAAG,oBAAoB,CAAC;IAiD9B,CAAC;IA/CC,WAAW,CAAC,IAAmB,EAAE,OAAqB;;QAEpD,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC;QACxC,MAAM,YAAY,GAAG,CAAA,MAAC,IAAI,CAAC,KAAa,0CAAE,SAAS,MAAK,YAAY,CAAC;QAGrE,MAAM,SAAS,GAAG,CAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,SAAS,KAAI,EAAE,CAAC;QACnD,MAAM,mBAAmB,GAAG,GAAG,IAAI,SAAS,IAAI,QAAQ,IAAI,SAAS,IAAI,IAAI,IAAI,SAAS,CAAC;QAC3F,MAAM,eAAe,GAAG,GAAG,IAAI,SAAS,IAAI,OAAO,IAAI,SAAS,IAAI,IAAI,IAAI,SAAS,CAAC;QAEtF,OAAO,UAAU,IAAI,YAAY,IAAI,mBAAmB,IAAI,eAAe,CAAC;IAC9E,CAAC;IAED,KAAK,CAAC,IAAmB,EAAE,OAAqB;;QAC9C,MAAM,SAAS,GAAG,CAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,SAAS,KAAI,EAAE,CAAC;QACnD,MAAM,cAAc,GAAwB,EAAE,CAAC;QAC/C,MAAM,UAAU,GAAwB,EAAE,CAAC;QAG3C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YACjD,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;gBACnD,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aAC7B;iBAAM,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,IAAI,EAAE;gBACzD,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACzB;iBAAM;gBAEL,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;QAKH,MAAM,OAAO,GAAG,OAAO,CAAC,OAAc,CAAC;QACvC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,MAAM,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAG9C,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7D,MAAM,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/G,MAAM,WAAW,GAAG,CAAC,UAAU,IAAI,CAAC,SAAS,CAAC;QAE9C,OAAO;YACL,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACrD,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;SAClD,CAAC;IACJ,CAAC;CACF","file":"horizontal-bar-split.js","sourcesContent":["import type { IMarkGraphic } from '../../mark/interface';\nimport type { BaseMark } from '../../mark';\nimport type { IAnimationSplitStrategy } from '../interface';\n\n/**\n * 水平柱状图拆分策略\n * 针对水平柱状图，先更新y和height，再更新x和width\n */\nexport class HorizontalBarSplitStrategy implements IAnimationSplitStrategy {\n  name = 'horizontalBarSplit';\n\n  shouldApply(mark: BaseMark<any>, graphic: IMarkGraphic): boolean {\n    // 检查是否是柱状图且方向是水平的\n    const isRectMark = mark.type === 'rect';\n    const isHorizontal = (mark.model as any)?.direction === 'horizontal';\n\n    // 检查是否同时存在维度和值的变化\n    const diffAttrs = graphic.context?.diffAttrs || {};\n    const hasDimensionChanges = 'y' in diffAttrs || 'height' in diffAttrs || 'y1' in diffAttrs;\n    const hasValueChanges = 'x' in diffAttrs || 'width' in diffAttrs || 'x1' in diffAttrs;\n\n    return isRectMark && isHorizontal && hasDimensionChanges && hasValueChanges;\n  }\n\n  split(mark: BaseMark<any>, graphic: IMarkGraphic): Array<{ attrs: Record<string, any>; order: number }> {\n    const diffAttrs = graphic.context?.diffAttrs || {};\n    const dimensionAttrs: Record<string, any> = {};\n    const valueAttrs: Record<string, any> = {};\n\n    // 分配属性到对应的组\n    Object.entries(diffAttrs).forEach(([key, value]) => {\n      if (key === 'y' || key === 'height' || key === 'y1') {\n        dimensionAttrs[key] = value;\n      } else if (key === 'x' || key === 'width' || key === 'x1') {\n        valueAttrs[key] = value;\n      } else {\n        // 其他属性（如颜色、透明度等）与维度一起更新\n        dimensionAttrs[key] = value;\n      }\n    });\n\n    // 检查是从堆积变为分组还是从分组变为堆积\n    // 如果fieldY长度增加，说明是从堆积变为分组，先执行y/height\n    // 如果fieldY长度减少，说明是从分组变为堆积，先执行x/width\n    const context = graphic.context as any;\n    const fieldY = context.fieldY;\n    const originalFieldY = context.originalFieldY;\n\n    // 检查fieldY是否是数组（表示多维度）\n    const isGrouped = Array.isArray(fieldY) && fieldY.length > 1;\n    const wasStacked = originalFieldY ? !(Array.isArray(originalFieldY) && originalFieldY.length > 1) : !isGrouped;\n    const group2stack = !wasStacked && !isGrouped;\n\n    return [\n      { attrs: dimensionAttrs, order: group2stack ? 2 : 1 }, // 先更新维度（y和height）\n      { attrs: valueAttrs, order: group2stack ? 1 : 2 } // 再更新值（x和width）\n    ];\n  }\n}\n"]}