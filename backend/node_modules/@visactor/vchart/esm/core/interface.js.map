{"version":3,"sources":["../src/core/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { DataSet, IParserOptions } from '@visactor/vdataset';\nimport type {\n  Datum,\n  IDataValues,\n  IInitOption,\n  IMarkStateSpec,\n  IPoint,\n  IRegionQuerier,\n  IShowTooltipOption,\n  ISpec,\n  ITooltipHandler,\n  Maybe,\n  MaybeArray,\n  StringOrNumber\n} from '../typings';\nimport type { IMorphConfig } from '../animation/spec';\nimport type { IBoundsLike } from '@visactor/vutils';\nimport type { EventCallback, EventQuery, EventType, ExtendEventParam } from '../event/interface';\nimport type { IMark, IMarkDataTransform } from '../mark/interface';\nimport type { ISeries } from '../series/interface/series';\nimport type { ITheme } from '../theme/interface';\nimport type { IComponent } from '../component/interface';\nimport type { LayoutCallBack } from '../layout/interface';\nimport type { DimensionIndexOption, IChart, IChartSpecInfo } from '../chart/interface';\nimport type { IEventTarget, IStage } from '@visactor/vrender-core';\nimport type { IContainerSize } from '@visactor/vrender-components';\nimport type { IBaseScale } from '@visactor/vscale';\nimport type { IUpdateSpecResult } from '../model/interface';\nimport type { ICompiler } from '../compile/interface';\n\nexport type DataLinkSeries = {\n  /**\n   * 关联的系列 id\n   * the binding series id\n   */\n  seriesId?: StringOrNumber;\n  /**\n   * 关联的系列索引\n   * the binding series index\n   */\n  seriesIndex?: number;\n};\n\nexport type DataLinkAxis = {\n  /**\n   * 关联的轴 id，目前仅支持直角坐标轴\n   * the binding axis id\n   */\n  axisId?: StringOrNumber;\n  /**\n   * 关联的轴索引，目前仅支持直角坐标轴\n   * the binding axis index\n   */\n  axisIndex?: number;\n};\n\nexport interface IVChartConstructor {\n  new (spec: ISpec, options: IInitOption): IVChart;\n  useRegisters: (comps: (() => void)[]) => any;\n}\n\nexport interface IVChart {\n  readonly id: number;\n\n  /**\n   * **同步**渲染图表。\n   * @param morphConfig 图表 morph 动画配置，可选\n   * @returns VChart 实例\n   */\n  renderSync: (morphConfig?: IMorphConfig) => IVChart;\n\n  /**\n   * **异步**渲染图表。\n   * @async\n   * @param morphConfig 图表 morph 动画配置，可选\n   * @returns VChart 实例\n   */\n  renderAsync: (morphConfig?: IMorphConfig) => Promise<IVChart>;\n\n  /**\n   * **异步**更新数据。\n   * @async\n   * @param id 数据 id\n   * @param data 数据值\n   * @param options 数据参数\n   * @returns VChart 实例\n   */\n  updateData: (id: StringOrNumber, data: Datum[] | string, options?: IParserOptions) => Promise<IVChart>;\n\n  /**\n   * **异步**批量更新数据。\n   * @async\n   * @param list 待更新的数据列表\n   * @returns VChart 实例\n   */\n  updateDataInBatches: (list: { id: string; data: Datum[]; options?: IParserOptions }[]) => Promise<IVChart>;\n\n  /**\n   * **同步**更新数据。\n   * @param id 数据 id\n   * @param data 数据值\n   * @param options 数据参数\n   * @returns VChart 实例\n   */\n  updateDataSync: (id: StringOrNumber, data: Datum[], options?: IParserOptions) => IVChart;\n\n  /**\n   * **同步方法** 更新数据\n   * @async\n   * @param data 图表配置结构中的数据对象\n   * @returns VChart 实例\n   */\n  updateFullDataSync: (data: IDataValues | IDataValues[], reRender?: boolean) => IVChart;\n\n  /**\n   * **同步方法** 更新数据\n   * @param data 图表配置结构中的数据对象\n   * @returns VChart 实例\n   */\n  updateFullData: (data: IDataValues | IDataValues[], reRender?: boolean) => Promise<IVChart>;\n\n  /**\n   * **异步**spec 更新。\n   * @sync\n   * @param spec\n   * @param forceMerge\n   * @returns\n   */\n  updateSpec: (\n    spec: ISpec,\n    forceMerge?: boolean,\n    morphConfig?: IMorphConfig,\n    userUpdateOptions?: IUpdateSpecResult\n  ) => Promise<IVChart>;\n\n  /**\n   * **同步方法**spec 更新。\n   * @param spec\n   * @param forceMerge\n   * @returns\n   */\n  updateSpecSync: (\n    spec: ISpec,\n    forceMerge?: boolean,\n    morphConfig?: IMorphConfig,\n    userUpdateOptions?: IUpdateSpecResult\n  ) => void;\n\n  /**\n   * **同步方法** 模块 spec 更新\n   * @param filter\n   * @param spec\n   * @param forceMerge\n   * @returns\n   * @since 1.4.0\n   */\n  updateModelSpecSync: (\n    filter: string | { type: string; index: number },\n    spec: unknown,\n    forceMerge?: boolean,\n    morphConfig?: IMorphConfig\n  ) => IVChart;\n\n  /**\n   * **异步方法** 模块 spec 更新\n   * @async\n   * @param filter\n   * @param spec\n   * @param forceMerge\n   * @returns\n   * @since 1.4.0\n   */\n  updateModelSpec: (\n    filter: string | { type: string; index: number },\n    spec: unknown,\n    forceMerge?: boolean,\n    morphConfig?: IMorphConfig\n  ) => Promise<IVChart>;\n\n  /** 更新 spec 并重新编译（不渲染），返回是否成功 */\n  updateSpecAndRecompile: (spec: ISpec, forceMerge: boolean, option: IVChartRenderOption) => boolean;\n\n  /**\n   * 更新绘制区域。\n   * @param viewBox 绘制区域\n   * @param reRender 是否重新渲染，默认为 true\n   * @returns\n   */\n  updateViewBox: (viewBox: IBoundsLike, reRender?: boolean) => IVChart;\n\n  /**\n   * **异步方法**，图表尺寸更新方法。\n   * @async\n   * @param width 宽度\n   * @param height 高度\n   * @returns VChart 当前实例\n   */\n  resize: (width: number, height: number) => Promise<IVChart>;\n\n  /**\n   * 销毁图表。\n   */\n  release: () => void;\n\n  /**\n   * 事件监听\n   */\n  on: ((eType: EventType, handler: EventCallback<ExtendEventParam>) => void) &\n    ((eType: EventType, query: EventQuery, handler: EventCallback<ExtendEventParam>) => void);\n  off: (eType: EventType, handler?: EventCallback<ExtendEventParam>) => void;\n\n  /**\n   * 更新或设置图元状态。\n   * @param state 状态筛选器\n   * @param filter 筛选器\n   */\n  updateState: (\n    state: Record<string, Omit<IMarkStateSpec<unknown>, 'style'>>,\n    filter?: (series: ISeries, mark: IMark, stateKey: string) => boolean //series + mark 筛选\n  ) => void;\n\n  /**\n   * 更新图元选中状态。\n   * @param datum hover 图元数据\n   * @param filter 筛选器 用来筛选系列与mark\n   * @param region region 筛选器\n   */\n  setSelected: (\n    datum: MaybeArray<any> | null,\n    filter?: (series: ISeries, mark: IMark) => boolean,\n    region?: IRegionQuerier\n  ) => void;\n\n  /**\n   * 更新图元 hover 状态\n   * @param datum hover 图元数据\n   * @param filter 筛选器 用来筛选系列与mark\n   * @param region region 筛选器\n   */\n  setHovered: (\n    datum: MaybeArray<Datum> | null,\n    filter?: (series: ISeries, mark: IMark) => boolean,\n    region?: IRegionQuerier\n  ) => void;\n\n  /**\n   * 清除所有图元的状态\n   * @param state 状态名\n   *\n   * @since 1.11.0\n   */\n  clearState: (state: string) => void;\n\n  /**\n   * 清除所有图元的选中状态\n   *\n   * @since 1.11.0\n   */\n  clearSelected: () => void;\n\n  /**\n   * 清除所有图元的hover状态\n   *\n   * @since 1.11.0\n   */\n  clearHovered: () => void;\n\n  /**\n   * 获取当前主题，会返回完整的主题配置（只能获取用户通过`setCurrentTheme`方法设置过的主题，默认值为`ThemeManager`统一设置的主题）\n   * */\n  getCurrentTheme: () => ITheme;\n\n  /**\n   * 获取当前主题名称（只能获取用户通过`setCurrentTheme`方法设置过的主题，默认值为`ThemeManager`统一设置的主题）\n   */\n  getCurrentThemeName: () => string;\n\n  /**\n   * **异步方法**， 设置当前主题。\n   * @param name 主题名称\n   * @returns\n   */\n  setCurrentTheme: (name: string) => Promise<IVChart>;\n\n  /**\n   * 自定义 TooltipHandler。\n   * @param tooltipHandler\n   */\n  setTooltipHandler: (tooltipHandler: ITooltipHandler) => void;\n\n  /**\n   * 获取用户定义的 TooltipHandler\n   * @returns ITooltipHandler\n   */\n  getTooltipHandlerByUser: () => ITooltipHandler | undefined;\n\n  /**\n   * 获取 TooltipHandler\n   * @returns\n   */\n  getTooltipHandler: () => ITooltipHandler | undefined;\n\n  /**\n   * 手动调用展示 tooltip\n   * @param datum 原始数据\n   * @param options\n   * @returns\n   */\n  showTooltip: (datum: Datum, options: IShowTooltipOption) => boolean;\n\n  /**\n   * 手动调用，关闭 tooltip\n   * @returns\n   */\n  hideTooltip: () => boolean;\n\n  // 图例相关 api\n  /**\n   * 根据图例组件 id 获取图例数据\n   * @param id 组件 id\n   * @returns\n   */\n  getLegendDataById: (id: string) => Datum[];\n\n  /**\n   * 根据图例组件索引获取图例数据\n   * @param index 图例索引，默认为 0\n   * @returns\n   */\n  getLegendDataByIndex: (index?: number) => Datum[];\n\n  /**\n   * 根据图例组件 id 获取当前图例的选中项\n   * @param id 组件 id\n   * @returns\n   */\n  getLegendSelectedDataById: (id: string) => StringOrNumber[];\n\n  /**\n   * 根据图例组件索引获取当前图例的选中项\n   * @param index 图例索引，默认为 0\n   * @returns\n   */\n  getLegendSelectedDataByIndex: (index?: number) => StringOrNumber[];\n\n  /**\n   * 根据图例组件 id 更新图例选中数据\n   * @param id\n   * @returns\n   */\n  setLegendSelectedDataById: (id: string, selectedData: StringOrNumber[]) => void;\n\n  /**\n   * 根据图例组件索引更新图例选中数据\n   * @param index 图例索引，默认为 0\n   * @returns\n   */\n  setLegendSelectedDataByIndex: (index: number, selectedData: StringOrNumber[]) => void;\n\n  /**\n   * **异步方法**返回一个包含图片展示的 data URI。\n   * @returns data URI\n   */\n  getDataURL: () => Promise<any>;\n\n  /**\n   * **异步方法** 导出图表图片，只支持浏览器端。\n   * @param name 保存的图片名称\n   * @returns\n   */\n  exportImg: (name?: string) => Promise<void>;\n\n  /**\n   * 导出绘制了图表内容的 canvas\n   * @returns HTMLCanvasElement\n   * @since 1.5.2\n   */\n  exportCanvas: () => HTMLCanvasElement | undefined;\n\n  /**\n   * 目前仅支持 node 环境，用于 node 端的图片导出\n   * @returns\n   */\n  getImageBuffer: () => void;\n  /**\n   * 设置自定义布局\n   */\n  setLayout: (layout: LayoutCallBack) => void;\n  /**\n   * 强制重新布局\n   */\n  reLayout: () => void;\n\n  /**\n   * 获取编译器实例\n   * @returns\n   */\n  getCompiler: () => ICompiler;\n\n  /**\n   * Get the chart instance\n   * 获取 Chart 图表实例。\n   * @returns Chart 实例\n   */\n  getChart: () => Maybe<IChart>;\n\n  /**\n   * Get the renderer instance.\n   * 获取渲染引擎实例。\n   * @returns the instance of VRender Stage\n   */\n  getStage: () => IStage;\n\n  /**\n   * 获取 canvas dom\n   * @returns HTMLCanvasElement | undefined\n   */\n  getCanvas: () => HTMLCanvasElement | undefined;\n\n  /**\n   * 获取图表的 dom 容器\n   * @returns\n   */\n  getContainer: () => Maybe<HTMLElement>;\n\n  /**\n   * 获取图表所有的组件实例\n   * @returns 组件实例\n   */\n  getComponents: () => IComponent[];\n\n  /**\n   * 获取图表的 DataSet 实例\n   * @returns DataSet 实例\n   */\n  getDataSet: () => Maybe<DataSet>;\n\n  /**\n   * 获取图表的 Scale 实例\n   * @param scaleId scale 的id\n   * @returns Scale 实例\n   * @since 1.10.4\n   */\n  getScale: (scaleId: string) => IBaseScale | null;\n\n  /**\n   * 手动调用触发 dimension 交互效果。\n   * @param datum dimension 值\n   * @param options 触发配置\n   * @returns\n   */\n  setDimensionIndex: (value: StringOrNumber, options?: DimensionIndexOption) => void;\n\n  // 数据转换相关的 api\n  /**\n   * Convert the data to coordinate position\n   * @param datum the datum to convert\n   * @param dataLinkInfo the data link info, could be seriesId or seriesIndex, default is { seriesIndex: 0 }\n   * @param isRelativeToCanvas 是否相对画布坐标，默认为 false Whether relative to canvas coordinates, default is false\n   * @param checkInViewData 是否检查数据对应的图元是否在视图中，如果不在视图中，返回 null\n   * @returns\n   */\n  convertDatumToPosition: (\n    datum: Datum,\n    dataLinkInfo?: DataLinkSeries,\n    isRelativeToCanvas?: boolean,\n    checkInViewData?: boolean\n  ) => IPoint | null;\n\n  /**\n   * Convert the value to coordinate position\n   * @param value number | [number, number], the value to convert\n   * @param dataLinkInfo the data link info, could be seriesId,seriesIndex,axisId,axisIndex\n   * @param isRelativeToCanvas 是否相对画布坐标，默认为 false Whether relative to canvas coordinates, default is false\n   * returns\n   */\n  convertValueToPosition: ((\n    value: StringOrNumber,\n    dataLinkInfo: DataLinkAxis,\n    isRelativeToCanvas?: boolean\n  ) => number | null) &\n    ((\n      value: [StringOrNumber, StringOrNumber],\n      dataLinkInfo: DataLinkSeries,\n      isRelativeToCanvas?: boolean\n    ) => IPoint | null);\n\n  /**\n   * 根据 indicator 组件 id 更新 indicator 数据\n   * @param id spec 中定义的 indicator id\n   * @param datum 具体数据项\n   * @since 1.11.7\n   */\n  updateIndicatorDataById: (id: string, datum?: Datum) => void;\n\n  /**\n   * 根据 indicator 组件 id 更新 indicator 数据\n   * @param index  indicator 索引下标\n   * @param datum 具体数据项\n   * @since 1.11.7\n   */\n  updateIndicatorDataByIndex: (index?: number, datum?: Datum) => void;\n\n  /**\n   * 地图缩放 API\n   * @param [regionIndex=0] 根据索引顺序指定某个 region 区域的地图坐标系进行缩放\n   * @param zoom 缩放比例\n   * @param center 缩放中心\n   * @since 1.11.10\n   */\n  geoZoomByIndex: (regionIndex: number, zoom: number, center?: { x: number; y: number }) => void;\n\n  /**\n   * 地图缩放 API\n   * @param 根据 region id 指定某个 region 区域的地图坐标系进行缩放\n   * @param zoom 缩放比例\n   * @param center 缩放中心\n   * @since 1.11.10\n   */\n  geoZoomById: (regionId: string | number, zoom: number, center?: { x: number; y: number }) => void;\n  /**\n   * @since 2.0.3\n   * 当前图表是否开启了动画功能\n   */\n  isAnimationEnable: () => boolean;\n  /** 停止正在进行的所有动画 */\n  stopAnimation: () => void;\n\n  /** 暂停正在进行的所有动画 */\n  pauseAnimation: () => void;\n\n  /** 恢复暂停时正在进行的所有动画 */\n  resumeAnimation: () => void;\n\n  /** 注册实例函数 */\n  registerFunction: (key: string, fun: Function) => void;\n\n  /** 注销实例函数 */\n  unregisterFunction: (key: string) => void;\n\n  /** 获取实例函数 */\n  getFunction: (key: string) => Function | null;\n\n  /** 获取实例函数列表 */\n  getFunctionList: () => string[] | null;\n\n  /** 获取图表 spec 详细信息 */\n  getSpecInfo: () => IChartSpecInfo;\n\n  /** 设置运行时 spec */\n  setRuntimeSpec: (spec: any) => void;\n\n  /** 获取运行时 spec */\n  getSpec: () => any;\n\n  /** 获取当前容器宽高 */\n  getCurrentSize: () => IContainerSize;\n\n  /** 旋转图表 需要注册插件 */\n  rotate90WithTransform?: (rotateDom: HTMLElement) => void;\n\n  /** 取消图表旋转 */\n  cancelTransform?: (rotateDom: HTMLElement) => void;\n}\n\nexport interface IGlobalConfig {\n  /** 是否全局显示唯一 tooltip */\n  uniqueTooltip?: boolean;\n  /** 是否监测图表 dom 变化自动 release */\n  // TODO\n  // autoRelease?: boolean;\n}\n\nexport interface IVChartRenderOption {\n  /** morphing 动画 spec */\n  morphConfig?: IMorphConfig;\n  /** 是否重新转换图表 spec */\n  transformSpec?: boolean;\n  actionSource?: VChartRenderActionSource;\n}\n\nexport type VChartRenderActionSource =\n  | 'render'\n  | 'updateSpec'\n  | 'updateModelSpec'\n  | 'setCurrentTheme'\n  | 'updateSpecAndRecompile';\n\nexport interface VRenderComponentOptions {\n  skipDefault?: boolean;\n  mode?: '2d' | '3d';\n}\n\nexport interface IStageEventPlugin<T> {\n  new (taget: IEventTarget, cfg?: T): {\n    release: () => void;\n  };\n}\n\nexport interface GrammarTransformOption {\n  /** 是否支持渐进流程 */\n  canProgressive?: boolean;\n  transform: IMarkDataTransform;\n  runType?: 'beforeJoin' | 'afterEncode';\n}\n"]}