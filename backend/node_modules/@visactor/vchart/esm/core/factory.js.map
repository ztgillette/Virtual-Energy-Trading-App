{"version":3,"sources":["../src/core/factory.ts"],"names":[],"mappings":"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","file":"factory.js","sourcesContent":["import type {\n  IChartConstructor,\n  IChartOption,\n  IChart,\n  IChartSpecTransformerOption,\n  IChartSpecTransformer\n} from '../chart/interface';\nimport type { ISeriesConstructor, ISeriesMarkInfo, ISeriesOption, SeriesMarkNameEnum } from '../series/interface';\nimport type { IComponentConstructor } from '../component/interface';\nimport type { IMarkConstructor, IMarkOption, MarkConstructor } from '../mark/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from '../mark/interface/type';\nimport type { IRegion, IRegionConstructor } from '../region/interface';\nimport type { IBaseModelSpecTransformer, IBaseModelSpecTransformerOption, IModelOption } from '../model/interface';\nimport type { Transform, Parser } from '@visactor/vdataset';\n// eslint-disable-next-line no-duplicate-imports\nimport { fields, filter, fold, csvParser, dsvParser, tsvParser } from '@visactor/vdataset';\nimport type { ILayoutConstructor } from '../layout/interface';\nimport type { IChartPluginConstructor } from '../plugin/chart/interface';\nimport type { IComponentPluginConstructor } from '../plugin/components/interface';\nimport type { IGraphic } from '@visactor/vrender-core';\nimport type { GrammarTransformOption, IStageEventPlugin, VRenderComponentOptions } from './interface';\nimport type { MarkAnimationSpec } from '../animation/interface';\nimport type { IBaseTriggerOptions, ITriggerConstructor } from '../interaction/interface/trigger';\nimport type { IComposedEventConstructor } from '../index-harmony-simple';\nimport type { ITooltipProcessorConstructor } from '../component/tooltip/processor/interface';\nimport type { ITooltip } from '../component';\nimport type { IVChartPluginConstructor } from '../plugin/vchart';\n\nexport class Factory {\n  private static _charts: { [key: string]: IChartConstructor } = {};\n  private static _series: { [key: string]: ISeriesConstructor } = {};\n  private static _components: {\n    [key: string]: {\n      cmp: IComponentConstructor;\n      alwaysCheck?: boolean;\n      createOrder: number;\n    };\n  } = {};\n  private static _graphicComponents: Record<string, (attrs: any, options?: VRenderComponentOptions) => IGraphic> = {};\n  private static _marks: { [key: string]: MarkConstructor } = {};\n  private static _regions: { [key: string]: IRegionConstructor } = {};\n  private static _animations: { [key: string]: (params?: any, preset?: any) => MarkAnimationSpec } = {};\n  private static _implements: { [key: string]: (...args: any) => void } = {};\n  private static _chartPlugin: { [key: string]: IChartPluginConstructor } = {};\n  private static _vChartPlugin: { [key: string]: IVChartPluginConstructor } = {};\n  private static _componentPlugin: { [key: string]: IComponentPluginConstructor } = {};\n  private static _formatter: (\n    text: string | number | string[] | number[],\n    datum: any,\n    formatter: string | string[]\n  ) => any;\n\n  static transforms: { [key: string]: Transform } = {\n    // buildIn transforms\n    fields: fields,\n    filter: filter,\n    fold: fold\n  };\n  static dataParser: { [key: string]: Parser } = {\n    // buildIn parser\n    csv: csvParser,\n    dsv: dsvParser,\n    tsv: tsvParser\n  };\n  static _layout: { [key: string]: ILayoutConstructor } = {};\n\n  static registerChart(key: string, chart: IChartConstructor) {\n    Factory._charts[key] = chart;\n  }\n  static registerSeries(key: string, series: ISeriesConstructor) {\n    Factory._series[key] = series;\n  }\n  static registerComponent(key: string, cmp: IComponentConstructor, alwaysCheck?: boolean, createOrder?: number) {\n    Factory._components[key] = { cmp, alwaysCheck, createOrder: createOrder ?? 0 };\n  }\n\n  static registerGraphicComponent(key: string, creator: (attrs: any, options?: VRenderComponentOptions) => IGraphic) {\n    Factory._graphicComponents[key] = creator;\n  }\n\n  static createGraphicComponent(componentType: string, attrs: any, options?: VRenderComponentOptions) {\n    const compCreator = Factory._graphicComponents[componentType];\n\n    if (!compCreator) {\n      return null;\n    }\n\n    return compCreator(attrs, options);\n  }\n  static registerMark(key: string, mark: MarkConstructor) {\n    Factory._marks[key] = mark;\n  }\n  static registerRegion(key: string, region: IRegionConstructor) {\n    Factory._regions[key] = region;\n  }\n  static registerTransform(key: string, transform: Transform) {\n    Factory.transforms[key] = transform;\n  }\n\n  private static _grammarTransforms: Record<string, GrammarTransformOption> = {};\n\n  static registerGrammarTransform(type: string, transform: GrammarTransformOption) {\n    Factory._grammarTransforms[type] = transform;\n  }\n\n  static getGrammarTransform(type: string) {\n    return Factory._grammarTransforms[type];\n  }\n  static registerLayout(key: string, layout: ILayoutConstructor) {\n    Factory._layout[key] = layout;\n  }\n  static registerAnimation(key: string, animation: (params?: any, preset?: any) => MarkAnimationSpec) {\n    Factory._animations[key] = animation;\n  }\n  static registerImplement(key: string, implement: (...args: any) => void) {\n    Factory._implements[key] = implement;\n  }\n  static registerChartPlugin(key: string, plugin: IChartPluginConstructor) {\n    Factory._chartPlugin[key] = plugin;\n  }\n  static registerVChartPlugin(key: string, plugin: IVChartPluginConstructor) {\n    Factory._vChartPlugin[key] = plugin;\n  }\n  static registerComponentPlugin(key: string, plugin: IComponentPluginConstructor) {\n    Factory._componentPlugin[key] = plugin;\n  }\n\n  static createChart(chartType: string, spec: any, options: IChartOption): IChart | null {\n    if (!Factory._charts[chartType]) {\n      return null;\n    }\n    const ChartConstructor = Factory._charts[chartType];\n    return new ChartConstructor(spec, options);\n  }\n\n  static getChart(chartType: string) {\n    return Factory._charts[chartType];\n  }\n\n  static createChartSpecTransformer(\n    chartType: string,\n    option: IChartSpecTransformerOption\n  ): IChartSpecTransformer | null {\n    if (!Factory._charts[chartType]) {\n      return null;\n    }\n    const ChartConstructor = Factory._charts[chartType];\n    const ChartSpecTransformerConstructor = ChartConstructor.transformerConstructor;\n    return new ChartSpecTransformerConstructor({\n      seriesType: ChartConstructor.seriesType,\n      ...option\n    });\n  }\n\n  static createRegion(regionType: string, spec: any, options: IModelOption): IRegion | null {\n    if (!Factory._regions[regionType]) {\n      return null;\n    }\n    const RegionConstructor = Factory._regions[regionType];\n    return new RegionConstructor(spec, options);\n  }\n\n  static createRegionSpecTransformer(\n    regionType: string,\n    options: IBaseModelSpecTransformerOption\n  ): IBaseModelSpecTransformer | null {\n    if (!Factory._regions[regionType]) {\n      return null;\n    }\n    const RegionConstructor = Factory._regions[regionType];\n    const RegionSpecTransformerConstructor = RegionConstructor.transformerConstructor;\n    return new RegionSpecTransformerConstructor(options);\n  }\n\n  static createSeries(seriesType: string, spec: any, options: ISeriesOption) {\n    if (!Factory._series[seriesType]) {\n      return null;\n    }\n    const SeriesConstructor = Factory._series[seriesType];\n    return new SeriesConstructor(spec, options);\n  }\n\n  static createSeriesSpecTransformer(\n    seriesType: string,\n    options: IBaseModelSpecTransformerOption\n  ): IBaseModelSpecTransformer | null {\n    if (!Factory._series[seriesType]) {\n      return null;\n    }\n    const SeriesConstructor = Factory._series[seriesType];\n    const SeriesSpecTransformerConstructor = SeriesConstructor.transformerConstructor;\n    return new SeriesSpecTransformerConstructor(options);\n  }\n\n  static createMark(markType: string, name: string, options: IMarkOption) {\n    if (!Factory._marks[markType]) {\n      return null;\n    }\n    const MarkConstructor = Factory._marks[markType] as IMarkConstructor;\n    const markInstance = new MarkConstructor(name, options);\n    if (markInstance.type === MarkTypeEnum.group) {\n      // group 目前关闭交互，不参与事件拾取\n      markInstance.setMarkConfig({ interactive: false });\n    }\n    return markInstance;\n  }\n\n  static getComponents() {\n    return Object.values(Factory._components);\n  }\n\n  static getComponentInKey(name: string) {\n    return Factory._components[name].cmp;\n  }\n\n  static getLayout() {\n    return Object.values(Factory._layout);\n  }\n\n  static getLayoutInKey(name: string) {\n    return Factory._layout[name];\n  }\n\n  static getSeries() {\n    return Object.values(Factory._series);\n  }\n\n  static getSeriesInType(type: string) {\n    return Factory._series[type];\n  }\n\n  static getRegionInType(type: string) {\n    return Factory._regions[type];\n  }\n\n  static getAnimationInKey(key: string) {\n    return Factory._animations[key];\n  }\n\n  static getImplementInKey(key: string) {\n    return Factory._implements[key];\n  }\n\n  static getSeriesMarkMap(seriesType: string): Partial<Record<SeriesMarkNameEnum, ISeriesMarkInfo>> {\n    if (!Factory._series[seriesType]) {\n      return {};\n    }\n    return Factory._series[seriesType].mark;\n  }\n\n  static getSeriesBuiltInTheme(themeKey: string): Record<string, any> {\n    for (const key in Factory._series) {\n      const item = Factory._series[key];\n      if (item && item.builtInTheme && item.builtInTheme[themeKey]) {\n        return item.builtInTheme[themeKey];\n      }\n    }\n\n    return null;\n  }\n\n  static getComponentBuiltInTheme(themeKey: string): Record<string, any> {\n    for (const key in Factory._components) {\n      const item = Factory._components[key];\n      if (item && item.cmp && item.cmp.builtInTheme && item.cmp.builtInTheme[themeKey]) {\n        return item.cmp.builtInTheme[themeKey];\n      }\n    }\n    return null;\n  }\n\n  static getChartPlugins() {\n    return Object.values(Factory._chartPlugin);\n  }\n\n  static getVChartPlugins() {\n    return Object.values(Factory._vChartPlugin);\n  }\n\n  static getComponentPlugins() {\n    return Object.values(Factory._componentPlugin);\n  }\n\n  static getComponentPluginInType(type: string) {\n    return Factory._componentPlugin[type];\n  }\n\n  static registerFormatter(func: typeof Factory['_formatter']) {\n    this._formatter = func;\n  }\n\n  static getFormatter() {\n    return this._formatter;\n  }\n\n  private static _stageEventPlugins: Record<string, IStageEventPlugin<any>> = {};\n\n  static registerStageEventPlugin = (type: string, Plugin: IStageEventPlugin<any>) => {\n    Factory._stageEventPlugins[type] = Plugin;\n  };\n\n  static getStageEventPlugin = (type: string) => {\n    return Factory._stageEventPlugins[type];\n  };\n\n  private static _interactionTriggers: Record<string, ITriggerConstructor> = {};\n\n  static registerInteractionTrigger = (interactionType: string, interaction: ITriggerConstructor) => {\n    Factory._interactionTriggers[interactionType] = interaction;\n  };\n\n  static createInteractionTrigger(interactionType: string, options?: IBaseTriggerOptions) {\n    const Ctor = Factory._interactionTriggers[interactionType];\n    if (!Ctor) {\n      return null;\n    }\n\n    return new Ctor(options);\n  }\n\n  static hasInteractionTrigger(interactionType: string) {\n    return !!Factory._interactionTriggers[interactionType];\n  }\n\n  private static _composedEventMap: Record<string, IComposedEventConstructor> = {};\n\n  static registerComposedEvent = (eType: string, composedEvent: IComposedEventConstructor) => {\n    Factory._composedEventMap[eType] = composedEvent;\n  };\n\n  static getComposedEvent(eType: string) {\n    return Factory._composedEventMap[eType];\n  }\n\n  private static _tooltipProcessors: Record<string, ITooltipProcessorConstructor> = {};\n  static registerTooltipProcessor = (type: string, processor: ITooltipProcessorConstructor) => {\n    Factory._tooltipProcessors[type] = processor;\n  };\n  static createTooltipProcessor = (type: string, tooltip: ITooltip) => {\n    const Cror = Factory._tooltipProcessors[type];\n    if (!Cror) {\n      return null;\n    }\n    return new Cror(tooltip);\n  };\n}\n"]}