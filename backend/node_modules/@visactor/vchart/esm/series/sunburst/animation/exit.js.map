{"version":3,"sources":["../src/series/sunburst/animation/exit.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAI1D,MAAM,sBAAsB,GAAG,CAAC,IAAoB,EAAoB,EAAE;IACxE,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IACtF,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IAClF,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,MAAgC,EAAwB,EAAE;IACrF,OAAO;QACL,OAAO,EAAE;YACP,UAAU,EAAE;gBACV,IAAI,EAAE,CAAC,EAAS,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU;gBAClF,EAAE,EAAE,CAAC,EAAS,EAAE,OAAqB,EAAE,EAAE;oBACvC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBAExD,MAAM,aAAa,GAAG,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAEpE,MAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAEpD,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;oBAC1E,OAAO,KAAK,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;gBACtD,CAAC;aACF;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,CAAC,EAAS,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,QAAQ;gBAChF,EAAE,EAAE,CAAC,EAAS,EAAE,OAAqB,EAAE,EAAE;oBACvC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBAExD,MAAM,aAAa,GAAG,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAEpE,MAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAEpD,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;oBACxE,OAAO,KAAK,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;gBACtD,CAAC;aACF;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,CAAC,EAAS,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,WAAW;gBACnF,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,WAAW;aAC7C;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,CAAC,EAAS,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,WAAW;gBACnF,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,WAAW;aAC7C;SACF;KACF,CAAC;AACJ,CAAC,CAAC","file":"exit.js","sourcesContent":["import type { ISunburstAnimationParams } from './interface';\nimport type { Datum } from '../../../typings';\nimport { computeRatio, getInnerMostElements } from './utils';\nimport { maxInArray, minInArray } from '@visactor/vutils';\nimport type { IAnimationTypeConfig } from '../../../animation/interface';\nimport type { IMarkGraphic } from '../../../mark/interface/common';\n\nconst computeInnerAngleRange = (mark: IMarkGraphic[]): [number, number] => {\n  const minStartAngle = minInArray(mark.map(m => m.getFinalAttribute().startAngle * 1));\n  const maxEndAngle = maxInArray(mark.map(m => m.getFinalAttribute().endAngle * 1));\n  return [minStartAngle, maxEndAngle];\n};\n\nexport const sunburstExit = (params: ISunburstAnimationParams): IAnimationTypeConfig => {\n  return {\n    channel: {\n      startAngle: {\n        from: (_d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().startAngle,\n        to: (_d: Datum, graphic: IMarkGraphic) => {\n          const { startAngle, endAngle } = params.animationInfo();\n          // 得到最内层的elements.\n          const innerElements = getInnerMostElements(graphic.parent.children);\n          // 计算range\n          const range = computeInnerAngleRange(innerElements);\n          // 计算比例\n          const ratio = computeRatio(graphic.getFinalAttribute().startAngle, range);\n          return ratio * (endAngle - startAngle) + startAngle;\n        }\n      },\n      endAngle: {\n        from: (_d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().endAngle,\n        to: (_d: Datum, graphic: IMarkGraphic) => {\n          const { startAngle, endAngle } = params.animationInfo();\n          // 得到最内层的elements.\n          const innerElements = getInnerMostElements(graphic.parent.children);\n          // 计算range\n          const range = computeInnerAngleRange(innerElements);\n          // 计算比例\n          const ratio = computeRatio(graphic.getFinalAttribute().endAngle, range);\n          return ratio * (endAngle - startAngle) + startAngle;\n        }\n      },\n      outerRadius: {\n        from: (_d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().outerRadius,\n        to: () => params.animationInfo().innerRadius\n      },\n      innerRadius: {\n        from: (_d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().innerRadius,\n        to: () => params.animationInfo().innerRadius\n      }\n    }\n  };\n};\n"]}