{"version":3,"sources":["../src/series/sunburst/animation/enter.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC7D,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAInE,MAAM,sBAAsB,GAAG,CAAC,QAAwB,EAAE,UAAkB,EAAE,QAAgB,EAAoB,EAAE;IAElH,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;QACrB,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;KAC/B;IAED,MAAM,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1F,MAAM,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IACtF,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAgC,EAAwB,EAAE;IACtF,OAAO;QACL,OAAO,EAAE;YACP,UAAU,EAAE;gBACV,IAAI,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE;oBACxC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBAExD,MAAM,aAAa,GAAG,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAEpE,MAAM,UAAU,GAAG,sBAAsB,CAAC,aAAa,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;oBAE/E,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;oBAC/E,OAAO,KAAK,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;gBACtD,CAAC;gBACD,EAAE,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU;aAChF;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE;oBACxC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBAExD,MAAM,aAAa,GAAG,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAEpE,MAAM,UAAU,GAAG,sBAAsB,CAAC,aAAa,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;oBAE/E,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBAC7E,OAAO,KAAK,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;gBACtD,CAAC;gBACD,EAAE,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,QAAQ;aAC9E;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,WAAW;gBAClF,EAAE,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,WAAW;aACjF;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,WAAW;gBAClF,EAAE,EAAE,CAAC,CAAQ,EAAE,OAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,WAAW;aACjF;SACF;KACF,CAAC;AACJ,CAAC,CAAC","file":"enter.js","sourcesContent":["import type { ISunburstAnimationParams } from './interface';\nimport type { Datum } from '../../../typings';\nimport { computeRatio, getInnerMostElements } from './utils';\nimport { isEmpty, maxInArray, minInArray } from '@visactor/vutils';\nimport type { IAnimationTypeConfig } from '../../../animation/interface';\nimport type { IMarkGraphic } from '../../../mark/interface';\n\nconst computeInnerAngleRange = (graphics: IMarkGraphic[], startAngle: number, endAngle: number): [number, number] => {\n  // 处理enter时从无到有的case, 例如图例.\n  if (isEmpty(graphics)) {\n    return [startAngle, endAngle];\n  }\n\n  const minStartAngle = minInArray(graphics.map(m => m.getFinalAttribute().startAngle * 1));\n  const maxEndAngle = maxInArray(graphics.map(m => m.getFinalAttribute().endAngle * 1));\n  return [minStartAngle, maxEndAngle];\n};\n\nexport const sunburstEnter = (params: ISunburstAnimationParams): IAnimationTypeConfig => {\n  return {\n    channel: {\n      startAngle: {\n        from: (d: Datum, graphic: IMarkGraphic) => {\n          const { startAngle, endAngle } = params.animationInfo();\n          // 得到最内层的elements.\n          const innerElements = getInnerMostElements(graphic.parent.children);\n          // 计算间距\n          const angleRange = computeInnerAngleRange(innerElements, startAngle, endAngle);\n          // 计算比例\n          const ratio = computeRatio(graphic.getFinalAttribute().startAngle, angleRange);\n          return ratio * (endAngle - startAngle) + startAngle;\n        },\n        to: (d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().startAngle\n      },\n      endAngle: {\n        from: (d: Datum, graphic: IMarkGraphic) => {\n          const { startAngle, endAngle } = params.animationInfo();\n          // 得到最内层的elements.\n          const innerElements = getInnerMostElements(graphic.parent.children);\n          // 计算间距\n          const angleRange = computeInnerAngleRange(innerElements, startAngle, endAngle);\n          // 计算比例\n          const ratio = computeRatio(graphic.getFinalAttribute().endAngle, angleRange);\n          return ratio * (endAngle - startAngle) + startAngle;\n        },\n        to: (d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().endAngle\n      },\n      outerRadius: {\n        from: (d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().innerRadius,\n        to: (d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().outerRadius\n      },\n      innerRadius: {\n        from: (d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().innerRadius,\n        to: (d: Datum, graphic: IMarkGraphic) => graphic.getFinalAttribute().innerRadius\n      }\n    }\n  };\n};\n"]}