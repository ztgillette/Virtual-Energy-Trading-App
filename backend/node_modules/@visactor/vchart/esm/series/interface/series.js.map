{"version":3,"sources":["../src/series/interface/series.ts"],"names":[],"mappings":"","file":"series.js","sourcesContent":["import type { PanEventParam, ZoomEventParam } from '../../event/interface';\nimport type { IModel } from '../../model/interface';\nimport type { DataSet, DataView, ITransformOptions } from '@visactor/vdataset';\nimport type { IGroupMark, ILabelMark, IMark } from '../../mark/interface';\nimport type { CoordinateType, IPoint, IPolarPoint } from '../../typings/coordinate';\nimport type { IRegion } from '../../region/interface';\nimport type { IBaseScale } from '@visactor/vscale';\nimport type { IAxisHelper } from '../../component/axis/cartesian/interface';\nimport type { IPolarAxisHelper } from '../../component/axis/polar/interface';\nimport type { ISeriesSeriesInfo, ISeriesSpecInfo, ISeriesStackData } from './common';\nimport type { ISeriesTooltipHelper } from './tooltip-helper';\nimport type { IInvalidType, Datum, DirectionType, IGroup, StringOrNumber } from '../../typings';\nimport type { ISeriesMarkAttributeContext, StateValueType } from '../../compile/mark/interface';\nimport type { IGeoCoordinateHelper } from '../../component/geo/interface';\nimport type { ILabelSpec, ILabelInfo } from '../../component/label/interface';\nimport type { StatisticOperations } from '../../data/transforms/interface';\nimport type { ILegend } from '../../component/legend/interface';\nimport type { IBaseTriggerOptions } from '../../interaction/interface/trigger';\n\n// 使用类型约束系列支持的样式，但是感觉这样不合理 不使用这样的方式去做\n// export interface ISeries<A extends string> extends IModel\n\nexport interface ISeries extends IModel {\n  readonly type: string;\n  readonly name?: string;\n\n  // tooltip\n  tooltipHelper: ISeriesTooltipHelper;\n\n  // 配置\n  getSpec: () => any;\n\n  // 坐标系信息\n  readonly coordinate: CoordinateType;\n\n  // layout\n  onLayoutEnd: () => void;\n\n  // 数据\n  getRawData: () => DataView | undefined;\n  getViewDataFilter: () => DataView | undefined;\n  getViewData: () => DataView | undefined;\n  getViewDataProductId: () => string | undefined;\n  getRawDataStatisticsByField: (field: string, isNumeric?: boolean) => { values?: any[]; min?: number; max?: number };\n  getViewDataStatistics?: () => DataView | undefined;\n  getDataSet?: () => DataSet;\n  getFieldAlias: (field: string) => string;\n  // 更新原始数据\n  updateRawData: (d: any) => void;\n  setData?: (dv: DataView) => void;\n  rawDataUpdate: (d: DataView) => void;\n  viewDataUpdate: (d: DataView) => void;\n  viewDataStatisticsUpdate: (d: DataView) => void;\n  addViewDataFilter: (option: ITransformOptions) => void;\n  reFilterViewData: () => void;\n  reTransformViewData: () => void;\n  fillData: () => void;\n  isHierarchyData?: () => boolean;\n  getMarkData?: (d: Datum) => Datum;\n\n  /**\n   * 常见数据使用问题\n   *\n   * 一、使用图表最终展示数据\n   * 比如 markline，数值轴 这样的组件\n   * 需要操作展示数据，做 筛选 ｜ 变换 的\n   * 比如图例，datazoom\n      series.getViewData().transform({},false)\n   * 需要获取展示数据，生成自身数据做自身展示的 使用消息机制。比如 轴\n      series.event.on('viewDataStatisticsUpdate' ｜ 'viewDataUpdate', { filter: ({ model }) => model?.id === series.id }, () => {\n        this.updateData();\n      });\n   *\n   * 二、使用图表原始数据\n   * 比如图例，datazoom\n   * 需要使用原始数据信息，生成自身数据\n   * 比如图例，datazoom\n      series.getRawData().parserData  ｜   latestData    // parserData latestData 区别见下面说明\n      series.getRawDataStatistics().latestData\n\n      series.event.on('rawDataUpdate', { filter: ({ model }) => model?.id === series.id }, () => {\n        this.updateData();\n      });\n   * 或者使用系列自身的特殊api 特殊情况外不建议这样用\n      series.getSeriesInfoList()\n\n   * 建议：使用数据时需要注意数据更新，使用系列数据更新组件数据的场景，只建议使用消息监听\n      series.event.on(\n        'viewDataStatisticsUpdate' ｜\n        'viewDataUpdate' |\n        'rawDataUpdate',\n        { filter: ({ model }) => model?.id === series.id })\n   */\n\n  // 区域\n  getRegion: () => IRegion;\n\n  // mark\n  initMark: () => void;\n  getMarks: () => IMark[];\n  getMarksWithoutRoot: () => IMark[];\n  getMarkNameMap: () => Record<string, IMark>;\n  getMarksInType: (type: string | string[]) => IMark[];\n  getMarkInName: (name: string) => IMark | undefined;\n  getMarkInId: (id: number) => IMark | undefined;\n\n  getRootMark: () => IGroupMark;\n  getActiveMarks: () => IMark[];\n  getSeriesMark: () => IMark;\n\n  // example\n  /**\n   *  [\n   *  {\n   *    fields: {\n   *       x: '周一',\n   *       __VChart_STACK: 'stack'\n   *    },\n   *    valueField: 'y',\n   *    values: [{x: '周一', y: 20}];\n   *  },\n   *  {\n   *    fields: {\n   *       x: '周一',\n   *       stack: 'stackA'\n   *    },\n   *    valueField: 'y',\n   *    values: [{x: '周一', y: 20, stack: 'stackA'}];\n   *  },\n   *  {\n   *    fields: {\n   *       x: '周一',\n   *       stack: 'stackB'\n   *    },\n   *    valueField: 'y',\n   *    values: [{x: '周一', y: 20, stack: 'stackB'}];\n   *  },\n   *  ]\n   */\n  getStackData: () => ISeriesStackData;\n\n  getStack: () => boolean;\n  getStackValue: () => StringOrNumber | undefined;\n  getPercent: () => boolean;\n  getStackOffsetSilhouette: () => boolean;\n\n  getStackValueField: () => string;\n  setValueFieldToStack: () => void;\n  setValueFieldToPercent: () => void;\n  setValueFieldToStackOffsetSilhouette: () => void;\n\n  getStackGroupFields: () => string[];\n  getSeriesField: () => string | undefined;\n  getSeriesKeys: () => string[];\n  getSeriesStyle: (datum: Datum) => ISeriesSeriesInfo['style'];\n  getSeriesInfoInField: (field: string) => ISeriesSeriesInfo[];\n  getSeriesInfoList: () => ISeriesSeriesInfo[];\n  getGroups: () => IGroup | undefined;\n  getDimensionField: () => string[];\n  getMeasureField: () => string[];\n  getStatisticFields: () => { key: string; operations: StatisticOperations }[];\n  getDatumPositionValues: (datum: Datum, fields: string | string[]) => any[];\n  getDatumPositionValue: (datum: Datum, field: string) => any;\n\n  setSeriesField: (field: string) => void;\n  handleZoom?: (e: ZoomEventParam) => void;\n  handlePan?: (e: PanEventParam) => void;\n\n  // 数据映射\n  dataToPosition: (datum: Datum, checkInViewData?: boolean) => IPoint | null;\n  dataToPositionX: (datum: Datum) => number | null;\n  dataToPositionY: (datum: Datum) => number | null;\n  dataToPositionZ?: (datum: Datum) => number | null;\n  valueToPosition: (value1: any, value2?: any) => IPoint;\n\n  getColorAttribute: () => { scale: IBaseScale; field: string };\n  getDefaultColorDomain: () => any[];\n\n  getInvalidType: () => IInvalidType;\n\n  // 交互\n\n  /**\n   * 获取系列默认的缩略图形\n   * @returns 默认的缩略图形\n   */\n  getDefaultShapeType: () => string;\n  /** 获取系列标签配置 */\n  initLabelMarkStyle?: (labelMark: ILabelMark, labelSpec: ILabelSpec) => void;\n  /** 设置总计标签配置 */\n  initTotalLabelMarkStyle?: (labelMark: ILabelMark) => void;\n  getTotalLabelComponentStyle?: (info: Pick<ILabelInfo, 'baseMark' | 'labelMark'>) => any;\n\n  getGroupFields: () => string[];\n\n  getSpecInfo: () => ISeriesSpecInfo;\n  getMarkAttributeContext: () => ISeriesMarkAttributeContext;\n\n  getSeriesFieldValue: (datum: Datum, seriesField?: string) => any;\n\n  legendSelectedFilter?: (component: ILegend, selectedKeys: StringOrNumber[]) => StringOrNumber[];\n  parseLabelStyle?: (labelStyle: any, labelSpec: any, labelMark?: ILabelMark) => any;\n\n  getInteractionTriggers?: () => { trigger: Partial<IBaseTriggerOptions>; marks: IMark[] }[];\n}\n\nexport interface ICartesianSeries extends ISeries {\n  readonly coordinate: 'cartesian';\n  readonly direction: DirectionType;\n\n  scaleX: IBaseScale;\n  setScaleX: (s: IBaseScale) => void;\n  scaleY: IBaseScale;\n  setScaleY: (s: IBaseScale) => void;\n  scaleZ?: IBaseScale;\n  setScaleZ: (s: IBaseScale) => void;\n  // 要考虑基于多个field的场景\n  fieldX: string[];\n  setFieldX: (field: string | string[], level?: number) => void;\n  fieldX2: string;\n  setFieldX2: (field: string) => void;\n  fieldY: string[];\n  setFieldY: (field: string | string[], level?: number) => void;\n  fieldY2: string;\n  setFieldY2: (field: string) => void;\n  fieldZ?: string[];\n  setFieldZ: (field: string | string[], level?: number) => void;\n\n  positionToData: (p: IPoint) => any | null;\n  positionToDataX: (xPos: number) => any | null;\n  positionToDataY: (yPos: number) => any | null;\n\n  // 轴API\n  getXAxisHelper: () => IAxisHelper;\n  setXAxisHelper: (h: IAxisHelper) => void;\n  getYAxisHelper: () => IAxisHelper;\n  setYAxisHelper: (h: IAxisHelper) => void;\n  getZAxisHelper: () => IAxisHelper | undefined;\n  setZAxisHelper: (h: IAxisHelper) => void;\n\n  dataToPositionX1: (datum: Datum) => number | null;\n  dataToPositionY1: (datum: Datum) => number | null;\n\n  valueToPosition: (value1: any, value2: any) => IPoint;\n  valueToPositionX: (value: StringOrNumber | StringOrNumber[], datum?: any) => any;\n  valueToPositionY: (value: StringOrNumber | StringOrNumber[], datum?: any) => any;\n}\n\nexport interface IPolarSeries extends ISeries {\n  readonly coordinate: 'polar';\n\n  outerRadius: number;\n  innerRadius: number;\n\n  getRadiusField: () => string[];\n  setRadiusField: (field: string | string[], level?: number) => void;\n  getAngleField: () => string[];\n  setAngleField: (field: string | string[], level?: number) => void;\n\n  // 轴将是一个实现了 scale 的组件。这里接收的可以是一个轴\n  radiusScale: IBaseScale;\n  setRadiusScale: (s: IBaseScale) => void;\n  angleScale: IBaseScale;\n  setAngleScale: (s: IBaseScale) => void;\n\n  // TODO:\n  positionToData: (point: IPolarPoint) => any;\n  radiusToData: (radius: number) => any;\n  angleToData: (angle: number) => any;\n\n  // 轴\n  radiusAxisHelper: IPolarAxisHelper;\n  angleAxisHelper: IPolarAxisHelper;\n\n  valueToPosition: (value1: any, value2: any) => IPoint;\n}\n\nexport interface IGeoSeries extends ISeries {\n  readonly coordinate: 'geo';\n\n  nameField?: string;\n  valueField?: string;\n\n  getMapViewData: () => DataView;\n  getNameProperty: () => string;\n\n  dataToPosition: (datum: any, checkInViewData?: boolean) => IPoint | null;\n  dataToLatitude: (latValue: any) => number | null;\n  dataToLongitude: (lonValue: any) => number | null;\n  nameValueToPosition: (name: string) => IPoint | null;\n\n  positionToData: (p: IPoint) => any;\n  latitudeToData: (lat: number) => any;\n  longitudeToData: (lon: number) => any;\n\n  getCoordinateHelper: () => IGeoCoordinateHelper;\n  setCoordinateHelper: (helper: IGeoCoordinateHelper) => void;\n\n  valueToPosition: (value1: any, value2: any) => IPoint;\n  getDatumCenter: (datum: any) => [number, number];\n}\n\n// 收拢扇区标签形式依赖的 api\nexport interface IArcSeries extends IPolarSeries {\n  getCenter: () => IPoint;\n  getRadius: (state?: StateValueType) => number;\n  getInnerRadius: (state?: StateValueType) => number;\n\n  computeRadius: (r: number, k?: number) => number;\n  computeDatumRadius: (datum: any, state?: StateValueType) => number;\n}\n\nexport interface IFunnelSeries extends ISeries {\n  getPoints: (datum: any) => IPoint[];\n  getCategoryField: () => string;\n\n  valueToPosition: (value: any) => IPoint;\n}\n"]}