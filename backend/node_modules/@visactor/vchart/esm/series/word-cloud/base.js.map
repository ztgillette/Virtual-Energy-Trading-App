{"version":3,"sources":["../src/series/word-cloud/base.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAClE,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,MAAM,qBAAqB,CAAC;AACtG,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAG1D,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EACL,yBAAyB,EACzB,sBAAsB,EACtB,oBAAoB,EACpB,yBAAyB,EACzB,kBAAkB,EAClB,qBAAqB,EACrB,cAAc,EACd,qBAAqB,EACrB,mBAAmB,EACnB,UAAU,EACX,MAAM,UAAU,CAAC;AASlB,OAAO,EAAE,eAAe,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC7E,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,iBAAiB,EAAE,MAAM,iCAAiC,CAAC;AACpE,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AAEjD,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAG/C,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAC7E,OAAO,EAAE,SAAS,EAAE,MAAM,8CAA8C,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAIrD,MAAM,OAAO,mBAAmF,SAAQ,UAAa;IAArH;;QAoBY,mBAAc,GAA+B,CAAC,qBAAqB,EAAE,qBAAqB,CAAC,CAAC;QAU5F,sBAAiB,GAAY,KAAK,CAAC;QAUnC,gBAAW,GAAY,IAAI,CAAC;QAE5B,2BAAsB,GAAG,CAAC,MAAyB,EAAE,QAAiB,EAAE,EAAE;YAClF,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC5B,CAAC,CAAC;QAmNF,iBAAY,GAAG,CAAC,KAAY,EAAE,EAAE;YAC9B,IAAI,KAAK,CAAC,aAAa,EAAE;gBACvB,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,WAAW,EAAE;oBAEnD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB;wBAC1E,CAAC,CAAC,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC;wBAC1E,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;iBACjF;gBAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;aAC1C;YAED,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,WAAW,EAAE;gBAEnD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa;oBACnD,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBAC1C,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;aACtD;YAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC;QAEM,yBAAoB,GAAG,CAAC,KAAY,EAAE,EAAE;YAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAEvE,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE;gBAC3B,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;aACjC;YAED,OAAO,CACL,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACxB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACnF,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;oBACtC,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAC1B,CAAC;QACJ,CAAC,CAAC;IA4LJ,CAAC;IAxdC,aAAa,CAAC,KAAa;QACzB,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;YAClB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC1B;IACH,CAAC;IAWD,gBAAgB,CAAC,aAAwC;QACvD,IAAI,OAAO,CAAC,aAAa,CAAC,EAAE;YAC1B,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;SACrC;aAAM;YACL,IAAI,CAAC,cAAc,GAAG,sBAAsB,CAAC;SAC9C;IACH,CAAC;IAqBD,eAAe;;QACb,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC;QAGhD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,mCAAI,SAAS,CAAC;QACpD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,eAAe,mCAAI,yBAAyB,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,YAAY,mCAAI,qBAAqB,CAAC;QACtE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAChD,IAAI,CAAC,UAAU,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,mCAAI,kBAAkB,CAAC;QAC7D,IAAI,CAAC,UAAU,GAAG,CAAA,MAAA,IAAI,CAAC,KAAK,CAAC,IAAI,0CAAE,YAAY,EAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QACpF,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;QAEnD,IAAI,CAAC,gBAAgB,mBACnB,cAAc,EAAE,yBAAyB,EACzC,UAAU,EAAE,SAAS,EACrB,SAAS,EAAE,mBAAmB,IAC3B,IAAI,CAAC,KAAK,CAAC,eAAe,CAC9B,CAAC;QAEF,IAAI,CAAC,CAAC,eAAe,IAAI,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAChG,IAAI,CAAC,gBAAgB,CAAC,UAAU,GAAG,MAAM,CAAC;SAC3C;QAGD,IAAI,CAAC,qBAAqB,mBACxB,kBAAkB,EAAE,IAAI,CAAC,cAAc,EAAE,EACzC,mBAAmB,EAAE,qBAAqB,EAC1C,UAAU,EAAE,SAAS,IAClB,IAAI,CAAC,KAAK,CAAC,oBAAoB,CACnC,CAAC;QAEF,IAAI,CAAC,iBAAiB;YACpB,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAoB,CAAC;gBAC/C,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACxE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAW,CAAC;IAC1E,CAAC;IAKS,QAAQ;;QAChB,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEjB,MAAA,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,MAAM,0CAAE,WAAW,CAAC,QAAQ,EAAE,GAAG,EAAE;YACrD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAID,QAAQ;;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAC/B,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAC7B;YACE,GAAG,EAAE,gBAAgB;YACrB,QAAQ,EAAE,IAAI,CAAC,YAAY;YAC3B,YAAY,EAAE,IAAI;SACnB,EACD;YACE,eAAe,EAAE,IAAI,CAAC,YAAY;SACnC,CACW,CAAC;QACf,IAAI,MAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,0CAAE,OAAO,EAAE;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAc,CAAC;YAEvG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;gBAC3B,MAAM,EAAE,YAAY,CAAC,IAAI,GAAG,CAAC;aAC9B,CAAC,CAAC;SACJ;IACH,CAAC;IAED,aAAa;QACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAEvG,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,YAAY,CACf,IAAI,CAAC,SAAS,EACd;gBACE,KAAK,EAAE,GAAG,EAAE;oBACV,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC;gBAC5C,CAAC;gBACD,MAAM,EAAE,GAAG,EAAE;oBACX,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC;gBAC7C,CAAC;gBACD,UAAU,EAAE,GAAG,EAAE;oBACf,OAAO,IAAI,CAAC,WAAW,CAAC;gBAC1B,CAAC;aACF,EACD,QAAQ,EACR,cAAc,CAAC,MAAM,CACtB,CAAC;SACH;IACH,CAAC;IAED,mBAAmB,CACjB,QAAmB,EACnB,QAAmC,EACnC,aAAsB,EACtB,WAAoB,EACpB,aAAuB;;QAEvB,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QACD,IAAI,CAAC,YAAY,CACf,QAAQ,EACR;YACE,IAAI,EAAE,CAAC,QAAgB,aAAhB,QAAQ,uBAAR,QAAQ,CAAU,YAAY;gBACnC,CAAC,CAAC,CAAC,KAAY,EAAE,EAAE;oBACf,OAAQ,QAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC/C,CAAC;gBACH,CAAC,CAAC,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;YAC5C,CAAC,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC5B,QAAQ,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ;YAC1C,SAAS,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS;YAE5C,KAAK,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK;YACpC,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO;SACzC,EACD,QAAQ,EACR,cAAc,CAAC,MAAM,CACtB,CAAC;QACF,IAAI,CAAC,YAAY,CACf,QAAQ,EACR;YACE,IAAI,EAAE,MAAA,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,0CAAE,IAAI,mCAAI,IAAI,CAAC,YAAY;YAEhD,UAAU,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU;YAC9C,UAAU,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU;SAC/C,EACD,QAAQ,EACR,cAAc,CAAC,SAAS,CACzB,CAAC;IACJ,CAAC;IAES,WAAW;QACnB,KAAK,CAAC,WAAW,EAAE,CAAC;QAEpB,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClF,CAAC;IAED,aAAa;QACX,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;;YAC9B,IAAI,IAAI,EAAE;gBACR,MAAM,YAAY,GAAG,MAAC,MAAA,IAAI,CAAC,KAAK,0CAAE,eAA0C,0CAAE,MAAM,CAAC;gBACrF,MAAM,MAAM,GAAG;oBACb,eAAe,EAAE,GAAG,EAAE,eAAC,OAAA,MAAA,MAAA,IAAI,CAAC,kBAAkB,EAAE,0CAAE,MAAM,0CAAG,CAAC,CAAC,CAAA,EAAA;iBAC9D,CAAC;gBACF,IAAI,CAAC,kBAAkB,CACrB,eAAe,CACb,OAAO,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,YAAY,CAAC,EAC5D,mBAAmB,SAA0B,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,qBAAqB,CAAC,CACrF,CACF,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAES,wBAAwB,CAAC,KAAa,EAAE,aAAsB;;QACtE,MAAM,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QAChG,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,UAAU,CAAC,GAAG,CAAC,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACpG,MAAM,UAAU,GAAG,MAAA,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,MAAA,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,0CAAE,KAAK,EAAE,mCAAI,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7G,OAAO,MAAA,MAAA,IAAI,iBAAiB,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,EAAC,KAAK,mDAAG,UAAU,CAAC,CAAC;IACzE,CAAC;IAES,iBAAiB,CAAC,KAAa,EAAE,aAAsB;;QAC/D,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAClE,OAAO,CAAC,KAAY,EAAE,EAAE;gBACtB,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,yBAAyB,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC;SACH;QAED,MAAM,SAAS,GACb,MAAA,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,mCAC/E,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;QAErD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,OAAO,CAAC,KAAY,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACvC;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,KAAK,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACvE,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE;gBAC3B,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;aACrB;YACD,MAAM,KAAK,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAEhF,OAAO,CAAC,KAAY,EAAE,EAAE;gBACtB,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9C,CAAC,CAAC;SACH;QAED,MAAM,KAAK,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAA,MAAA,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,UAAU,0CAAE,MAAM,mCAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAE1G,OAAO,CAAC,KAAY,EAAE,EAAE;YACtB,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC;IACJ,CAAC;IAuCD,OAAO;QACL,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;QAEvD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACjF,OAAO;SACR;QAED,MAAM,mBAAmB,GAAqB,EAAE,CAAC;QAGjD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,mBAAmB,CAAC,IAAI,iBACtB,IAAI,EAAE,WAAW,IACd,IAAI,CAAC,yBAAyB,EAAE,EACnC,CAAC;SACJ;aAEI;YACH,mBAAmB,CAAC,IAAI,iBACtB,IAAI,EAAE,gBAAgB,IAEnB,IAAI,CAAC,8BAA8B,EAAE,EACxC,CAAC;SACJ;QAGD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;IACnD,CAAC;IAES,0BAA0B;;QAClC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;QACvD,MAAM,QAAQ,GAAG,MAAA,IAAI,CAAC,KAAK,CAAC,IAAI,mCAAI,EAAE,CAAC;QACvC,MAAM,aAAa,GAAG,MAAA,QAAQ,CAAC,KAAK,mCAAI,EAAE,CAAC;QAE3C,OAAO;YACL,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;YACrB,KAAK,EACH,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;gBACxB,IAAI,CAAC,UAA4B,CAAC,IAAI,KAAK,MAAM;gBAClD,KAAK,CAAE,IAAI,CAAC,UAA4B,CAAC,UAAU,CAAC;gBAClD,CAAC,iBACG,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,IAC5C,IAAI,CAAC,UAAU,EAEtB,CAAC,CAAC,IAAI,CAAC,UAAU;YACrB,kBAAkB,EAAE,IAAI,CAAC,sBAAsB;YAC/C,gBAAgB,EAAE,GAAG,EAAE;;gBACrB,OAAA,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,cAAc;qBACxB,QAAQ,EAAE;qBACV,SAAS,EAAE;qBACX,eAAe,0CAAE,uBAAuB,mDAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;aAAA;YAC5E,YAAY,EAAE,gBAAgB;YAC9B,IAAI,EAAE,QAAQ,CAAC,YAAY;gBACzB,CAAC,CAAC,CAAC,KAAY,EAAE,EAAE;oBACf,OAAO,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACtC,CAAC;gBACH,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE;YAC9B,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACjF,aAAa,EAAE,IAAI,CAAC,cAAc,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc;YAE1E,OAAO,EAAE,MAAA,MAAA,IAAI,CAAC,KAAK,CAAC,IAAI,0CAAE,OAAO,mCAAI,oBAAoB;YACzD,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;gBAC7C,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;gBACvC,CAAC,CAAC,MAAA,aAAa,CAAC,UAAU,mCAAI,IAAI,CAAC,kBAAkB;YAEvD,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;gBAC7C,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;gBACvC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC;oBACnC,CAAC,CAAC,aAAa,CAAC,UAAU;oBAC1B,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC;wBAC3B,CAAC,CAAC,IAAI,CAAC,oBAAoB;wBAC3B,CAAC,CAAC,QAAQ;YACZ,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,SAAS;YAC9G,YAAY,EAAE,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC;YAChD,aAAa;SACd,CAAC;IACJ,CAAC;IAES,yBAAyB;;QACjC,MAAM,eAAe,GAAG,MAAA,IAAI,CAAC,gBAAgB,mCAAI,EAAE,CAAC;QAEpD,qDACK,eAAe,GACf,IAAI,CAAC,0BAA0B,EAAE,KAEpC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAE5C,MAAM,EAAE,IAAI,CAAC,aAAa,EAE1B,aAAa,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,MAAM,mCAAI,cAAc,EAClD,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,cAAc,KAAK,MAAM,EACrD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAC9C,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,OAAO,EAChD,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,EAC7D,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe,EACtD,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe,EACtD,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,IAClD;IACJ,CAAC;IAES,8BAA8B;;QACtC,MAAM,oBAAoB,GAAG,MAAA,MAAA,IAAI,CAAC,KAAK,CAAC,WAAW,0CAAE,KAAK,mCAAI,EAAE,CAAC;QACjE,MAAM,oBAAoB,GAAG,MAAA,IAAI,CAAC,qBAAqB,mCAAI,EAAE,CAAC;QAE9D,qDACK,oBAAoB,GACpB,IAAI,CAAC,0BAA0B,EAAE,KACpC,WAAW,EAEX,UAAU,EAAE,IAAI,CAAC,aAAa,EAC9B,iBAAiB,EAAE,oBAAoB,CAAC,mBAAmB,EAE3D,iBAAiB,EAAE,OAAO,CAAC,oBAAoB,CAAC,sBAAsB,CAAC;gBACrE,CAAC,CAAC,EAAE,KAAK,EAAE,oBAAoB,CAAC,sBAAsB,EAAE;gBACxD,CAAC,CAAC,MAAA,oBAAoB,CAAC,UAAU,mCAAI,IAAI,CAAC,kBAAkB,EAC9D,cAAc,EAAE,MAAA,MAAA,IAAI,CAAC,KAAK,CAAC,WAAW,0CAAE,OAAO,mCAAI,oBAAoB,EACvE,gBAAgB,EAAE,OAAO,CAAC,oBAAoB,CAAC,qBAAqB,CAAC;gBACnE,CAAC,CAAC,EAAE,KAAK,EAAE,oBAAoB,CAAC,qBAAqB,EAAE;gBACvD,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAElC,iBAAiB,EAAE,OAAO,CAAC,oBAAoB,CAAC,sBAAsB,CAAC;gBACrE,CAAC,CAAC;oBACE,KAAK,EAAE,oBAAoB,CAAC,sBAAsB;iBACnD;gBACH,CAAC,CAAC,oBAAoB,CAAC,UAAU,IACnC;IACJ,CAAC;IAED,kBAAkB;QAChB,MAAM,MAAM,GAAmE,EAAE,CAAC;QAClF,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QACnE,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,cAAc,CAAC,IAAW;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAe,CAAC,IAAS;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAe,CAAC,IAAS;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAe,CAAC,IAAS;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAe,CAAC,MAAW,EAAE,MAAY;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc;QAEZ,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,mBAAmB;QAEjB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,kBAAkB;QAEhB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,WAAW;QACT,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,cAAc;QACZ,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACnC;QAED,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACnC;IACH,CAAC;;AA5de,wBAAI,GAAkB,mBAAmB,CAAC;AAC1C,gCAAY,GAA0C,EAAE,SAAS,EAAE,CAAC","file":"base.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport type { IPadding } from '@visactor/vutils';\nimport { isNil, isObject, isValidNumber } from '@visactor/vutils';\nimport { isValid } from '@visactor/vutils';\nimport { DEFAULT_DATA_INDEX, DEFAULT_DATA_KEY, DEFAULT_DATA_SERIES_FIELD } from '../../constant/data';\nimport { AttributeLevel } from '../../constant/attribute';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum } from '../interface/type';\nimport { isTrueBrowser } from '../../util/env';\nimport {\n  DEFAULT_DRAW_OUT_OF_BOUND,\n  DEFAULT_FONTSIZE_RANGE,\n  DEFAULT_FONT_PADDING,\n  DEFAULT_FONT_WEIGHT_RANGE,\n  DEFAULT_MASK_SHAPE,\n  DEFAULT_MIN_FONT_SIZE,\n  DEFAULT_RANDOM,\n  DEFAULT_ROTATE_ANGLES,\n  DEFAULT_ZOOM_TO_FIT,\n  SHAPE_TYPE\n} from './config';\nimport type {\n  IWordCloudSeriesSpec,\n  IWordCloudSeriesTheme,\n  WordCloudConfigType,\n  WordCloudShapeConfigType,\n  WordCloudShapeType\n} from './interface';\nimport type { Datum, IMarkSpec, IPoint, ITextMarkSpec } from '../../typings';\nimport { animationConfig, userAnimationConfig } from '../../animation/utils';\nimport { WORD_CLOUD_TEXT } from '../../constant/word-cloud';\nimport { BaseSeries } from '../base/base-series';\nimport { ColorOrdinalScale } from '../../scale/color-ordinal-scale';\nimport { wordCloudSeriesMark } from './constant';\nimport type { IStateAnimateSpec } from '../../animation/spec';\nimport { Factory } from '../../core/factory';\nimport type { IMark, IRectMark, ITextMark } from '../../mark/interface';\nimport { LinearScale } from '@visactor/vscale';\nimport type { GeometricMaskShape, TextShapeMask } from '@visactor/vlayouts';\nimport type { ITransformSpec } from '../../compile/interface';\nimport { vglobal, getTextBounds, createImage } from '@visactor/vrender-core';\nimport { wordCloud } from '../../theme/builtin/common/series/word-cloud';\nimport { LayoutZIndex } from '../../constant/layout';\n\nexport type IBaseWordCloudSeriesSpec = Omit<IWordCloudSeriesSpec, 'type'> & { type: string };\n\nexport class BaseWordCloudSeries<T extends IBaseWordCloudSeriesSpec = IBaseWordCloudSeriesSpec> extends BaseSeries<T> {\n  static readonly mark: SeriesMarkMap = wordCloudSeriesMark;\n  static readonly builtInTheme: Record<string, IWordCloudSeriesTheme> = { wordCloud };\n\n  protected _nameField: string;\n  protected _valueField?: string;\n  setValueField(field: string) {\n    if (isValid(field)) {\n      this._valueField = field;\n    }\n  }\n\n  protected _colorMode: 'linear' | 'ordinal';\n  protected _colorList: string[];\n  protected _rotateAngles?: number[];\n  protected _fontWeightRange?: [number, number];\n  protected _textField?: string;\n  protected _maskCanvas?: HTMLCanvasElement;\n  protected _maskMark?: IRectMark;\n\n  protected _fontSizeRange?: [number, number] | 'auto' = [DEFAULT_MIN_FONT_SIZE, DEFAULT_MIN_FONT_SIZE];\n  setFontSizeRange(fontSizeRange: [number, number] | 'auto') {\n    if (isValid(fontSizeRange)) {\n      this._fontSizeRange = fontSizeRange;\n    } else {\n      this._fontSizeRange = DEFAULT_FONTSIZE_RANGE;\n    }\n  }\n\n  protected _maskShape?: string | WordCloudShapeType | TextShapeMask | GeometricMaskShape;\n  protected _isWordCloudShape: boolean = false;\n\n  protected _wordCloudConfig?: WordCloudConfigType;\n  protected _wordCloudShapeConfig?: WordCloudShapeConfigType;\n\n  protected _padding?: IPadding;\n  protected _defaultFontFamily: string;\n\n  protected _keyWordColorCallback: (datum: Datum) => string;\n  protected _fillingColorCallback: (datum: Datum) => string;\n  protected _dataChange: boolean = true;\n\n  protected handleMaskCanvasUpdate = (canvas: HTMLCanvasElement, imageUrl?: string) => {\n    this._maskCanvas = canvas;\n  };\n  /**\n   * @override\n   */\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n    // series布局相关\n    this._padding = this._option.getChart().padding;\n\n    // 普通词云 & 形状词云 共有spec相关\n    this._nameField = this._spec.nameField;\n    this._colorMode = this._spec.colorMode ?? 'ordinal';\n    this._colorList = this._spec.colorList;\n    this.setValueField(this._spec.valueField);\n    this._fontWeightRange = this._spec.fontWeightRange ?? DEFAULT_FONT_WEIGHT_RANGE;\n    this._rotateAngles = this._spec.rotateAngles ?? DEFAULT_ROTATE_ANGLES;\n    this.setFontSizeRange(this._spec.fontSizeRange);\n    this._maskShape = this._spec.maskShape ?? DEFAULT_MASK_SHAPE;\n    this._textField = this._spec.word?.formatMethod ? WORD_CLOUD_TEXT : this._nameField;\n    const wordCloudConfig = this._spec.wordCloudConfig;\n    // 普通词云spec相关\n    this._wordCloudConfig = {\n      drawOutOfBound: DEFAULT_DRAW_OUT_OF_BOUND,\n      layoutMode: 'default',\n      zoomToFit: DEFAULT_ZOOM_TO_FIT,\n      ...this._spec.wordCloudConfig\n    };\n\n    if ((!wordCloudConfig || isNil(wordCloudConfig.layoutMode)) && !isTrueBrowser(this._option.mode)) {\n      this._wordCloudConfig.layoutMode = 'fast';\n    }\n\n    // 形状词云spec相关\n    this._wordCloudShapeConfig = {\n      fillingSeriesField: this.getSeriesField(),\n      fillingRotateAngles: DEFAULT_ROTATE_ANGLES,\n      layoutMode: 'default',\n      ...this._spec.wordCloudShapeConfig\n    };\n\n    this._isWordCloudShape =\n      !SHAPE_TYPE.includes(this._maskShape as string) &&\n      !['fast', 'grid', 'cloud'].includes(this._wordCloudConfig.layoutMode);\n    this._defaultFontFamily = this._option.getTheme('fontFamily') as string;\n  }\n\n  /**\n   * @override\n   */\n  protected initData(): void {\n    super.initData();\n    // data改变时, 需要重新编译, 重新布局\n    this.getViewData()?.target?.addListener('change', () => {\n      this._dataChange = true;\n      this.compile();\n    });\n  }\n\n  protected _wordMark: ITextMark;\n\n  initMark(): void {\n    this._wordMark = this._createMark(\n      BaseWordCloudSeries.mark.word,\n      {\n        key: DEFAULT_DATA_KEY,\n        groupKey: this._seriesField,\n        isSeriesMark: true\n      },\n      {\n        morphElementKey: this._seriesField\n      }\n    ) as ITextMark;\n    if (this._spec.wordMask?.visible) {\n      this._maskMark = this._createMark(BaseWordCloudSeries.mark.wordMask, { dataView: false }) as IRectMark;\n\n      this._maskMark.setMarkConfig({\n        zIndex: LayoutZIndex.Mark - 1\n      });\n    }\n  }\n\n  initMarkStyle() {\n    this.initMarkStyleOfWord(this._wordMark, this._spec.word, this._spec.colorHexField, this._seriesField);\n\n    if (this._maskMark) {\n      this.setMarkStyle(\n        this._maskMark,\n        {\n          width: () => {\n            return this._region.getLayoutRect().width;\n          },\n          height: () => {\n            return this._region.getLayoutRect().height;\n          },\n          background: () => {\n            return this._maskCanvas;\n          }\n        },\n        'normal',\n        AttributeLevel.Series\n      );\n    }\n  }\n\n  initMarkStyleOfWord(\n    wordMark: ITextMark,\n    wordSpec?: IMarkSpec<ITextMarkSpec>,\n    colorHexField?: string,\n    seriesField?: string,\n    isFillingWord?: boolean\n  ): void {\n    if (!wordMark) {\n      return;\n    }\n    this.setMarkStyle(\n      wordMark,\n      {\n        text: (wordSpec as any)?.formatMethod\n          ? (datum: Datum) => {\n              return (wordSpec as any).formatMethod(datum);\n            }\n          : (datum: Datum) => datum[this._textField],\n        x: (datum: Datum) => datum.x,\n        y: (datum: Datum) => datum.y,\n        fontSize: (datum: Datum) => datum.fontSize,\n        fontStyle: (datum: Datum) => datum.fontStyle,\n\n        angle: (datum: Datum) => datum.angle,\n        visible: (datum: Datum) => datum.visible\n      },\n      'normal',\n      AttributeLevel.Series\n    );\n    this.setMarkStyle(\n      wordMark,\n      {\n        fill: wordSpec?.style?.fill ?? this.getWordColor,\n        // style和field相关的配置都已经传给vgrammar, 所以这里直接拿结果就可以\n        fontWeight: (datum: Datum) => datum.fontWeight,\n        fontFamily: (datum: Datum) => datum.fontFamily\n      },\n      'normal',\n      AttributeLevel.User_Mark\n    );\n  }\n\n  protected initTooltip() {\n    super.initTooltip();\n\n    this._wordMark && this._tooltipHelper.activeTriggerSet.mark.add(this._wordMark);\n  }\n\n  initAnimation() {\n    [this._wordMark].forEach(mark => {\n      if (mark) {\n        const appearPreset = (this._spec?.animationAppear as IStateAnimateSpec<any>)?.preset;\n        const params = {\n          animationConfig: () => mark.getAnimationConfig()?.appear?.[0]\n        };\n        mark.setAnimationConfig(\n          animationConfig(\n            Factory.getAnimationInKey('wordCloud')(params, appearPreset),\n            userAnimationConfig(SeriesMarkNameEnum.word, this._spec, this._markAttributeContext)\n          )\n        );\n      }\n    });\n  }\n\n  protected getWordOrdinalColorScale(field: string, isFillingWord: boolean) {\n    const colorList = isFillingWord ? this._wordCloudShapeConfig.fillingColorList : this._colorList;\n    const colorDomain = field ? this.getViewData()?.latestData.map((datum: Datum) => datum[field]) : [];\n    const colorRange = colorList ?? this._option.globalScale.getScale('color')?.range() ?? this._getDataScheme();\n    return new ColorOrdinalScale().domain(colorDomain).range?.(colorRange);\n  }\n\n  protected initColorCallback(field: string, isFillingWord: boolean) {\n    if (this._colorMode === 'ordinal') {\n      const scale = this.getWordOrdinalColorScale(field, isFillingWord);\n      return (datum: Datum) => {\n        return scale.scale(datum[field ?? DEFAULT_DATA_SERIES_FIELD]);\n      };\n    }\n\n    const colorList =\n      (isFillingWord ? this._colorList : this._wordCloudShapeConfig.fillingColorList) ??\n      this._option.globalScale.getScale('color').range();\n\n    if (colorList.length === 1) {\n      return (datum: Datum) => colorList[0];\n    }\n\n    if (this._valueField) {\n      const stats = this.getRawDataStatisticsByField(this._valueField, true);\n      if (stats.min === stats.max) {\n        return colorList[0];\n      }\n      const scale = new LinearScale().domain([stats.min, stats.max]).range(colorList);\n\n      return (datum: Datum) => {\n        return scale.scale(datum[this._valueField]);\n      };\n    }\n\n    const scale = new LinearScale().domain([0, this.getViewData()?.latestData?.length ?? 1]).range(colorList);\n\n    return (datum: Datum) => {\n      return scale.scale(datum[DEFAULT_DATA_INDEX]);\n    };\n  }\n\n  getWordColor = (datum: Datum) => {\n    if (datum.isFillingWord) {\n      if (!this._fillingColorCallback || this._dataChange) {\n        // 如果updateData数据变更了, 颜色映射也需要重新计算\n        this._fillingColorCallback = this._wordCloudShapeConfig.fillingColorHexField\n          ? (datum: Datum) => datum[this._wordCloudShapeConfig.fillingColorHexField]\n          : this.initColorCallback(this._wordCloudShapeConfig.fillingSeriesField, true);\n      }\n\n      return this._fillingColorCallback(datum);\n    }\n\n    if (!this._keyWordColorCallback || this._dataChange) {\n      // 如果updateData数据变更了, 颜色映射也需要重新计算\n      this._keyWordColorCallback = this._spec.colorHexField\n        ? datum => datum[this._spec.colorHexField]\n        : this.initColorCallback(this._seriesField, false);\n    }\n\n    return this._keyWordColorCallback(datum);\n  };\n\n  private _calculateFontWeight = (datum: Datum) => {\n    const stats = this.getRawDataStatisticsByField(this._valueField, true);\n\n    if (stats.min === stats.max) {\n      return this._fontWeightRange[0];\n    }\n\n    return (\n      this._fontWeightRange[0] +\n      ((this._fontWeightRange[this._fontWeightRange.length - 1] - this._fontWeightRange[0]) *\n        (datum[this._valueField] - stats.min)) /\n        (stats.max - stats.min)\n    );\n  };\n\n  compile(): void {\n    super.compile();\n    const { width, height } = this._region.getLayoutRect();\n    // 非正常尺寸下不进行布局\n    if (!isValidNumber(width) || !isValidNumber(height) || !(height > 0 && width > 0)) {\n      return;\n    }\n\n    const wordCloudTransforms: ITransformSpec[] = [];\n\n    // 词云 transform\n    if (!this._isWordCloudShape) {\n      wordCloudTransforms.push({\n        type: 'wordcloud',\n        ...this._wordCloudTransformOption()\n      });\n    }\n    // 形状词云 transform\n    else {\n      wordCloudTransforms.push({\n        type: 'wordcloudShape',\n        // 形状词云中必须要传入dataIndexKey, 否则填充词无法绘制\n        ...this._wordCloudShapeTransformOption()\n      });\n    }\n\n    // 挂到mark的transform上\n    this._wordMark.setTransform(wordCloudTransforms);\n  }\n\n  protected _getCommonTransformOptions(): any {\n    const { width, height } = this._region.getLayoutRect();\n    const wordSpec = this._spec.word ?? {};\n    const wordStyleSpec = wordSpec.style ?? {};\n\n    return {\n      size: [width, height],\n      shape:\n        isObject(this._maskShape) &&\n        (this._maskShape as TextShapeMask).type === 'text' &&\n        isNil((this._maskShape as TextShapeMask).fontFamily)\n          ? {\n              fontFamily: this._option.getTheme('fontFamily'),\n              ...this._maskShape\n            }\n          : this._maskShape,\n      onUpdateMaskCanvas: this.handleMaskCanvasUpdate,\n      onLayoutFinished: () =>\n        this._option.globalInstance\n          .getChart()\n          .getOption()\n          .performanceHook?.afterWordcloudShapeDraw?.(this._option.globalInstance),\n      dataIndexKey: DEFAULT_DATA_KEY,\n      text: wordSpec.formatMethod\n        ? (datum: Datum) => {\n            return wordSpec.formatMethod(datum);\n          }\n        : { field: this._textField },\n      fontSize: this._valueField ? { field: this._valueField } : this._fontSizeRange[0],\n      fontSizeRange: this._fontSizeRange === 'auto' ? null : this._fontSizeRange,\n\n      padding: this._spec.word?.padding ?? DEFAULT_FONT_PADDING,\n      fontFamily: isValid(this._spec.fontFamilyField)\n        ? { field: this._spec.fontFamilyField }\n        : wordStyleSpec.fontFamily ?? this._defaultFontFamily,\n      // 为了保持和旧版逻辑一致，优先级如下： spec field > mark style > default (根据valueField映射)\n      fontWeight: isValid(this._spec.fontWeightField)\n        ? { field: this._spec.fontWeightField }\n        : isValid(wordStyleSpec.fontWeight)\n        ? wordStyleSpec.fontWeight\n        : isValid(this._valueField)\n        ? this._calculateFontWeight\n        : 'normal',\n      fontStyle: isValid(this._spec.fontStyleField) ? { field: this._spec.fontStyleField } : wordStyleSpec.fontStyle,\n      createCanvas: vglobal.createCanvas.bind(vglobal),\n      getTextBounds\n    };\n  }\n\n  protected _wordCloudTransformOption(): Object {\n    const wordCloudConfig = this._wordCloudConfig ?? {};\n\n    return {\n      ...wordCloudConfig,\n      ...this._getCommonTransformOptions(),\n      // TIP: 非浏览器环境下，使用 fast 布局，否则会出现兼容问题\n      layoutType: this._wordCloudConfig.layoutMode,\n\n      rotate: this._rotateAngles,\n\n      randomVisible: this._spec.random ?? DEFAULT_RANDOM,\n      clip: this._wordCloudConfig.drawOutOfBound === 'clip',\n      shrink: this._wordCloudConfig.zoomToFit.shrink,\n      enlarge: this._wordCloudConfig.zoomToFit.enlarge,\n      minFontSize: this._wordCloudConfig.zoomToFit.fontSizeLimitMin,\n      progressiveTime: this._wordCloudConfig.progressiveTime,\n      progressiveStep: this._wordCloudConfig.progressiveStep,\n      repeatFill: this._wordCloudConfig.zoomToFit.repeat\n    };\n  }\n\n  protected _wordCloudShapeTransformOption(): Object {\n    const fillingWordStyleSpec = this._spec.fillingWord?.style ?? {};\n    const wordCloudShapeConfig = this._wordCloudShapeConfig ?? {};\n\n    return {\n      ...wordCloudShapeConfig,\n      ...this._getCommonTransformOptions(),\n      createImage,\n\n      rotateList: this._rotateAngles,\n      fillingRotateList: wordCloudShapeConfig.fillingRotateAngles,\n\n      fillingFontFamily: isValid(wordCloudShapeConfig.fillingFontFamilyField)\n        ? { field: wordCloudShapeConfig.fillingFontFamilyField }\n        : fillingWordStyleSpec.fontFamily ?? this._defaultFontFamily,\n      fillingPadding: this._spec.fillingWord?.padding ?? DEFAULT_FONT_PADDING,\n      fillingFontStyle: isValid(wordCloudShapeConfig.fillingFontStyleField)\n        ? { field: wordCloudShapeConfig.fillingFontStyleField }\n        : fillingWordStyleSpec.fontStyle,\n      // 如果配置了字段映射，优先按照映射进行展示\n      fillingFontWeight: isValid(wordCloudShapeConfig.fillingFontWeightField)\n        ? {\n            field: wordCloudShapeConfig.fillingFontWeightField\n          }\n        : fillingWordStyleSpec.fontWeight // 填充词fontWeight默认不跟随valueField\n    };\n  }\n\n  getStatisticFields() {\n    const fields: { key: string; operations: Array<'max' | 'min' | 'values'> }[] = [];\n    fields.push({ key: this._nameField, operations: ['values'] });\n    fields.push({ key: this._valueField, operations: ['max', 'min'] });\n    return fields;\n  }\n  dataToPosition(data: Datum): IPoint {\n    return null;\n  }\n  dataToPositionX(data: any): number {\n    return null;\n  }\n  dataToPositionY(data: any): number {\n    return null;\n  }\n  dataToPositionZ(data: any): number {\n    return null;\n  }\n  valueToPosition(value1: any, value2?: any): IPoint {\n    return null;\n  }\n\n  getGroupFields(): string[] {\n    // do nothing\n    return [];\n  }\n\n  getStackGroupFields(): string[] {\n    // do nothing\n    return [];\n  }\n\n  getStackValueField(): string {\n    // do nothing\n    return '';\n  }\n\n  onLayoutEnd(): void {\n    super.onLayoutEnd();\n    this.compile();\n    this._dataChange = false;\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._wordMark];\n  }\n\n  reInit() {\n    super.reInit();\n    if (this._keyWordColorCallback) {\n      this._keyWordColorCallback = null;\n    }\n\n    if (this._fillingColorCallback) {\n      this._fillingColorCallback = null;\n    }\n  }\n}\n"]}