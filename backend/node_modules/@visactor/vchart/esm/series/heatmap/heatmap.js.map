{"version":3,"sources":["../src/series/heatmap/heatmap.ts"],"names":[],"mappings":"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","file":"heatmap.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport { registerCellMark } from './../../mark/cell';\nimport { CartesianSeries } from '../cartesian/cartesian';\nimport { AttributeLevel } from '../../constant/attribute';\nimport type { Datum } from '../../typings';\nimport { registerHeatmapAnimation } from './animation';\nimport { animationConfig, shouldMarkDoMorph, userAnimationConfig } from '../../animation/utils';\nimport type { HeatmapAppearPreset, IHeatmapSeriesSpec } from './interface';\nimport type { IAxisHelper } from '../../component/axis/cartesian/interface';\nimport { registerTextMark } from '../../mark/text';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';\nimport type { IStateAnimateSpec } from '../../animation/spec';\nimport { normalizePadding, array } from '@visactor/vutils';\nimport { HeatmapSeriesTooltipHelper } from './tooltip-helper';\nimport { heatmapSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport type { ICellMark, IMark, ITextMark } from '../../mark/interface';\nimport { getGroupAnimationParams } from '../util/utils';\nimport { HeatmapSeriesSpecTransformer } from './heatmap-transformer';\nimport { registerCartesianLinearAxis, registerCartesianBandAxis } from '../../component/axis/cartesian';\nimport { heatmap } from '../../theme/builtin/common/series/heatmap';\n\nexport const DefaultBandWidth = 6; // 默认的bandWidth，避免连续轴没有bandWidth\n\nexport class HeatmapSeries<T extends IHeatmapSeriesSpec = IHeatmapSeriesSpec> extends CartesianSeries<T> {\n  static readonly type: string = SeriesTypeEnum.heatmap;\n  type = SeriesTypeEnum.heatmap;\n\n  static readonly mark: SeriesMarkMap = heatmapSeriesMark;\n  static readonly builtInTheme = { heatmap };\n  static readonly transformerConstructor = HeatmapSeriesSpecTransformer as any;\n  readonly transformerConstructor = HeatmapSeriesSpecTransformer;\n\n  protected _cellMark: ICellMark;\n  protected _backgroundMark: ICellMark;\n\n  protected _fieldValue!: string[];\n  getFieldValue() {\n    return this._fieldValue;\n  }\n  setFieldValue(f: string | string[]) {\n    this._fieldValue = array(f);\n  }\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n    this.setFieldValue(this._spec.valueField);\n  }\n\n  initMark(): void {\n    this._cellMark = this._createMark(\n      HeatmapSeries.mark.cell,\n      {\n        isSeriesMark: true\n      },\n      {\n        morph: shouldMarkDoMorph(this._spec, HeatmapSeries.mark.cell.name),\n        morphElementKey: this.getDimensionField()[0]\n      }\n    ) as ICellMark;\n\n    this._backgroundMark = this._createMark(HeatmapSeries.mark.cellBackground) as ICellMark;\n  }\n\n  initMarkStyle(): void {\n    this.initCellMarkStyle();\n    this.initCellBackgroundMarkStyle();\n  }\n\n  initLabelMarkStyle(textMark: ITextMark) {\n    if (!textMark) {\n      return;\n    }\n    this.setMarkStyle(textMark, {\n      fill: this.getColorAttribute(),\n      text: (datum: Datum) => {\n        return datum[this.getMeasureField()[0]];\n      }\n    });\n  }\n\n  initCellMarkStyle() {\n    this.setMarkStyle(\n      this._cellMark,\n      {\n        x: (datum: Datum) => {\n          const pos = this.dataToPositionX(datum);\n          return pos;\n        },\n        y: (datum: Datum) => {\n          const pos = this.dataToPositionY(datum);\n          return pos;\n        },\n        size: () => {\n          return [this.getCellSize(this._xAxisHelper), this.getCellSize(this._yAxisHelper)];\n        },\n        fill: this.getColorAttribute()\n      },\n      'normal',\n      AttributeLevel.Series\n    );\n  }\n\n  initCellBackgroundMarkStyle() {\n    const padding = normalizePadding(this._spec.cellBackground?.style?.padding ?? 0);\n    this.setMarkStyle(\n      this._backgroundMark,\n      {\n        x: (datum: Datum) => {\n          const width = this.getCellSize(this._xAxisHelper);\n          const pos = this.dataToPositionX(datum);\n          return pos - width / 2 + padding[3];\n        },\n        y: (datum: Datum) => {\n          const height = this.getCellSize(this._yAxisHelper);\n          const pos = this.dataToPositionY(datum);\n          return pos - height / 2 + padding[0];\n        },\n        width: () => {\n          return this.getCellSize(this._xAxisHelper) - padding[1] - padding[3];\n        },\n        height: () => {\n          return this.getCellSize(this._yAxisHelper) - padding[0] - padding[2];\n        }\n      },\n      'normal',\n      AttributeLevel.Series\n    );\n  }\n\n  // 通用的默认颜色映射 用户设置优先级比这个高，会在setStyle中处理\n  getColorAttribute() {\n    return {\n      // TODO: 为热力图实现默认线性颜色 scale\n      scale: this._option.globalScale.getScale('color') ?? this._getDefaultColorScale(),\n      field: this.getFieldValue[0]\n    };\n  }\n\n  getInteractionTriggers() {\n    return this._parseInteractionConfig(this._cellMark ? [this._cellMark] : []);\n  }\n\n  initAnimation() {\n    const appearPreset = (this._spec?.animationAppear as IStateAnimateSpec<HeatmapAppearPreset>)?.preset;\n    const animationParams = getGroupAnimationParams(this);\n\n    this._cellMark.setAnimationConfig(\n      animationConfig(\n        Factory.getAnimationInKey('heatmap')?.(appearPreset),\n        userAnimationConfig(SeriesMarkNameEnum.cell, this._spec, this._markAttributeContext),\n        animationParams\n      )\n    );\n  }\n\n  protected getCellSize(axisHelper: IAxisHelper) {\n    return axisHelper.getBandwidth?.(0) ?? DefaultBandWidth;\n  }\n\n  protected initTooltip() {\n    this._tooltipHelper = new HeatmapSeriesTooltipHelper(this);\n    this._cellMark && this._tooltipHelper.activeTriggerSet.mark.add(this._cellMark);\n  }\n\n  getDefaultShapeType(): string {\n    return 'square';\n  }\n\n  getDimensionField(): string[] {\n    return [].concat(this.fieldX, this.fieldY);\n  }\n\n  getMeasureField(): string[] {\n    return this.getFieldValue();\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._cellMark];\n  }\n}\n\nexport const registerHeatmapSeries = () => {\n  registerTextMark();\n  registerCellMark();\n  registerHeatmapAnimation();\n  registerCartesianBandAxis();\n  registerCartesianLinearAxis();\n  Factory.registerSeries(HeatmapSeries.type, HeatmapSeries);\n};\n"]}