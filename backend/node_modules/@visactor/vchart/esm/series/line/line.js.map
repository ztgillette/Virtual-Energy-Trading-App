{"version":3,"sources":["../src/series/line/line.ts"],"names":[],"mappings":"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","file":"line.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport { CartesianSeries } from '../cartesian/cartesian';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesMarkNameEnum, SeriesTypeEnum } from '../interface/type';\nimport { LineLikeSeriesMixin } from '../mixin/line-mixin';\nimport { mixin } from '@visactor/vutils';\nimport type { Datum } from '../../typings';\nimport { animationConfig, userAnimationConfig } from '../../animation/utils';\nimport { registerLineAnimation, registerScaleInOutAnimation } from '../../animation/config';\nimport type { ILineSeriesSpec, LineAppearPreset } from './interface';\nimport type { IStateAnimateSpec } from '../../animation/spec';\nimport { lineSeriesMark } from './constant';\nimport { registerLineMark } from '../../mark/line';\nimport { registerSymbolMark } from '../../mark/symbol';\nimport { Factory } from '../../core/factory';\nimport type { IMark } from '../../mark/interface';\nimport { LineLikeSeriesSpecTransformer } from '../mixin/line-mixin-transformer';\nimport { getGroupAnimationParams } from '../util/utils';\nimport { registerCartesianLinearAxis, registerCartesianBandAxis } from '../../component/axis/cartesian';\nimport { registerSymbolOverlapTransform } from '../../mark/transform/symbol-overlap';\nimport { registerDataSamplingTransform } from '../../mark/transform/data-sampling';\nimport { line } from '../../theme/builtin/common/series/line';\n\nexport interface LineSeries<T extends ILineSeriesSpec = ILineSeriesSpec>\n  extends Pick<\n      LineLikeSeriesMixin,\n      | 'initLineMark'\n      | 'initSymbolMark'\n      | 'initLabelMarkStyle'\n      | 'initLineMarkStyle'\n      | 'initSymbolMarkStyle'\n      | '_lineMark'\n      | '_symbolMark'\n      | 'addSamplingCompile'\n      | 'addOverlapCompile'\n      | 'reCompileSampling'\n    >,\n    CartesianSeries<T> {}\n\nexport class LineSeries<T extends ILineSeriesSpec = ILineSeriesSpec> extends CartesianSeries<T> {\n  static readonly type: string = SeriesTypeEnum.line;\n  type = SeriesTypeEnum.line;\n\n  static readonly mark: SeriesMarkMap = lineSeriesMark;\n  static readonly builtInTheme = { line };\n  static readonly transformerConstructor = LineLikeSeriesSpecTransformer;\n  readonly transformerConstructor = LineLikeSeriesSpecTransformer;\n\n  protected _sortDataByAxis: boolean = false;\n\n  compile(): void {\n    super.compile();\n    this.addSamplingCompile();\n    this.addOverlapCompile();\n  }\n\n  initMark(): void {\n    const seriesMark = this._spec.seriesMark ?? 'line';\n    this.initLineMark(seriesMark === 'line');\n    this.initSymbolMark(seriesMark === 'point');\n  }\n\n  protected initTooltip() {\n    super.initTooltip();\n    const { group, mark } = this._tooltipHelper.activeTriggerSet;\n    if (this._lineMark) {\n      group.add(this._lineMark);\n    }\n    if (this._symbolMark) {\n      mark.add(this._symbolMark);\n      group.add(this._symbolMark);\n    }\n  }\n\n  initMarkStyle(): void {\n    this.initLineMarkStyle(this._direction);\n    this.initSymbolMarkStyle();\n  }\n\n  initAnimation() {\n    const lineAnimationParams = { direction: this.direction };\n    const appearPreset = (this._spec?.animationAppear as IStateAnimateSpec<LineAppearPreset>)?.preset;\n    this._lineMark.setAnimationConfig(\n      animationConfig(\n        Factory.getAnimationInKey('line')?.(lineAnimationParams, appearPreset),\n        userAnimationConfig(SeriesMarkNameEnum.line, this._spec, this._markAttributeContext)\n      )\n    );\n\n    if (this._symbolMark) {\n      const animationParams = getGroupAnimationParams(this);\n      this._symbolMark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('scaleInOut')?.(),\n          userAnimationConfig(SeriesMarkNameEnum.point, this._spec, this._markAttributeContext),\n          animationParams\n        )\n      );\n    }\n  }\n\n  onLayoutEnd(): void {\n    super.onLayoutEnd();\n    this.reCompileSampling();\n  }\n\n  getSeriesStyle(datum: Datum) {\n    const isLineAsSeriesMark = this._spec?.seriesMark !== 'point'; // 加判空防止某些特殊时刻（如 updateSpec 时）鼠标滑过图表导致报错\n    return (attribute: string) => {\n      if (isLineAsSeriesMark) {\n        // 增加一个标识位，用于是否替换，因为图例获取颜色的时候是不需要替换的\n        attribute === 'fill' && (attribute = 'stroke');\n      }\n      return this._seriesMark?.getAttribute(attribute as any, datum) ?? undefined;\n    };\n  }\n\n  getDefaultShapeType() {\n    return 'circle';\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._lineMark, this._symbolMark];\n  }\n}\n\nmixin(LineSeries, LineLikeSeriesMixin);\n\nexport const registerLineSeries = () => {\n  registerDataSamplingTransform();\n  registerSymbolOverlapTransform();\n  registerLineMark();\n  registerSymbolMark();\n  registerLineAnimation();\n  registerScaleInOutAnimation();\n  registerCartesianBandAxis();\n  registerCartesianLinearAxis();\n  Factory.registerSeries(LineSeries.type, LineSeries);\n};\n"]}