{"version":3,"sources":["../src/series/treemap/treemap.ts"],"names":[],"mappings":"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","file":"treemap.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport { STATE_VALUE_ENUM } from '../../compile/mark/interface';\nimport { HOOK_EVENT } from '../../constant/event';\nimport { AttributeLevel } from '../../constant/attribute';\nimport { DEFAULT_DATA_KEY } from '../../constant/data';\nimport type { IMark, IRectMark, ILabelMark } from '../../mark/interface';\nimport { MarkTypeEnum } from '../../mark/interface/type';\nimport type { Datum, IComposedTextMarkSpec, IRectMarkSpec } from '../../typings';\nimport { CartesianSeries } from '../cartesian/cartesian';\nimport type { SeriesMarkMap } from '../interface';\nimport { SeriesTypeEnum } from '../interface/type';\nimport type { ITreemapSeriesSpec } from './interface';\nimport { registerDataSetInstanceTransform } from '../../data/register';\nimport { flatten } from '../../data/transforms/flatten';\nimport type { IBounds } from '@visactor/vutils';\nimport { isValidNumber, Bounds, Matrix, mixin, merge } from '@visactor/vutils';\nimport type { PanEventParam, ZoomEventParam } from '../../event/interface';\nimport type { TreemapNodeElement } from '@visactor/vlayouts';\nimport { DataView } from '@visactor/vdataset';\nimport { hierarchyDimensionStatistics } from '../../data/transforms/hierarchy-dimension-statistics';\nimport { addVChartProperty } from '../../data/transforms/add-property';\nimport { addHierarchyDataKey, initHierarchyKeyMap } from '../../data/transforms/data-key';\nimport { DEFAULT_HIERARCHY_ROOT } from '../../constant/hierarchy';\nimport { TreemapTooltipHelper } from './tooltip-helper';\nimport { animationConfig, userAnimationConfig } from '../../animation/utils';\nimport { registerFadeInOutAnimation } from '../../animation/config';\nimport type { IZoomable } from '../../interaction/zoom/zoomable';\nimport { Zoomable } from '../../interaction/zoom/zoomable';\nimport type { IDrillable } from '../../interaction/drill/drillable';\nimport { Drillable } from '../../interaction/drill/drillable';\nimport { registerRectMark } from '../../mark/rect';\nimport { registerTextMark } from '../../mark/text';\nimport { treemapSeriesMark } from './constant';\nimport { Factory } from '../../core/factory';\nimport { registerTreemapAnimation } from './animation';\nimport { TreemapSeriesSpecTransformer } from './treemap-transform';\nimport { appendHierarchyFields } from '../util/hierarchy';\nimport { registerMarkFilterTransform } from '../../mark/transform/filter';\nimport { registerMarkMapTransform } from '../../mark/transform/map';\nimport { treemapLayout } from '../../data/transforms/treemap';\nimport type { ITransformSpec } from '../../compile/interface/compilable-item';\nimport { treemap } from '../../theme/builtin/common/series/treemap';\n\nexport class TreemapSeries extends CartesianSeries<any> {\n  static readonly type: string = SeriesTypeEnum.treemap;\n  type = SeriesTypeEnum.treemap;\n\n  static readonly mark: SeriesMarkMap = treemapSeriesMark;\n  static readonly builtInTheme = { treemap };\n\n  static readonly transformerConstructor = TreemapSeriesSpecTransformer;\n  readonly transformerConstructor = TreemapSeriesSpecTransformer;\n\n  private _leafMark: IRectMark;\n  private _nonLeafMark: IRectMark;\n  private _labelMark: ILabelMark;\n  private _nonLeafLabelMark: ILabelMark;\n\n  protected declare _spec: ITreemapSeriesSpec;\n\n  protected _categoryField: string = 'name';\n\n  getCategoryField() {\n    return this._categoryField;\n  }\n  setCategoryField(f: string): string {\n    this._categoryField = f;\n    return this._categoryField;\n  }\n\n  protected _valueField: string = 'value';\n  getValueField() {\n    return this._valueField;\n  }\n  setValueField(f: string): string {\n    this._valueField = f;\n    return this._valueField;\n  }\n\n  private _maxDepth: number;\n\n  // global scale and translate matrix\n  private _matrix: Matrix;\n\n  // range for treemap layout, change while zoom and pan\n  private _viewBox: IBounds = new Bounds();\n\n  private _enableAnimationHook = this.enableMarkAnimation.bind(this);\n\n  setAttrFromSpec(): void {\n    super.setAttrFromSpec();\n    this.setCategoryField(this._spec.categoryField);\n    this.setValueField(this._spec.valueField);\n    this.setSeriesField(this._spec.seriesField ?? DEFAULT_HIERARCHY_ROOT);\n\n    if (this._spec.roam) {\n      (this as unknown as IZoomable).initZoomable(this.event, this._option.mode);\n      this._matrix = new Matrix();\n    }\n    if (this._spec.drill) {\n      (this as unknown as IDrillable).initDrillable({\n        event: this.event,\n        mode: this._option.mode,\n        drillField: () => this._spec.drillField ?? this._categoryField ?? DEFAULT_DATA_KEY,\n        getRawData: () => this.getRawData()\n      });\n    }\n\n    if (isValidNumber(this._spec.maxDepth)) {\n      this._maxDepth = this._spec.maxDepth - 1;\n    }\n  }\n\n  initData() {\n    super.initData();\n\n    registerDataSetInstanceTransform(this._dataSet, 'treemap', treemapLayout);\n\n    this._data.getDataView()?.transform({\n      type: 'treemap',\n      options: {\n        nameField: this._categoryField,\n        valueField: this._valueField,\n        getViewBox: () => {\n          return this._viewBox.empty()\n            ? null\n            : {\n                x0: this._viewBox.x1,\n                x1: this._viewBox.x2,\n                y0: this._viewBox.y1,\n                y1: this._viewBox.y2\n              };\n        },\n        maxDepth: this._maxDepth,\n        gapWidth: this._spec.gapWidth,\n        padding: this._spec.nodePadding,\n        splitType: this._spec.splitType,\n        aspectRatio: this._spec.aspectRatio,\n        labelPadding: this._spec.nonLeafLabel?.visible ? this._spec.nonLeafLabel?.padding : 0,\n        labelPosition: this._spec.nonLeafLabel?.position,\n        minVisibleArea: this._spec.minVisibleArea ?? 10,\n        minChildrenVisibleArea: this._spec.minChildrenVisibleArea,\n        minChildrenVisibleSize: this._spec.minChildrenVisibleSize\n      }\n    });\n    // 矩形树图中原始数据为层次结果，图元数据为平坦化后的结构，具体逻辑如下：\n    if (this.getViewData()) {\n      // 对原始数据进行上卷下钻筛选\n      if (this._spec.drill) {\n        (this as unknown as IDrillable).initDrillableData(this._dataSet);\n      }\n    }\n  }\n\n  protected _runTreemapTransform(render = false) {\n    this._data.getDataView().reRunAllTransform();\n\n    if (render) {\n      this.getCompiler().renderNextTick();\n    }\n  }\n\n  protected _addDataIndexAndKey() {\n    if (this._rawData?.dataSet) {\n      registerDataSetInstanceTransform(this._rawData.dataSet, 'addVChartProperty', addVChartProperty);\n      this._rawData.transform(\n        {\n          type: 'addVChartProperty',\n          options: {\n            beforeCall: initHierarchyKeyMap.bind(this),\n            call: addHierarchyDataKey\n          }\n        }\n        // rawDataStatistic 需要统计 addHierarchyDataKey 的一些字段，所以必须要运行一下\n        // false\n      );\n    }\n  }\n\n  getRawDataStatisticsByField(field: string, isNumeric?: boolean) {\n    // overwrite the getRawDataStatisticsByField of base-series\n    if (!this._rawStatisticsCache) {\n      this._rawStatisticsCache = {};\n    }\n\n    if (!this._rawStatisticsCache[field]) {\n      if (this._rawData) {\n        const result = hierarchyDimensionStatistics([this._rawData], {\n          fields: [{ key: field, operations: isNumeric ? ['min', 'max'] : ['values'] }]\n        })[field];\n        this._rawStatisticsCache[field] = merge(this._rawStatisticsCache[field] ?? {}, result);\n      }\n    }\n\n    return this._rawStatisticsCache[field];\n  }\n\n  protected _createHierarchyDataStatistics(dataName: string, rawData: DataView[]) {\n    registerDataSetInstanceTransform(this._dataSet, 'hierarchyDimensionStatistics', hierarchyDimensionStatistics);\n    registerDataSetInstanceTransform(this._dataSet, 'flatten', flatten);\n    const data = new DataView(this._dataSet, { name: dataName });\n    data.parse(rawData, {\n      type: 'dataview'\n    });\n    data.transform(\n      {\n        type: 'hierarchyDimensionStatistics',\n        options: {\n          fields: () => {\n            const fields = this.getStatisticFields();\n            if (this._seriesField && this._seriesField !== this._categoryField) {\n              fields.push({\n                key: this._seriesField,\n                operations: ['values']\n              });\n            }\n            return fields;\n          }\n        }\n      },\n      false\n    );\n    return data;\n  }\n\n  getStatisticFields() {\n    return appendHierarchyFields(super.getStatisticFields(), this._categoryField, this._valueField);\n  }\n\n  initMark() {\n    const nonLeafMark = this._createMark(TreemapSeries.mark.nonLeaf, {\n      isSeriesMark: true\n    });\n    if (nonLeafMark) {\n      nonLeafMark.setTransform([\n        {\n          type: 'filter',\n          callback: (datum: TreemapNodeElement) => {\n            return !this._shouldFilterElement(datum, 'nonLeaf');\n          }\n        } as ITransformSpec\n      ]);\n      this._nonLeafMark = nonLeafMark;\n    }\n\n    const leafMark = this._createMark(TreemapSeries.mark.leaf, {\n      isSeriesMark: true\n    });\n    if (leafMark) {\n      leafMark.setTransform([\n        {\n          type: 'filter',\n          callback: (datum: TreemapNodeElement) => {\n            return !this._shouldFilterElement(datum, 'leaf');\n          }\n        } as ITransformSpec\n      ]);\n      this._leafMark = leafMark;\n    }\n  }\n\n  initMarkStyle() {\n    this._initLeafMarkStyle();\n    this._initNonLeafMarkStyle();\n  }\n\n  protected _initLeafMarkStyle() {\n    if (!this._leafMark) {\n      return;\n    }\n\n    this.setMarkStyle<IRectMarkSpec>(\n      this._leafMark,\n      {\n        x: datum => datum.x0,\n        y: datum => datum.y0,\n        x1: datum => datum.x1,\n        y1: datum => datum.y1,\n        fill: this.getColorAttribute()\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n  }\n\n  protected _initNonLeafMarkStyle() {\n    if (!this._nonLeafMark) {\n      return;\n    }\n    this.setMarkStyle<IRectMarkSpec>(\n      this._nonLeafMark,\n      {\n        x: datum => datum.x0,\n        y: datum => datum.y0,\n        x1: datum => datum.x1,\n        y1: datum => datum.y1,\n        fill: this.getColorAttribute()\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n  }\n\n  _initRichStyleOfLabelMark(labelMark: ILabelMark) {\n    if (labelMark.getTextType() === 'rich') {\n      this.setMarkStyle<IComposedTextMarkSpec>(\n        labelMark,\n        {\n          maxWidth: datum => Math.abs(datum.x0 - datum.x1),\n          maxHeight: datum => Math.abs(datum.y0 - datum.y1),\n          ellipsis: true\n        },\n        STATE_VALUE_ENUM.STATE_NORMAL,\n        AttributeLevel.Series\n      );\n    }\n  }\n\n  initLabelMarkStyle(labelMark: ILabelMark) {\n    if (!labelMark) {\n      return;\n    }\n    this._labelMark = labelMark;\n    labelMark.setRule('treemap');\n    this.setMarkStyle(\n      labelMark,\n      {\n        x: datum => (datum.x0 + datum.x1) / 2,\n        y: datum => (datum.y0 + datum.y1) / 2,\n        text: datum => {\n          return datum.datum[datum.depth]?.[this.getDimensionField()[0]];\n        },\n        maxLineWidth: (datum: Datum) => {\n          return datum.x1 === datum.x0 ? Number.MIN_VALUE : datum.x1 - datum.x0;\n        }\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n\n    this._initRichStyleOfLabelMark(labelMark);\n  }\n\n  protected initNonLeafLabelMarkStyle(labelMark: ILabelMark) {\n    if (!labelMark) {\n      return;\n    }\n    this._nonLeafLabelMark = labelMark;\n    labelMark.setRule('treemap');\n    this.setMarkStyle(\n      labelMark,\n      {\n        x: datum => {\n          if (datum.labelRect) {\n            return (datum.labelRect.x0 + datum.labelRect.x1) / 2;\n          }\n          return (datum.x0 + datum.x1) / 2;\n        },\n        y: datum => {\n          if (datum.labelRect) {\n            return (datum.labelRect.y0 + datum.labelRect.y1) / 2;\n          }\n          return (datum.y0 + datum.y1) / 2;\n        },\n        text: datum => {\n          return datum.datum[datum.depth]?.[this.getDimensionField()[0]];\n        },\n        maxLineWidth: (datum: any) => {\n          return datum.x1 === datum.x0 ? Number.MIN_VALUE : datum.x1 - datum.x0;\n        }\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n    this._initRichStyleOfLabelMark(labelMark);\n  }\n\n  initAnimation(): void {\n    this.getMarksInType(MarkTypeEnum.rect).forEach(mark => {\n      mark.setAnimationConfig(\n        animationConfig(\n          Factory.getAnimationInKey('treemap')?.(),\n          userAnimationConfig(mark.name, this._spec, this._markAttributeContext)\n        )\n      );\n    });\n  }\n\n  protected initEvent(): void {\n    super.initEvent();\n    // Roam\n    if (this._spec.roam) {\n      // 拖拽事件\n      (this as unknown as IZoomable).initDragEventOfSeries(this);\n      this.event.on('panmove', e => {\n        this.handlePan(e as PanEventParam);\n      });\n      // 缩放事件\n      (this as unknown as IZoomable).initZoomEventOfSeries(this);\n      this.event.on('zoom', e => {\n        this.handleZoom(e as ZoomEventParam);\n      });\n    }\n    // Drill\n    if (this._spec.drill) {\n      (this as unknown as IDrillable).bindDrillEvent();\n    }\n  }\n\n  protected _getDataIdKey() {\n    return 'key';\n  }\n\n  protected initTooltip() {\n    this._tooltipHelper = new TreemapTooltipHelper(this);\n    this._leafMark && this._tooltipHelper.activeTriggerSet.mark.add(this._leafMark);\n    this._nonLeafMark && this._tooltipHelper.activeTriggerSet.mark.add(this._nonLeafMark);\n  }\n\n  private _shouldFilterElement(datum: TreemapNodeElement, nodeType: 'leaf' | 'nonLeaf') {\n    const isLeaf = datum.isLeaf;\n    // 过滤掉非需要的节点\n    return nodeType === 'leaf' ? !isLeaf : isLeaf;\n  }\n\n  handlePan(event: PanEventParam) {\n    const { delta } = event;\n    if (delta[0] === 0 && delta[1] === 0) {\n      return;\n    }\n    this._matrix.reset();\n    this._matrix.translate(delta[0], delta[1]);\n    const { a, b, c, d, e, f } = this._matrix;\n    this._matrix.multiply(a, b, c, d, e, f);\n\n    this._viewBox.transformWithMatrix(this._matrix);\n\n    this._runTreemapTransform(true);\n  }\n\n  handleZoom(event: ZoomEventParam) {\n    const { scale, scaleCenter } = event;\n    if (scale === 1) {\n      return;\n    }\n\n    this._matrix.reset();\n    const { x, y } = scaleCenter;\n    this._matrix.translate(x, y);\n    this._matrix.scale(scale, scale);\n    this._matrix.translate(-x, -y);\n    const { a, b, c, d, e, f } = this._matrix;\n    this._matrix.multiply(a, b, c, d, e, f);\n    // 缩放过程中会有新增/减少的element，对应执行enter/exit动画，会使得缩放交互效果体验很差\n    // 这里在缩放过程中先关闭所有动画\n    this.disableMarkAnimation();\n    this.event.on(HOOK_EVENT.AFTER_DO_RENDER, this._enableAnimationHook);\n    this._viewBox.transformWithMatrix(this._matrix);\n    this._runTreemapTransform(true);\n  }\n\n  getDimensionField() {\n    return [this._categoryField];\n  }\n\n  getMeasureField(): string[] {\n    return [this._valueField];\n  }\n\n  onLayoutEnd(): void {\n    super.onLayoutEnd();\n    this._viewBox.set(0, 0, this.getLayoutRect().width, this.getLayoutRect().height);\n    this._runTreemapTransform();\n  }\n\n  protected enableMarkAnimation() {\n    this.getMarks().forEach(mark => {\n      // mark.getProduct().animate?.enable();\n    });\n    [this._labelMark, this._nonLeafLabelMark].forEach(m => {\n      if (m && m.getComponent()) {\n        m.getComponent().getProduct().enableAnimation();\n      }\n    });\n    // 在所有动画执行之后关闭动画\n    this.event.off(HOOK_EVENT.AFTER_DO_RENDER, this._enableAnimationHook);\n  }\n\n  protected disableMarkAnimation() {\n    this.getMarks().forEach(mark => {\n      // mark.getProduct().animate?.disable();\n    });\n    [this._labelMark, this._nonLeafLabelMark].forEach(m => {\n      if (m && m.getComponent()) {\n        m.getComponent().getProduct().disableAnimation();\n      }\n    });\n  }\n\n  getDefaultShapeType(): string {\n    return 'square';\n  }\n\n  getActiveMarks(): IMark[] {\n    return [this._nonLeafMark, this._leafMark];\n  }\n\n  isHierarchyData = () => {\n    return true;\n  };\n\n  getMarkData(datum: Datum) {\n    return datum?.datum ? datum.datum[datum.datum.length - 1] : datum;\n  }\n}\n\nmixin(TreemapSeries, Drillable);\nmixin(TreemapSeries, Zoomable);\n\nexport const registerTreemapSeries = () => {\n  registerMarkFilterTransform();\n  registerMarkMapTransform();\n  registerRectMark();\n  registerTextMark();\n  registerTreemapAnimation();\n  registerFadeInOutAnimation();\n  Factory.registerSeries(TreemapSeries.type, TreemapSeries);\n};\n"]}