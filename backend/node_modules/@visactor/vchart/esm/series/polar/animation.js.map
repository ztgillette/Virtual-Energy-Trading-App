{"version":3,"sources":["../src/series/polar/animation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAC5E,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAC5F,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAGnE,MAAM,OAAO,gBAAiB,SAAQ,cAAwC;IAY5E,YACE,IAAkD,EAClD,EAAgD,EAChD,QAAgB,EAChB,MAAkB,EAClB,MAAW;QAEX,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC;IAC3B,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE;YACxB,OAAO,EAAE,CAAC;SACX;QACD,OAAO,gBAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvE,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAgB,CAAC;QACzC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAI,IAAI,CAAC,MAAM,CAAC,SAAiB,CAAC,MAAM,CAAC;QACzD,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;QACD,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/F,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,QAAQ,CAAC,EAAE;YACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;QACD,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;QACjE,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC;QACrE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE;YACxF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;QACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,EAAS,CAAC;IACzC,CAAC;IAED,QAAQ,CAAC,GAAY,EAAE,KAAa,EAAE,GAAwB;QAC5D,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE;YACxB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YAClB,OAAO;SACR;QACD,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,gBAAgB,CAC/B;YACE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK;YACrE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK;SACtE,EACD,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK,EAC9D,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAC5D,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,0BAA0B,EAAE,CAAC;IAC3C,CAAC;CACF;AAID,MAAM,OAAO,oBAAqB,SAAQ,eAAe;IAOvD,MAAM;QACJ,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,SAAgB,CAAC;QAChD,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAS,CAAC;QACpE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;IAC5B,CAAC;IAED,QAAQ,CAAC,GAAY,EAAE,KAAa,EAAE,GAAwB;QAE5D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAC3C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAChC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAChC,KAAK,CACN,CAAC;YACF,IAAI,GAAG,EAAE;gBACP,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;aAC3B;YACD,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;YACjC,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,SAA4B,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,0BAA0B,EAAE,CAAC;IAC3C,CAAC;IAEO,yBAAyB,CAAC,MAAc,EAAE,MAAc,EAAE,KAAa;QAC7E,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YAClD,OAAO,MAAM,CAAC;SACf;QACD,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3D,IAAI,MAAM,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,MAAM,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAG/C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE;YACnD,MAAM,GAAG,MAAM,CAAC;SACjB;QACD,IAAI,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YACnD,MAAM,GAAG,MAAM,CAAC;SACjB;QACD,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;QACjD,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAEtF,OAAO,gBAAgB,CACrB;YACE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK;YACrE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK;SACtE,EACD,MAAM,EACN,KAAK,CACN,CAAC;IACJ,CAAC;IAEO,uBAAuB,CAAC,MAAkB,EAAE,MAAkB,EAAE,KAAa;QACnF,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QACvE,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,yBAAyB,CACrD;YACE,CAAC,EAAE,MAAM,CAAC,EAAE;YACZ,CAAC,EAAE,MAAM,CAAC,EAAE;SACb,EACD;YACE,CAAC,EAAE,MAAM,CAAC,EAAE;YACZ,CAAC,EAAE,MAAM,CAAC,EAAE;SACb,EACD,KAAK,CACN,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,CAAW,EAAE,CAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1D,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,OAAO,KAAK,CAAC;IACf,CAAC;CACF","file":"animation.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport type { EasingType, ILineAttribute } from '@visactor/vrender-core';\nimport type { IPointLike } from '@visactor/vutils';\nimport { ACustomAnimate, TagPointsUpdate } from '@visactor/vrender-animate';\nimport { Point, isValidNumber, polarToCartesian, cartesianToPolar } from '@visactor/vutils';\nimport { isClose, isValidPoint, normalizeAngle } from '../../util';\nimport type { IPoint } from '../../typings';\n\nexport class PolarPointUpdate extends ACustomAnimate<{ x: number; y: number }> {\n  declare valid: boolean;\n\n  private _fromAngle: number;\n  private _fromRadius: number;\n\n  private _toAngle: number;\n  private _toRadius: number;\n\n  private _center: IPointLike;\n  private _prevCenter: IPointLike;\n\n  constructor(\n    from: { x: number; y: number; center: IPointLike },\n    to: { x: number; y: number; center: IPointLike },\n    duration: number,\n    easing: EasingType,\n    params: any\n  ) {\n    super(from, to, duration, easing, params);\n    this._center = to.center;\n  }\n\n  getEndProps(): Record<string, any> {\n    if (this.valid === false) {\n      return {};\n    }\n    return polarToCartesian(this._center, this._toRadius, this._toAngle);\n  }\n\n  onBind(): void {\n    this.from = this.target.attribute as any;\n    this.to = this.target.getFinalAttribute();\n    this._prevCenter = (this.target.attribute as any).center;\n    if (!this._center || !this._prevCenter) {\n      this.valid = false;\n    }\n    const { angle: fromAngle, radius: fromRadius } = cartesianToPolar(this.from, this._prevCenter);\n    const { angle: toAngle, radius: toRadius } = cartesianToPolar(this.to, this._center);\n    if (!isValidNumber(toAngle * toRadius)) {\n      this.valid = false;\n    }\n    this._fromAngle = isValidNumber(fromAngle) ? fromAngle : toAngle;\n    this._fromRadius = isValidNumber(fromRadius) ? fromRadius : toRadius;\n    this._toAngle = toAngle;\n    this._toRadius = toRadius;\n    if (isClose(this._fromAngle, this._toAngle) && isClose(this._fromRadius, this._toRadius)) {\n      this.valid = false;\n    }\n    this.props = this.getEndProps() as any;\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    if (this.valid === false) {\n      out.x = this.to.x;\n      out.y = this.to.y;\n      return;\n    }\n    const { x, y } = polarToCartesian(\n      {\n        x: this._prevCenter.x + (this._center.x - this._prevCenter.x) * ratio,\n        y: this._prevCenter.y + (this._center.y - this._prevCenter.y) * ratio\n      },\n      this._fromRadius + (this._toRadius - this._fromRadius) * ratio,\n      this._fromAngle + (this._toAngle - this._fromAngle) * ratio\n    );\n    this.target.setAttributes({ x, y });\n    this.target.addUpdatePositionTag();\n    this.target.addUpdateShapeAndBoundsTag();\n  }\n}\n\n// @ts-ignore\n// FIXME: some private attribute should be changed to protected for better inheritance\nexport class PolarTagPointsUpdate extends TagPointsUpdate {\n  private declare points: IPointLike[];\n  private declare interpolatePoints: [IPointLike, IPointLike][];\n\n  private _center: IPointLike;\n  private _prevCenter: IPointLike;\n\n  onBind(): void {\n    super.onBind();\n    const { center } = this.target.attribute as any;\n    const { center: centerTo } = this.target.getFinalAttribute() as any;\n    this._center = centerTo;\n    this._prevCenter = center;\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    // if not create new points, multi points animation might not work well.\n    this.points = this.points.map((point, index) => {\n      const newPoint = this.polarPointInterpolation(\n        this.interpolatePoints[index][0],\n        this.interpolatePoints[index][1],\n        ratio\n      );\n      if (end) {\n        out.center = this._center;\n      }\n      newPoint.context = point.context;\n      return newPoint;\n    });\n    (this.target.attribute as ILineAttribute).points = this.points;\n    this.target.addUpdatePositionTag();\n    this.target.addUpdateShapeAndBoundsTag();\n  }\n\n  private _interpolationSinglePoint(pointA: IPoint, pointB: IPoint, ratio: number): IPoint {\n    if (!isValidPoint(pointA) && !isValidPoint(pointB)) {\n      return pointB;\n    }\n    const polarPointA = cartesianToPolar(pointA, this._prevCenter);\n    const polarPointB = cartesianToPolar(pointB, this._center);\n    let angleA = normalizeAngle(polarPointA.angle);\n    let angleB = normalizeAngle(polarPointB.angle);\n\n    // handle center point radius\n    if (!isValidNumber(angleA) && isValidNumber(angleB)) {\n      angleA = angleB;\n    }\n    if (isValidNumber(angleA) && !isValidNumber(angleB)) {\n      angleB = angleA;\n    }\n    const angle = angleA + (angleB - angleA) * ratio;\n    const radius = polarPointA.radius + (polarPointB.radius - polarPointA.radius) * ratio;\n\n    return polarToCartesian(\n      {\n        x: this._prevCenter.x + (this._center.x - this._prevCenter.x) * ratio,\n        y: this._prevCenter.y + (this._center.y - this._prevCenter.y) * ratio\n      },\n      radius,\n      angle\n    );\n  }\n\n  private polarPointInterpolation(pointA: IPointLike, pointB: IPointLike, ratio: number): IPointLike {\n    const { x, y } = this._interpolationSinglePoint(pointA, pointB, ratio);\n    const { x: x1, y: y1 } = this._interpolationSinglePoint(\n      {\n        x: pointA.x1,\n        y: pointA.y1\n      },\n      {\n        x: pointB.x1,\n        y: pointB.y1\n      },\n      ratio\n    );\n\n    const point = new Point(x as number, y as number, x1, y1);\n    point.defined = pointB.defined;\n    return point;\n  }\n}\n"]}