{"version":3,"sources":["../src/util/theme/preprocess.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAG3E,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAG3D,MAAM,WAAW,GAAG,CAAC,oBAAoB,EAAE,aAAa,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAE7E,MAAM,UAAU,eAAe,CAAC,GAAQ,EAAE,WAA+B,EAAE,QAAmB;IAC5F,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,GAAG,CAAC;KACZ;IACD,IAAI,CAAC,WAAW,EAAE;QAChB,WAAW,GAAI,GAAc,CAAC,WAAW,CAAC;KAC3C;IACD,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAI,GAAc,CAAC,KAAK,CAAC;KAClC;IACD,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC7B,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAC9B;aAAM,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;YAC/B,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;gBAEpB,MAAc,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;aAC3D;iBAAM,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;gBAE3B,MAAc,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aACpD;iBAAM;gBACJ,MAAc,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,KAAK,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;aACtE;SACF;aAAM;YACJ,MAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAC9B;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","file":"preprocess.js","sourcesContent":["import { isPlainObject } from '@visactor/vutils';\nimport type { IThemeColorScheme } from '../../theme/color-scheme/interface';\nimport { getActualColor, isColorKey } from '../../theme/color-scheme/util';\nimport type { TokenMap } from '../../theme/token';\n// eslint-disable-next-line no-duplicate-imports\nimport { isTokenKey, queryToken } from '../../theme/token';\nimport type { ITheme } from '../../theme';\n\nconst IGNORE_KEYS = ['animationThreshold', 'colorScheme', 'name', 'padding'];\n\nexport function preprocessTheme(obj: any, colorScheme?: IThemeColorScheme, tokenMap?: TokenMap): any {\n  if (!obj) {\n    return obj;\n  }\n  if (!colorScheme) {\n    colorScheme = (obj as ITheme).colorScheme;\n  }\n  if (!tokenMap) {\n    tokenMap = (obj as ITheme).token;\n  }\n  const newObj = {};\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (IGNORE_KEYS.includes(key)) {\n      (newObj as any)[key] = value;\n    } else if (isPlainObject(value)) {\n      if (isColorKey(value)) {\n        // 查询、替换语义化颜色\n        (newObj as any)[key] = getActualColor(value, colorScheme);\n      } else if (isTokenKey(value)) {\n        // 查询、替换语义化 token\n        (newObj as any)[key] = queryToken(tokenMap, value);\n      } else {\n        (newObj as any)[key] = preprocessTheme(value, colorScheme, tokenMap);\n      }\n    } else {\n      (newObj as any)[key] = value;\n    }\n  });\n\n  return newObj;\n}\n"]}