{"version":3,"sources":["../src/util/array.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,IAAI,IAAI,IAAI,EAAE,UAAU,IAAI,QAAQ,EAAE,UAAU,IAAI,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAEvG,MAAM,UAAU,cAAc,CAAO,IAAa,EAAE,IAAa;IAC/D,MAAM,IAAI,GAAG,IAAI,GAAG,CAAQ,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACzC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAQ,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACzC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;QAC3B,OAAO,KAAK,CAAC;KACd;IACD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;QAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAmB;IAChD,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACnD,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAC1D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACxB;QAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KACxB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AACD,MAAM,UAAU,gBAAgB,CAAI,KAAU,EAAE,MAAS,EAAE,GAAM;IAC/D,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACpC,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAEpC,IAAI,KAAK,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,KAAK,GAAG,QAAQ,EAAE;QACnD,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACvB,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;KACnC;AACH,CAAC;AAED,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC","file":"array.js","sourcesContent":["import { array, last as peek, maxInArray as maxInArr, minInArray as minInArr } from '@visactor/vutils';\n\nexport function shallowCompare<T, U>(arrA: T | T[], arrB: U | U[]): boolean {\n  const setA = new Set<T | U>(array(arrA));\n  const setB = new Set<T | U>(array(arrB));\n  if (setA.size !== setB.size) {\n    return false;\n  }\n  for (const v of setA.values()) {\n    if (!setB.has(v)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function combineDomains(domains: number[][]): number[] {\n  const result = [];\n  for (let index = 0; index < domains.length; index++) {\n    const domain = domains[index];\n    if (index === 0 || domain[0] !== result[result.length - 1]) {\n      result.push(domain[0]);\n    }\n\n    result.push(domain[1]);\n  }\n\n  return result;\n}\nexport function moveAfterInArray<T>(array: T[], target: T, ref: T) {\n  const index = array.indexOf(target);\n  const refIndex = array.indexOf(ref);\n\n  if (index >= 0 && refIndex >= 0 && index < refIndex) {\n    array.splice(index, 1);\n    array.splice(refIndex, 0, target);\n  }\n}\n\nexport { array, peek, maxInArr, minInArr };\n"]}