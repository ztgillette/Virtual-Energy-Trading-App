{"version":3,"sources":["../src/util/space.ts"],"names":[],"mappings":"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","file":"space.js","sourcesContent":["import type { IBoundsLike } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { isArray } from '@visactor/vutils';\nimport { isNumber, isNil, isString, isFunction, couldBeValidNumber, isObject } from './type';\nimport type { IPadding } from '../typings/space';\nimport type { IPoint } from '../typings/coordinate';\nimport type {\n  ILayoutNumber,\n  ILayoutRect,\n  IPercent,\n  IPercentOffset,\n  ILayoutPaddingSpec,\n  ILayoutOrientPadding\n} from '../typings/layout';\n\nexport function isValidOrient(orient: string): boolean {\n  switch (orient) {\n    case 'left':\n    case 'right':\n    case 'top':\n    case 'bottom':\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function isPercent(v: any): v is IPercent {\n  if (!isString(v)) {\n    return false;\n  }\n  if (!v.endsWith('%')) {\n    return false;\n  }\n  return couldBeValidNumber(v.substring(0, v.length - 1));\n}\n\nexport function isPercentOffset(v: any): v is IPercentOffset {\n  if (!isObject(v)) {\n    return false;\n  }\n  if ('percent' in v || 'offset' in v) {\n    return true;\n  }\n  return false;\n}\n\nexport function calcLayoutNumber(\n  v: ILayoutNumber | undefined,\n  size: number,\n  callOp?: ILayoutRect, //如果是函数类型的话，函数的参数\n  defaultValue: number = 0\n) {\n  if (isNumber(v)) {\n    return v;\n  }\n  if (isPercent(v)) {\n    return (Number(v.substring(0, v.length - 1)) * size) / 100;\n  }\n  if (isFunction(v)) {\n    return v(callOp);\n  }\n  if (isObject(v)) {\n    return size * (v.percent ?? 0) + (v.offset ?? 0);\n  }\n  return defaultValue;\n}\n\nexport function calcPadding(\n  paddingSpec: ILayoutOrientPadding,\n  rect: ILayoutRect,\n  callOp: ILayoutRect //如果是函数类型的话，函数的参数\n): IPadding {\n  const result: IPadding = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  };\n  if (Object.values(paddingSpec).every(value => isNumber(value))) {\n    result.top = (<IPadding>paddingSpec).top ?? 0;\n    result.right = (<IPadding>paddingSpec).right ?? 0;\n    result.bottom = (<IPadding>paddingSpec).bottom ?? 0;\n    result.left = (<IPadding>paddingSpec).left ?? 0;\n    return result;\n  }\n  const paddings = [\n    {\n      orients: ['left', 'right'],\n      size: rect.width\n    },\n    {\n      orients: ['top', 'bottom'],\n      size: rect.height\n    }\n  ];\n  paddings.forEach(p => {\n    p.orients.forEach(o => {\n      result[o] = calcLayoutNumber(paddingSpec[o], p.size, callOp);\n    });\n  });\n  return result;\n}\n\nexport function boundsInRect(bounds: IBoundsLike, rect: ILayoutRect): ILayoutRect {\n  if (!bounds) {\n    return { width: 0, height: 0 };\n  }\n  return {\n    width: Math.ceil(Math.min(bounds.x2 - bounds.x1, rect.width)),\n    height: Math.ceil(Math.min(bounds.y2 - bounds.y1, rect.height))\n  };\n}\n\nexport function normalizeLayoutPaddingSpec(spec: ILayoutPaddingSpec): ILayoutOrientPadding {\n  let result: ILayoutOrientPadding = {};\n  if (isArray(spec)) {\n    if (!isNil(spec[0])) {\n      result.top = result.left = result.bottom = result.right = spec[0];\n    }\n    if (!isNil(spec[1])) {\n      result.left = result.right = spec[1];\n    }\n    if (!isNil(spec[2])) {\n      result.bottom = spec[2];\n    }\n    if (!isNil(spec[3])) {\n      result.left = spec[3];\n    }\n    return result;\n  }\n  if (isNumber(spec) || isPercent(spec) || isFunction(spec) || isPercentOffset(spec)) {\n    result.top = result.left = result.bottom = result.right = spec;\n    return result;\n  }\n  if (isObject(spec)) {\n    result = { ...spec };\n    return result;\n  }\n  return result;\n}\n\nexport function convertPoint(point: IPoint, relativePoint: IPoint, convert: boolean) {\n  if (convert) {\n    return {\n      x: point.x + relativePoint.x,\n      y: point.y + relativePoint.y\n    };\n  }\n  return point;\n}\n\n/**\n * 将相对数值转换为绝对数值\n * @param originValue 原始值（相对值或绝对值）\n * @param total 总体值\n * @returns 实际绝对数值\n */\nexport const getActualNumValue = (originValue: number | string, total: number): number => {\n  const originNumValue = Number(originValue);\n  const originStrValue = originValue.toString();\n  if (isNaN(originNumValue) && originStrValue[originStrValue.length - 1] === '%') {\n    return total * (Number(originStrValue.slice(0, originStrValue.length - 1)) / 100);\n  }\n  return originNumValue;\n};\n"]}