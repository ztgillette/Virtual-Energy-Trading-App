{"version":3,"sources":["../src/event/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IGraphic } from '@visactor/vrender-core';\nimport type { IChart } from '../chart/interface';\nimport type { IModel } from '../model/interface';\nimport type { IMark, IMarkGraphic, MarkType } from '../mark/interface';\nimport type { DimensionEventParams } from './events/dimension/interface';\nimport type { Datum, IPoint, RenderMode, StringOrNumber } from '../typings';\nimport type { ChartEvent, Event_Bubble_Level, Event_Source_Type, HOOK_EVENT } from '../constant/event';\nimport type { SeriesType } from '../series/interface';\nimport type { TooltipEventParams } from '../component/tooltip/interface/event';\nimport type { ILayoutItem } from '../layout/interface';\nimport type { IVChart } from '../core/interface';\n\nexport type EventType =\n  | 'pointerdown'\n  | 'pointerup'\n  | 'pointerupoutside'\n  | 'pointertap'\n  | 'pointerover'\n  | 'pointermove'\n  | 'pointerenter'\n  | 'pointerleave'\n  | 'pointerout'\n  | 'mousedown'\n  | 'mouseup'\n  | 'mouseupoutside'\n  | 'rightdown'\n  | 'rightup'\n  | 'rightupoutside'\n  | 'click'\n  | 'dblclick'\n  | 'mousemove'\n  | 'mouseover'\n  | 'mouseout'\n  | 'mouseenter'\n  | 'mouseleave'\n  | 'wheel'\n  | 'touchstart'\n  | 'touchend'\n  | 'touchendoutside'\n  | 'touchmove'\n  | 'touchcancel'\n  | 'tap'\n  | 'dragstart'\n  | 'drag'\n  | 'dragenter'\n  | 'dragleave'\n  | 'dragover'\n  | 'dragend'\n  | 'drop'\n  | 'pan'\n  | 'panstart'\n  | 'panend'\n  | 'press'\n  | 'pressup'\n  | 'pressend'\n  | 'pinch'\n  | 'pinchstart'\n  | 'pinchend'\n  | 'swipe'\n  | keyof typeof ChartEvent\n  | keyof typeof HOOK_EVENT\n  | string;\n\nexport type EventBubbleLevel = keyof typeof Event_Bubble_Level;\n\nexport type ComponentType =\n  | 'axis'\n  | 'dataZoom'\n  | 'indicator'\n  | 'legend'\n  | 'markLine'\n  | 'markArea'\n  | 'markPoint'\n  | 'tooltip'\n  | 'title'\n  | 'label'\n  | 'totalLabel'\n  | 'customMark';\nexport type EventTargetType = MarkType | ComponentType | SeriesType;\n\nexport type EventSourceType = keyof typeof Event_Source_Type;\n\n/**\n * 事件 API 中的事件筛选配置\n */\nexport type EventQuery = {\n  /**\n   * 事件的冒泡层级配置，其中 model 指的是图表的内部模型，包括 region、series 以及 component\n   */\n  level?: EventBubbleLevel;\n  /**\n   * 事件来源配置。\n   * - `window`: window 事件\n   * - `chart`: 图表事件\n   */\n  source?: EventSourceType;\n\n  /**\n   * vrender 图形节点名称\n   */\n  nodeName?: string;\n  /**\n   * mark 图元名称\n   */\n  markName?: string;\n  /**\n   * 仅在 level 为 'mark' 或者 'model' 的场景下使用，用于筛选 mark 类型或者图表组成元素模型类型\n   */\n  type?: EventTargetType;\n  /**\n   * 用户在 spec 上配置的 id\n   */\n  id?: StringOrNumber;\n  /**\n   * 自定义过滤函数\n   * @param params\n   * @returns\n   */\n  filter?: (params: Partial<BaseEventParams>) => boolean;\n\n  throttle?: number;\n  debounce?: number;\n  /**\n   * 是否阻止冒泡\n   */\n  consume?: boolean;\n};\n\nexport type EventParams = {\n  /**\n   * 事件对象\n   */\n  event?: SuperEvent;\n  /**\n   * 供不同的事件用于存储期望携带的数据\n   */\n  value?: any;\n  /**\n   * 事件来源的 mark\n   */\n  mark?: IMark;\n  /**\n   * 事件来源的 model\n   */\n  model?: IModel;\n  /**\n   * 事件来源的 chart\n   */\n  chart?: IChart;\n  /**\n   * 事件拾取到的图元的数据\n   */\n  datum?: Datum;\n  /**\n   * 拾取到的图形节点\n   */\n  node?: IGraphic;\n  /**\n   * @since 1.10.4\n   * 生命周期相关事件，包括：\n   *  - 'rendered'\n   *  - 'initialized'\n   *  - 'animationFinished'\n   *  - 'renderFinished'\n   *  - 'layoutStart'\n   *  - 'layoutEnd'\n   * 会返回vchart实例\n   */\n  vchart?: IVChart;\n};\n\ntype SuperEvent = Event & {\n  [key: string]: any;\n};\n\nexport type BaseEventParams = EventParams & {\n  /**\n   * 事件对象\n   */\n  event: SuperEvent;\n  item: IMarkGraphic;\n  datum: Datum;\n  source: EventSourceType;\n};\n\nexport type EventCallback<Params extends EventParams> = (params: Params) => boolean | void;\n\n/**\n * 内部事件分发中所应用的事件筛选配置\n */\nexport type EventFilter = {\n  source: EventSourceType;\n  level: EventBubbleLevel;\n  type: string | null;\n  markName: string | null;\n  nodeName: string | null;\n  userId: StringOrNumber | null;\n  filter: (params: Partial<BaseEventParams>) => boolean | null;\n};\n\nexport type EventHandler<Params extends EventParams> = {\n  callback: EventCallback<Params>;\n  query: EventQuery | null;\n  // 如果有 debounce/throttle 配置则需要封装原始回调函数\n  wrappedCallback?: EventCallback<Params>;\n  // 转换后的事件筛选配置\n  filter?: EventFilter;\n  // handler 是否被禁止触发\n  prevented?: boolean;\n};\n\nexport type ExtendEventParam = EventParams & {\n  event?: Event;\n  item?: IMarkGraphic;\n  datum?: Datum;\n  source?: EventSourceType;\n};\n\nexport type LayoutEventParam = {\n  elements: (ILayoutItem & { type: string })[];\n} & Partial<BaseEventParams>;\n\nexport type PanEventParam = ExtendEventParam & {\n  // x/y方向上的偏移值\n  delta: [number, number];\n};\n\nexport type ZoomEventParam = ExtendEventParam & {\n  // 缩放值\n  scale: number;\n  // 缩放中心\n  scaleCenter: IPoint;\n};\n\nexport type InteractionEventParam = {\n  graphics?: IMarkGraphic[];\n  datums?: Datum[];\n} & Partial<BaseEventParams>;\n\nexport type EventParamsDefinition = {\n  // 基础事件回调参数\n  pointerdown: BaseEventParams;\n  pointerup: BaseEventParams;\n  pointerupoutside: BaseEventParams;\n  pointertap: BaseEventParams;\n  pointerover: BaseEventParams;\n  pointermove: BaseEventParams;\n  pointerenter: BaseEventParams;\n  pointerleave: BaseEventParams;\n  pointerout: BaseEventParams;\n  mousedown: BaseEventParams;\n  mouseup: BaseEventParams;\n  mouseupoutside: BaseEventParams;\n  rightdown: BaseEventParams;\n  rightup: BaseEventParams;\n  rightupoutside: BaseEventParams;\n  click: BaseEventParams;\n  dblclick: BaseEventParams;\n  mousemove: BaseEventParams;\n  mouseover: BaseEventParams;\n  mouseout: BaseEventParams;\n  mouseenter: BaseEventParams;\n  mouseleave: BaseEventParams;\n  wheel: BaseEventParams;\n  touchstart: BaseEventParams;\n  touchend: BaseEventParams;\n  touchendoutside: BaseEventParams;\n  touchmove: BaseEventParams;\n  touchcancel: BaseEventParams;\n\n  dragstart: BaseEventParams;\n  drag: BaseEventParams;\n  dragenter: BaseEventParams;\n  dragleave: BaseEventParams;\n  dragover: BaseEventParams;\n  dragend: BaseEventParams;\n  drop: BaseEventParams;\n\n  tap: BaseEventParams;\n  pan: BaseEventParams;\n  panstart: BaseEventParams;\n  panend: BaseEventParams;\n  press: BaseEventParams;\n  pressup: BaseEventParams;\n  pressend: BaseEventParams;\n  pinch: BaseEventParams;\n  pinchstart: BaseEventParams;\n  pinchend: BaseEventParams;\n  swipe: BaseEventParams;\n\n  // VChart 内置的扩展组合事件\n  dimensionHover: DimensionEventParams;\n  dimensionClick: DimensionEventParams;\n  tooltipShow: TooltipEventParams;\n  tooltipHide: TooltipEventParams;\n  tooltipRelease: TooltipEventParams;\n  afterLayout: LayoutEventParam;\n\n  // 交互相关事件\n  'element-select:start': InteractionEventParam;\n  'element-select:reset': InteractionEventParam;\n  'element-highlight:start': InteractionEventParam;\n  'element-highlight:reset': InteractionEventParam;\n\n  // 扩展事件参数\n  [key: string]: ExtendEventParam;\n};\n\nexport interface IEventDispatcher {\n  globalInstance: IVChart;\n  register: <Evt extends EventType>(eType: Evt, handler: EventHandler<EventParamsDefinition[Evt]>) => this;\n  unregister: <Evt extends EventType>(eType: Evt, handler?: EventHandler<EventParamsDefinition[Evt]>) => this;\n  dispatch: <Evt extends EventType>(eType: Evt, params?: EventParamsDefinition[Evt], level?: EventBubbleLevel) => this;\n  clear: () => void;\n  release: () => void;\n  prevent: <Evt extends EventType>(\n    eType: Evt,\n    except?: {\n      handler: EventCallback<EventParamsDefinition[Evt]>;\n      level: EventBubbleLevel;\n    }\n  ) => void;\n  allow: <Evt extends EventType>(eType: Evt) => void;\n}\n\nexport interface IEvent {\n  on: (<Evt extends EventType>(eType: Evt, callback: EventCallback<EventParamsDefinition[Evt]>) => this) &\n    (<Evt extends EventType>(\n      eType: Evt,\n      query: EventQuery,\n      callback: EventCallback<EventParamsDefinition[Evt]>\n    ) => this);\n  off: (<Evt extends EventType>(eType: Evt, callback?: EventCallback<EventParamsDefinition[Evt]>) => this) &\n    (<Evt extends EventType>(\n      eType: Evt,\n      query: EventQuery,\n      callback: EventCallback<EventParamsDefinition[Evt]>\n    ) => this);\n  emit: <Evt extends EventType>(eType: Evt, params: EventParamsDefinition[Evt], level?: EventBubbleLevel) => void;\n  release: () => void;\n\n  getComposedEventMap: () => Map<EventCallback<EventParams>, { eventType: EventType; event: IComposedEvent }>;\n  prevent: <Evt extends EventType>(\n    eType: Evt,\n    except?: {\n      handler: EventCallback<EventParamsDefinition[Evt]>;\n      level: EventBubbleLevel;\n    }\n  ) => void;\n  allow: <Evt extends EventType>(eType: Evt) => void;\n}\n\nexport interface IComposedEvent {\n  register: <Evt extends EventType>(eType: Evt, handler: EventHandler<EventParamsDefinition[Evt]>) => void;\n  unregister: () => void;\n  dispatch: (v: unknown, opt: unknown) => unknown;\n}\n\nexport interface IComposedEventConstructor {\n  new (eventDispatcher: IEventDispatcher, mode: RenderMode): IComposedEvent;\n}\n"]}