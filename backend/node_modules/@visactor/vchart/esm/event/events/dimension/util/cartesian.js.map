{"version":3,"sources":["../src/event/events/dimension/util/cartesian.ts"],"names":[],"mappings":"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","file":"cartesian.js","sourcesContent":["import type { IChart } from '../../../../chart/interface';\nimport type { IDimensionInfo } from '../interface';\nimport { isDiscrete } from '@visactor/vscale';\nimport { getDimensionData, getAxis } from './common';\nimport type { CartesianAxis } from '../../../../component/axis/cartesian';\nimport type { ICartesianSeries } from '../../../../series/interface';\nimport { isNil } from '@visactor/vutils';\nimport { isXAxis, isYAxis } from '../../../../component/axis/cartesian/util/common';\nimport { Direction } from '../../../../typings/space';\nimport type { ILayoutPoint } from '../../../../typings/layout';\nimport type { IAxis } from '../../../../component/axis';\n\nconst discreteXAxisGetDimensionField = (series: ICartesianSeries) => series.fieldX[0];\nconst discreteYAxisGetDimensionField = (series: ICartesianSeries) => series.fieldY[0];\nconst continuousXAxisGetDimensionField = (series: ICartesianSeries) => [\n  series.fieldX[0],\n  series.fieldX2 ?? series.fieldX[1]\n];\nconst continuousYAxisGetDimensionField = (series: ICartesianSeries) => [\n  series.fieldY[0],\n  series.fieldY2 ?? series.fieldY[1]\n];\n\nconst getDimensionFieldFunc = (isXAxis: boolean, isDiscreteAxis: boolean) =>\n  isXAxis\n    ? isDiscreteAxis\n      ? discreteXAxisGetDimensionField\n      : continuousXAxisGetDimensionField\n    : isDiscreteAxis\n    ? discreteYAxisGetDimensionField\n    : continuousYAxisGetDimensionField;\n\nexport const getCartesianDimensionInfo = (\n  chart: IChart | undefined,\n  pos: ILayoutPoint,\n  isTooltip?: boolean\n): IDimensionInfo[] | null => {\n  if (!chart) {\n    return null;\n  }\n\n  const { x, y } = pos;\n  const xAxisList = getAxis(chart, (cmp: CartesianAxis) => isXAxis(cmp.getOrient()), pos) ?? [];\n  const yAxisList = getAxis(chart, (cmp: CartesianAxis) => isYAxis(cmp.getOrient()), pos) ?? [];\n\n  if (!xAxisList.length && !yAxisList.length) {\n    return null;\n  }\n\n  /** 离散轴集合 */\n  const bandAxisSet: Set<CartesianAxis> = new Set();\n  /** 连续轴集合 */\n  const linearAxisSet: Set<CartesianAxis> = new Set();\n  /** 必须包含的轴的集合 */\n  const forceAxisSet: Set<CartesianAxis> = new Set();\n\n  [xAxisList, yAxisList].forEach(axisList =>\n    axisList.forEach(axis => {\n      const isDiscreteAxis = isDiscrete(axis.getScale().type);\n      if (isDiscreteAxis) {\n        bandAxisSet.add(axis);\n      } else {\n        linearAxisSet.add(axis);\n      }\n      if (isTooltip && axis.getSpec().hasDimensionTooltip) {\n        forceAxisSet.add(axis);\n      }\n    })\n  );\n\n  const targetAxisInfo: IDimensionInfo[] = [];\n\n  const addAxisDimensionInfo = (orient: 'x' | 'y') => {\n    const isXAxis = orient === 'x';\n    const posValue = isXAxis ? x : y;\n    const axisList = isXAxis ? xAxisList : yAxisList;\n    axisList.forEach(axis => {\n      if (forceAxisSet.size > 0) {\n        if (forceAxisSet.has(axis)) {\n          const info = getDimensionInfoByPosition(\n            axis,\n            posValue,\n            getDimensionFieldFunc(isXAxis, isDiscrete(axis.getScale().type))\n          );\n          info && targetAxisInfo.push(info);\n        }\n      } else {\n        const hasDiscreteAxis = bandAxisSet.size > 0;\n        if ((hasDiscreteAxis ? bandAxisSet : linearAxisSet).has(axis)) {\n          const info = getDimensionInfoByPosition(axis, posValue, getDimensionFieldFunc(isXAxis, hasDiscreteAxis));\n          info && targetAxisInfo.push(info);\n        }\n      }\n    });\n  };\n\n  // 优先筛选 band 轴，其次按照 direction 判断\n  if (chart.getSpec().direction === Direction.horizontal) {\n    addAxisDimensionInfo('y');\n    if (targetAxisInfo.length === 0) {\n      addAxisDimensionInfo('x');\n    }\n  } else {\n    addAxisDimensionInfo('x');\n    if (targetAxisInfo.length === 0) {\n      addAxisDimensionInfo('y');\n    }\n  }\n\n  if (!targetAxisInfo.length) {\n    return null;\n  }\n  return targetAxisInfo;\n};\n\nexport const getDimensionInfoByPosition = (\n  axis: CartesianAxis,\n  posValue: number,\n  getDimensionField: (series: ICartesianSeries) => string | string[]\n): IDimensionInfo | null => {\n  const value = axis.positionToData(posValue, true);\n  return isNil(value) ? null : getDimensionInfoByValue(axis, value, getDimensionField);\n};\n\nexport const getDimensionInfoByValue = (\n  axis: IAxis,\n  value: any,\n  getDimensionField?: (series: ICartesianSeries) => string | string[]\n): IDimensionInfo | null => {\n  const scale = axis.getScale();\n\n  if (isNil(value)) {\n    return null;\n  }\n  const domain = scale.domain();\n  let index: number | undefined = domain.findIndex((v: any) => v?.toString() === value.toString());\n  if (index < 0) {\n    index = undefined;\n  }\n\n  const data = getDimensionData(\n    value,\n    axis as CartesianAxis,\n    'cartesian',\n    getDimensionField ??\n      (isXAxis((axis as CartesianAxis).getOrient()) ? discreteXAxisGetDimensionField : discreteYAxisGetDimensionField)\n  );\n  return { index, value, position: scale.scale(value), axis, data };\n};\n"]}