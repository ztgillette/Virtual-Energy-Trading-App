{"version":3,"sources":["../src/event/events/dimension/base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAc5C,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,wCAAwC,CAAC;AAEjE,MAAM,OAAO,cAAc;IAQzB,YAAY,eAAiC,EAAE,IAAgB;QAC7D,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,IAAY,KAAK;;QACf,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,MAAA,MAAA,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAC,QAAQ,kDAAI,CAAC;SACjE;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,QAAQ,CAAqB,KAAU,EAAE,OAAiD;;QACxF,CAAC,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,SAAS,GAAG,OAAO,mCAAI,KAAK,CAAC,CAAC,yBAAyB,CAAC,CAAC;IACxE,CAAC;IACD,UAAU;;QACR,CAAC,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,SAAS,GAAG,OAAO,mCAAI,KAAK,CAAC,CAAC,yBAAyB,CAAC,CAAC;IACxE,CAAC;IAES,sBAAsB,CAAC,CAAS,EAAE,CAAS;;QACnD,MAAM,aAAa,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,EAAC,gBAAgB,mDAAG,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,mCAAI,EAAE,CAAC;QAEjG,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,QAAQ,CAAC,CAAU,EAAE,GAA0C;;QAE7D,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,KAAK,0CAAE,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;YACrD,IAAI,CAAC,CAAC,OAAO,KAAK,MAAM,EAAE;gBACxB,OAAO,KAAK,CAAC;aACd;YACD,IAAI,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,EAAE;gBACf,OAAO,GAAG,CAAC,MAAM,CAAQ,CAAC,CAAC,CAAC;aAC7B;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAY,CAAC;QAEd,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACtC,MAAM,KAAK,GAAW,IAAK,CAAC,QAAQ,EAAE,CAAC;YACvC,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,YAAY,CAAC,MAAM;YACjC,CAAC,CAAC,YAAY;YACd,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACjB,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBAChC,OAAO,OAAO,CAAC,MAAqB,CAAC,IAAI,MAAM,KAAK,OAAO,CAAC;YAC9D,CAAC,CAAC,CAAC;QACP,MAAM,aAAa,GAAqB,EAAE,CAAC;QAC3C,MAAM,uBAAuB,GAAG,MAAA,IAAI,CAAC,KAAK,0CAAE,cAAc,GAAG,uBAAuB,CAAC;QAErF,IAAI,uBAAuB,EAAE;YAC3B,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBAClB,MAAM,IAAI,GAAG,uBAAuB,CAAC,CAAmB,EAAE,CAAC,CAAC,CAAC;gBAC7D,IAAI,IAAI,EAAE;oBACR,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC1B;YACH,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE;YACxB,MAAM,EAAE,OAAO;YACf,aAAa;SACgB,CAAC,CAAC;QACjC,OAAO,aAAa,CAAC;IACvB,CAAC;CACF","file":"base.js","sourcesContent":["import { error } from '../../../util/debug';\nimport type { IAxis } from '../../../component/axis/interface';\nimport type { RenderMode } from '../../../typings/spec/common';\nimport type {\n  BaseEventParams,\n  EventHandler,\n  EventParamsDefinition,\n  IComposedEvent,\n  IEventDispatcher\n} from '../../interface';\nimport type { IChart } from '../../../chart/interface';\nimport type { IDimensionInfo } from './interface';\nimport { getDimensionInfoByValue } from './util/cartesian';\nimport type { IOrientType, Maybe } from '../../../typings';\nimport { isDiscrete } from '@visactor/vscale';\nimport { isXAxis } from '../../../component/axis/cartesian/util';\n\nexport class DimensionEvent implements IComposedEvent {\n  protected _eventDispatcher: IEventDispatcher;\n  protected _mode: RenderMode;\n\n  protected _callback!: (params: BaseEventParams) => void;\n\n  protected _chart: Maybe<IChart>;\n\n  constructor(eventDispatcher: IEventDispatcher, mode: RenderMode) {\n    this._eventDispatcher = eventDispatcher;\n    this._mode = mode;\n  }\n\n  private get chart() {\n    if (!this._chart) {\n      this._chart = this._eventDispatcher.globalInstance.getChart?.();\n    }\n    return this._chart;\n  }\n\n  register<Evt extends string>(eType: Evt, handler: EventHandler<EventParamsDefinition[Evt]>): void {\n    (this.chart?.getOption().onError ?? error)('Method not implemented.');\n  }\n  unregister(): void {\n    (this.chart?.getOption().onError ?? error)('Method not implemented.');\n  }\n\n  protected getTargetDimensionInfo(x: number, y: number): IDimensionInfo[] | null {\n    const dimensionInfo = this.chart.getModelOption().getDimensionInfo?.(this.chart, { x, y }) ?? [];\n\n    if (dimensionInfo.length === 0) {\n      return null;\n    }\n\n    return dimensionInfo;\n  }\n\n  dispatch(v: unknown, opt: { filter?: (axis: IAxis) => boolean }) {\n    // get all enable axis\n    const axes = this.chart?.getAllComponents().filter(c => {\n      if (c.specKey !== 'axes') {\n        return false;\n      }\n      if (opt?.filter) {\n        return opt.filter(<IAxis>c);\n      }\n      return true;\n    }) as IAxis[];\n\n    const discreteAxes = axes.filter(axis => {\n      const scale = (<IAxis>axis).getScale();\n      return isDiscrete(scale.type);\n    });\n    const dimAxes = discreteAxes.length\n      ? discreteAxes\n      : axes.filter(axis => {\n          const orient = axis.getOrient();\n          return isXAxis(orient as IOrientType) || orient === 'angle';\n        });\n    const dimensionInfo: IDimensionInfo[] = [];\n    const getDimensionInfoByValue = this.chart?.getModelOption().getDimensionInfoByValue;\n\n    if (getDimensionInfoByValue) {\n      dimAxes.forEach(a => {\n        const info = getDimensionInfoByValue(a as unknown as any, v);\n        if (info) {\n          dimensionInfo.push(info);\n        }\n      });\n    }\n    this._callback.call(null, {\n      action: 'enter',\n      dimensionInfo\n    } as unknown as BaseEventParams);\n    return dimensionInfo;\n  }\n}\n"]}