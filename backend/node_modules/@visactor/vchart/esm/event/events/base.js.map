{"version":3,"sources":["../src/event/events/base.ts"],"names":[],"mappings":"AAIA,MAAM,OAAgB,aAAa;IASjC,YAAY,eAAiC,EAAE,IAAgB;;QARrD,cAAS,GAA8D,IAAI,GAAG,EAGrF,CAAC;QAMF,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,MAAM,GAAG,MAAA,MAAA,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAC,QAAQ,kDAAI,CAAC;IAClE,CAAC;IAMS,cAAc,CAAwB,KAAU,EAAE,OAAiD;QAC3G,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAES,gBAAgB,CAAwB,KAAU,EAAE,OAAkD;QAE9G,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;CACF","file":"base.js","sourcesContent":["import type { EventHandler, EventParamsDefinition, EventType, IComposedEvent, IEventDispatcher } from '../interface';\nimport type { Maybe, RenderMode, ValueOf } from '../../typings';\nimport type { IChart } from '../../chart/interface';\n\nexport abstract class ComposedEvent implements IComposedEvent {\n  protected _eventMap: Map<string, EventHandler<ValueOf<EventParamsDefinition>>> = new Map<\n    string,\n    EventHandler<ValueOf<EventParamsDefinition>>\n  >();\n  protected _eventDispatcher: IEventDispatcher;\n  protected _mode: RenderMode;\n  protected _chart: Maybe<IChart>;\n\n  constructor(eventDispatcher: IEventDispatcher, mode: RenderMode) {\n    this._eventDispatcher = eventDispatcher;\n    this._mode = mode;\n\n    this._chart = this._eventDispatcher.globalInstance.getChart?.();\n  }\n\n  abstract register<Evt extends EventType>(eType: string, handler: EventHandler<EventParamsDefinition[Evt]>): void;\n  abstract unregister(): void;\n  abstract dispatch(v: unknown, opt: unknown): unknown;\n\n  protected _registerEvent<Evt extends EventType>(eType: Evt, handler: EventHandler<EventParamsDefinition[Evt]>) {\n    this._eventMap.set(eType, handler);\n    this._eventDispatcher.register(eType, handler);\n    return this._eventDispatcher;\n  }\n\n  protected _unregisterEvent<Evt extends EventType>(eType: Evt, handler?: EventHandler<EventParamsDefinition[Evt]>) {\n    // this._eventMap.delete(eType, handler);\n    this._eventDispatcher.register(eType, handler);\n    return this._eventDispatcher;\n  }\n}\n"]}