{"version":3,"sources":["../src/plugin/components/tooltip-handler/utils/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,cAAc,CAAC;AAOpD,MAAM,UAAU,UAAU,CAAC,KAAU;IACnC,OAAO,MAAM,CAAC,KAAK,CAAC;SACjB,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;SACtB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;SACrB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;SACrB,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;SACvB,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC/B,CAAC;AAGD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAAoB,EAAE,kBAA4B,EAAE,EAAE;IAC7E,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,CAAC,CAAC;KACV;IACD,IAAI,CAAC,kBAAkB,EAAE;QACvB,kBAAkB,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;KACtD;IACD,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;QAC3B,OAAO,kBAAkB,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC;KACvD;IACD,OAAO,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAY,EAAE,EAAE;IAC5C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,EAAE,MAAK,EAAE,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QACtE,OAAO,UAAU,CAAC,OAAO,CAAC,CAAC;KAC5B;IAED,OAAO,oBAAoB,CAAC;AAC9B,CAAC,CAAC","file":"common.js","sourcesContent":["import { isString, isNumber } from '@visactor/vutils';\nimport { TOOLTIP_EMPTY_STRING } from '../constants';\n\n/**\n * Escape special HTML characters.\n *\n * @param value A value to convert to string and HTML-escape.\n */\nexport function escapeHTML(value: any): string {\n  return String(value)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\(/g, '&#40;')\n    .replace(/  /g, ' &nbsp;'); // 转义符和真空格夹杂，在转义和正常换行之间取得平衡\n}\n\n/** 获取元素的绝对缩放因数（支持外部传入 boundingClientRect 提升性能） */\nexport const getScale = (element: HTMLElement, boundingClientRect?: DOMRect) => {\n  if (!element) {\n    return 1;\n  }\n  if (!boundingClientRect) {\n    boundingClientRect = element.getBoundingClientRect();\n  }\n  if (element.offsetWidth > 0) {\n    return boundingClientRect.width / element.offsetWidth;\n  }\n  return element.offsetHeight > 0 ? boundingClientRect.height / element.offsetHeight : 1;\n};\n\nexport const formatContent = (content: any) => {\n  if ((isString(content) && content?.trim() !== '') || isNumber(content)) {\n    return escapeHTML(content);\n  }\n\n  return TOOLTIP_EMPTY_STRING;\n};\n"]}