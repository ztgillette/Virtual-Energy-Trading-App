{"version":3,"sources":["../src/plugin/chart/media-query/util/filter.ts"],"names":[],"mappings":"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","file":"filter.js","sourcesContent":["import { array, isFunction, isNil } from '@visactor/vutils';\nimport type { IChartSpec } from '../../../../typings/spec/common';\n// eslint-disable-next-line no-duplicate-imports\nimport { Factory } from '../../../../core/factory';\nimport type {\n  IMediaQueryAction,\n  IMediaQueryActionFilterResult,\n  IMediaQueryCondition,\n  MediaQueryActionFilter,\n  MediaQueryActionFilterType\n} from '../interface';\nimport { SeriesTypeEnum } from '../../../../series/interface';\nimport { ComponentTypeEnum } from '../../../../component/interface';\nimport { includeSpec } from '@visactor/vutils-extension';\nimport type { MaybeArray } from '../../../../typings';\nimport type { IChartSpecInfo } from '../../../../chart/interface';\n\n/** 执行元素过滤器 */\nexport const executeMediaQueryActionFilter = <T extends Record<string, unknown>>(\n  filterType: MediaQueryActionFilterType = 'chart',\n  filter: MaybeArray<MediaQueryActionFilter<T>> | undefined,\n  action: IMediaQueryAction<T>,\n  query: IMediaQueryCondition,\n  chartSpec: any,\n  chartSpecInfo: IChartSpecInfo\n): IMediaQueryActionFilterResult => {\n  const result = executeMediaQueryActionFilterType<T>(filterType, chartSpec, chartSpecInfo);\n\n  return {\n    ...result,\n    modelInfo: result.modelInfo.filter(info => {\n      if (isNil(filter)) {\n        return true;\n      }\n      return array(filter).some(f => {\n        if (isFunction(f)) {\n          return f(info, action, query);\n        }\n        // spec 模糊匹配\n        return includeSpec(info.spec, f);\n      });\n    })\n  };\n};\n\n/** 执行元素过滤器的 filterType 部分的筛选 */\nexport const executeMediaQueryActionFilterType = <T extends Record<string, unknown>>(\n  filterType: MediaQueryActionFilterType = 'chart',\n  chartSpec: any,\n  chartSpecInfo: IChartSpecInfo\n): IMediaQueryActionFilterResult<T> => {\n  const result: IMediaQueryActionFilterResult<T> = {\n    modelInfo: []\n  };\n\n  if (filterType === 'chart') {\n    result.isChart = true;\n    result.modelInfo.push({\n      spec: chartSpec,\n      type: 'chart'\n    });\n  } else if (filterType === 'region') {\n    result.modelType = 'region';\n    result.specKey = 'region';\n\n    chartSpec.region?.forEach((regionSpec: T, i: number) => {\n      result.modelInfo.push({\n        spec: regionSpec,\n        specPath: ['region', i],\n        type: 'region'\n      });\n    });\n  } else if (filterType === 'series') {\n    result.modelType = 'series';\n    result.specKey = 'series';\n\n    chartSpec.series?.forEach((seriesSpec: T, i: number) => {\n      result.modelInfo.push({\n        spec: seriesSpec,\n        specPath: ['series', i],\n        type: seriesSpec.type as string\n      });\n    });\n  } else if (Object.values(SeriesTypeEnum).includes(filterType as SeriesTypeEnum)) {\n    result.modelType = 'series';\n    result.specKey = 'series';\n    result.type = filterType as SeriesTypeEnum;\n\n    chartSpec.series?.forEach((seriesSpec: T, i: number) => {\n      if (seriesSpec.type === filterType) {\n        result.modelInfo.push({\n          spec: seriesSpec,\n          specPath: ['series', i],\n          type: filterType\n        });\n      }\n    });\n  } else if (Object.values(ComponentTypeEnum).includes(filterType as ComponentTypeEnum)) {\n    result.modelType = 'component';\n    result.type = filterType as ComponentTypeEnum;\n    result.specKey = Factory.getComponentInKey(filterType)?.specKey as keyof IChartSpec;\n\n    const { specKey } = result;\n    const infoList = array(chartSpecInfo.component?.[specKey] ?? []);\n    array(chartSpec[specKey] ?? [])?.forEach((componentSpec, i) => {\n      const specInfo = infoList[i];\n\n      if (specInfo && specInfo.type === filterType) {\n        result.modelInfo.push({\n          ...specInfo,\n          spec: componentSpec\n        });\n      } else if (componentSpec && componentSpec.visible === false) {\n        result.modelInfo.push({\n          type: filterType,\n          spec: componentSpec\n        });\n      }\n    });\n  } else {\n    // 根据 specKey 进行匹配\n    const componentTypes = Factory.getComponents()\n      .filter(({ cmp }) => cmp.specKey === filterType)\n      .map(({ cmp }) => cmp.type);\n    if (componentTypes.length > 0) {\n      result.modelType = 'component';\n      const specKey = filterType as keyof IChartSpec;\n      result.specKey = specKey;\n\n      const infoList = array(chartSpecInfo.component?.[specKey] ?? []);\n      array(chartSpec[specKey] ?? []).forEach((componentSpec, i) => {\n        const specInfo = infoList[i];\n        if (specInfo && componentTypes.includes(specInfo.type as ComponentTypeEnum)) {\n          result.modelInfo.push({\n            ...specInfo,\n            spec: componentSpec\n          });\n        }\n      });\n    }\n  }\n\n  return result;\n};\n"]}