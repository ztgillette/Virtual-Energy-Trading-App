{"version":3,"sources":["../src/component/axis/polar/interface/common.ts"],"names":[],"mappings":"","file":"common.js","sourcesContent":["import type { IBaseScale } from '@visactor/vscale';\nimport type { IPoint, IPolarOrientType, IPolarPoint } from '../../../../typings';\nimport type { IAxis, IGrid } from '../../interface';\nimport type { ICompilableData } from '../../../../compile/data/interface';\n\nexport type IPolarGrid = IGrid & {\n  /**\n   * smooth 为 true 时，为圆形 grid，为 false 则为多边形 grid\n   * @default false\n   */\n  smooth?: boolean;\n};\nexport interface IPolarAxisHelper {\n  // axis is continuous\n  isContinuous: boolean;\n\n  dataToPosition: (values: any, cfg?: any) => number;\n  coordToPoint: (point: IPolarPoint) => IPoint;\n  pointToCoord: (point: IPoint) => IPolarPoint;\n  center: () => IPoint;\n  layoutRadius: () => number;\n\n  getScale: (depth?: number) => IBaseScale;\n  getBandwidth?: (depth?: number) => number; // band轴特有\n  getAxisId: () => number;\n  // 用户其他模块扩充轴scale的区间\n  setExtendDomain?: (key: string, value: number | undefined) => void;\n}\n\nexport interface IPolarAxis extends IAxis {\n  startAngle: number;\n  endAngle: number;\n\n  // 为了与直角坐标系轴对齐，这里也通过 orient 来区别 angle/radius 轴\n  getOrient: () => IPolarOrientType;\n  getScale: () => IBaseScale;\n  // tickValues: () => number[];\n  getCenter: () => IPoint;\n  getOuterRadius: () => number;\n  getInnerRadius: () => number;\n  dataToPosition: (values: any[]) => number;\n  positionToData: (position: IPoint) => any;\n  getTickData: () => ICompilableData;\n  // 将半径和角度转换为笛卡尔坐标点\n  coordToPoint: (point: IPolarPoint) => IPoint;\n  pointToCoord: (point: IPoint) => IPolarPoint;\n}\n"]}