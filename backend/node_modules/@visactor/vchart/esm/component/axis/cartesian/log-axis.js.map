{"version":3,"sources":["../src/component/axis/cartesian/log-axis.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AACvF,OAAO,EAAE,gCAAgC,EAAE,MAAM,wBAAwB,CAAC;AAG1E,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,0DAA0D,CAAC;AACtF,OAAO,EAAE,UAAU,EAAE,MAAM,0DAA0D,CAAC;AACtF,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,6DAA6D,CAAC;AAM3F,MAAM,OAAO,gBAA0E,SAAQ,mBAAsB;IAArH;;QAEE,SAAI,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;QAUhC,UAAK,GAAY,KAAK,CAAC;QAEvB,WAAM,GAAa,IAAI,QAAQ,EAAE,CAAC;IAsB9C,CAAC;IAhBW,UAAU;;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAA,IAAI,CAAC,KAAK,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAES,sBAAsB;QAC9B,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC;QAClC,gCAAgC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;QAE9E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oBAAoB;IAEpB,CAAC;;AAlCM,qBAAI,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;AAG1C,wBAAO,GAAG,MAAM,CAAC;AACR,6BAAY,GAAG;IAC7B,IAAI,EAAE,UAAU;IAChB,UAAU;IACV,KAAK;IACL,KAAK;CACN,CAAC;AA4BJ,KAAK,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;AAEzC,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,OAAO,CAAC,wBAAwB,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,KAAU,EAAE,OAAgC,EAAE,EAAE;QACnG,OAAO,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAsB,CAAC;IAC3D,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,wBAAwB,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,KAAU,EAAE,OAAgC,EAAE,EAAE;QACvG,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,OAAO,CAAsB,CAAC;IAC/D,CAAC,CAAC,CAAC;IACH,YAAY,EAAE,CAAC;IACf,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACrE,CAAC,CAAC","file":"log-axis.js","sourcesContent":["import { CartesianLinearAxis } from './linear-axis';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport { LogScale } from '@visactor/vscale';\nimport { mixin } from '@visactor/vutils';\nimport type { ICartesianLogAxisSpec } from './interface';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\nimport { continuousTicks, LineAxis, LineAxisGrid } from '@visactor/vrender-components';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\nimport type { VRenderComponentOptions } from '../../../core/interface';\nimport type { IGroup } from '@visactor/vrender-core';\nimport { AxisEnum, GridEnum } from '../interface';\nimport { commonAxis } from '../../../theme/builtin/common/component/axis/common-axis';\nimport { axisLinear } from '../../../theme/builtin/common/component/axis/linear-axis';\nimport { axisX, axisY } from '../../../theme/builtin/common/component/axis/cartesian-axis';\n\nexport interface CartesianLogAxis<T extends ICartesianLogAxisSpec = ICartesianLogAxisSpec>\n  extends Pick<LinearAxisMixin, 'valueToPosition'>,\n    CartesianLinearAxis<T> {}\n\nexport class CartesianLogAxis<T extends ICartesianLogAxisSpec = ICartesianLogAxisSpec> extends CartesianLinearAxis<T> {\n  static type = ComponentTypeEnum.cartesianLogAxis;\n  type = ComponentTypeEnum.cartesianLogAxis;\n\n  static specKey = 'axes';\n  static readonly builtInTheme = {\n    axis: commonAxis,\n    axisLinear,\n    axisX,\n    axisY\n  };\n\n  protected _zero: boolean = false;\n\n  protected _scale: LogScale = new LogScale();\n  protected declare _scales: LogScale[];\n\n  /**\n   * @override\n   */\n  protected initScales() {\n    super.initScales();\n    this._scale.base(this._spec.base ?? 10);\n    this._scale.clamp(true, null, false);\n  }\n\n  protected registerTicksTransform() {\n    const name = `${this.type}-ticks`;\n    registerDataSetInstanceTransform(this._option.dataSet, name, continuousTicks);\n\n    return name;\n  }\n\n  transformScaleDomain() {\n    // do nothing\n  }\n}\n\nmixin(CartesianLogAxis, LinearAxisMixin);\n\nexport const registerCartesianLogAxis = () => {\n  Factory.registerGraphicComponent(AxisEnum.lineAxis, (attrs: any, options: VRenderComponentOptions) => {\n    return new LineAxis(attrs, options) as unknown as IGroup;\n  });\n  Factory.registerGraphicComponent(GridEnum.lineAxisGrid, (attrs: any, options: VRenderComponentOptions) => {\n    return new LineAxisGrid(attrs, options) as unknown as IGroup;\n  });\n  registerAxis();\n  Factory.registerComponent(CartesianLogAxis.type, CartesianLogAxis);\n};\n"]}