{"version":3,"sources":["../src/component/axis/cartesian/linear-axis.ts"],"names":[],"mappings":"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","file":"linear-axis.js","sourcesContent":["import type { LogScale } from '@visactor/vscale';\n// eslint-disable-next-line no-duplicate-imports\nimport { LinearScale } from '@visactor/vscale';\nimport { CartesianAxis } from './axis';\nimport { isValid, isValidNumber, last, mixin } from '@visactor/vutils';\nimport type { IAxisHelper, ICartesianAxisCommonTheme, ICartesianLinearAxisSpec } from './interface';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\nimport type { ICartesianTickDataOpt } from '@visactor/vrender-components';\nimport { continuousTicks, LineAxis, LineAxisGrid } from '@visactor/vrender-components';\nimport { isXAxis, isZAxis } from './util';\nimport { combineDomains, isPercent } from '../../../util';\nimport type { VRenderComponentOptions } from '../../../core/interface';\nimport type { IGroup } from '@visactor/vrender-core';\nimport { AxisEnum, GridEnum } from '../interface';\nimport { axisLinear } from '../../../theme/builtin/common/component/axis/linear-axis';\nimport { axisX, axisY } from '../../../theme/builtin/common/component/axis/cartesian-axis';\nimport { commonAxis } from '../../../theme/builtin/common/component/axis/common-axis';\n\nexport interface CartesianLinearAxis<T extends ICartesianLinearAxisSpec = ICartesianLinearAxisSpec>\n  extends Pick<\n      LinearAxisMixin,\n      | 'setExtraAttrFromSpec'\n      | 'computeLinearDomain'\n      | 'valueToPosition'\n      | 'setScaleNice'\n      | '_domain'\n      | 'transformScaleDomain'\n      | 'setExtendDomain'\n      | '_break'\n    >,\n    CartesianAxis<T> {}\n\nexport class CartesianLinearAxis<\n  T extends ICartesianLinearAxisSpec = ICartesianLinearAxisSpec\n> extends CartesianAxis<T> {\n  static type = ComponentTypeEnum.cartesianLinearAxis;\n  type = ComponentTypeEnum.cartesianLinearAxis;\n\n  static specKey = 'axes';\n  static readonly builtInTheme: Record<string, ICartesianAxisCommonTheme> = {\n    axis: commonAxis,\n    axisLinear,\n    axisX,\n    axisY\n  };\n\n  protected _zero: boolean = true;\n  protected _nice: boolean = true;\n  protected _extend: { [key: string]: number } = {};\n\n  protected _scale: LinearScale | LogScale = new LinearScale();\n  protected declare _scales: LinearScale[] | LogScale[];\n\n  setAttrFromSpec(): void {\n    super.setAttrFromSpec();\n    this.setExtraAttrFromSpec();\n    const tickTransform = this._tickData?.[0]\n      ?.getDataView()\n      .transformsArr.find(t => t.type === this.registerTicksTransform());\n    tickTransform && (tickTransform.options = this._tickTransformOption());\n  }\n\n  /**\n   * @override\n   */\n  protected initScales() {\n    super.initScales();\n    const range = [0, 1];\n    if (isValid(this._domain?.min)) {\n      range[0] = this._domain.min;\n    }\n    if (isValid(this._domain?.max)) {\n      range[1] = this._domain.max;\n    }\n    this._scale.domain(range);\n    // this.setScaleNice();\n  }\n\n  protected _tickTransformOption() {\n    return {\n      ...super._tickTransformOption(),\n      breakData: this._spec.breaks?.length ? () => this._break : null\n    } as ICartesianTickDataOpt;\n  }\n\n  protected _getUpdateAttribute(ignoreGrid: boolean) {\n    const attrs = super._getUpdateAttribute(ignoreGrid);\n\n    // get axis break configuration\n    if (!isZAxis(this._orient) && this._break?.breaks?.length) {\n      const { width, height } = this.getLayoutRect();\n      const isX = isXAxis(this._orient);\n      const axisLength = isX ? width : height;\n\n      attrs.breaks = this._break.breaks.map(obj => {\n        const { range, breakSymbol, gap = 6 } = obj;\n        const position = this.valueToPosition((range[0] + range[1]) / 2);\n        const ratio = position / axisLength;\n\n        let gapRatio;\n        if (isPercent(gap)) {\n          gapRatio = Number(gap.substring(0, gap.length - 1)) / 100;\n        } else {\n          gapRatio = (gap as number) / axisLength;\n        }\n        const symbolAngle = isValidNumber(breakSymbol?.angle) ? breakSymbol.angle : isX ? 60 : 15;\n\n        return {\n          range: [ratio - gapRatio / 2, ratio + gapRatio / 2],\n          breakSymbol: {\n            visible: true,\n            ...breakSymbol,\n            angle: (symbolAngle * Math.PI) / 180\n          },\n          rawRange: range\n        };\n      });\n    }\n\n    return attrs;\n  }\n\n  protected getNewScaleRange() {\n    let newRange = super.getNewScaleRange();\n    if (this._spec.breaks?.length && this._break?.scope) {\n      // get axis breaks\n      newRange = combineDomains(this._break.scope).map(val => newRange[0] + (last(newRange) - newRange[0]) * val);\n    }\n\n    return newRange;\n  }\n\n  protected computeDomain(data: { min: number; max: number; values: any[] }[]): number[] {\n    return this.computeLinearDomain(data);\n  }\n\n  protected axisHelper() {\n    const helper: IAxisHelper = super.axisHelper();\n    helper.setExtendDomain = this.setExtendDomain.bind(this);\n    helper.valueToPosition = this.valueToPosition.bind(this);\n    return helper;\n  }\n\n  protected registerTicksTransform() {\n    const name = `${this.type}-ticks`;\n    registerDataSetInstanceTransform(this._option.dataSet, name, continuousTicks);\n\n    return name;\n  }\n}\n\nmixin(CartesianLinearAxis, LinearAxisMixin);\n\nexport const registerCartesianLinearAxis = () => {\n  Factory.registerGraphicComponent(AxisEnum.lineAxis, (attrs: any, options: VRenderComponentOptions) => {\n    return new LineAxis(attrs, options) as unknown as IGroup;\n  });\n  Factory.registerGraphicComponent(GridEnum.lineAxisGrid, (attrs: any, options: VRenderComponentOptions) => {\n    return new LineAxisGrid(attrs, options) as unknown as IGroup;\n  });\n  registerAxis();\n  Factory.registerComponent(CartesianLinearAxis.type, CartesianLinearAxis);\n};\n"]}