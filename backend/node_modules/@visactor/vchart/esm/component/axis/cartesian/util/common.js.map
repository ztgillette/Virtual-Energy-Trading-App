{"version":3,"sources":["../src/component/axis/cartesian/util/common.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import type { IOrientType } from '../../../../typings';\n// eslint-disable-next-line no-duplicate-imports\nimport { Direction } from '../../../../typings/space';\nimport { isValid } from '@visactor/vutils';\nimport { isValidOrient } from '../../../../util/space';\nimport type { ICartesianAxisCommonSpec } from '../interface';\nimport { ComponentTypeEnum } from '../../../interface';\nimport type { AxisType } from '../../interface/common';\nimport { getComponentThemeFromOption } from '../../../util';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport function isXAxis(orient: IOrientType) {\n  return orient === 'bottom' || orient === 'top';\n}\n\nexport function isYAxis(orient: IOrientType) {\n  return orient === 'left' || orient === 'right';\n}\n\nexport function isZAxis(orient: IOrientType) {\n  return orient === 'z';\n}\n\n// 自动推断轴类型，现在根据orient来判断\n// TODO：后续可以根据数据特征推断\nexport function autoAxisType(orient: IOrientType, isHorizontal: boolean) {\n  if (isHorizontal) {\n    return isXAxis(orient) ? 'linear' : 'band';\n  }\n  return isXAxis(orient) ? 'band' : 'linear';\n}\n\nexport function getOrient(spec: ICartesianAxisCommonSpec, whiteList?: string[]): IOrientType {\n  return isValidOrient(spec.orient) || (whiteList && whiteList.includes(spec.orient)) ? spec.orient : 'left';\n}\n\nexport function getDirectionByOrient(orient: IOrientType) {\n  return orient === 'top' || orient === 'bottom' ? Direction.horizontal : Direction.vertical;\n}\n\nexport function isOrientInSameDirection(orient1: IOrientType, orient2: IOrientType) {\n  return getDirectionByOrient(orient1) === getDirectionByOrient(orient2);\n}\n\nexport function transformInverse(spec: ICartesianAxisCommonSpec, isHorizontal: boolean) {\n  // 这里处理下 direction === 'horizontal' 下的 Y 轴\n  // 因为 Y 轴绘制的时候默认是从下至上绘制的，但是在 direction === 'horizontal' 场景下，图表应该是按照从上至下阅读的\n  // 所以这里在这种场景下坐标轴会默认 inverse 已达到效果\n  let inverse = spec.inverse;\n  if (isHorizontal && !isXAxis(spec.orient)) {\n    inverse = isValid(spec.inverse) ? !spec.inverse : true;\n  }\n  return inverse;\n}\n\nexport function getCartesianAxisInfo(spec: ICartesianAxisCommonSpec, isHorizontal?: boolean) {\n  const axisType = spec.type ?? autoAxisType(spec.orient, isHorizontal);\n  const componentName = `${ComponentTypeEnum.cartesianAxis}-${axisType}`;\n  return { axisType, componentName };\n}\n\nexport const getCartesianAxisTheme = (orient: IOrientType, type: AxisType, getTheme: (...keys: string[]) => any) => {\n  const axisTypeTheme =\n    (type === 'band'\n      ? getComponentThemeFromOption('axisBand', getTheme)\n      : (['linear', 'log', 'symlog'] as AxisType[]).includes(type)\n      ? getComponentThemeFromOption('axisLinear', getTheme)\n      : {}) ?? {};\n  const axisTheme = isXAxis(orient)\n    ? getComponentThemeFromOption('axisX', getTheme)\n    : isYAxis(orient)\n    ? getComponentThemeFromOption('axisY', getTheme)\n    : getComponentThemeFromOption('axisZ', getTheme);\n  return mergeSpec({}, getComponentThemeFromOption('axis', getTheme), axisTypeTheme, axisTheme);\n};\n"]}