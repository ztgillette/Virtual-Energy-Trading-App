import { CartesianLinearAxis } from "./linear-axis";

import { ComponentTypeEnum } from "../../interface/type";

import { LinearAxisMixin } from "../mixin/linear-axis-mixin";

import { SymlogScale } from "@visactor/vscale";

import { mixin } from "@visactor/vutils";

import { Factory } from "../../../core/factory";

import { registerAxis } from "../base-axis";

import { continuousTicks, LineAxis, LineAxisGrid } from "@visactor/vrender-components";

import { registerDataSetInstanceTransform } from "../../../data/register";

import { AxisEnum, GridEnum } from "../interface/common";

import { commonAxis } from "../../../theme/builtin/common/component/axis/common-axis";

import { axisLinear } from "../../../theme/builtin/common/component/axis/linear-axis";

import { axisX, axisY } from "../../../theme/builtin/common/component/axis/cartesian-axis";

export class CartesianSymlogAxis extends CartesianLinearAxis {
    constructor() {
        super(...arguments), this.type = ComponentTypeEnum.cartesianSymlogAxis, this._zero = !1, 
        this._scale = new SymlogScale;
    }
    initScales() {
        var _a;
        super.initScales(), this._scale.constant(null !== (_a = this._spec.constant) && void 0 !== _a ? _a : 10);
    }
    registerTicksTransform() {
        const name = `${this.type}-ticks`;
        return registerDataSetInstanceTransform(this._option.dataSet, name, continuousTicks), 
        name;
    }
    transformScaleDomain() {}
}

CartesianSymlogAxis.type = ComponentTypeEnum.cartesianSymlogAxis, CartesianSymlogAxis.specKey = "axes", 
CartesianSymlogAxis.builtInTheme = {
    axis: commonAxis,
    axisLinear: axisLinear,
    axisX: axisX,
    axisY: axisY
}, mixin(CartesianSymlogAxis, LinearAxisMixin);

export const registerCartesianSymlogAxis = () => {
    Factory.registerGraphicComponent(AxisEnum.lineAxis, ((attrs, options) => new LineAxis(attrs, options))), 
    Factory.registerGraphicComponent(GridEnum.lineAxisGrid, ((attrs, options) => new LineAxisGrid(attrs, options))), 
    registerAxis(), Factory.registerComponent(CartesianSymlogAxis.type, CartesianSymlogAxis);
};
//# sourceMappingURL=symlog-axis.js.map
