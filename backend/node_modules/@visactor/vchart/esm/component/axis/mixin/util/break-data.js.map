{"version":3,"sources":["../src/component/axis/mixin/util/break-data.ts"],"names":[],"mappings":"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","file":"break-data.js","sourcesContent":["import { isEqual } from '@visactor/vutils';\n\nconst setDomain = (min: number, max: number, breaks: number[]): [number, number][] =>\n  breaks.reduce(\n    (r, b, i) => {\n      r.push([b, breaks.length === i + 1 ? max : breaks[i + 1]]);\n      return r;\n    },\n    [[min, breaks[0]]]\n  );\n\nfunction breakDomain(data: number[], points: number[]): [number, number][] {\n  // 默认数据已经排序\n  const min = data[0];\n  const max = data[data.length - 1];\n  const breaks = points.filter(point => point > min && point < max);\n  if (breaks.length === 0) {\n    return [[min, max]];\n  }\n\n  return setDomain(min, max, breaks);\n}\n\nconst sorter = (a: number, b: number) => a - b;\n\nconst fillBins = (data: number[], points: number[]) => {\n  const bins: Array<{ count: number; sub: number[]; max: number; min: number }> = [\n    { count: 0, sub: [], max: points[0], min: points[0] }\n  ];\n  let i = 0;\n  let j = 0;\n  while (i < points.length) {\n    if (data[j] <= points[i]) {\n      bins[i].count += 1;\n      bins[i].sub.push(data[j]);\n      j += 1;\n    } else {\n      i += 1;\n      bins[i] = { count: 0, sub: [], max: points[i], min: points[i] };\n    }\n  }\n  bins.forEach(bin => {\n    if (bin.count) {\n      bin.min = Math.min.apply(null, bin.sub);\n    }\n  });\n\n  const remain = data.slice(j);\n  bins[i] = { count: remain.length, sub: remain, min: points[points.length - 1], max: Math.max.apply(null, remain) };\n  return bins;\n};\n\nfunction breakScope(data: number[], points: number[], scopeType: 'count' | 'length' = 'count'): [number, number][] {\n  // 默认 data 和 points 已经排序\n  const bins = fillBins(data, points);\n\n  const totalLength =\n    scopeType === 'count'\n      ? data.length\n      : bins.reduce((res, bin, i) => {\n          return bin.count > 0 ? res + bin.max - bin.min : res;\n        }, 0);\n  const res: [number, number][] = [];\n  let acc = 0;\n\n  let resIndex = 0; // 因为有的结果会被剔除，所以要从 res 的真实索引上拿\n  bins.forEach((bin, i) => {\n    if (totalLength === 0) {\n      res.push([0, i / bins.length - 1]);\n    } else {\n      const length = scopeType === 'count' ? bin.count : bin.max - bin.min;\n      const b0 = res[resIndex - 1] ? res[resIndex - 1][1] : 0;\n      const b1 = i === bins.length - 1 ? 1 : Math.min((acc + length) / totalLength, 1);\n\n      if (b0 === b1 && (b0 === 0 || b0 === 1)) {\n      } else {\n        resIndex += 1;\n        res.push([b0, b1]);\n        acc += length;\n      }\n    }\n  });\n\n  return res;\n}\n\nexport function breakData(data: number[], points: number[], scopeType?: 'count' | 'length') {\n  // 现将数据和断点排序\n  data.sort(sorter);\n  points.sort(sorter);\n\n  return {\n    domain: breakDomain(data, points),\n    scope: breakScope(data, points, scopeType)\n  };\n}\n"]}