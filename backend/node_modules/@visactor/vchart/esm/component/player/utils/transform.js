import { transformToGraphic } from "../../../util/style";

const rectToAttribute = markSpec => {
    const result = Object.assign({}, markSpec);
    return transformToGraphic(result);
}, symbolToAttribute = markSpec => {
    const result = Object.assign({}, markSpec);
    return transformToGraphic(result);
}, baseToAttribute = spec => Object.assign(Object.assign({}, spec), {
    style: Object.assign({}, transformToGraphic(spec.style))
}), transformToAttrs = spec => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const trackStyle = rectToAttribute(null !== (_b = null === (_a = null == spec ? void 0 : spec.slider) || void 0 === _a ? void 0 : _a.trackStyle) && void 0 !== _b ? _b : {}), railStyle = rectToAttribute(null !== (_d = null === (_c = null == spec ? void 0 : spec.slider) || void 0 === _c ? void 0 : _c.railStyle) && void 0 !== _d ? _d : {}), handlerStyle = symbolToAttribute(null !== (_f = null === (_e = null == spec ? void 0 : spec.slider) || void 0 === _e ? void 0 : _e.handlerStyle) && void 0 !== _f ? _f : {}), start = baseToAttribute(null !== (_h = null === (_g = null == spec ? void 0 : spec.controller) || void 0 === _g ? void 0 : _g.start) && void 0 !== _h ? _h : {}), pause = baseToAttribute(null !== (_k = null === (_j = null == spec ? void 0 : spec.controller) || void 0 === _j ? void 0 : _j.pause) && void 0 !== _k ? _k : {}), backward = baseToAttribute(null !== (_m = null === (_l = null == spec ? void 0 : spec.controller) || void 0 === _l ? void 0 : _l.backward) && void 0 !== _m ? _m : {}), forward = baseToAttribute(null !== (_p = null === (_o = null == spec ? void 0 : spec.controller) || void 0 === _o ? void 0 : _o.forward) && void 0 !== _p ? _p : {}), attrs = Object.assign(Object.assign({}, spec), {
        direction: spec.direction,
        interval: spec.interval,
        visible: spec.visible,
        orient: null !== (_q = spec.orient) && void 0 !== _q ? _q : "bottom",
        slider: Object.assign(Object.assign({}, spec.slider), {
            trackStyle: trackStyle,
            railStyle: railStyle,
            handlerStyle: handlerStyle
        }),
        controller: Object.assign(Object.assign({}, spec.controller), {
            start: start,
            pause: pause,
            backward: backward,
            forward: forward
        })
    });
    return spec.visible || (attrs.controller.visible = !1, attrs.slider.visible = !1), 
    attrs;
};

export const transformContinuousSpecToAttrs = (spec, data) => Object.assign(Object.assign({}, transformToAttrs(spec)), {
    data: data,
    type: "continuous"
});

export const transformDiscreteSpecToAttrs = (spec, data) => Object.assign(Object.assign({}, transformToAttrs(spec)), {
    data: data,
    type: "discrete"
});
//# sourceMappingURL=transform.js.map
