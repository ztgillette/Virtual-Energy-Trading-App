{"version":3,"sources":["../src/component/geo/geo-coordinate.ts"],"names":[],"mappings":"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","file":"geo-coordinate.js","sourcesContent":["import { LayoutZIndex } from './../../constant/layout';\n/* eslint-disable no-duplicate-imports */\nimport type { IPoint } from '../../typings/coordinate';\nimport { Projection } from './projection';\nimport type { IEffect, IModelRenderOption, IModelSpecInfo } from '../../model/interface';\nimport { ComponentTypeEnum } from '../interface/type';\nimport { BaseComponent } from '../base/base-component';\nimport type { IGeoRegionSpec, IRegion, RegionSpec } from '../../region/interface';\nimport { eachSeries } from '../../util/model';\nimport { mergeSpec } from '@visactor/vutils-extension';\nimport { ChartEvent } from '../../constant/event';\nimport { PREFIX } from '../../constant/base';\nimport type { ICartesianSeries, IGeoSeries } from '../../series/interface';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport type { IGeoCoordinate, IGeoCoordinateHelper, IGeoCoordinateSpec, IProjectionSpec } from './interface';\nimport type { BaseEventParams, ExtendEventParam, PanEventParam, ZoomEventParam } from '../../event/interface';\nimport type { StringOrNumber } from '../../typings';\nimport type { IZoomable, ZoomEventParams } from '../../interaction/zoom/zoomable';\nimport { Zoomable } from '../../interaction/zoom/zoomable';\nimport { isValid, mixin, isNil, Matrix, isEqual } from '@visactor/vutils';\nimport type { Maybe } from '@visactor/vutils';\nimport { DEFAULT_MAP_LOOK_UP_KEY } from '../../data/transforms/map';\nimport { Factory } from '../../core/factory';\nimport type { IGraphic } from '@visactor/vrender-core';\nimport type { MapSeries } from '../../series';\n\nexport function projectionName(key: string, id: number) {\n  return `${PREFIX}_${id}_${key}`;\n}\nexport class GeoCoordinate extends BaseComponent<IGeoRegionSpec> implements IGeoCoordinate {\n  static type = ComponentTypeEnum.geoCoordinate;\n  type = ComponentTypeEnum.geoCoordinate;\n  name: string = ComponentTypeEnum.geoCoordinate;\n\n  layoutType: 'none' = 'none';\n  protected layoutZIndex: number = LayoutZIndex.Mark;\n\n  _longitudeField?: string;\n  get longitudeField() {\n    return this._longitudeField;\n  }\n\n  _latitudeField?: string;\n  get latitudeField() {\n    return this._latitudeField;\n  }\n\n  protected _projectionSpec: IProjectionSpec = {\n    name: projectionName(this.type, this.id),\n    type: 'mercator'\n  };\n  get projectionSpec() {\n    return this._projectionSpec;\n  }\n  setProjection(projectionSpec: IGeoCoordinateSpec['projection']) {\n    this._projectionSpec = {\n      ...projectionSpec,\n      name: this._projectionSpec.name\n    };\n  }\n\n  protected _projection!: Projection;\n\n  protected _centerCache: Map<StringOrNumber, { x: number; y: number }>;\n\n  private _actualScale = 1;\n\n  getZoom() {\n    return this._actualScale;\n  }\n\n  private _initialScale = 1;\n\n  static getSpecInfo(chartSpec: any): Maybe<IModelSpecInfo[]> {\n    if (isNil(chartSpec)) {\n      return null;\n    }\n    const specInfos: IModelSpecInfo[] = [];\n    chartSpec.region.forEach((r: RegionSpec, i: number) => {\n      if (r.coordinate === 'geo') {\n        // 去除 padding 配置，避免重复计算\n        const spec = { ...r, padding: 0 };\n        specInfos.push({\n          spec,\n          regionIndex: i,\n          type: ComponentTypeEnum.geoCoordinate,\n          specInfoPath: ['component', 'geoCoordinate', i]\n        } as any);\n      }\n    });\n    return specInfos;\n  }\n\n  effect: IEffect = {\n    scaleUpdate: () => {\n      this.coordinateHelper();\n    }\n  };\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n\n    if (this._spec.roam) {\n      (this as unknown as IZoomable).initZoomable(this.event, this._option.mode);\n    }\n\n    this._projectionSpec = mergeSpec(this._projectionSpec, this._spec.projection);\n    if (this._projectionSpec.zoom > this._spec.zoomLimit?.max) {\n      this._projectionSpec.zoom = this._spec.zoomLimit.max;\n    }\n    if (this._projectionSpec.zoom < this._spec.zoomLimit?.min) {\n      this._projectionSpec.zoom = this._spec.zoomLimit.min;\n    }\n\n    this._actualScale = this._projectionSpec.zoom ?? 1;\n    this._initialScale = this._actualScale;\n    this._longitudeField = this._spec.longitudeField;\n    this._latitudeField = this._spec.latitudeField;\n  }\n\n  // life cycle\n  created() {\n    super.created();\n    this._regions = this._option.getRegionsInIndex([(this._option as any).regionIndex]);\n    this.initProjection();\n    this.coordinateHelper();\n    this.initEvent();\n    this._initCenterCache();\n    // FIXME: 这里是在开启缩放时，处理关联的symbol等mark，在地图缩放时应该同步缩放\n    // this.rescaleMark();\n  }\n\n  private _handleChartZoom = (params: ZoomEventParams, event?: BaseEventParams['event']) => {\n    let scale = params.zoomDelta;\n    // check if the next scale will outrange\n    const _lastActualScale = this._actualScale;\n    this._actualScale *= scale;\n    if (this._actualScale < this._spec.zoomLimit?.min) {\n      this._actualScale = this._spec.zoomLimit?.min;\n      scale = this._spec.zoomLimit?.min / _lastActualScale;\n    } else if (this._actualScale > this._spec.zoomLimit?.max) {\n      this._actualScale = this._spec.zoomLimit?.max;\n      scale = this._spec.zoomLimit?.max / _lastActualScale;\n    }\n    this.zoom(scale, [params.zoomX, params.zoomY]);\n    return { scale, totalScale: this._actualScale };\n  };\n\n  dispatchZoom(zoomDelta: number, center?: { x: number; y: number }) {\n    const scaleCenter = center || {\n      x: this.getLayoutStartPoint().x + this.getLayoutRect().width / 2,\n      y: this.getLayoutStartPoint().y + this.getLayoutRect().height / 2\n    };\n    const { scale, totalScale } = this._handleChartZoom({ zoomDelta, zoomX: scaleCenter.x, zoomY: scaleCenter.y });\n    if (scale !== 1) {\n      this.event.emit('zoom', {\n        scale,\n        scaleCenter,\n        totalScale,\n        model: this\n      } as unknown as ExtendEventParam);\n    }\n  }\n\n  initEvent() {\n    this.event.on(\n      ChartEvent.scaleUpdate,\n      { filter: ({ model }) => model?.id === this.id },\n      this.effect.scaleUpdate.bind(this)\n    );\n\n    const { roam } = this._spec;\n    if (roam) {\n      (this as unknown as IZoomable).initZoomEventOfRegions(this._regions, null, this._handleChartZoom);\n      (this as unknown as IZoomable).initDragEventOfRegions(\n        this._regions,\n        (roam as any).blank ? null : () => true,\n        this.pan\n      );\n\n      this._regions.forEach(r => {\n        r.getSeries().forEach(s => {\n          s.event.on('zoom', e => {\n            s.handleZoom(e as ZoomEventParam);\n            return true;\n          });\n\n          s.event.on('panmove', e => {\n            s.handlePan(e as PanEventParam);\n            return true;\n          });\n        });\n      });\n    }\n  }\n\n  initProjection() {\n    this._projection = new Projection(this._projectionSpec);\n    if (this._projection.projection === null) {\n      this._option?.onError('unsupported projection type!');\n      return;\n    }\n  }\n\n  coordinateHelper() {\n    const helper: IGeoCoordinateHelper = {\n      longitudeField: this._longitudeField,\n      latitudeField: this._latitudeField,\n      dataToPosition: this.dataToPosition.bind(this),\n      dataToLongitude: this.dataToLongitude.bind(this),\n      dataToLatitude: this.dataToLatitude.bind(this),\n      shape: this.shape.bind(this),\n      getCoordinateId: () => this.id\n    };\n\n    this._regions.forEach(r => {\n      r.getSeries().forEach(s => {\n        if (s.type === SeriesTypeEnum.map || s.type === SeriesTypeEnum.pictogram) {\n          (s as IGeoSeries).setCoordinateHelper(helper);\n        } else {\n          // 散点地图\n          (s as ICartesianSeries).setXAxisHelper({\n            ...helper,\n            isContinuous: true,\n            dataToPosition: (values: any[], option) => {\n              let value = values[0];\n              if (isNil(value) && option?.datum) {\n                const nameFieldValue = option.datum[(s as ICartesianSeries).getDimensionField()[0]];\n                value = this._centerCache.get(nameFieldValue)?.x;\n              }\n              return this.dataToLongitude(value);\n            },\n            valueToPosition: (value: any, option) => {\n              if (isNil(value) && option?.datum) {\n                const nameFieldValue = option.datum[(s as ICartesianSeries).getDimensionField()[0]];\n                value = this._centerCache.get(nameFieldValue)?.x;\n              }\n              return this.dataToLongitude(value);\n            },\n            getFields: () => [this._longitudeField],\n            getAxisType: () => this.type,\n            getAxisId: () => this.id,\n            isInverse: () => false\n          });\n          (s as unknown as ICartesianSeries).setYAxisHelper({\n            ...helper,\n            isContinuous: true,\n            dataToPosition: (values: any[], option) => {\n              let value = values[0];\n              if (isNil(value) && option?.datum) {\n                const nameFieldValue = option.datum[(s as ICartesianSeries).getDimensionField()[0]];\n                value = this._centerCache.get(nameFieldValue)?.y;\n              }\n              return this.dataToLatitude(value);\n            },\n            valueToPosition: (value: any, option) => {\n              if (isNil(value) && option?.datum) {\n                const nameFieldValue = option.datum[(s as ICartesianSeries).getDimensionField()[0]];\n                value = this._centerCache.get(nameFieldValue)?.y;\n              }\n              return this.dataToLatitude(value);\n            },\n            getFields: () => [this._latitudeField],\n            getAxisType: () => this.type,\n            getAxisId: () => this.id,\n            isInverse: () => false\n          });\n        }\n      });\n    });\n  }\n\n  onLayoutEnd() {\n    this.setLayoutRect(this._regions[0].getLayoutRect());\n    this.setLayoutStartPosition(this._regions[0].getLayoutStartPoint());\n    const { width, height } = this.getLayoutRect();\n    const { translate, scale, center } = this.evaluateProjection([0, 0], [width, height]);\n    translate && this._projection.translate(translate);\n    scale && this._projection.scale(scale);\n    center && this._projection.center(center);\n    eachSeries(this._regions, s => {\n      if (s.type === SeriesTypeEnum.map || s.type === SeriesTypeEnum.pictogram) {\n        (s as MapSeries).areaPath?.clear();\n        const pathGroup = s.getRootMark().getProduct();\n        if (pathGroup) {\n          if (pathGroup.attribute.postMatrix) {\n            pathGroup.setAttributes({\n              postMatrix: new Matrix()\n            });\n          }\n        }\n      }\n    });\n    this._actualScale = this._initialScale;\n\n    super.onLayoutEnd();\n  }\n\n  // util\n  protected collectFeatures() {\n    const features: any[] = [];\n    this._regions.forEach(r => {\n      r.getSeries().forEach(s => {\n        if (s.type === SeriesTypeEnum.map || s.type === SeriesTypeEnum.pictogram) {\n          features.push(...((s as unknown as IGeoSeries).getMapViewData()?.latestData ?? []));\n        }\n      });\n    });\n    return features;\n  }\n\n  // API\n  dataToPosition(values: number[] = []): IPoint {\n    const point = this._projection?.project([values[0], values[1]]);\n    return {\n      x: point?.[0],\n      y: point?.[1]\n    };\n  }\n\n  dataToLatitude(lat: number): number {\n    const point = this._projection?.project([0, lat]);\n    return point?.[1];\n  }\n\n  dataToLongitude(lon: number): number {\n    const point = this._projection?.project([lon, 0]);\n    return point?.[0];\n  }\n\n  // interaction\n  zoom(p: number, anchor: [number, number] = [0, 0]) {\n    let s = this._projection?.scale() ?? 0;\n    const t = this._projection?.translate() ?? [0, 0];\n    let t_x = t[0];\n    let t_y = t[1];\n    s = s * p;\n    t_x -= (anchor[0] - t_x) * (p - 1);\n    t_y -= (anchor[1] - t_y) * (p - 1);\n\n    this._projection?.scale(s);\n    this._projection?.translate([t_x, t_y]);\n  }\n\n  pan = (delta: [number, number] = [0, 0]) => {\n    const t = this._projection?.translate() ?? [0, 0];\n    let t_x = t[0];\n    let t_y = t[1];\n    t_x += delta[0];\n    t_y += delta[1];\n    this._projection?.translate([t_x, t_y]);\n  };\n\n  shape(datum?: any) {\n    return this._projection.shape(datum);\n  }\n\n  /**\n   * 根据像素坐标获取经纬度位置\n   */\n  invert(point: [number, number]) {\n    return this._projection.invert(point);\n  }\n\n  private evaluateProjection(start: [number, number], size: [number, number]) {\n    const evaluated = this._projection.evaluate(start, size, this.collectFeatures());\n    let translate = evaluated.translate();\n    const scale = evaluated.scale() * this._initialScale;\n    const center = this._projectionSpec.center ?? evaluated.invert([size[0] / 2, size[1] / 2]);\n    center && (translate = [size[0] / 2, size[1] / 2]);\n    return { translate, scale, center };\n  }\n\n  protected _initCenterCache() {\n    if (!this._centerCache) {\n      this._centerCache = new Map();\n    }\n    this._regions.forEach(r => {\n      r.getSeries().forEach(s => {\n        if (s.type === 'map') {\n          const mapData = (s as IGeoSeries).getMapViewData()?.latestData ?? [];\n          mapData.forEach((feature: any = {}) => {\n            const key = feature[s.getDimensionField()[0]] || feature[DEFAULT_MAP_LOOK_UP_KEY];\n            const center = (s as IGeoSeries).getDatumCenter(feature);\n            if (key && isValid(center)) {\n              this._centerCache.set(key, { x: center[0], y: center[1] });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  _compareSpec(spec: IGeoRegionSpec, prevSpec: IGeoRegionSpec) {\n    const result = super._compareSpec(spec, prevSpec);\n    if (!result.reMake) {\n      result.reMake = ['roam', 'longitudeField', 'latitudeField', 'projection', 'zoomLimit'].some(k => {\n        return !isEqual(prevSpec?.[k], spec[k]);\n      });\n    }\n\n    return result;\n  }\n\n  release(): void {\n    super.release();\n    this._centerCache && this._centerCache.clear();\n    this._centerCache = null;\n  }\n}\n\nmixin(GeoCoordinate, Zoomable);\n\nexport const registerGeoCoordinate = () => {\n  Factory.registerComponent(GeoCoordinate.type, GeoCoordinate);\n};\n"]}