{"version":3,"sources":["../src/component/geo/projection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAKtD,MAAM,OAAO,UAAU;IAGrB,YAAY,cAA+B;QAIzC,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;IAC5D,CAAC;IAED,GAAG,CAAC,KAAe,EAAE,IAAc,EAAE,QAA8B;QACjE,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,mBAAmB,EAAE,QAAQ,EAAE,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,MAAwB;;QAC7B,MAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,MAAM,mDAAG,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,OAAO,CAAC,KAAuB;;QAC7B,OAAO,MAAA,IAAI,CAAC,UAAU,qDAAG,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,IAAwB;;QAC5B,OAAO,MAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,IAAI,mDAAG,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,KAAuB;;QAC5B,OAAO,MAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,MAAM,mDAAG,KAAK,CAAC,CAAC;IAC1C,CAAC;IAID,KAAK,CAAC,KAAc;;QAClB,IAAI,MAAA,IAAI,CAAC,UAAU,0CAAE,KAAK,EAAE;YAC1B,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC9B;iBAAM;gBACL,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAY,CAAC;aAC1C;SACF;IACH,CAAC;IAID,SAAS,CAAC,KAA+B;;QACvC,IAAI,MAAA,IAAI,CAAC,UAAU,0CAAE,KAAK,EAAE;YAC1B,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aAClC;iBAAM;gBACL,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;aACpC;SACF;IACH,CAAC;IAED,QAAQ,CAAC,KAAe,EAAE,IAAc,EAAE,QAA8B;QACtE,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACnC,OAAO,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YACnC,IAAI,EAAE,mBAAmB;YACzB,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;CACF","file":"projection.js","sourcesContent":["import { createProjection } from '@visactor/vdataset';\nimport type { IProjectionSpec } from './interface';\n\n// TODO: 待 vgrammar 补充上后修改回去\ntype GeoJsonFeatureSpec = any;\nexport class Projection {\n  projection: any;\n\n  constructor(projectionSpec: IProjectionSpec) {\n    // TODO: vgrammar 类型问题\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.projection = createProjection(projectionSpec.type)();\n  }\n\n  fit(start: number[], size: number[], features: GeoJsonFeatureSpec[]) {\n    const fitData = { type: 'FeatureCollection', features };\n    this.projection.fitExtent([start, size], fitData);\n  }\n\n  center(center: [number, number]) {\n    this.projection?.center?.(center);\n  }\n\n  project(point: [number, number]) {\n    return this.projection?.(point);\n  }\n\n  shape(data: GeoJsonFeatureSpec) {\n    return this.projection?.path?.(data);\n  }\n\n  invert(point: [number, number]) {\n    return this.projection?.invert?.(point);\n  }\n\n  scale(): number;\n  scale(scale: number): void;\n  scale(scale?: number): number | void {\n    if (this.projection?.scale) {\n      if (scale !== undefined) {\n        this.projection.scale(scale);\n      } else {\n        return this.projection.scale() as number;\n      }\n    }\n  }\n\n  translate(): [number, number];\n  translate(point: [number, number]): void;\n  translate(point?: [number, number] | void) {\n    if (this.projection?.scale) {\n      if (point !== undefined) {\n        this.projection.translate(point);\n      } else {\n        return this.projection.translate();\n      }\n    }\n  }\n\n  evaluate(start: number[], size: number[], features: GeoJsonFeatureSpec[]) {\n    const tmp = this.projection.copy();\n    return tmp?.fitExtent([start, size], {\n      type: 'FeatureCollection',\n      features\n    });\n  }\n}\n"]}