{"version":3,"sources":["../src/component/marker/mark-point/cartesian-mark-point.ts"],"names":[],"mappings":"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","file":"cartesian-mark-point.js","sourcesContent":["import type { IMarkPointCoordinateSpec } from './interface';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { cartesianCoordinateLayout, getMarkPointProcessInfo, positionLayout, xyLayout } from '../utils';\nimport { registerMarkPointAnimate } from '@visactor/vrender-components';\nimport { isValid } from '@visactor/vutils';\nimport { Factory } from '../../../core/factory';\nimport type { CoordinateType, IPoint } from '../../../typings';\nimport { BaseMarkPoint } from './base-mark-point';\nimport type { IMarkProcessOptions } from '../interface';\nimport type { IOptionAggr, IOptionWithCoordinates } from '../../../data/transforms/interface';\nimport { markPoint } from '../../../theme/builtin/common/component/mark-point';\n\nexport class CartesianMarkPoint extends BaseMarkPoint {\n  static type = ComponentTypeEnum.markPoint;\n  type = ComponentTypeEnum.markPoint;\n  name: string = ComponentTypeEnum.markPoint;\n  static coordinateType = 'cartesian';\n  coordinateType = 'cartesian' as CoordinateType;\n\n  static readonly builtInTheme = {\n    markPoint: markPoint\n  };\n\n  protected _computePointsAttr() {\n    const spec = this._spec as any;\n    const data = this._markerData;\n    const relativeSeries = this._relativeSeries;\n    const isXYLayout = isValid(spec.x) && isValid(spec.y);\n    const isCoordinateLayout = isValid(spec.coordinate);\n    const isPositionLayout = isValid(spec.position);\n    const autoRange = spec?.autoRange ?? false;\n\n    let point: IPoint;\n\n    if (isXYLayout) {\n      point = xyLayout(data, relativeSeries, relativeSeries, relativeSeries, autoRange)?.[0]?.[0];\n    } else if (isCoordinateLayout) {\n      point = cartesianCoordinateLayout(\n        data,\n        relativeSeries,\n        autoRange,\n        (spec as IMarkPointCoordinateSpec).coordinatesOffset\n      )[0];\n    } else if (isPositionLayout) {\n      point = positionLayout(spec.position, relativeSeries, spec.regionRelative)[0];\n    }\n\n    return { point };\n  }\n\n  protected _computeOptions(): IMarkProcessOptions {\n    const spec = this._spec as any;\n    const { doXYProcess } = getMarkPointProcessInfo(spec);\n    const isCoordinateProcess = isValid(spec.coordinate);\n\n    let options: IOptionAggr[] | IOptionWithCoordinates;\n    if (doXYProcess) {\n      options = [\n        this._processSpecByDims([\n          { dim: 'x', specValue: spec.x },\n          { dim: 'y', specValue: spec.y }\n        ])\n      ];\n    } else if (isCoordinateProcess) {\n      options = this._processSpecCoo(spec);\n    }\n\n    return { options };\n  }\n}\n\nexport const registerMarkPoint = () => {\n  Factory.registerComponent(CartesianMarkPoint.type, CartesianMarkPoint);\n  registerMarkPointAnimate();\n};\n"]}