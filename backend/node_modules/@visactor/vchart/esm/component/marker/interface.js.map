{"version":3,"sources":["../src/component/marker/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport type { IPadding } from '@visactor/vutils';\nimport type {\n  SymbolType,\n  IGraphicAttribute,\n  ICustomPath2D,\n  ITextGraphicAttribute,\n  IRichTextGraphicAttribute\n} from '@visactor/vrender-core';\nimport type {\n  IComposedTextMarkSpec,\n  IFormatMethod,\n  IRectMarkSpec,\n  IRichTextFormatMethod,\n  ISymbolMarkSpec,\n  StringOrNumber\n} from '../../typings';\nimport type { IComponentSpec } from '../base/interface';\nimport type { Datum } from '@visactor/vrender-components';\nimport type { ICartesianSeries, IGeoSeries, IPolarSeries } from '../../series/interface';\nimport type {\n  IOptionAggr,\n  IOptionAggrField,\n  IOptionRegr,\n  IOptionSeries,\n  IOptionWithCoordinates\n} from '../../data/transforms/interface';\nimport type { IVChart } from '../../core/interface';\n\nexport type IMarkerSupportSeries = ICartesianSeries | IPolarSeries | IGeoSeries;\n\nexport type IPolarPoint = {\n  angle: number;\n  radius: number;\n};\nexport type OffsetPoint = {\n  /**\n   * x 方向的偏移\n   * 1. number 类型表示像素值，如 12\n   * 2. string 类型表示百分比，如 '10%' 表示相对于所在 region 宽度的占比\n   */\n  x?: number | string;\n  /**\n   * y 方向的偏移\n   * 1. number 类型表示像素值，如 12\n   * 2. string 类型表示百分比，如 '10%' 表示相对于所在 region 高度的占比\n   */\n  y?: number | string;\n};\n\nexport type IAggrType = 'sum' | 'average' | 'min' | 'max' | 'variance' | 'standardDeviation' | 'median';\nexport type IDataPos = StringOrNumber | IAggrType;\nexport type IDataPosCallback = (\n  relativeSeriesData: Datum[],\n  startRelativeSeriesData: Datum[],\n  endRelativeSeriesData: Datum[],\n  relativeSeries: IMarkerSupportSeries,\n  startRelativeSeries: IMarkerSupportSeries,\n  endRelativeSeries: IMarkerSupportSeries\n) => StringOrNumber;\n\nexport type IDataPointSpec = {\n  /**\n   * 数据字段配置\n   */\n  [key: string]: IDataPos | IDataPosCallback;\n  /**\n   * 具体某个数据元素关联的series序号（仅在标注目标：数据元素下有效）\n   */\n  refRelativeSeriesIndex?: number;\n  /**\n   * 具体某个数据元素关联的series 的id（仅在标注目标：数据元素下有效）\n   */\n  refRelativeSeriesId?: StringOrNumber;\n  /**\n   * 指定使用 xField 上的那个维度索引，因为 xField 字段有可能会包含多个维度，比如分组场景\n   * @default 0\n   * @since 1.7.0\n   */\n  xFieldIndex?: number;\n  /**\n   * 指定使用 xField 上的维度名称，因为 xField 字段有可能会包含多个维度，比如分组场景。\n   * `xFieldIndex` 和 `xFieldDim` 声明一个即可，同时声明则 `xFieldDim` 优先级更高。\n   * @since 1.7.0\n   */\n  xFieldDim?: string;\n  /**\n   * 指定使用 yField 上的那个维度索引，因为 yField 字段有可能会包含多个维度，比如分组场景。\n   * @default 0\n   * @since 1.7.0\n   */\n  yFieldIndex?: number;\n  /**\n   * 指定使用 yField 上的维度名称，因为 yField 字段有可能会包含多个维度，比如分组场景。\n   * `yFieldIndex` 和 `yFieldDim` 声明一个即可，同时声明则 `yFieldDim` 优先级更高。\n   * @since 1.7.0\n   */\n  yFieldDim?: string;\n  /**\n   * 指定使用 angleField 上的那个维度索引，因为 angleField 字段有可能会包含多个维度，比如分组场景\n   * @default 0\n   * @since 1.11.0\n   */\n  angleFieldIndex?: number;\n  /**\n   * 指定使用 angleField 上的维度名称，因为 angleField 字段有可能会包含多个维度，比如分组场景。\n   * `angleFieldIndex` 和 `angleFieldDim` 声明一个即可，同时声明则 `angleFieldDim` 优先级更高。\n   * @since 1.11.0\n   */\n  angleFieldDim?: string;\n  /**\n   * 指定使用 radiusField 上的那个维度索引，因为 radiusField 字段有可能会包含多个维度，比如分组场景\n   * @default 0\n   * @since 1.11.0\n   */\n  radiusFieldIndex?: number;\n  /**\n   * 指定使用 radiusField 上的维度名称，因为 radiusField 字段有可能会包含多个维度，比如分组场景。\n   * `radiusFieldIndex` 和 `radiusFieldDim` 声明一个即可，同时声明则 `radiusFieldDim` 优先级更高。\n   * @since 1.11.0\n   */\n  radiusFieldDim?: string;\n};\n\nexport type MarkerPositionPoint = {\n  /**\n   * x 坐标位置，number 类型表示像素值，string 类型表示相对画布宽度或者 region 宽度的占比（从左往右）\n   */\n  x: StringOrNumber;\n  /**\n   * y 坐标位置，number 类型表示像素值，string 类型表示相对画布高度或者 region 高度的占比（从上至下）\n   */\n  y: StringOrNumber;\n};\n\nexport type ICoordinateOption = {\n  x?: IOptionAggrField | (IDataPosCallback | StringOrNumber)[];\n  y?: IOptionAggrField | (IDataPosCallback | StringOrNumber)[];\n  angle?: IOptionAggrField | (IDataPosCallback | StringOrNumber)[];\n  radius?: IOptionAggrField | (IDataPosCallback | StringOrNumber)[];\n  getRefRelativeSeries?: () => IMarkerSupportSeries;\n} & IOptionSeries;\n\nexport type IMarkerPositionsSpec = {\n  /**\n   * 画布坐标\n   * `positions` 自 1.12.0 版本开始支持回调函数\n   */\n  positions:\n    | MarkerPositionPoint[]\n    | ((seriesData: Datum[], relativeSeries: IMarkerSupportSeries) => MarkerPositionPoint[]);\n  /**\n   * 是否为相对 region 的坐标，默认为 false，即相对画布的坐标\n   * @default false\n   * @since 1.7.0\n   */\n  regionRelative?: boolean;\n};\n\nexport type IMarkerLabelWithoutRefSpec = {\n  /**\n   * 是否展示标注标签\n   */\n  visible?: boolean;\n  /**\n   * label整体 - 是否自动旋转\n   */\n  autoRotate?: boolean;\n  /**\n   * label整体 - 最小宽度，像素值\n   * @default 30\n   */\n  minWidth?: number;\n  /**\n   * label整体 - 最大宽度，像素值。当文字超过最大宽度时，会自动省略。\n   */\n  maxWidth?: number;\n  /**\n   * label整体 - 背景面板配置\n   */\n  labelBackground?: {\n    /**\n     * 标签背景是否显示，是否可见\n     */\n    visible?: boolean;\n    /**\n     * 标签背景支持自定义path\n     * @since 1.11.10\n     */\n    customShape?: (\n      text: ITextGraphicAttribute | IRichTextGraphicAttribute,\n      attrs: Partial<IGraphicAttribute>,\n      path: ICustomPath2D\n    ) => ICustomPath2D;\n    /**\n     * 内部边距\n     */\n    padding?: IPadding | number[] | number;\n  } & Partial<IMarkerState<Omit<IRectMarkSpec, 'visible'>>>;\n\n  /**\n   * @deprecated\n   * 设置文本类型为富文本或者普通文本，已废弃\n   **/\n  type?: 'rich' | 'text';\n  /**\n   * 文本内容，如果需要进行换行，则使用数组形式，如 ['abc', '123']\n   * 支持富文本内容 textConfig，设置富文本时要配置 textType 类型为 'rich'\n   */\n  text?: string | string[] | number | number[] | ReturnType<IRichTextFormatMethod<[]>>;\n  /**\n   * label文本 - 文本格式化\n   * @param markData 组成标注的数据\n   * @param seriesData 标注关联的数据\n   * @returns 格式化后的文本\n   */\n  formatMethod?: IFormatMethod<[markData: Datum[], seriesData: Datum[]]>;\n\n  /**\n   * label文本 - 文本前 mark 图元\n   */\n  shape?: {\n    /**\n     * 是否显示标签文本前的图形\n     */\n    visible?: boolean;\n    /**\n     * 标签文本前的图形对应的样式设置\n     */\n    style: Omit<ISymbolMarkSpec, 'visible'>;\n  };\n  /**\n   * label文本 - shape 同文本之间的间距\n   */\n  space?: number;\n\n  /**\n   * 是否自动调整 label 使其展示在 marker 可见区域内。\n   * @default false\n   * @since 1.4.0\n   */\n  confine?: boolean;\n  /**\n   * 水平方向的偏移\n   */\n  dx?: number;\n  /**\n   * 垂直方向的偏移\n   */\n  dy?: number;\n} & Partial<IMarkerState<Omit<IComposedTextMarkSpec, 'visible'>>>; // label文本 - 文本样式\n\nexport type IMarkerLabelSpec = IMarkerLabelWithoutRefSpec & IMarkerRef;\n\nexport interface IMarkerRef {\n  /**\n   * label or symbol 相对line平行方向上的偏移\n   */\n  refX?: number;\n  /**\n   * label or symbol 相对line正交方向上的偏移\n   */\n  refY?: number;\n  /**\n   * label or symbol 相对默认角度的偏移 （label跟随line的角度做自动旋转时，默认按照line的平行向量作为初始角度）\n   */\n  refAngle?: number;\n}\n\n// 跨越系列的配置\nexport interface IMarkerCrossSeriesSpec {\n  /**\n   * 设置起点关联的系列，设置该系列的序号（仅在标注目标：坐标空间下有效）\n   */\n  startRelativeSeriesIndex?: number;\n  /**\n   * 设置终点关联的系列，设置该序列的序号（仅在标注目标：坐标空间下有效）\n   */\n  endRelativeSeriesIndex?: number;\n  /**\n   * 设置起点关联的系列，设置该系列的id（仅在标注目标：坐标空间下有效）\n   */\n  startRelativeSeriesId?: string;\n  /**\n   * 设置终点关联的系列，设置该序列的id（仅在标注目标：坐标空间下有效）\n   */\n  endRelativeSeriesId?: string;\n  /**\n   * 数据处理需要单独关联系列, 设置序列的序号来进行关联，当配置为'all'时代表关联当前region下所有系列\n   * @since 1.11.0\n   */\n  specifiedDataSeriesIndex?: 'all' | number | number[];\n  /**\n   * 数据处理需要单独关联系列, 设置序列的id来进行关联，当配置为'all'时代表关联当前region下所有系列\n   * @since 1.11.0\n   */\n  specifiedDataSeriesId?: 'all' | string | string[];\n}\n\nexport type IMarkerSpec = IComponentSpec & {\n  /**\n   * 标注数据关联的series序号\n   */\n  relativeSeriesIndex?: number;\n  /**\n   * 标注数据关联系列对应的id\n   */\n  relativeSeriesId?: number | string;\n  /**\n   * marker组件是否可见\n   * @default true\n   */\n  visible?: boolean;\n  /**\n   * marker组件是否可交互\n   * @default true\n   */\n  interactive?: boolean;\n  /**\n   * marker组件是否自动拓展轴范围\n   * @default false\n   * @since 1.1.0\n   */\n  autoRange?: boolean;\n  /**\n   * marker组件超出图表区域是否被裁剪\n   * @default false\n   * @since 1.3.0\n   */\n  clip?: boolean;\n\n  /**\n   * 标注组件的名称标识\n   * @since 1.7.0\n   */\n  name?: string;\n  /**\n   * 标注所在的坐标系类型\n   * @description 一般情况下内部逻辑会根据配置自动推导类型，但如果是coordinates的配置方式，则无法推导，需要用户自行配置\n   * @since 1.11.0\n   */\n  coordinateType?: string;\n};\n\nexport type IMarkerSymbol = IMarkerRef & {\n  /** 是否展示 symbol */\n  visible: boolean;\n  /**\n   * symbol 形状，默认为带左右方向的箭头\n   */\n  symbolType?: SymbolType;\n  /**\n   * symbol 大小\n   */\n  size?: number;\n} & Partial<IMarkerState<Omit<ISymbolMarkSpec, 'visible'>>>;\n\nexport type MarkerStyleCallback<T> = (\n  /**\n   * markerData 标注组件聚合后的数据\n   */\n  markerData: DataView,\n  /**\n   * @since 1.13.0\n   * context 组件上下文, 包括相对系列，起始相对系列，结束相对系列和图表实例\n   */\n  context: IMarkerAttributeContext\n) => T;\nexport type MarkerStateCallback<T> = (\n  /**\n   * markerData 标注组件聚合后的数据\n   */\n  markerData: DataView,\n  /**\n   * @since 1.13.0\n   * context 组件上下文, 包括相对系列，起始相对系列，结束相对系列和图表实例\n   */\n  context: IMarkerAttributeContext\n) => T;\nexport type MarkerStateValue = 'hover' | 'hover_reverse' | 'selected' | 'selected_reverse';\nexport type IMarkerState<T> = {\n  /** 默认样式设置 */\n  style?: T | MarkerStyleCallback<T>;\n  /** 不同状态下的样式配置 */\n  state?: Record<MarkerStateValue, T | MarkerStateCallback<T>>;\n};\n\nexport type MarkCoordinateType = 'cartesian' | 'polar' | 'geo';\n\nexport type IMarkProcessOptions = {\n  options: IOptionAggr[] | IOptionRegr | IOptionWithCoordinates;\n  needAggr?: boolean;\n  needRegr?: boolean;\n  processData?: DataView;\n};\n\nexport type IMarkerAttributeContext = {\n  vchart: IVChart;\n  relativeSeries: IMarkerSupportSeries;\n  startRelativeSeries: IMarkerSupportSeries;\n  endRelativeSeries: IMarkerSupportSeries;\n};\n"]}