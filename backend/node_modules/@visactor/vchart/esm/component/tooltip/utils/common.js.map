{"version":3,"sources":["../src/component/tooltip/utils/common.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { isArray, isFunction, isNil, isValid, TimeUtil, isEmpty } from '@visactor/vutils';\nimport type {\n  Datum,\n  ITooltipActual,\n  ITooltipLineActual,\n  ITooltipLinePattern,\n  MaybeArray,\n  TooltipActiveType,\n  TooltipContentProperty,\n  TooltipData,\n  TooltipPatternCallback,\n  TooltipPatternProperty\n} from '../../../typings';\nimport type { ISeriesTooltipSpec, ITooltipActiveTypeAsKeys, ITooltipSpec, TooltipHandlerParams } from '../interface';\nimport type { BaseEventParams } from '../../../event/interface';\nimport { getTooltipContentValue } from './get-value';\n\nexport const getTooltipActualActiveType = (spec?: ITooltipSpec): TooltipActiveType[] => {\n  if (spec?.visible === false) {\n    return [];\n  }\n\n  const activeTypeMap: ITooltipActiveTypeAsKeys<boolean, boolean, boolean> = {\n    mark: spec?.mark?.visible !== false,\n    dimension: spec?.dimension?.visible !== false,\n    group: spec?.group?.visible !== false\n  };\n\n  if (isValid(spec?.activeType)) {\n    Object.keys(activeTypeMap).forEach(t => {\n      activeTypeMap[t as TooltipActiveType] = spec?.activeType?.includes(t as TooltipActiveType);\n    });\n  }\n\n  return Object.keys(activeTypeMap).filter(t => activeTypeMap[t as TooltipActiveType]) as TooltipActiveType[];\n};\n\nexport const isActiveTypeVisible = (type: TooltipActiveType, spec?: ISeriesTooltipSpec) => {\n  if (!spec) {\n    return true;\n  }\n\n  if (spec.visible === false) {\n    return false;\n  }\n\n  if (spec[type] && spec[type].visible === false) {\n    return false;\n  }\n\n  if (spec.activeType && (isArray(spec.activeType) ? !spec.activeType.includes(type) : spec.activeType !== type)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport function isEmptyPos(params: BaseEventParams): boolean {\n  return isNil(params.mark) && isNil(params.model) && isNil(params.datum);\n}\n\nfunction addContentLine(\n  result: ITooltipLineActual[],\n  contentSpec: MaybeArray<ITooltipLinePattern>,\n  defaultContent: ITooltipLinePattern,\n  shapeAttrs: Record<string, TooltipContentProperty<any>>,\n  datum: Datum,\n  params?: TooltipHandlerParams\n) {\n  const addByDatum = (spec: ITooltipLinePattern) => {\n    if (spec) {\n      const res: ITooltipLineActual = { datum };\n      const finalSpec: ITooltipLinePattern =\n        isNil(spec.key) && isNil(spec.value) && !isEmpty(spec)\n          ? {\n              ...shapeAttrs,\n              ...defaultContent,\n              ...spec\n            }\n          : { ...shapeAttrs, ...spec };\n      const {\n        key,\n        keyFormatter,\n        keyTimeFormat,\n        keyTimeFormatMode,\n        value,\n        valueFormatter,\n        valueTimeFormat,\n        valueTimeFormatMode,\n        ...others\n      } = finalSpec;\n\n      res.key = getTimeString(\n        getTooltipContentValue(key, datum, params, keyFormatter),\n        keyTimeFormat,\n        keyTimeFormatMode\n      );\n      res.value = getTimeString(\n        getTooltipContentValue(value, datum, params, valueFormatter),\n        valueTimeFormat,\n        valueTimeFormatMode\n      );\n      Object.keys(others).forEach(k => {\n        (res as any)[k] = getTooltipContentValue((finalSpec as any)[k], datum, params);\n      });\n      if (res.visible !== false && (isValid(res.key) || isValid(res.value))) {\n        result.push(res);\n      }\n    }\n  };\n\n  if (isArray(contentSpec)) {\n    (contentSpec as ITooltipLinePattern[]).forEach(spec => {\n      addByDatum(spec);\n    });\n  } else {\n    addByDatum(contentSpec as ITooltipLinePattern);\n  }\n}\n\nfunction parseContentFunction(\n  result: ITooltipLineActual[],\n  contentSpec: TooltipPatternProperty<MaybeArray<ITooltipLinePattern>>,\n  defaultContent: ITooltipLinePattern,\n  shapeAttrs: Record<string, TooltipContentProperty<any>>,\n  data?: TooltipData,\n  datum?: Datum,\n  params?: TooltipHandlerParams\n) {\n  if (isFunction(contentSpec)) {\n    const specs = (contentSpec as TooltipPatternCallback<MaybeArray<ITooltipLinePattern>>)(data, params);\n\n    addContentLine(result, specs, defaultContent, shapeAttrs, datum, params);\n  } else if (contentSpec) {\n    addContentLine(result, contentSpec as MaybeArray<ITooltipLinePattern>, defaultContent, shapeAttrs, datum, params);\n  }\n}\n\nexport function parseContent(\n  contentSpec: MaybeArray<TooltipPatternProperty<MaybeArray<ITooltipLinePattern>>>,\n  defaultContent: ITooltipLinePattern,\n  shapeAttrs: Record<string, TooltipContentProperty<any>>,\n  data?: TooltipData,\n  datum?: Datum[],\n  params?: TooltipHandlerParams\n): ITooltipLineActual[] {\n  if (datum && datum.length) {\n    const contents: ITooltipLineActual[] = [];\n\n    datum.forEach(d => {\n      if (isArray(contentSpec)) {\n        (contentSpec as TooltipPatternProperty<MaybeArray<ITooltipLinePattern>>[]).forEach(spec => {\n          parseContentFunction(contents, spec, defaultContent, shapeAttrs, data, d, params);\n        });\n      } else if (isFunction(contentSpec)) {\n        parseContentFunction(\n          contents,\n          contentSpec as TooltipPatternCallback<MaybeArray<ITooltipLinePattern>>,\n          defaultContent,\n          shapeAttrs,\n          data,\n          d,\n          params\n        );\n      } else if (contentSpec) {\n        addContentLine(contents, contentSpec as MaybeArray<ITooltipLinePattern>, defaultContent, shapeAttrs, d, params);\n      }\n    });\n\n    return contents;\n  }\n\n  return null;\n}\n\nexport function combineContents(patternList: ITooltipActual[]) {\n  if (!patternList || !patternList.length) {\n    return null;\n  }\n\n  // 拼接默认 tooltip content\n  const defaultPatternContent: ITooltipLineActual[] = [];\n  patternList.forEach(({ content }) => {\n    if (content) {\n      (content as ITooltipLineActual[]).forEach(c => {\n        defaultPatternContent.push(c);\n      });\n    }\n  });\n\n  if (defaultPatternContent.length) {\n    return {\n      ...patternList[0],\n      content: defaultPatternContent\n    };\n  }\n\n  return patternList[0];\n}\n\nexport const getTimeString = (value: any, timeFormat?: string, timeFormatMode?: 'local' | 'utc') => {\n  if (!timeFormat && !timeFormatMode) {\n    if (typeof value !== 'object') {\n      return value?.toString();\n    }\n    return value;\n  }\n\n  const timeUtil = TimeUtil.getInstance();\n  timeFormat = timeFormat || '%Y%m%d';\n  timeFormatMode = timeFormatMode || 'local';\n  const timeFormatter = timeFormatMode === 'local' ? timeUtil.timeFormat : timeUtil.timeUTCFormat;\n  return timeFormatter(timeFormat, value);\n};\n"]}