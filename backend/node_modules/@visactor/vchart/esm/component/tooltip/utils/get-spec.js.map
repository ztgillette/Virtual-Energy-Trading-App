{"version":3,"sources":["../src/component/tooltip/utils/get-spec.ts"],"names":[],"mappings":"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","file":"get-spec.js","sourcesContent":["import type { ITooltipActual, TooltipActiveType, TooltipData } from '../../../typings';\nimport type { ISeries } from '../../../series/interface';\nimport type { IDimensionData, IDimensionInfo } from '../../../event/events/dimension/interface';\nimport { isValid } from '@visactor/vutils';\nimport type { TooltipHandlerParams } from '../interface/common';\nimport { combineContents, isActiveTypeVisible } from './common';\nimport type { ITooltipSpec } from '../interface/spec';\n\nconst pick_keys = ['updateTitle', 'updateContent', 'updatePosition', 'maxLineCount', 'othersLine'];\n\nexport const getTooltipSpecForShow = (\n  activeType: TooltipActiveType,\n  globalSpec: ITooltipSpec,\n  series?: ISeries,\n  data?: TooltipData,\n  params?: TooltipHandlerParams\n): ITooltipActual => {\n  // 组装tooltip spec\n  const finalSpec = {\n    activeType\n  } as ITooltipActual;\n\n  switch (activeType) {\n    case 'mark':\n    case 'group':\n      if (series) {\n        // tooltip spec覆盖优先级: series spec > global spec > default pattern\n        const seriesSpec = series.getSpec()?.tooltip as ITooltipSpec;\n\n        finalSpec.visible = true;\n\n        if (seriesSpec?.handler) {\n          // 优先使用自定义handler\n          finalSpec.handler = seriesSpec.handler;\n        }\n        if (finalSpec.handler?.showTooltip) {\n          return finalSpec;\n        }\n        if (seriesSpec?.[activeType]) {\n          pick_keys.forEach(k => {\n            if (isValid((seriesSpec[activeType] as any)[k])) {\n              (finalSpec as any)[k] = (seriesSpec as any)[activeType][k];\n            }\n          });\n        }\n\n        return {\n          ...finalSpec,\n          ...series.tooltipHelper.getTooltipData(\n            activeType,\n            globalSpec,\n            data as IDimensionData[],\n            (data as IDimensionData[])[0].datum,\n            params\n          )\n        };\n      }\n      break;\n    case 'dimension':\n      if ((data as IDimensionInfo[])?.length) {\n        // tooltip spec覆盖优先级: series spec > global spec > default pattern\n        const seriesList = getSeriesListFromDimensionInfo(data as IDimensionInfo[]);\n\n        // visible\n        if (seriesList.every(series => !isActiveTypeVisible('dimension', series.tooltipHelper?.spec))) {\n          finalSpec.visible = false;\n        } else {\n          finalSpec.visible = true;\n        }\n\n        // 优先使用自定义handler\n        finalSpec.handler = globalSpec.handler;\n        if (finalSpec.handler?.showTooltip) {\n          return finalSpec;\n        }\n\n        const patternList: ITooltipActual[] = [];\n        (data as IDimensionInfo[]).forEach(info =>\n          info.data.forEach(datum => {\n            const { series } = datum;\n            const pattern = series.tooltipHelper.getTooltipData(activeType, globalSpec, data, datum.datum, params);\n            if (pattern) {\n              patternList.push(pattern);\n            }\n          })\n        );\n\n        return combineContents(patternList);\n      }\n      break;\n  }\n\n  return null;\n};\n\nconst getSeriesListFromDimensionInfo = (dimensionInfo: IDimensionInfo[]): ISeries[] => {\n  const list: ISeries[] = [];\n  dimensionInfo.forEach(info => {\n    info.data.forEach(datum => {\n      if (isValid(datum.series)) {\n        list.push(datum.series);\n      }\n    });\n  });\n\n  return list;\n};\n"]}