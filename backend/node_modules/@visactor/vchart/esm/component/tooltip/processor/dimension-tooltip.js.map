{"version":3,"sources":["../src/component/tooltip/processor/dimension-tooltip.ts"],"names":[],"mappings":"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","file":"dimension-tooltip.js","sourcesContent":["import type { BaseEventParams } from '../../../event/interface';\nimport type { TooltipActiveType } from '../../../typings';\nimport type { TooltipHandlerParams } from '../interface';\nimport type { DimensionTooltipInfo, MouseEventData } from './interface';\nimport { BaseTooltipProcessor } from './base';\nimport { isValid } from '@visactor/vutils';\nimport type { ICartesianSeries } from '../../../series/interface';\nimport type { IDimensionData, IDimensionInfo } from '../../../event/events/dimension/interface';\nimport { isDiscrete } from '@visactor/vscale';\nimport { Factory } from '../../../core/factory';\nimport { TooltipType } from '../constant';\n\nexport class DimensionTooltipProcessor extends BaseTooltipProcessor {\n  activeType: TooltipActiveType = 'dimension';\n\n  /** 触发对应类型的 tooltip */\n  showTooltip(info: DimensionTooltipInfo, params: BaseEventParams, changePositionOnly: boolean) {\n    const newParams: TooltipHandlerParams = {\n      ...(params as TooltipHandlerParams),\n      dimensionInfo: this._preprocessDimensionInfo(info),\n      changePositionOnly,\n      tooltip: this.component\n    };\n    return this._showTooltipByHandler(info, newParams);\n  }\n\n  protected _getDimensionInfo(params: BaseEventParams): IDimensionInfo[] {\n    let targetDimensionInfo: IDimensionInfo[] | undefined;\n    // 处理dimension info\n    const chart = this.component.getChart();\n\n    // compute layer offset\n    const layer = chart.getCompiler().getStage().getLayer(undefined);\n    const point = { x: params.event.viewX, y: params.event.viewY };\n    layer.globalTransMatrix.transformPoint({ x: params.event.viewX, y: params.event.viewY }, point);\n\n    targetDimensionInfo = this.component.getOption().getDimensionInfo?.(chart, point, true) ?? [];\n\n    if (targetDimensionInfo.length === 0) {\n      targetDimensionInfo = undefined;\n    } else if (targetDimensionInfo.length > 1) {\n      // 只保留一个轴的dimension info\n      const dimensionAxisInfo = targetDimensionInfo.filter(info => {\n        const axis = info.axis;\n        if (axis.getSpec().hasDimensionTooltip) {\n          return true;\n        }\n\n        // 优先显示离散轴 tooltip\n        if (!isDiscrete(axis.getScale().type)) {\n          return false;\n        }\n        // 下面的逻辑用来判断当前的离散轴是不是维度轴\n        let firstSeries: ICartesianSeries | undefined;\n        for (const region of axis?.getRegions() ?? []) {\n          for (const series of region.getSeries()) {\n            if (series.coordinate === 'cartesian') {\n              firstSeries = series as ICartesianSeries;\n              break;\n            }\n          }\n          if (isValid(firstSeries)) {\n            break;\n          }\n        }\n        if (isValid(firstSeries) && firstSeries.getDimensionField()[0] === firstSeries.fieldY[0]) {\n          // 维度轴为Y轴时，选择只显示Y轴tooltip\n          return axis.getOrient() === 'left' || axis.getOrient() === 'right';\n        }\n        // 维度轴为X轴时，选择只显示X轴tooltip\n        return axis.getOrient() === 'bottom' || axis.getOrient() === 'top';\n      });\n      targetDimensionInfo = dimensionAxisInfo.length ? dimensionAxisInfo : targetDimensionInfo.slice(0, 1);\n\n      // datum 去重，保证每个系列的每个数据项只对应于一行 tooltip 内容项\n      if (targetDimensionInfo.length > 1) {\n        const dimensionDataKeySet = new Set<string>();\n        targetDimensionInfo.forEach(info => {\n          info.data = info.data.filter(({ key }: IDimensionData) => {\n            if (dimensionDataKeySet.has(key)) {\n              return false;\n            }\n            dimensionDataKeySet.add(key);\n            return true;\n          });\n        });\n      }\n    }\n\n    return targetDimensionInfo;\n  }\n\n  /** 获取触发 tooltip 需要的信息 */\n  getMouseEventData(params: BaseEventParams): MouseEventData {\n    return {\n      tooltipInfo: this._getDimensionInfo(params),\n      // 排除被声明要忽略的项\n      ignore: false\n    };\n  }\n}\n\nexport const registerDimensionTooltipProcessor = () => {\n  Factory.registerTooltipProcessor(TooltipType.dimension, DimensionTooltipProcessor);\n};\n"]}