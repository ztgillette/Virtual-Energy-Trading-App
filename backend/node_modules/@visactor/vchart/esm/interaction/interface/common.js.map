{"version":3,"sources":["../src/interaction/interface/common.ts"],"names":[],"mappings":"","file":"common.js","sourcesContent":["import type { IMarkGraphic } from '../../mark/interface';\nimport type { RenderMode } from '../../typings/spec/common';\nimport type { IEventDispatcher } from '../../event/interface';\nimport type { IModel } from '../../model/interface';\nimport type { ITrigger } from './trigger';\n\nexport interface IInteraction {\n  setDisableActiveEffect: (disable: boolean) => void;\n  addTrigger: (trigger: ITrigger) => void;\n  setStatedGraphics: (trigger: ITrigger, graphics: IMarkGraphic[]) => void;\n  getStatedGraphics: (trigger: ITrigger) => IMarkGraphic[];\n  updateStates: (\n    trigger: ITrigger,\n    newStatedGraphics: IMarkGraphic[],\n    prevStatedGraphics?: IMarkGraphic[],\n    state?: string,\n    reverseState?: string\n  ) => IMarkGraphic[];\n  clearAllStates: () => void;\n  clearAllStatesOfTrigger: (trigger: ITrigger, state?: string, reverseState?: string) => void;\n  clearByState: (stateValue: string) => any;\n  updateStateOfGraphics: (stateValue: string, markGraphics: IMarkGraphic[]) => void;\n}\n\nexport interface ITriggerOption {\n  mode: RenderMode;\n  interaction: IInteraction;\n  eventDispatcher: IEventDispatcher;\n  model: IModel;\n}\n"]}