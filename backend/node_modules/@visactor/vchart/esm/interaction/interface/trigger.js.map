{"version":3,"sources":["../src/interaction/interface/trigger.ts"],"names":[],"mappings":"","file":"trigger.js","sourcesContent":["import type { GraphicEventType } from '@visactor/vrender-core';\nimport type { IMark, IMarkGraphic } from '../../mark/interface/common';\nimport type { RenderMode } from '../../typings/spec/common';\nimport type { IInteraction } from './common';\nimport type { BaseEventParams } from '../../event/interface';\n\nexport type ITriggerEventHandler = (e: any, markGraphic?: IMarkGraphic) => void;\n\nexport interface ITrigger<TriggerOptions extends IBaseTriggerOptions = any> {\n  readonly options: TriggerOptions;\n  readonly type: string;\n  registerMark: (mark: IMark | IMark[]) => void;\n  release: () => void;\n\n  init: () => void;\n  start: (g: any) => void;\n  reset: (g?: IMarkGraphic) => void;\n  getStartState: () => string;\n  getResetState: () => string;\n  updateMarkIdByState: (states: string[]) => void;\n  getMarkIdByState: () => Record<string, number[]>;\n  getMarks: () => IMark[];\n  getMarksByState: (state: string) => IMark[];\n}\n\nexport interface IBaseTriggerOptions {\n  type?: string;\n  /**\n   * 需要处理状态的所有图元\n   */\n  marks?: IMark[];\n  mode?: RenderMode;\n  event: {\n    on: (eType: string, callback: ITriggerEventHandler) => void;\n    off: (eType: string, callback?: ITriggerEventHandler) => void;\n    emit: (eType: string, params: any) => void;\n  };\n  interaction: IInteraction;\n\n  id?: string;\n\n  shouldStart?: (e: any) => boolean;\n\n  shouldUpdate?: (e: any) => boolean;\n\n  shouldEnd?: (e: any) => boolean;\n\n  shouldReset?: (e: any) => boolean;\n\n  onStart?: (e: any) => boolean;\n\n  onUpdate?: (e: any) => boolean;\n\n  onEnd?: (e: any) => boolean;\n\n  onReset?: (e: any) => boolean;\n}\n\nexport type IElementSelectTriggerOff = GraphicEventType | string | 'empty' | 'none' | number;\n\nexport interface IElementSelectOptions extends IBaseTriggerOptions {\n  /**\n   * the trigger event name\n   */\n  trigger?: GraphicEventType | GraphicEventType[];\n  /**\n   * the selected state name\n   */\n  state?: string;\n  /**\n   * the non-selected state name\n   */\n  reverseState?: string;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: IElementSelectTriggerOff | IElementSelectTriggerOff[];\n  /**\n   * whether or not support multiple selected\n   */\n  isMultiple?: boolean;\n}\n\nexport interface IDimensionHoverOptions extends IBaseTriggerOptions {\n  /**\n   * the selected state name\n   */\n  state?: string;\n  /**\n   * the non-selected state name\n   */\n  reverseState?: string;\n\n  trigger?: string;\n}\n\nexport interface IElementActiveOptions extends IBaseTriggerOptions {\n  /**\n   * the trigger event name\n   */\n  trigger?: GraphicEventType | GraphicEventType[];\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: GraphicEventType | GraphicEventType[] | 'none';\n  /**\n   * the active state name\n   */\n  state?: string;\n}\n\nexport interface IElementHighlightOptions extends IBaseTriggerOptions {\n  /**\n   * the trigger event name\n   */\n  trigger?: GraphicEventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: GraphicEventType | 'none';\n  /**\n   * the highlight state name\n   */\n  highlightState?: string;\n  /**\n   * the blur state name\n   */\n  blurState?: string;\n}\n\nexport interface IElementFilterOptions {\n  /**\n   * the filter type of element\n   */\n  filterType?: 'key' | 'groupKey';\n  /**\n   * the field to be filtered\n   */\n  filterField?: string;\n}\n\n/**\n * the interaction to set the active state of specified marks trigger by legend\n */\nexport interface IElementActiveByLegendOptions extends IBaseTriggerOptions, IElementFilterOptions {\n  /**\n   * the active state name\n   */\n  state?: string;\n}\n\n/**\n * the interaction to set the active state of specified marks trigger by legend\n */\nexport interface IElementHighlightByLegendOptions extends IBaseTriggerOptions, IElementFilterOptions {\n  /**\n   * the highlight state name\n   */\n  highlightState?: string;\n  /**\n   * the blur state name\n   */\n  blurState?: string;\n}\n\nexport interface IElementHighlightByNameOptions extends IElementHighlightByLegendOptions {\n  graphicName?: string | string[];\n  /**\n   * the trigger event name\n   */\n  trigger?: GraphicEventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: GraphicEventType | 'none';\n\n  parseData?: (e: BaseEventParams) => any;\n}\n\nexport type IElementHighlightByGraphicNameOptions = IElementHighlightOptions;\n\nexport interface ITriggerConstructor<T extends IBaseTriggerOptions = IBaseTriggerOptions> {\n  readonly type: string;\n\n  new (options?: T): ITrigger<T>;\n}\n"]}