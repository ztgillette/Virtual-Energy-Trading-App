{"version":3,"sources":["../src/interaction/triggers/element-highlight-by-group.ts"],"names":[],"mappings":"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","file":"element-highlight-by-group.js","sourcesContent":["import { Factory } from '../../core/factory';\nimport { BaseTrigger } from './base';\nimport type { IElementHighlightOptions, ITrigger, ITriggerEventHandler } from '../interface/trigger';\nimport type { IMarkGraphic } from '../../mark/interface';\nimport { isNil } from '@visactor/vutils';\nimport type { BaseEventParams } from '../../core';\nimport { highlightDefaultOptions } from './util';\n\nconst type = 'element-highlight-by-group';\n\nexport class ElementHighlightByGroup\n  extends BaseTrigger<IElementHighlightOptions>\n  implements ITrigger<IElementHighlightOptions>\n{\n  static type: string = type;\n  type: string = type;\n\n  static defaultOptions = highlightDefaultOptions;\n  constructor(options?: IElementHighlightOptions) {\n    super(options);\n    this.options = Object.assign({}, highlightDefaultOptions, options);\n\n    this.updateMarkIdByState([this.options.highlightState, this.options.blurState]);\n  }\n\n  getStartState(): string {\n    return this.options.highlightState;\n  }\n\n  getResetState(): string {\n    return this.options.blurState;\n  }\n\n  protected getEvents(): Array<{ type: string | string[]; handler: ITriggerEventHandler }> {\n    return [\n      {\n        type: this.options.trigger,\n        handler: this.handleStart\n      },\n      { type: this.options.triggerOff, handler: this.handleReset }\n    ];\n  }\n\n  resetAll() {\n    const { interaction, highlightState, blurState } = this.options;\n\n    interaction.clearAllStatesOfTrigger(this, highlightState, blurState);\n\n    interaction.setStatedGraphics(this, []);\n  }\n\n  protected _getHightlightKey(g: IMarkGraphic) {\n    return g.context?.groupKey;\n  }\n\n  start(g: IMarkGraphic) {\n    if (g && this.isGraphicInMark(g)) {\n      const highlightKey = this._getHightlightKey(g);\n\n      if (isNil(highlightKey)) {\n        return;\n      }\n\n      const { interaction, highlightState, blurState } = this.options;\n      const statedGraphics = interaction.getStatedGraphics(this);\n      const newStatedGraphics: IMarkGraphic[] = [];\n\n      this.getMarks().forEach(m => {\n        m.getGraphics()?.forEach(g => {\n          if (this._getHightlightKey(g) === highlightKey) {\n            newStatedGraphics.push(g);\n          }\n        });\n      });\n\n      interaction.updateStates(this, newStatedGraphics, statedGraphics, highlightState, blurState);\n      interaction.setStatedGraphics(this, newStatedGraphics);\n    }\n  }\n\n  reset(g?: IMarkGraphic) {\n    if (g) {\n      if (this.isGraphicInMark(g)) {\n        const { interaction } = this.options;\n        const statedGraphics = interaction.getStatedGraphics(this);\n\n        g.removeState([this.options.highlightState, this.options.blurState]);\n\n        interaction.setStatedGraphics(\n          this,\n          statedGraphics.filter(sg => sg !== g)\n        );\n      }\n    } else {\n      this.resetAll();\n    }\n  }\n\n  handleStart = (e: BaseEventParams) => {\n    this.start(e.item);\n  };\n\n  handleReset = (e: BaseEventParams) => {\n    const g = e.item;\n    const hasActiveElement = g && this.isGraphicInMark(g);\n\n    if (hasActiveElement) {\n      this.resetAll();\n    }\n  };\n}\n\nexport const registerElementHighlightByGroup = () => {\n  Factory.registerInteractionTrigger(type, ElementHighlightByGroup);\n};\n"]}