{"version":3,"sources":["../src/interaction/triggers/element-highlight-by-legend.ts"],"names":[],"mappings":"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","file":"element-highlight-by-legend.js","sourcesContent":["import { Factory } from '../../core/factory';\nimport { BaseTrigger } from './base';\nimport type { IElementHighlightByLegendOptions, ITrigger, ITriggerEventHandler } from '../interface/trigger';\nimport { STATE_VALUE_ENUM } from '../../compile/mark/interface';\nimport { ChartEvent } from '../../constant/event';\nimport { generateFilterValue } from './util';\nimport type { IMarkGraphic } from '../../mark/interface/common';\nimport type { BaseEventParams } from '../../event/interface';\n\nconst type = 'element-highlight-by-legend';\nconst defaultOptions: Partial<IElementHighlightByLegendOptions> = {\n  highlightState: STATE_VALUE_ENUM.STATE_HIGHLIGHT,\n  blurState: STATE_VALUE_ENUM.STATE_BLUR,\n  filterType: 'groupKey'\n};\n\nexport class ElementHighlightByLegend\n  extends BaseTrigger<IElementHighlightByLegendOptions>\n  implements ITrigger<IElementHighlightByLegendOptions>\n{\n  static type: string = type;\n  type: string = type;\n\n  static defaultOptions = defaultOptions;\n  constructor(options?: IElementHighlightByLegendOptions) {\n    super(options);\n    this.options = Object.assign({}, defaultOptions, options);\n    this.updateMarkIdByState([this.options.highlightState, this.options.blurState]);\n  }\n\n  getStartState(): string {\n    return this.options.highlightState;\n  }\n\n  getResetState(): string {\n    return this.options.blurState;\n  }\n\n  protected getEvents(): Array<{ type: string | string[]; handler: ITriggerEventHandler }> {\n    return [\n      {\n        type: ChartEvent.legendItemHover,\n        handler: this.handleStart\n      },\n      {\n        type: ChartEvent.legendItemUnHover,\n        handler: this.handleReset\n      }\n    ];\n  }\n\n  start(itemKey: any) {\n    if (itemKey) {\n      const filterValue = generateFilterValue(this.options as IElementHighlightByLegendOptions);\n\n      const { interaction, highlightState, blurState } = this.options;\n      const statedGraphics = interaction.getStatedGraphics(this);\n      const newStatedGraphics: IMarkGraphic[] = [];\n\n      this.getMarks().forEach(m => {\n        m.getGraphics()?.forEach(g => {\n          if (filterValue(g) === itemKey) {\n            newStatedGraphics.push(g);\n          }\n        });\n      });\n\n      interaction.updateStates(this, newStatedGraphics, statedGraphics, highlightState, blurState);\n      interaction.setStatedGraphics(this, newStatedGraphics);\n    }\n  }\n\n  resetAll() {\n    const { interaction, highlightState, blurState } = this.options;\n\n    interaction.clearAllStatesOfTrigger(this, highlightState, blurState);\n\n    interaction.setStatedGraphics(this, []);\n  }\n\n  reset(g?: IMarkGraphic) {\n    const { highlightState, blurState, interaction } = this.options;\n\n    if (g) {\n      const statedGraphics = interaction.getStatedGraphics(this);\n      if (statedGraphics && statedGraphics.includes(g)) {\n        g.removeState([highlightState, blurState]);\n        interaction.setStatedGraphics(\n          this,\n          statedGraphics.filter(sg => sg !== g)\n        );\n      }\n    } else {\n      this.resetAll();\n    }\n  }\n\n  handleStart = (e: BaseEventParams) => {\n    const event = e.event;\n\n    if (event) {\n      this.start(event.detail?.data?.id);\n    }\n  };\n\n  handleReset = (e: BaseEventParams) => {\n    this.resetAll();\n  };\n}\n\nexport const registerElementHighlightByLegend = () => {\n  Factory.registerInteractionTrigger(type, ElementHighlightByLegend);\n};\n"]}