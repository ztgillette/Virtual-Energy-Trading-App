{"version":3,"sources":["../src/interaction/drill/drillable.ts"],"names":[],"mappings":"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","file":"drillable.js","sourcesContent":["/* eslint-disable no-duplicate-imports */\nimport { isArray, isEmpty, isNil } from '@visactor/vutils';\nimport type { DataSet, DataView } from '@visactor/vdataset';\n\nimport type { DrillInfo } from '../../data/transforms/drill';\nimport { drillFilter, DrillEnum } from '../../data/transforms/drill';\nimport type { EventType, IEvent } from '../../event/interface';\nimport type { RenderMode } from '../../typings/spec';\nimport { getDefaultTriggerEventByMode } from '../../component/common/trigger/config';\nimport { findHierarchyPath } from '../../util/hierarchy';\nimport { ChartEvent } from '../../constant/event';\nimport { registerDataSetInstanceTransform } from '../../data/register';\nimport type { IModel } from '../../model/interface';\nimport type { BaseSeries } from '../../series/base/base-series';\nimport { ComponentTypeEnum } from '../../component/interface/type';\nimport type { Tooltip } from '../../component/tooltip';\n\ninterface DrillParams {\n  event: IEvent;\n  mode: RenderMode;\n  drillField: () => string;\n  getRawData: () => DataView;\n}\n\nexport interface IDrillable {\n  /**\n   * 初始化钻取设置\n   */\n  initDrillable: (params: DrillParams) => void;\n\n  /**\n   * 初始化钻取数据\n   */\n  initDrillableData: (dataSet: DataSet) => void;\n\n  /**\n   * 绑定钻取事件\n   */\n  bindDrillEvent: () => void;\n\n  /**\n   * 上卷\n   */\n  drillUp: () => void;\n\n  /**\n   * 下钻\n   * @param drillPath 钻取路径\n   */\n  drillDown: (drillPath: string[]) => string[];\n}\n\nexport class Drillable implements IDrillable {\n  private _drillParams: DrillParams;\n  private _drillInfo: DrillInfo;\n\n  private _getDrillTriggerEvent(type: string): EventType {\n    const { mode } = this._drillParams;\n\n    return getDefaultTriggerEventByMode(mode)?.[type];\n  }\n\n  private _hideTooltip() {\n    const tooltip = (this as unknown as BaseSeries<null>)\n      .getChart()\n      .getComponentsByType(ComponentTypeEnum.tooltip)[0] as Tooltip;\n    tooltip && tooltip.hideTooltip();\n  }\n\n  initDrillable(params: DrillParams) {\n    this._drillParams = params;\n  }\n\n  initDrillableData(dataSet: DataSet) {\n    const { getRawData } = this._drillParams;\n    // 注册筛选方法\n    registerDataSetInstanceTransform(dataSet, 'drillFilter', drillFilter);\n\n    // 调用筛选数据, 用于上卷下钻\n    getRawData().transform({\n      type: 'drillFilter',\n      options: {\n        info: () => this._drillInfo,\n        keyField: () => this._drillParams.drillField()\n      }\n    });\n  }\n\n  bindDrillEvent() {\n    const { event, getRawData, drillField } = this._drillParams;\n    const keyField = drillField();\n    if (this._getDrillTriggerEvent('start')) {\n      event.on(this._getDrillTriggerEvent('start'), e => {\n        if (isNil(e.datum) || isNil(e.datum?.[keyField])) {\n          this.drillUp();\n          return;\n        }\n\n        // Drill交互后, 隐藏Tooltip\n        this._hideTooltip();\n        // 获取数据key\n        const dataKey = e.datum[keyField];\n        // 已钻取的路径\n        const selectPath = this._drillInfo?.path ?? [];\n        // 用户点击的路径\n        const clickedPath = findHierarchyPath(getRawData().rawData, dataKey, keyField, 'children');\n        // 已钻取过, 则一定上卷\n        if (selectPath[selectPath.length - 1] === clickedPath[clickedPath.length - 1]) {\n          this.drillUp();\n        } else {\n          this.drillDown(clickedPath);\n        }\n      });\n    }\n  }\n\n  /**\n   * 下钻接口\n   * @param drillPath 下钻后的路径\n   * @returns 当然路径\n   * @description 根据传入的path, 向指定层级下钻.\n   */\n  drillDown(drillPath: string[] = []): string[] {\n    const { getRawData, event } = this._drillParams;\n    if (!isArray(drillPath) || isEmpty(drillPath)) {\n      return drillPath;\n    }\n\n    // 根据钻取路径, 获得当前需要展示的层级\n    const dataKey = drillPath[drillPath.length - 1];\n\n    this._drillInfo = {\n      key: dataKey,\n      path: drillPath,\n      type: DrillEnum.DrillDown\n    };\n\n    getRawData().reRunAllTransform();\n    event.emit(ChartEvent.drill, {\n      value: { path: drillPath, type: DrillEnum.DrillDown },\n      model: this as unknown as IModel\n    });\n    return drillPath;\n  }\n\n  /**\n   * 上卷接口\n   * @returns 上卷后的路径\n   * @description 根据path信息, 向父层级上卷.\n   */\n  drillUp() {\n    const { getRawData, event } = this._drillParams;\n\n    const path = this._drillInfo?.path ?? [];\n    if (!isArray(path) || isEmpty(path)) {\n      return path;\n    }\n\n    const dataKey = path.pop();\n\n    this._drillInfo = {\n      key: dataKey,\n      path: path,\n      type: DrillEnum.DrillUp\n    };\n\n    getRawData().reRunAllTransform();\n    event.emit(ChartEvent.drill, {\n      value: { path, type: DrillEnum.DrillUp },\n      model: this as unknown as IModel\n    });\n    return path;\n  }\n}\n"]}