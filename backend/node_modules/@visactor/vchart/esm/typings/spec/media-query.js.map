{"version":3,"sources":["../src/typings/spec/media-query.ts"],"names":[],"mappings":"","file":"media-query.js","sourcesContent":["import type { ComponentTypeEnum } from '../../component/interface';\nimport type { IVChart } from '../../core/interface';\nimport type { IModelSpecInfo } from '../../model/interface';\nimport type { SeriesTypeEnum } from '../../series/interface/type';\nimport type { IChartSpec } from './common';\n\nexport interface IMediaInfo {\n  /** 图表宽度 */\n  width: number;\n  /** 图表高度 */\n  height: number;\n}\n\n/**\n * 媒体查询配置（包含多项查询）\n * @since 1.8.0\n */\nexport type IMediaQuerySpec = IMediaQueryItem[];\n\n/** 媒体查询配置（表示一项查询）*/\nexport interface IMediaQueryItem {\n  /** 媒体查询条件 */\n  query: IMediaQueryCondition;\n  /** 命中媒体查询条件之后的动作 */\n  action: IMediaQueryAction | IMediaQueryAction[];\n}\n\n/** 媒体查询条件，多个属性之间为“且”关系 */\nexport interface IMediaQueryCondition {\n  /** 最小图表宽度 */\n  minWidth?: number;\n  /** 最大图表宽度 */\n  maxWidth?: number;\n  /** 最小图表高度 */\n  minHeight?: number;\n  /** 最大图表高度 */\n  maxHeight?: number;\n  /** 当图表宽度或高度发生变化时触发的回调，由回调指定是否命中查询条件 */\n  onResize?: (info: IMediaInfo, vchart: IVChart) => boolean;\n}\n\n/** 命中媒体查询条件之后的动作 */\nexport interface IMediaQueryAction<T extends Record<string, unknown> = any> {\n  /**\n   * 需要应用的新 spec\n   * - 如果元素过滤器匹配到了某些图表元素，新 spec 将依次合并到这些元素\n   * - 如果元素过滤器没有匹配到任何图表元素，新 spec 可能会作为新的图表元素添加到图表（forceAppend 为 true 的情况）。\n   *\n   * 有两种配置类型：\n   * - 直接指定新 spec\n   * - 使用回调的方式返回新 spec\n   */\n  spec:\n    | Partial<T>\n    | ((\n        /** filter 匹配到的图表元素信息 */\n        filteredModelInfo: IModelSpecInfo<T>[],\n        /** 当前 action 对象 */\n        action: IMediaQueryAction<T>,\n        /** 当前媒体查询条件 */\n        query: IMediaQueryCondition\n      ) => Partial<T>);\n  /**\n   * 元素过滤器类型\n   * （规定 filter 需要过滤的元素类型，以及新 spec 对应的元素类型）\n   * @default 'chart'\n   */\n  filterType?: MediaQueryActionFilterType;\n  /**\n   * 元素过滤器\n   * （如果不配置，则匹配 filterType 对应的所有元素）\n   *\n   * 有两种配置类型：\n   * - 配置为元素 spec 的一部分，在过滤图表元素时基于此 spec 进行模糊匹配\n   * - 配置为函数回调，依次决定当前 filterType 类型下的每个元素实例是否被匹配\n   */\n  filter?: MediaQueryActionFilter<T> | Array<MediaQueryActionFilter<T>>;\n  /**\n   * 元素过滤器匹配不到图表元素时，是否将新 spec 作为新的图表元素添加到图表\n   * （filterType 为 'chart' 时该配置失效）\n   * @default false\n   */\n  forceAppend?: boolean;\n}\n\n/**\n * 元素过滤器类型\n */\nexport type MediaQueryActionFilterType =\n  | 'region'\n  | 'series'\n  | 'chart'\n  | `${SeriesTypeEnum}` // 具体 series 类型，如 'bar'、'line'\n  | `${ComponentTypeEnum}` // 具体 component 类型，如 'cartesianAxis-band'\n  | keyof IChartSpec; // 组件 spec key，可视为简化版 component 类型，如 'axes'、'legends'、'crosshair'\n\n/**\n * 元素过滤器\n *\n * 有两种配置类型：\n * - 配置为元素 spec 的一部分，在过滤图表元素时基于此 spec 进行模糊匹配\n * - 配置为函数回调，依次决定当前 filterType 类型下的每个元素实例是否被匹配\n */\nexport type MediaQueryActionFilter<T extends Record<string, unknown> = any> =\n  | Partial<T>\n  | ((\n      /** 当前图表元素信息 */\n      modelInfo: IModelSpecInfo<T>,\n      /** 当前 action 对象 */\n      action: IMediaQueryAction<T>,\n      /** 当前媒体查询条件 */\n      query: IMediaQueryCondition\n    ) => boolean);\n"]}