{"version":3,"sources":["../src/typings/spec/common.ts"],"names":[],"mappings":"AAsHA,MAAM,CAAN,IAAY,cAWX;AAXD,WAAY,cAAc;IACxB,qDAAqC,CAAA;IACrC,mDAAmC,CAAA;IACnC,+BAAe,CAAA;IACf,mCAAmB,CAAA;IACnB,qCAAqB,CAAA;IACrB,2BAAW,CAAA;IACX,2BAAW,CAAA;IACX,qCAAqB,CAAA;IACrB,qDAAqC,CAAA;IACrC,+BAAe,CAAA;AACjB,CAAC,EAXW,cAAc,KAAd,cAAc,QAWzB","file":"common.js","sourcesContent":["import type { IVChart } from './../../core/interface';\nimport type { IImageMarkSpec } from '../visual';\nimport type { LayoutCallBack } from '../../layout/interface';\nimport type {\n  DataSet,\n  DataView,\n  ISimplifyOptions,\n  IFieldsOptions,\n  IFilterOptions,\n  IFoldOptions,\n  IDsvParserOptions\n} from '@visactor/vdataset';\nimport type { RegionSpec } from '../../region/interface';\nimport type { IHoverSpec, ISelectSpec, IInteractionSpec } from '../../interaction/interface/spec';\nimport type { IRenderOption } from '../../compile/interface';\nimport type { ISeriesTooltipSpec, ITooltipSpec } from '../../component/tooltip/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type { ILayoutSpec } from '../../layout/interface';\n// eslint-disable-next-line no-duplicate-imports\nimport type {\n  ConvertToMarkStyleSpec,\n  IArcMarkSpec,\n  IAreaMarkSpec,\n  IBoxPlotMarkSpec,\n  ICommonSpec,\n  IGroupMarkSpec,\n  ILineMarkSpec,\n  ILinkPathMarkSpec,\n  IPathMarkSpec,\n  IPolygonMarkSpec,\n  IRectMarkSpec,\n  IRuleMarkSpec,\n  ISymbolMarkSpec,\n  IRippleMarkSpec,\n  ITextMarkSpec,\n  IVisualSpecScale\n} from '../visual';\nimport type { StateValue } from '../../compile/mark/interface';\nimport type { ISeriesStyle, SeriesType } from '../../series/interface';\nimport type { Datum, StringOrNumber } from '../common';\nimport type { IInvalidType } from '../data';\nimport type { IAnimationSpec, IMorphSeriesSpec } from '../../animation/spec';\nimport type { IPlayer } from '../../component/player/interface';\nimport type { IMark, IMarkProgressiveConfig, IMarkRaw, MarkTypeEnum } from '../../mark/interface';\nimport type { IDataZoomSpec } from '../../component/data-zoom/data-zoom/interface';\nimport type { IScrollBarSpec } from '../../component/data-zoom/scroll-bar/interface';\nimport type { ICrosshairSpec } from '../../component/crosshair/interface';\nimport type { ITheme } from '../../theme/interface';\nimport type { ITitleSpec } from '../../component/title/interface';\nimport type { IBrushSpec } from '../../component/brush/interface';\nimport type { ITotalLabelSpec } from '../../component/label/interface';\nimport type { ILegendSpec } from '../../component/legend/interface';\nimport type { ILayoutOrientPadding, ILayoutPaddingSpec } from '../layout';\nimport type { IColor, ICustomPath2D, IGraphic, IOption3D, IRichTextCharacter } from '@visactor/vrender-core';\nimport type { ICommonAxisSpec } from '../../component/axis/interface';\nimport type { IMediaQuerySpec } from './media-query';\nimport type { IModelSpec } from '../../model/interface';\n\nexport type IChartPadding = ILayoutOrientPadding | number;\n\n/** chart option */\nexport interface IInitOption extends Omit<IRenderOption, 'pluginList'> {\n  /**\n   * **仅生效于浏览器环境。**\n   * 图表挂载的父容器，可以直接指定容器 id，也可以传入 dom 对象\n   */\n  dom?: string | HTMLElement;\n  /**\n   * 除去选择 dom 属性进行挂载父容器，也可以使用 renderCanvas 属性直接传入 canvas 实例/ canvasId\n   * 小程序/小组件环境请直接传入 id\n   */\n  renderCanvas?: string | HTMLCanvasElement;\n  /** 数据集 */\n  dataSet?: DataSet;\n  /** 是否自适应容器大小 */\n  autoFit?: boolean;\n  /**\n   * 是否开启动画\n   */\n  animation?: boolean;\n\n  /**\n   * 自定义布局函数\n   */\n  layout?: LayoutCallBack;\n\n  /**\n   * 当文本省略时，鼠标 hover 到文本上时是否显示 poptip\n   * @default true\n   */\n  poptip?: boolean;\n\n  /**\n   * 报错的回调函数\n   * @since 1.2.0\n   */\n  onError?: (...args: any[]) => void;\n\n  /**\n   * 默认主题（支持完整主题对象或者主题名称，主题名称需要提前在 `ThemeManager` 中注册）\n   * @since 1.3.0\n   */\n  theme?: string | ITheme;\n\n  /**\n   * 是否关闭交互效果\n   * @since 1.9.0\n   * @default false\n   */\n  disableTriggerEvent?: boolean;\n  /**\n   * 当自动响应容器resize 事件时，触发resize 的间隔时长，单位毫秒\n   * @since 1.12.5\n   * @default 100\n   */\n  resizeDelay?: number;\n}\n\nexport enum RenderModeEnum {\n  'desktop-browser' = 'desktop-browser',\n  'mobile-browser' = 'mobile-browser',\n  'node' = 'node',\n  'worker' = 'worker',\n  'miniApp' = 'miniApp',\n  'wx' = 'wx',\n  'tt' = 'tt',\n  'harmony' = 'harmony',\n  'desktop-miniApp' = 'desktop-miniApp',\n  'lynx' = 'lynx'\n}\nexport type RenderMode = keyof typeof RenderModeEnum;\n\n/** chart spec */\nexport interface IChartSpec {\n  /** 图表类型 */\n  type: string;\n  /** 数据 */\n  data?: IData;\n  /** 画布宽度 */\n  width?: number;\n  /** 画布高度 */\n  height?: number;\n  /**\n   * 图表宽高是否自适应容器，浏览器环境下默认为 true。\n   * 该配置的优先级高于构造函数中的 autoFit 配置。\n   * 如果用户配置了 width，则以用户配置的 width 为准，height 同理。\n   */\n  autoFit?: boolean;\n  /**\n   * 图表整体 padding 设置\n   */\n  padding?: ILayoutPaddingSpec;\n  /**\n   * 图表色系配置\n   */\n  color?: string[] | Omit<IVisualSpecScale<unknown, string>, 'id'>;\n  /**\n   * 系列\n   * @description 仅在组合图中使用, 文档中除组合图外均未透出该配置\n   */\n  series?: ISeriesSpec[];\n  /**\n   * 系列样式\n   * @description 仅在图表配置了seriesField时生效\n   */\n  seriesStyle?: ISeriesStyle;\n\n  /**\n   * 自动关闭动画的阀值，对应的是单系列data的长度\n   * @since 1.2.0\n   */\n  animationThreshold?: number;\n\n  /** hover 交互 */\n  hover?: boolean | IHoverSpec;\n  /** select 交互 */\n  select?: boolean | ISelectSpec;\n\n  /** region配置 */\n  region?: RegionSpec[];\n  /** 图表标题配置 */\n  title?: ITitleSpec;\n  /** 布局配置 */\n  layout?: ILayoutSpec;\n  /** 图例配置 */\n  legends?: ILegendSpec | ILegendSpec[];\n  /** 十字辅助线配置 */\n  crosshair?: ICrosshairSpec | ICrosshairSpec[];\n  /** tooltip配置 */\n  tooltip?: ITooltipSpec;\n  /** 播放器配置 */\n  player?: IPlayer;\n  /** 缩略轴配置 */\n  dataZoom?: IDataZoomSpec | IDataZoomSpec[];\n  /** 滚动条配置 */\n  scrollBar?: IScrollBarSpec | IScrollBarSpec[];\n  /** 框选配置 */\n  brush?: IBrushSpec;\n  /** 全局 scale 配置 */\n  scales?: IVisualSpecScale<unknown, unknown>[];\n  /** 自定义mark */\n  customMark?: ICustomMarkSpec<EnableMarkType>[];\n  /** 轴 */\n  axes?: ICommonAxisSpec[];\n  /**\n   * 图表上的主题定义。\n   * 可以直接配置主题名，前提是该主题名已经注册\n   */\n  theme?: Omit<ITheme, 'name'> | string;\n  /**\n   * 图表背景色配置，优先级高于构造函数中的 background 配置\n   * 自1.11.6版本支持渐变色对象的配置\n   */\n  background?: IBackgroundSpec;\n\n  // TODO：后续开放，现在仍有问题\n  // poptip?: PopTipAttributes;\n  // TODO: 补充动画配置\n\n  /**\n   * 堆积时是否逆序\n   * @default false\n   * @since 1.4.0\n   */\n  stackInverse?: boolean;\n  /**\n   * 堆积时是否排序\n   * @default false\n   * @since 1.10.4\n   */\n  stackSort?: boolean;\n  /**\n   * 媒体查询配置\n   * @since 1.8.0\n   */\n  media?: IMediaQuerySpec;\n}\n\nexport type IBackgroundSpec = IColor | ConvertToMarkStyleSpec<IGroupMarkSpec>;\n\n/** data */\nexport type IDataType = IDataValues | DataView;\nexport type IData = IDataType | IDataType[];\nexport type DataKeyType = string | string[] | ((data: Datum, index: number) => string);\nexport type BuildInTransformOptions =\n  | {\n      /** 地理数据简化 */\n      type: 'simplify';\n      options: ISimplifyOptions;\n    }\n  | {\n      /** 数据维度处理，包括排序，逆序，数据筛选能力 */\n      type: 'fields';\n      options: IFieldsOptions;\n    }\n  | {\n      /** 使用回调的自定义筛选 */\n      type: 'filter';\n      options: IFilterOptions;\n    }\n  | {\n      /** 数据展开 */\n      type: 'fold';\n      options: IFoldOptions;\n    };\n\nexport interface IFieldsMeta {\n  /** TODO: 字段通用format, 暂时先不支持 */\n  // format?: (datum: Datum, index: number) => unknown;\n  /**\n   * 字段别名\n   */\n  alias?: string;\n  /** 字段取值范围 */\n  domain?: StringOrNumber[];\n  /**\n   * 是否使用 domain 锁定统计信息。默认为 false\n   * true - 在图例交互场景，也固定domain\n   * 当设置为 `onlyFull` 时，仅在初始化的展示完整数据的场景锁定domain，在交互触发的筛选场景不锁定\n   */\n  lockStatisticsByDomain?: boolean | 'onlyFull';\n  /** 连续型 还是 离散型 */\n  type?: 'ordinal' | 'linear';\n  /** 排序顺序 不设置的话当前维度不进行排序 */\n  sortIndex?: number;\n  /** 排序时是否反转 默认为 false */\n  sortReverse?: boolean;\n  /**\n   * 排序简易配置\n   * 当配置了 sort 时，sortIndex 默认为 0 ，sortReverse 跟随 sort 的值，'desc' 时为 true，'asc' 时为 false\n   * 当配置了 sortIndex 和 sortReverser 时，优先级会高于 sort 的默认效果\n   * @support since 2.0.0\n   */\n  sort?: 'desc' | 'asc';\n}\n\nexport interface SheetParseOptions extends CommonParseOptions {\n  /**\n   * 特定类型的数据，支持以下类型：\n   * - csv: 逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。\n   * - dsv: 分隔值（Delimiter-Separated Values，DSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。\n   * - tsv: 制表符分隔值（Tab-Separated Values，TSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。\n   */\n  type: 'csv' | 'dsv' | 'tsv';\n  /**\n   * 具体的解析配置\n   */\n  options?: IDsvParserOptions;\n}\n\nexport interface CommonParseOptions {\n  /**\n   * 是否需要对数据进行 clone，默认为 true。\n   * 如果考虑性能，你可以将其关闭，但是这会带了一些副作用，即我们会对传入的数据进行修改（不会对原有字段及值修改，只会在原有数据基础上添加一些字段）。\n   * @default true\n   * @since 1.3.0\n   */\n  clone?: boolean;\n}\n\nexport interface IDataValues {\n  /**\n   * 数据唯一标识\n   */\n  id?: StringOrNumber;\n  /**\n   * 数据\n   */\n  values: Datum[] | string;\n  /**\n   * 引用的数据索引\n   */\n  fromDataIndex?: number;\n  /**\n   * 引用的数据 id\n   */\n  fromDataId?: StringOrNumber;\n  /**\n   * 数据 transform 配置\n   */\n  transforms?: BuildInTransformOptions[];\n  /**\n   * 数据字段相关配置\n   */\n  fields?: Record<\n    /** 字段key */\n    string,\n    IFieldsMeta\n  >;\n  /**\n   * 数据解析器配置\n   */\n  parser?: SheetParseOptions | CommonParseOptions;\n}\n\nexport type IHierarchyNodeData = {\n  value?: number;\n  children?: IHierarchyNodeData[];\n} & Datum;\n\nexport interface IHierarchyDataValues extends Omit<IDataValues, 'values'> {\n  values: IHierarchyNodeData;\n}\n\nexport type IHierarchyData = DataView | IHierarchyDataValues;\n\n/** series */\nexport interface ISeriesSpec extends IInteractionSpec {\n  /** 系列类型 */\n  type: SeriesType;\n\n  /** 系列名称 */\n  name?: string;\n\n  /** 用户自定义的 series id */\n  id?: StringOrNumber;\n  /**\n   * 系列数据\n   * @description 系列可以配置自身的数据，也可以从chart.data中获取数据\n   */\n  data?: IDataType;\n  /**\n   * 系列关联的数据索引\n   * @default 0\n   */\n  dataIndex?: number;\n  /**\n   * 系列关联的数据id\n   */\n  dataId?: StringOrNumber;\n  /**\n   * dataKey用于绑定数据与Mark的关系, 该配置在动画中非常重要.\n   */\n  dataKey?: DataKeyType;\n\n  /**\n   * 系列关联的region索引\n   * @default 0\n   */\n  regionIndex?: number;\n  /** 系列关联的region id */\n  regionId?: StringOrNumber;\n  /**\n   * 分组字段\n   */\n  seriesField?: string;\n  /**\n   * 系列样式\n   * @description 仅在图表配置了seriesField时生效\n   */\n  seriesStyle?: ISeriesStyle;\n\n  /** 是否对数据进行堆叠处理 */\n  stack?: boolean;\n\n  /**\n   * 堆叠时的分组值\n   * stackValue 相等的系列将在一起堆积。没有配置的系列将在一组\n   * @since 1.4.0\n   */\n  stackValue?: StringOrNumber;\n\n  /** 堆叠汇总标签\n   * @since 1.3.0\n   */\n  totalLabel?: ITotalLabelSpec;\n\n  /** 是否对数据进行百分比处理 */\n  percent?: boolean;\n\n  /** 是否围绕中心轴偏移轮廓 */\n  stackOffsetSilhouette?: boolean;\n\n  /**\n   * 非合规数据点连接方式\n   * @description null，undefined等非法数据点连接方式。\n   * @default 'break'\n   * 'break'指在该数据点处断开\n   * 'link' 指忽略该点保持连续\n   * 'zero' 指该点默认数值为0\n   * 'ignore' 指不处理\n   */\n  invalidType?: IInvalidType;\n\n  /** 系列对应的提示信息设置，优先级高于图表的tooltip配置 */\n  tooltip?: ISeriesTooltipSpec;\n\n  /**\n   * 是否开启系列动画\n   */\n  animation?: boolean;\n  /**\n   * 自动关闭动画的阀值，对应的是单系列data的长度\n   * @since 1.2.0\n   */\n  animationThreshold?: number;\n\n  /**\n   * 是否支持3d视角\n   */\n  support3d?: boolean;\n  /**\n   * morph 动画配置\n   */\n  morph?: IMorphSeriesSpec;\n\n  /**\n   * 系列的扩展mark，能够获取系列上的数据\n   */\n  extensionMark?: (IExtensionMarkSpec<Exclude<EnableMarkType, 'group'>> | IExtensionGroupMarkSpec)[];\n\n  /**\n   * 今当通过`series`配置的时候，才会生效\n   */\n  zIndex?: number;\n\n  /**\n   * series background\n   * 作用是支持系列的图形对系列背景进行 mask，或者切分等效果。不是作为背景图\n   * 暂时不开放api，避免出现break change\n   */\n  // background?: IBackgroundSpec;\n}\n\nexport type IChartExtendsSeriesSpec<T extends ISeriesSpec> = Omit<T, 'data' | 'morph' | 'stackValue' | 'tooltip'>;\n\nexport type AdaptiveSpec<T, K extends keyof any> = {\n  [key in Exclude<keyof T, K>]: T[key];\n} & { [key in K]: any };\n\nexport interface IMarkStateFullSpec<T> extends Record<string, IMarkStateSpec<T> | IMarkStateStyleSpec<T>> {\n  /**\n   * 正常状态下图元的样式设置\n   */\n  normal?: IMarkStateSpec<T> | IMarkStateStyleSpec<T>;\n  /**\n   * hover状态下图元的样式设置\n   */\n  hover?: IMarkStateSpec<T> | IMarkStateStyleSpec<T>;\n  /**\n   * 没有被hover的状态下图元的样式设置\n   */\n  hover_reverse?: IMarkStateSpec<T> | IMarkStateStyleSpec<T>;\n  /**\n   * 选中状态下图元的样式设置\n   */\n  selected?: IMarkStateSpec<T> | IMarkStateStyleSpec<T>;\n  /**\n   * 没有被选中的状态下图元的样式设置\n   */\n  selected_reverse?: IMarkStateSpec<T> | IMarkStateStyleSpec<T>;\n}\n\n/** markSpec */\nexport type IMarkSpec<T extends ICommonSpec = ICommonSpec> = {\n  /**\n   * 用户id\n   */\n  id?: StringOrNumber;\n  /**\n   * 是否响应交互\n   */\n  interactive?: boolean;\n  // /**\n  //  * 是否会被region区域裁减\n  //  * @todo 暂未支持\n  //  */\n  // clip?: boolean;\n  /**\n   * 与其他mark元素的层级\n   */\n  zIndex?: number;\n  /**\n   * mark 层 是否显示配置\n   */\n  visible?: boolean;\n  /** 默认样式设置 */\n  style?: ConvertToMarkStyleSpec<T>;\n  /** 不同状态下的样式配置 */\n  state?: IMarkStateFullSpec<T>;\n  /**\n   * 状态排序方法，默认状态都是按照添加的顺序处理的，如果有特殊的需求，需要指定状态顺序，可以通过这个方法实现\n   * @since 1.9.0\n   */\n  stateSort?: (stateA: string, stateB: string) => number;\n\n  /*\n   * 是否是3d视角的mark\n   */\n  support3d?: boolean;\n  /* customized shape of mark  */\n  customShape?: (datum: any[], attrs: any, path: ICustomPath2D) => ICustomPath2D;\n} & IMarkProgressiveConfig;\n\nexport type IMarkStateFilter =\n  | {\n      /** 维度筛选 */\n      fields: { [key in string]: { type: 'ordinal' | 'linear'; domain: StringOrNumber[] } };\n    }\n  | {\n      /** 筛选数据 */\n      datums: Datum[];\n      /** 筛选数据 */\n      datumKeys: string[];\n    }\n  | {\n      /** 筛选 item */\n      items: IGraphic[];\n    }\n  /** 筛选函数 */\n  | ((\n      datum: Datum,\n      options: {\n        mark?: IMark;\n        type?: string;\n        renderNode?: IGraphic;\n      }\n    ) => boolean);\n\nexport interface IMarkStateSpec<T> {\n  /** 筛选器 */\n  filter?: IMarkStateFilter;\n  /** 状态优先级 */\n  level?: number | undefined;\n  style: ConvertToMarkStyleSpec<T>;\n}\n\nexport type IMarkStateStyleSpec<T> = ConvertToMarkStyleSpec<T>;\n\nexport interface IMarkStateTheme<T> extends Record<string, T> {\n  /**\n   * 图元在正常状态下的主题样式设置\n   */\n  normal?: T;\n  /**\n   * 图元在 hover 状态下的主题样式设置\n   */\n  hover?: T;\n  /**\n   * 图元在 未被hover 状态下的主题样式设置\n   */\n  hover_reverse?: T;\n  /**\n   * 图元在 选中状态下的主题样式设置\n   */\n  selected?: T;\n  /**\n   * 图元在 未被选中 状态下的主题样式设置\n   */\n  selected_reverse?: T;\n}\n\nexport type IMarkTheme<T> = {\n  /**\n   * mark 层 是否显示配置\n   */\n  visible?: boolean;\n  /** 默认样式设置 */\n  style?: T;\n  /** 不同状态下的样式配置 */\n  state?: IMarkStateTheme<T>;\n  /**\n   * 可交互的开关\n   */\n  interactive?: boolean;\n};\n\nexport interface IPerformanceHook {\n  // constructor\n  // 创建完成。在使用 vstory 的场景下，图表实例不由业务创建，业务想要获取图表时机非常靠后，因此补充一个钩子\n  afterCreateVChart?: (vchart?: IVChart) => void;\n\n  // InitRender\n  //   ├── InitializeChart\n  //   ├── CompileToVGrammar\n  //   ├── ParseView\n  //   |  └── ParseExpression\n  //   ├── (new View)\n  //   |  ├── CreateRuntime\n  //   |  └── (view.initialize)\n  //   |     └── CreateVRenderStage\n  //   └── SrViewEvaluateAsync / SrViewRunAsync\n  //      ├── MarkTransform\n  //      ├── FacetTransform\n  //      ├── CreateVRenderMark\n  //      └── VRenderDraw\n\n  // 初始化图表配置\n  beforeInitializeChart?: (vchart?: IVChart) => void;\n  afterInitializeChart?: (vchart?: IVChart) => void;\n\n  // 编译\n  beforeCompileToVGrammar?: (vchart?: IVChart) => void;\n  afterCompileToVGrammar?: (vchart?: IVChart) => void;\n  // 各个图表模块编译\n  beforeRegionCompile?: (vchart?: IVChart) => void;\n  afterRegionCompile?: (vchart?: IVChart) => void;\n  beforeSeriesCompile?: (vchart?: IVChart) => void;\n  afterSeriesCompile?: (vchart?: IVChart) => void;\n  beforeComponentCompile?: (vchart?: IVChart) => void;\n  afterComponentCompile?: (vchart?: IVChart) => void;\n\n  // resize的时候的钩子\n  beforeResizeWithUpdate?: (vchart?: IVChart) => void;\n  afterResizeWithUpdate?: (vchart?: IVChart) => void;\n\n  // LayoutWithSceneGraph 二次布局\n  beforeLayoutWithSceneGraph?: (vchart?: IVChart) => void;\n  afterLayoutWithSceneGraph?: (vchart?: IVChart) => void;\n\n  // VGrammar 解析spec\n  beforeParseView?: (vchart?: IVChart) => void;\n  afterParseView?: (vchart?: IVChart) => void;\n\n  // 初始化runtime\n  beforeCreateRuntime?: (vchart?: IVChart) => void;\n  afterCreateRuntime?: (vchart?: IVChart) => void;\n\n  // VGrammar EvaluateAsync 时间\n  beforeSrViewEvaluateAsync?: (vchart?: IVChart) => void;\n  afterSrViewEvaluateAsync?: (vchart?: IVChart) => void;\n\n  // VGrammar RunAsync 时间\n  beforeSrViewRunAsync?: (vchart?: IVChart) => void;\n  afterSrViewRunAsync?: (vchart?: IVChart) => void;\n\n  // transform测量\n  beforeTransform?: (name: string, vchart?: IVChart) => void;\n  afterTransform?: (name: string, vchart?: IVChart) => void;\n\n  // Create VRender Stage 时间\n  beforeCreateVRenderStage?: (vchart?: IVChart) => void;\n  afterCreateVRenderStage?: (vchart?: IVChart) => void;\n\n  // Create VRender Mark 时间\n  beforeCreateVRenderMark?: (vchart?: IVChart) => void;\n  afterCreateVRenderMark?: (vchart?: IVChart) => void;\n\n  // VGrammar 创建元素完成，vrender 绘图之前\n  beforeDoRender?: (vchart?: IVChart) => void;\n\n  // VRender Draw 时间\n  beforeVRenderDraw?: (vchart?: IVChart) => void;\n  afterVRenderDraw?: (vchart?: IVChart) => void;\n\n  // 词云\n  afterWordcloudShapeDraw?: (vchart?: IVChart) => void;\n}\n\nexport type IBuildinMarkSpec = {\n  group: IGroupMarkSpec;\n  symbol: ISymbolMarkSpec;\n  rule: IRuleMarkSpec;\n  line: ILineMarkSpec;\n  text: ITextMarkSpec;\n  rect: IRectMarkSpec;\n  image: IImageMarkSpec;\n  path: IPathMarkSpec;\n  area: IAreaMarkSpec;\n  arc: IArcMarkSpec;\n  polygon: IPolygonMarkSpec;\n  boxPlot: IBoxPlotMarkSpec;\n  linkPath: ILinkPathMarkSpec;\n  ripple: IRippleMarkSpec;\n};\n\nexport type EnableMarkType = keyof IBuildinMarkSpec;\nexport interface ICustomMarkSpec<T extends EnableMarkType>\n  extends IModelSpec,\n    IMarkSpec<IBuildinMarkSpec[T]>,\n    IAnimationSpec<string, string> {\n  type: T;\n  /**\n   * mark对应的名称，主要用于事件过滤如： { markName: 'yourName' }\n   * @since 1.12.5\n   */\n  name?: string;\n  /**\n   * 关联的数据索引\n   * @default 与系列使用同一份数据\n   */\n  dataIndex?: number;\n  /**\n   * dataKey用于绑定数据与Mark的关系\n   * 如果数据和系列数据一致，可以不配置，默认会读取系列中的配置\n   *\n   * @support since 1.9.5\n   */\n  dataKey?: string | ((datum: any) => string);\n  /**\n   * 关联的数据id\n   */\n  dataId?: StringOrNumber;\n  /**\n   * specify the component type\n   * @support since 1.9.0\n   */\n  componentType?: string;\n  /**\n   * enable animation of custom-mark or not\n   * @since 1.11.0\n   */\n  animation?: boolean;\n  /**\n   * 指定 parent Id\n   * @since 1.13.0\n   */\n  parent?: string;\n}\nexport interface ICustomMarkGroupSpec extends ICustomMarkSpec<MarkTypeEnum.group> {\n  children?: ICustomMarkSpec<EnableMarkType>[];\n}\n\nexport interface IExtensionMarkSpec<T extends Exclude<EnableMarkType, 'group'>> extends ICustomMarkSpec<T> {\n  /**\n   * 关联的数据索引\n   * @default 与系列使用同一份数据\n   */\n  dataIndex?: number;\n  /**\n   * dataKey用于绑定数据与Mark的关系\n   * 如果数据和系列数据一致，可以不配置，默认会读取系列中的配置\n   *\n   * @support since 1.9.5\n   */\n  dataKey?: string | ((datum: any) => string);\n  /**\n   * 关联的数据id\n   */\n  dataId?: StringOrNumber;\n  /**\n   * specify the component type\n   * @support since 1.9.0\n   */\n  componentType?: string;\n}\n\nexport interface IExtensionGroupMarkSpec extends ICustomMarkSpec<MarkTypeEnum.group> {\n  /**\n   * 支持子节点\n   */\n  children?: ICustomMarkSpec<EnableMarkType>[];\n}\n\n/** 纯文本类型的 formatMethod */\nexport type ITextFormatMethod<T extends any[]> = (\n  ...args: T\n) => ITextMarkSpec['text'] | { type: 'text'; text: ITextMarkSpec['text'] };\n\nexport type IRichTextFormatMethod<T extends any[]> = (...args: T) =>\n  | {\n      /**\n       * 设置文本类型为富文本\n       */\n      type: 'rich';\n      /**\n       * 当文本类型为富文本的时候，设置文本的内容\n       */\n      text: IRichTextCharacter[];\n    }\n  | IRichTextCharacter[];\n\n/**\n * 常规 text.formatMethod 支持返回文字字符串，或统一的对象配置\n * （这里特指由 vgrammar 代理的 text 图元）\n */\nexport type IFormatMethod<T extends any[]> = (\n  ...args: T\n) => ReturnType<ITextFormatMethod<T>> | ReturnType<IRichTextFormatMethod<T>>;\n"]}