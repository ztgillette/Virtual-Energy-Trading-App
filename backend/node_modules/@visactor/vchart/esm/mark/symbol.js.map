{"version":3,"sources":["../src/mark/symbol.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAK5C,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAC5E,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AACvE,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,MAAM,OAAO,UAAW,SAAQ,QAAyB;IAAzD;;QAEW,SAAI,GAAG,UAAU,CAAC,IAAI,CAAC;IAwBlC,CAAC;IAvBW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,IAAI,EAAE,CAAC,EACP,UAAU,EAAE,QAAQ,EACpB,IAAI,EAAE,SAAS,EACf,SAAS,EAAE,CAAC,GACb,CAAC;QACF,OAAO,YAA2C,CAAC;IACrD,CAAC;IAES,2BAA2B,CAAC,CAAe,EAAE,KAAU,EAAE,UAAgB;;QACjF,MAAM,WAAW,GAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC5E,MAAM,UAAU,GACd,MAAA,MAAA,WAAW,CAAC,KAAK,mCAAI,WAAW,CAAC,UAAU,mCAAI,MAAC,CAAC,CAAC,SAAqC,0CAAE,UAAU,CAAC;QAEtG,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;YACrB,WAAW,CAAC,UAAU,GAAG,QAAQ,CAAC;SACnC;aAAM;YACL,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;SACrC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;;AAxBe,eAAI,YAAuB;AA2B7C,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAClD,kBAAkB,EAAE,CAAC;IACrB,cAAc,EAAE,CAAC;IACjB,uBAAuB,EAAE,CAAC;IAE1B,OAAO,CAAC,wBAAwB,WAAsB,YAAY,CAAC,CAAC;AACtE,CAAC,CAAC","file":"symbol.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { ISymbolMarkSpec } from '../typings/visual';\nimport { BaseMark } from './base/base-mark';\nimport type { IMarkGraphic, IMarkStyle, ISymbolMark } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport type { ISymbolGraphicAttribute } from '@visactor/vrender-core';\nimport { createSymbol } from '@visactor/vrender-core';\nimport { registerShadowRoot, registerSymbol } from '@visactor/vrender-kits';\nimport { registerSymbolDataLabel } from '@visactor/vrender-components';\nimport { isNil } from '@visactor/vutils';\n\nexport class SymbolMark extends BaseMark<ISymbolMarkSpec> implements ISymbolMark {\n  static readonly type = MarkTypeEnum.symbol;\n  readonly type = SymbolMark.type;\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<ISymbolMarkSpec> = {\n      ...super._getDefaultStyle(),\n      size: 1,\n      symbolType: 'circle',\n      fill: undefined,\n      lineWidth: 0\n    };\n    return defaultStyle as IMarkStyle<ISymbolMarkSpec>;\n  }\n\n  protected _transformGraphicAttributes(g: IMarkGraphic, attrs: any, groupAttrs?: any) {\n    const symbolAttrs = super._transformGraphicAttributes(g, attrs, groupAttrs);\n    const symbolType =\n      symbolAttrs.shape ?? symbolAttrs.symbolType ?? (g.attribute as ISymbolGraphicAttribute)?.symbolType;\n\n    if (isNil(symbolType)) {\n      symbolAttrs.symbolType = 'circle';\n    } else {\n      symbolAttrs.symbolType = symbolType;\n    }\n    return symbolAttrs;\n  }\n}\n\nexport const registerSymbolMark = () => {\n  Factory.registerMark(SymbolMark.type, SymbolMark);\n  registerShadowRoot();\n  registerSymbol();\n  registerSymbolDataLabel();\n\n  Factory.registerGraphicComponent(MarkTypeEnum.symbol, createSymbol);\n};\n"]}