import { Factory } from "./../core/factory";

import { BaseMark } from "./base/base-mark";

import { createSymbol } from "@visactor/vrender-core";

import { registerShadowRoot, registerSymbol } from "@visactor/vrender-kits";

import { registerSymbolDataLabel } from "@visactor/vrender-components";

import { isNil } from "@visactor/vutils";

export class SymbolMark extends BaseMark {
    constructor() {
        super(...arguments), this.type = SymbolMark.type;
    }
    _getDefaultStyle() {
        return Object.assign(Object.assign({}, super._getDefaultStyle()), {
            size: 1,
            symbolType: "circle",
            fill: void 0,
            lineWidth: 0
        });
    }
    _transformGraphicAttributes(g, attrs, groupAttrs) {
        var _a, _b, _c;
        const symbolAttrs = super._transformGraphicAttributes(g, attrs, groupAttrs), symbolType = null !== (_b = null !== (_a = symbolAttrs.shape) && void 0 !== _a ? _a : symbolAttrs.symbolType) && void 0 !== _b ? _b : null === (_c = g.attribute) || void 0 === _c ? void 0 : _c.symbolType;
        return isNil(symbolType) ? symbolAttrs.symbolType = "circle" : symbolAttrs.symbolType = symbolType, 
        symbolAttrs;
    }
}

SymbolMark.type = "symbol";

export const registerSymbolMark = () => {
    Factory.registerMark(SymbolMark.type, SymbolMark), registerShadowRoot(), registerSymbol(), 
    registerSymbolDataLabel(), Factory.registerGraphicComponent("symbol", createSymbol);
};
//# sourceMappingURL=symbol.js.map
