{"version":3,"sources":["../src/mark/box-plot.ts"],"names":[],"mappings":"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","file":"box-plot.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { BoxPlotShaftShape, IBoxPlotMarkSpec } from '../typings/visual';\nimport type { IBoxPlotMark, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { createLine, createRect, type IGlyph, type ILineGraphicAttribute } from '@visactor/vrender-core';\nimport { GlyphMark, registerGlyphMark } from './glyph';\nimport type { Datum } from '../typings/common';\nimport { isValidNumber } from '@visactor/vutils';\nimport { registerLine, registerRect } from '@visactor/vrender-kits';\n\nconst BAR_BOX_PLOT_CHANNELS = [\n  'x',\n  'y',\n  'minMaxWidth',\n  'minMaxHeight',\n  'q1q3Width',\n  'q1q3Height',\n  'q1',\n  'q3',\n  'min',\n  'max',\n  'median',\n  'angle'\n];\n\nconst BOX_PLOT_CHANNELS = [\n  'x',\n  'y',\n  'boxWidth',\n  'boxHeight',\n  'ruleWidth',\n  'ruleHeight',\n  'q1',\n  'q3',\n  'min',\n  'max',\n  'median',\n  'angle'\n];\n\nexport class BoxPlotMark\n  extends GlyphMark<IBoxPlotMarkSpec, { direction?: 'horizontal' | 'vertical'; shaftShape?: BoxPlotShaftShape }>\n  implements IBoxPlotMark\n{\n  static readonly type = MarkTypeEnum.boxPlot;\n  readonly type = BoxPlotMark.type;\n\n  protected _isHorizontal() {\n    return this._glyphConfig && this._glyphConfig.direction === 'horizontal';\n  }\n\n  setGlyphConfig(cfg: { direction?: 'horizontal' | 'vertical'; shaftShape?: BoxPlotShaftShape }): void {\n    super.setGlyphConfig(cfg);\n\n    if (cfg.shaftShape === 'bar') {\n      this._subMarks = {\n        minMaxBox: {\n          type: 'rect',\n          defaultAttributes: {\n            lineWidth: 0\n          }\n        },\n        q1q3Box: {\n          type: 'rect',\n          defaultAttributes: {\n            lineWidth: 0\n          }\n        },\n        median: {\n          type: 'line',\n          defaultAttributes: { x: 0, y: 0 }\n        }\n      };\n      this._positionChannels = BAR_BOX_PLOT_CHANNELS;\n      this._channelEncoder = {\n        minMaxFillOpacity: (val: number) => ({ minMaxBox: { fillOpacity: val } }),\n        lineWidth: (val: number) => ({ minMaxBox: { lineWidth: 0 }, q1q3Box: { lineWidth: 0 } }),\n        stroke: (val: number) => ({ minMaxBox: { stroke: false }, q1q3Box: { stroke: false } })\n      };\n\n      this._positionEncoder = (glyphAttrs: any, datum: Datum, g: IGlyph) => {\n        const {\n          x = g.attribute.x,\n          y = g.attribute.y,\n          minMaxWidth = (g.attribute as any).minMaxWidth,\n          minMaxHeight = (g.attribute as any).minMaxHeight,\n          q1q3Width = (g.attribute as any).q1q3Width,\n          q1q3Height = (g.attribute as any).q1q3Height,\n          q1 = (g.attribute as any).q1,\n          q3 = (g.attribute as any).q3,\n          min = (g.attribute as any).min,\n          max = (g.attribute as any).max,\n          median = (g.attribute as any).median,\n          angle\n        } = glyphAttrs;\n        const isH = this._isHorizontal();\n\n        const attributes: any = {};\n\n        if (isH) {\n          attributes.minMaxBox = {\n            x: min,\n            x1: max,\n            y: y - minMaxHeight / 2,\n            y1: y + minMaxHeight / 2\n          };\n          attributes.q1q3Box = {\n            x: q1,\n            x1: q3,\n            y: y - q1q3Height / 2,\n            y1: y + q1q3Height / 2\n          };\n\n          attributes.median = {\n            points: [\n              {\n                x: median,\n                y: y - q1q3Height / 2\n              },\n              {\n                x: median,\n                y: y + q1q3Height / 2\n              }\n            ]\n          };\n        } else {\n          attributes.minMaxBox = {\n            y: min,\n            y1: max,\n            x: x - minMaxWidth / 2,\n            x1: x + minMaxWidth / 2\n          };\n          attributes.q1q3Box = {\n            y: q1,\n            y1: q3,\n            x: x - q1q3Width / 2,\n            x1: x + q1q3Width / 2\n          };\n\n          attributes.median = {\n            points: [\n              {\n                y: median,\n                x: x - q1q3Width / 2\n              },\n              {\n                y: median,\n                x: x + q1q3Width / 2\n              }\n            ]\n          };\n        }\n\n        if (isValidNumber(angle)) {\n          const anchor = glyphAttrs.anchor ?? (isH ? [(min + max) / 2, y] : [x, (min + max) / 2]);\n          Object.keys(attributes).forEach(key => {\n            attributes[key].angle = angle;\n            attributes[key].anchor = anchor;\n          });\n        }\n\n        return attributes;\n      };\n    } else {\n      this._subMarks = {\n        shaft: { type: 'line', defaultAttributes: { x: 0, y: 0 } },\n        box: { type: 'rect' },\n        max: { type: 'line', defaultAttributes: { x: 0, y: 0 } },\n        min: { type: 'line', defaultAttributes: { x: 0, y: 0 } },\n        median: { type: 'line', defaultAttributes: { x: 0, y: 0 } }\n      };\n      this._positionChannels = BOX_PLOT_CHANNELS;\n      this._channelEncoder = null;\n      this._positionEncoder = (glyphAttrs: any, datum: Datum, g: IGlyph) => {\n        const {\n          x = g.attribute.x,\n          y = g.attribute.y,\n          boxWidth = (g.attribute as any).boxWidth,\n          boxHeight = (g.attribute as any).boxHeight,\n          ruleWidth = (g.attribute as any).ruleWidth,\n          ruleHeight = (g.attribute as any).ruleHeight,\n          q1 = (g.attribute as any).q1,\n          q3 = (g.attribute as any).q3,\n          min = (g.attribute as any).min,\n          max = (g.attribute as any).max,\n          median = (g.attribute as any).median,\n          angle\n        } = glyphAttrs;\n        const isH = this._isHorizontal();\n\n        const attributes: any = {};\n\n        if (isH) {\n          attributes.box = {\n            x: q1,\n            x1: q3,\n            y: y - boxHeight / 2,\n            y1: y + boxHeight / 2\n          };\n          attributes.median = {\n            points: [\n              {\n                x: median,\n                y: y - boxHeight / 2\n              },\n              {\n                x: median,\n                y: y + boxHeight / 2\n              }\n            ]\n          };\n          attributes.shaft = {\n            points: [\n              {\n                x: min,\n                y: y\n              },\n              {\n                x: max,\n                y: y\n              }\n            ]\n          };\n          attributes.max = {\n            points: [\n              {\n                x: max,\n                y: y - ruleHeight / 2\n              },\n              {\n                x: max,\n                y: y + ruleHeight / 2\n              }\n            ]\n          };\n          attributes.min = {\n            points: [\n              {\n                x: min,\n                y: y - ruleHeight / 2\n              },\n              {\n                x: min,\n                y: y + ruleHeight / 2\n              }\n            ]\n          };\n        } else {\n          attributes.box = {\n            x: x - boxWidth / 2,\n            x1: x + boxWidth / 2,\n            y: q1,\n            y1: q3\n          };\n          attributes.median = {\n            points: [\n              {\n                x: x - boxWidth / 2,\n                y: median\n              },\n              {\n                x: x + boxWidth / 2,\n                y: median\n              }\n            ]\n          };\n\n          attributes.max = {\n            points: [\n              {\n                x: x - ruleWidth / 2,\n                y: max\n              },\n              {\n                x: x + ruleWidth / 2,\n                y: max\n              }\n            ]\n          };\n          attributes.min = {\n            points: [\n              {\n                x: x - ruleWidth / 2,\n                y: min\n              },\n              {\n                x: x + ruleWidth / 2,\n                y: min\n              }\n            ]\n          };\n          attributes.shaft = {\n            points: [\n              {\n                x: x,\n                y: min\n              },\n              {\n                x: x,\n                y: max\n              }\n            ]\n          };\n        }\n\n        if (isValidNumber(angle)) {\n          const anchor = glyphAttrs.anchor ?? (isH ? [(min + max) / 2, y] : [x, (min + max) / 2]);\n          Object.keys(attributes).forEach(key => {\n            attributes[key].angle = angle;\n            attributes[key].anchor = anchor;\n          });\n        }\n\n        return attributes;\n      };\n    }\n  }\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<IBoxPlotMarkSpec> = {\n      ...super._getDefaultStyle(),\n      lineWidth: 2,\n      boxWidth: 30,\n      shaftWidth: 20,\n      shaftShape: 'line'\n    };\n    return defaultStyle;\n  }\n}\n\nexport const registerBoxPlotMark = () => {\n  registerGlyphMark();\n  registerLine();\n  registerRect();\n  Factory.registerGraphicComponent('line', (attrs: ILineGraphicAttribute) => createLine(attrs));\n  Factory.registerGraphicComponent('rect', (attrs: ILineGraphicAttribute) => createRect(attrs));\n  Factory.registerMark(BoxPlotMark.type, BoxPlotMark);\n};\n"]}