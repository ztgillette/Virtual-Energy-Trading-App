{"version":3,"sources":["../src/mark/line.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAIhD,OAAO,EAAE,2BAA2B,EAAE,MAAM,qBAAqB,CAAC;AAElE,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC1E,OAAO,EAAE,qBAAqB,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AAE9F,MAAM,OAAO,QAAS,SAAQ,YAA2B;IAAzD;;QAEW,SAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IAqBhC,CAAC;IAnBW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,SAAS,EAAE,CAAC,GACb,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAOS,oBAAoB;;QAC5B,IAAI,CAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,IAAI,MAAK,cAAc,CAAC,KAAK,IAAI,CAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,UAAU,MAAK,OAAO,EAAE;YACnF,OAAO,EAAE,CAAC;SACX;QACD,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IACjC,CAAC;;AArBe,aAAI,UAAqB;AAwB3C,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9C,kBAAkB,EAAE,CAAC;IACrB,YAAY,EAAE,CAAC;IACf,qBAAqB,EAAE,CAAC;IACxB,uBAAuB,EAAE,CAAC;IAC1B,2BAA2B,EAAE,CAAC;IAE9B,OAAO,CAAC,wBAAwB,SAAoB,UAAU,CAAC,CAAC;AAClE,CAAC,CAAC","file":"line.js","sourcesContent":["import { Factory } from './../core/factory';\nimport { SeriesTypeEnum } from '../series/interface/type';\nimport type { ILineMarkSpec } from '../typings/visual';\nimport { BaseLineMark } from './base/base-line';\nimport type { ILineMark, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { registerLineOrAreaAnimation } from '../animation/config';\nimport type { IGraphic, ILineGraphicAttribute } from '@visactor/vrender-core';\nimport { createLine } from '@visactor/vrender-core';\nimport { registerLine, registerShadowRoot } from '@visactor/vrender-kits';\nimport { registerLineDataLabel, registerSymbolDataLabel } from '@visactor/vrender-components';\n\nexport class LineMark extends BaseLineMark<ILineMarkSpec> implements ILineMark {\n  static readonly type = MarkTypeEnum.line;\n  readonly type = LineMark.type;\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<ILineMarkSpec> = {\n      ...super._getDefaultStyle(),\n      lineWidth: 1\n    };\n    return defaultStyle;\n  }\n\n  /**\n   * TODO: SeriesTypeEnum 移到最外层\n   * @override 线不支持填充\n   * @returns\n   */\n  protected _getIgnoreAttributes(): string[] {\n    if (this.model?.type === SeriesTypeEnum.radar && this.model?.coordinate === 'polar') {\n      return [];\n    }\n    return ['fill', 'fillOpacity'];\n  }\n}\n\nexport const registerLineMark = () => {\n  Factory.registerMark(LineMark.type, LineMark);\n  registerShadowRoot();\n  registerLine();\n  registerLineDataLabel();\n  registerSymbolDataLabel();\n  registerLineOrAreaAnimation();\n\n  Factory.registerGraphicComponent(MarkTypeEnum.line, createLine);\n};\n"]}