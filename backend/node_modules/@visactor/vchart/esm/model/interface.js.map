{"version":3,"sources":["../src/model/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { IBoundsLike } from '@visactor/vutils';\nimport type { DataSet, DataView } from '@visactor/vdataset';\nimport type { IEvent, IEventDispatcher } from '../event/interface';\nimport type { AnimationStateValues, IMark, IMarkGraphic, IMarkRaw, IMarkStyle, MarkTypeEnum } from '../mark/interface';\nimport type { RenderMode } from '../typings/spec/common';\nimport type { StringOrNumber } from '../typings/common';\nimport type { IGroupMarkSpec, ConvertToMarkStyleSpec, ICommonSpec } from '../typings/visual';\nimport type { IRect } from '../typings/space';\nimport type { IPoint, CoordinateType } from '../typings/coordinate';\nimport type { StateValueType } from '../typings/spec';\nimport type { ICompilable, ICompilableInitOption } from '../compile/interface';\nimport type { IGlobalScale } from '../scale/interface';\nimport type { IChart, IChartSpecInfo, IChartSpecTransformerOption } from '../chart/interface';\nimport type { IThemeColorScheme } from '../theme/color-scheme/interface';\nimport type { ILayoutItem, ILayoutItemSpec } from '../layout/interface';\nimport type { ILayoutPoint, ILayoutRect } from '../typings/layout';\nimport type { ComponentTypeEnum } from '../component/interface';\nimport type { SeriesTypeEnum } from '../series/interface';\nimport type { ITooltipSpec } from '../component/tooltip/interface';\nimport type { TooltipActiveType } from '../typings';\nimport type { IVChart } from '../core/interface';\nimport type { ICompilableData } from '../compile/data/interface';\nimport type { IDimensionData, IDimensionInfo } from '../event/events/dimension/interface';\nimport type { IAxis } from '../component/axis';\n// TODO:\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IModelInitOption {}\n// TODO:\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IModelLayoutOption {}\n// TODO:\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IModelEvaluateOption {}\n// TODO:\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IModelRenderOption {}\n\nexport interface IEffect {\n  [key: string]: (e?: any) => any;\n}\n\nexport interface IMarkTreeGroup extends Partial<IMarkStyle<IGroupMarkSpec>> {\n  // 必须要有名字\n  type: 'group';\n  name: string;\n  marks: (IMarkTreeGroup | IMark)[];\n  // TODO: 这里要不要支持复杂场景，有图形组合的场景，用自定义mark？\n  // from?: IData;\n}\n\nexport type IMarkTree = IMarkTreeGroup | IMark | (IMarkTreeGroup | IMark)[];\n\nexport interface IUpdateSpecResult {\n  change: boolean;\n  reMake: boolean;\n  reRender?: boolean;\n  reSize?: boolean;\n  // TODO: compile 的判断应不应该出现在这里?\n  reCompile?: boolean;\n  reTransformSpec?: boolean;\n  reAnimate?: boolean;\n  changeTheme?: boolean;\n  changeBackground?: boolean;\n}\n\nexport interface IUpdateDataResult {\n  reAnimate?: boolean;\n}\n\nexport interface IModel extends ICompilable {\n  readonly modelType: string;\n  readonly type: string;\n  readonly specKey: string;\n  readonly transformerConstructor: new (option: IBaseModelSpecTransformerOption) => IBaseModelSpecTransformer;\n\n  readonly id: number;\n\n  readonly userId?: StringOrNumber;\n\n  // 事件\n  readonly event: IEvent;\n\n  // 副作用\n  readonly effect: IEffect;\n\n  coordinate?: CoordinateType;\n\n  // 布局\n  layout?: ILayoutItem;\n\n  /** 是否可见 */\n  getVisible: () => boolean;\n\n  // 初始化参数\n  getOption: () => IModelOption;\n\n  getMarks: () => IMark[];\n  getMarkNameMap: () => Record<string, IMark>;\n\n  getData: () => ICompilableData;\n\n  getChart: () => IChart;\n\n  //生命周期\n  // 创建模块自身内容，设置自身属性\n  created: () => void;\n  // 用来处理与其他图表模块的联系\n  init: (option: IModelInitOption) => void;\n  /** updateSpec 或者切换主题后，根据新 spec 执行的初始化过程 */\n  reInit: (spec?: any) => void;\n  beforeRelease: () => void;\n\n  onEvaluateEnd: (ctx: IModelEvaluateOption) => void;\n  onDataUpdate: () => void;\n  onBeforeRender: () => void;\n\n  updateSpec: (spec: any, totalSpec?: any) => IUpdateSpecResult;\n  getSpec?: () => any;\n  getSpecIndex: () => number;\n  getSpecPath: () => Array<string | number>;\n\n  //布局周期\n  onLayoutStart: (layoutRect: IRect, viewRect: ILayoutRect) => void;\n  onLayoutEnd: () => void;\n\n  getColorScheme: () => IThemeColorScheme | undefined;\n\n  setMarkStyle: <T extends ICommonSpec>(\n    mark?: IMarkRaw<T>,\n    style?: Partial<IMarkStyle<T> | ConvertToMarkStyleSpec<T>>,\n    state?: StateValueType,\n    level?: number\n  ) => void;\n\n  initMarkStyleWithSpec: (mark?: IMark, spec?: any) => void;\n\n  getSpecInfo: () => IModelSpecInfo;\n\n  updateAnimateStateCallback: (callback: (graphic: IMarkGraphic) => AnimationStateValues) => void;\n  getAnimationStateCallback: () => (graphic: IMarkGraphic) => AnimationStateValues;\n}\n\nexport interface ILayoutModel extends IModel {\n  // 布局相关\n  getLayoutStartPoint: () => IPoint;\n  setLayoutStartPosition: (pos: Partial<IPoint>) => void;\n  getLayoutRect: () => ILayoutRect;\n  setLayoutRect: (rect: Partial<ILayoutRect>, levelMap?: Partial<ILayoutRect>) => void;\n\n  getLastComputeOutBounds: () => IBoundsLike;\n\n  getBoundsInRect: (rect: ILayoutRect, fullRect: ILayoutRect) => IBoundsLike;\n\n  //布局周期\n  afterSetLayoutStartPoint: (pos: ILayoutPoint) => void;\n}\n\nexport interface IModelOption extends ICompilableInitOption {\n  type: string;\n  eventDispatcher: IEventDispatcher;\n  dataSet: DataSet;\n  map: Map<StringOrNumber, IModel | IMark>;\n  mode: RenderMode;\n  globalInstance: IVChart;\n  regionIndexes?: Array<number>;\n  specKey?: string;\n  specPath?: Array<string | number>;\n  specInfoPath?: Array<string | number>;\n\n  getTheme?: (...keys: string[]) => any;\n  getSpecInfo?: () => IChartSpecInfo;\n  getChartLayoutRect: () => IRect;\n  getChartViewRect: () => ILayoutRect;\n\n  getChart: () => IChart;\n  getSeriesData: (id: StringOrNumber | undefined, index: number | undefined) => DataView | undefined;\n\n  globalScale: IGlobalScale;\n  animation?: boolean;\n  /**\n   * 错误消息回调函数\n   */\n  onError: (...args: any[]) => void;\n\n  /**\n   * 是否关闭交互效果\n   */\n  disableTriggerEvent?: boolean;\n  getDimensionInfo?: (chart: IChart | undefined, pos: ILayoutPoint, isTooltip?: boolean) => IDimensionInfo[] | null;\n  getDimensionInfoByValue?: (axis: IAxis, value: any) => IDimensionInfo | null;\n  getRectByDimensionData?: (dimensionData: IDimensionData, layoutStartPoint: ILayoutPoint) => any;\n}\n\nexport interface IModelSpecInfo<T extends Record<string, unknown> = any> {\n  /** model 具体类型 */\n  type: string | ComponentTypeEnum | SeriesTypeEnum;\n  /** model spec */\n  spec: T;\n  /** 该 spec 在图表 spec 上的路径 */\n  specPath?: Array<string | number>;\n  /** 该 spec 在图表 spec info 上的路径 */\n  specInfoPath?: Array<string | number>;\n  /** model 当前主题 */\n  theme?: any;\n  /** model 对应的 region 索引 */\n  regionIndexes?: number[];\n  /** model 对应的 series 索引 */\n  seriesIndexes?: number[];\n}\n\nexport interface IModelConstructor {\n  readonly builtInTheme?: any;\n  readonly transformerConstructor: new (option: IBaseModelSpecTransformerOption) => IBaseModelSpecTransformer;\n}\n\nexport type ILayoutModelState = {\n  layoutUpdateRank: number;\n  [key: string]: unknown;\n};\n\n// TODO: 补充model共有配置\nexport type IModelSpec = ILayoutItemSpec & { id?: StringOrNumber };\n\nexport interface IModelMarkInfo {\n  /** mark 类型 */\n  type: MarkTypeEnum | string | (MarkTypeEnum | string)[];\n  /** mark 名称 */\n  name: string;\n}\n\nexport type IBaseModelSpecTransformerOption = IChartSpecTransformerOption;\n\nexport interface IBaseModelSpecTransformerResult<T, K> {\n  spec: T;\n  theme: K;\n}\n\nexport interface IBaseModelSpecTransformer {\n  getTheme: (spec: any, chartSpec: any) => any;\n  transformSpec: (\n    spec: any,\n    chartSpec: any,\n    chartSpecInfo?: IChartSpecInfo\n  ) => IBaseModelSpecTransformerResult<any, any>;\n}\n\nexport interface ITooltipHelper {\n  /** tooltip对应spec */\n  spec: ITooltipSpec | undefined;\n\n  /** 实际生效的tooltip activeType */\n  activeType: TooltipActiveType[];\n\n  /** 可以响应mark tooltip或者dimension tooltip的对象 */\n  activeTriggerSet: {\n    mark?: Set<IMark>;\n    group?: Set<IMark>;\n  };\n  /** 不响应tooltip且不会影响已有tooltip的对象 */\n  ignoreTriggerSet: {\n    mark?: Set<IMark>;\n  };\n\n  /** 更新spec */\n  updateTooltipSpec: () => void;\n}\n"]}