{"version":3,"sources":["../src/model/base-model-transformer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAElC,OAAO,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AAEvD,MAAM,OAAO,wBAAwB;IAMnC,YAAY,MAAuC;QACjD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAES,UAAU,CAAC,IAAO,EAAE,SAAc;QAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACjD,CAAC;IAED,QAAQ,CAAC,IAAO,EAAE,SAAc;QAC9B,OAAO,SAAS,CAAC;IACnB,CAAC;IAGD,aAAa,CAAC,IAAO,EAAE,SAAc,EAAE,aAA8B;QACnE,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAChD,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QAC5E,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,gCAAgC,CAAC,IAAO,EAAE,SAAc,EAAE,aAA8B;IAGlG,CAAC;IAES,+BAA+B,CAAC,IAAO,EAAE,SAAc,EAAE,aAA8B;IAGjG,CAAC;IAGS,iBAAiB,CAAC,IAAO,EAAE,SAAc;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAClC,MAAM,aAAa,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;YAE/D,MAAM,KAAK,GAAG,CAAC,YAAiB,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;YAEvF,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;gBACjB,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAiB;oBAC3D,KAAK;iBACN,CAAC;aACH;YACD,OAAO;gBACL,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC;gBACjB,KAAK;aACN,CAAC;SACH;QACD,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACzB,CAAC;IAGS,uBAAuB;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAGS,wBAAwB,CAAC,SAAc;QAC/C,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","file":"base-model-transformer.js","sourcesContent":["import type { IChartSpecInfo } from '../chart/interface';\nimport { isArray } from '../util';\nimport type { IBaseModelSpecTransformer, IBaseModelSpecTransformerOption, IModelSpec } from './interface';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport class BaseModelSpecTransformer<T extends IModelSpec, K> implements IBaseModelSpecTransformer {\n  readonly type: string;\n  protected _option: IBaseModelSpecTransformerOption;\n\n  protected _theme?: K; // 非全局 theme，是对应于具体 model 的 theme 对象\n\n  constructor(option: IBaseModelSpecTransformerOption) {\n    this._option = option;\n    this.type = option.type;\n  }\n\n  protected _initTheme(spec: T, chartSpec: any): { spec: T; theme: K } {\n    this._theme = this.getTheme(spec, chartSpec);\n    return this._mergeThemeToSpec(spec, chartSpec);\n  }\n\n  getTheme(spec: T, chartSpec: any): K {\n    return undefined;\n  }\n\n  /** 不建议重写该方法，最好重写对应子步骤 */\n  transformSpec(spec: T, chartSpec: any, chartSpecInfo?: IChartSpecInfo): { spec: T; theme: K } {\n    this._transformSpecBeforeMergingTheme(spec, chartSpec, chartSpecInfo);\n    const result = this._initTheme(spec, chartSpec);\n    this._transformSpecAfterMergingTheme(result.spec, chartSpec, chartSpecInfo);\n    return result;\n  }\n\n  protected _transformSpecBeforeMergingTheme(spec: T, chartSpec: any, chartSpecInfo?: IChartSpecInfo) {\n    // do nothing\n    // change spec by default logic\n  }\n\n  protected _transformSpecAfterMergingTheme(spec: T, chartSpec: any, chartSpecInfo?: IChartSpecInfo) {\n    // do nothing\n    // change spec by default logic\n  }\n\n  /** 将 theme merge 到 spec 中 */\n  protected _mergeThemeToSpec(spec: T, chartSpec: any): { spec: T; theme: K } {\n    const theme = this._theme;\n    if (this._shouldMergeThemeToSpec()) {\n      const specFromChart = this._getDefaultSpecFromChart(chartSpec);\n      // this._originalSpec + specFromChart + this._theme = this._spec\n      const merge = (originalSpec: any) => mergeSpec({}, theme, specFromChart, originalSpec);\n\n      if (isArray(spec)) {\n        return {\n          spec: spec.map(specItem => merge(specItem)) as unknown as T,\n          theme\n        };\n      }\n      return {\n        spec: merge(spec),\n        theme\n      };\n    }\n    return { spec, theme };\n  }\n\n  /** 是否在初始化时将 theme 自动 merge 到 spec */\n  protected _shouldMergeThemeToSpec(): boolean {\n    return true;\n  }\n\n  /** 从 chart spec 提取配置作为 model 的默认 spec 配置 */\n  protected _getDefaultSpecFromChart(chartSpec: any): Partial<T> | undefined {\n    return undefined;\n  }\n}\n"]}