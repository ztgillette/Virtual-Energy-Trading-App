import { SeriesTypeEnum } from "../../../series/interface/type";

import { registerCircularProgressSeries } from "../../../series/progress/circular";

import { Factory } from "../../../core/factory";

import { CircularProgressChartSpecTransformer } from "./circular-progress-transformer";

import { BaseChart } from "../../base";

import { StackChartMixin } from "../../stack";

import { mixin } from "@visactor/vutils";

import { registerDimensionHover } from "../../../interaction/triggers/dimension-hover";

import { registerDimensionEvents } from "../../../event/events";

import { getPolarDimensionInfo } from "../../../event/events/dimension/util/polar";

import { registerDimensionTooltipProcessor } from "../../../component/tooltip/processor/dimension-tooltip";

import { registerMarkTooltipProcessor } from "../../../component/tooltip/processor/mark-tooltip";

export class CircularProgressChart extends BaseChart {
    constructor() {
        super(...arguments), this.transformerConstructor = CircularProgressChartSpecTransformer, 
        this.type = "circularProgress", this.seriesType = SeriesTypeEnum.circularProgress;
    }
    _setModelOption() {
        this._modelOption.getDimensionInfo = getPolarDimensionInfo;
    }
}

CircularProgressChart.type = "circularProgress", CircularProgressChart.seriesType = SeriesTypeEnum.circularProgress, 
CircularProgressChart.transformerConstructor = CircularProgressChartSpecTransformer, 
mixin(CircularProgressChart, StackChartMixin);

export const registerCircularProgressChart = () => {
    registerDimensionTooltipProcessor(), registerMarkTooltipProcessor(), registerDimensionEvents(), 
    registerDimensionHover(), registerCircularProgressSeries(), Factory.registerChart(CircularProgressChart.type, CircularProgressChart);
};
//# sourceMappingURL=circular.js.map
