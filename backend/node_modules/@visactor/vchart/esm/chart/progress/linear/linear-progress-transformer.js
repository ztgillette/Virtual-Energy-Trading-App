import { isNil } from "@visactor/vutils";

import { CartesianChartSpecTransformer } from "../../cartesian";

import { getLinearAxisSpecDomain } from "../../../component/axis/util";

export class LinearProgressChartSpecTransformer extends CartesianChartSpecTransformer {
    needAxes() {
        return !1;
    }
    _getDefaultSeriesSpec(spec) {
        var _a, _b;
        const series = super._getDefaultSeriesSpec(spec, [ "bandWidth", "progress", "track", "clamp" ]);
        return series.direction = null !== (_a = spec.direction) && void 0 !== _a ? _a : "horizontal", 
        series.cornerRadius = null !== (_b = spec.cornerRadius) && void 0 !== _b ? _b : 0, 
        series;
    }
    transformSpec(spec) {
        var _a, _b;
        if (super.transformSpec(spec), spec.axes || (spec.axes = []), "vertical" === spec.direction) {
            let leftAxis = null, bottomAxis = null;
            (null !== (_a = spec.axes) && void 0 !== _a ? _a : []).forEach((axis => {
                const {orient: orient} = axis;
                "left" === orient && (leftAxis = axis), "bottom" === orient && (bottomAxis = axis);
            })), leftAxis || (leftAxis = {
                orient: "left",
                visible: !1
            }, spec.axes.push(leftAxis)), bottomAxis || (bottomAxis = {
                orient: "bottom",
                visible: !1
            }, spec.axes.push(bottomAxis)), isNil(bottomAxis.type) && (bottomAxis.type = "band"), 
            isNil(leftAxis.type) && (leftAxis.type = "linear");
            const domain = getLinearAxisSpecDomain(leftAxis, {
                min: 0,
                max: 1
            });
            isNil(leftAxis.min) && (leftAxis.min = domain.min), isNil(leftAxis.max) && (leftAxis.max = domain.max);
        } else {
            let leftAxis = null, bottomAxis = null;
            (null !== (_b = spec.axes) && void 0 !== _b ? _b : []).forEach((axis => {
                const {orient: orient} = axis;
                "left" === orient && (leftAxis = axis), "bottom" === orient && (bottomAxis = axis);
            })), leftAxis || (leftAxis = {
                type: "band",
                orient: "left",
                visible: !1
            }, spec.axes.push(leftAxis)), bottomAxis || (bottomAxis = {
                orient: "bottom",
                visible: !1
            }, spec.axes.push(bottomAxis)), isNil(bottomAxis.type) && (bottomAxis.type = "linear"), 
            isNil(leftAxis.type) && (leftAxis.type = "band");
            const domain = getLinearAxisSpecDomain(bottomAxis, {
                min: 0,
                max: 1
            });
            isNil(bottomAxis.min) && (bottomAxis.min = domain.min), isNil(bottomAxis.max) && (bottomAxis.max = domain.max);
        }
    }
}
//# sourceMappingURL=linear-progress-transformer.js.map
