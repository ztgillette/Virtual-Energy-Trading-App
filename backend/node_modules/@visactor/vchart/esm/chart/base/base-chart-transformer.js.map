{"version":3,"sources":["../src/chart/base/base-chart-transformer.ts"],"names":[],"mappings":"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","file":"base-chart-transformer.js","sourcesContent":["import { isArray, isNumber, isValid } from '@visactor/vutils';\nimport type { IChartSpec, ISeriesSpec } from '../../typings';\nimport type { IChartSpecInfo, IChartSpecTransformer, IChartSpecTransformerOption } from '../interface';\nimport type { IModelConstructor, IModelSpecInfo } from '../../model/interface';\nimport type { IRegionConstructor, RegionSpec } from '../../region/interface';\nimport { Factory } from '../../core';\nimport type { ISeriesConstructor } from '../../series';\nimport type { IComponentConstructor } from '../../component/interface/common';\nimport { ComponentTypeEnum } from '../../component/interface';\nimport { setProperty } from '@visactor/vutils-extension';\nimport { getRelatedRegionInfo, getRelatedSeriesInfo } from './util';\nimport type { ICartesianBandAxisSpec } from '../..//component/axis/cartesian/interface';\nimport { array } from '../../util';\nimport { getSpecInfo } from '../../component/util';\n\nexport class BaseChartSpecTransformer<T extends IChartSpec> implements IChartSpecTransformer {\n  readonly type: string;\n  readonly seriesType: string;\n\n  protected _option: IChartSpecTransformerOption;\n\n  constructor(option: IChartSpecTransformerOption) {\n    this._option = option;\n    this.type = option.type;\n    this.seriesType = option.seriesType;\n  }\n\n  /** 此方法不建议重写 */\n  initChartSpec(chartSpec: T): IChartSpecInfo {\n    this.transformSpec(chartSpec);\n    return this.transformModelSpec(chartSpec);\n  }\n\n  /**\n   * 转换 chart spec。包含以下步骤：\n   * - 将图表 spec 统一转换为 common 图表 spec\n   * - 图表层级的在初始化阶段的 spec 修改\n   */\n  transformSpec(chartSpec: T): void {\n    if (!chartSpec.region || chartSpec.region.length === 0) {\n      chartSpec.region = [{}];\n    }\n    if (chartSpec.tooltip === undefined) {\n      chartSpec.tooltip = {};\n    }\n    // 堆积逆序\n    if (isValid(chartSpec.stackInverse)) {\n      chartSpec.region.forEach((r: RegionSpec) => {\n        !isValid(r.stackInverse) && (r.stackInverse = chartSpec.stackInverse);\n      });\n    }\n    // 堆积排序\n    if (isValid(chartSpec.stackSort)) {\n      chartSpec.region.forEach((r: RegionSpec) => {\n        !isValid(r.stackSort) && (r.stackSort = chartSpec.stackSort);\n      });\n    }\n  }\n\n  generateTransform(chartSpec: T, isRuntime?: boolean) {\n    return (constructor: IModelConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => {\n      const { spec, specPath, specInfoPath, type } = specInfo;\n      const transformer = new constructor.transformerConstructor({\n        ...this._option,\n        type\n      });\n      // 调用 model 自己的 transformer 进行转换\n      const transformResult = transformer.transformSpec(spec, chartSpec, chartSpecInfo);\n      const chartSpecInfoValue = {\n        ...specInfo,\n        ...transformResult\n      };\n      if (isRuntime) {\n        chartSpecInfoValue.theme = transformer.getTheme(spec, chartSpec);\n      } else {\n        setProperty(chartSpec, specPath, transformResult.spec);\n      }\n      setProperty(chartSpecInfo, specInfoPath ?? specPath, chartSpecInfoValue);\n    };\n  }\n\n  /**\n   * 转换 model spec。包含以下步骤：\n   * - model 层级的主题合并\n   * - model 层级的在初始化阶段的 spec 修改，如添加 label spec\n   */\n  transformModelSpec(chartSpec: T): IChartSpecInfo {\n    return this.createSpecInfo(chartSpec, this.generateTransform(chartSpec, false));\n  }\n\n  /** 遍历图表 spec 中包含的所有的 model，进行 spec 转换并生成图表 spec info */\n  createSpecInfo(\n    chartSpec: T,\n    transform?: (\n      /** 当前 model 的类 */\n      constructor: IModelConstructor,\n      /** 当前 model 的 spec info */\n      specInfo: IModelSpecInfo,\n      /** 图表 spec info */\n      chartSpecInfo?: IChartSpecInfo\n    ) => void\n  ): IChartSpecInfo {\n    if (!transform) {\n      transform = this.generateTransform(chartSpec, true);\n    }\n\n    const currentChartSpecInfo: IChartSpecInfo = {};\n\n    /* 预处理 region */\n    this.forEachRegionInSpec(chartSpec, transform, currentChartSpecInfo);\n\n    /* 预处理 series */\n    this.forEachSeriesInSpec(chartSpec, transform, currentChartSpecInfo);\n    // 记录每个 series 关联的 region\n    currentChartSpecInfo.series?.forEach((seriesSpecInfo, i) => {\n      const relatedRegion =\n        getRelatedRegionInfo(seriesSpecInfo, currentChartSpecInfo) ?? currentChartSpecInfo.region ?? [];\n      const region = relatedRegion[0];\n      if (region) {\n        if (!region.seriesIndexes) {\n          region.seriesIndexes = [];\n        }\n        region.seriesIndexes.push(i);\n        seriesSpecInfo.regionIndexes = region.regionIndexes.slice();\n      }\n    });\n\n    /* 预处理 component */\n    this.forEachComponentInSpec(chartSpec, transform, currentChartSpecInfo);\n    // 记录每个 component 关联的 region、series\n    Object.values(currentChartSpecInfo.component ?? {}).forEach(specInfoList =>\n      specInfoList.forEach((componentSpecInfo, i) => {\n        if (!componentSpecInfo) {\n          return;\n        }\n        if (!componentSpecInfo.regionIndexes) {\n          const relatedRegion =\n            getRelatedRegionInfo(componentSpecInfo, currentChartSpecInfo) ?? currentChartSpecInfo.region ?? [];\n          componentSpecInfo.regionIndexes = relatedRegion.map(region => region.regionIndexes[0]);\n        }\n        if (!componentSpecInfo.seriesIndexes) {\n          const seriesInfo = getRelatedSeriesInfo(componentSpecInfo, currentChartSpecInfo);\n          if (!seriesInfo) {\n            const seriesIndexSet = new Set<number>();\n            (componentSpecInfo.regionIndexes ?? []).forEach(regionIndex => {\n              const region = currentChartSpecInfo.region?.[regionIndex];\n              region?.seriesIndexes?.forEach(seriesIndex => seriesIndexSet.add(seriesIndex));\n            });\n            componentSpecInfo.seriesIndexes = Array.from(seriesIndexSet);\n          } else {\n            componentSpecInfo.seriesIndexes = seriesInfo.map(({ seriesIndexes }) => seriesIndexes[0]);\n          }\n        }\n      })\n    );\n    return currentChartSpecInfo;\n  }\n\n  protected _isValidSeries(seriesType: string): boolean {\n    return true;\n  }\n\n  protected _getDefaultSeriesSpec(chartSpec: any, pickKeys?: string[], pickKeys2?: string[]) {\n    const series: any = {\n      dataKey: chartSpec.dataKey,\n\n      hover: chartSpec.hover,\n      select: chartSpec.select,\n\n      label: chartSpec.label,\n\n      seriesStyle: chartSpec.seriesStyle,\n\n      animation: chartSpec.animation ?? this._option.globalInstance?.isAnimationEnable(),\n      animationThreshold: chartSpec.animationThreshold ?? this._option.getTheme?.('animationThreshold'),\n      animationAppear: chartSpec.animationAppear,\n      animationDisappear: chartSpec.animationDisappear,\n      animationEnter: chartSpec.animationEnter,\n      animationUpdate: chartSpec.animationUpdate,\n      animationExit: chartSpec.animationExit,\n      animationNormal: chartSpec.animationNormal,\n      animationState: chartSpec.animationState,\n\n      extensionMark: chartSpec.extensionMark,\n\n      large: chartSpec.large,\n      largeThreshold: chartSpec.largeThreshold,\n      progressiveStep: chartSpec.progressiveStep,\n      progressiveThreshold: chartSpec.progressiveThreshold,\n      background: chartSpec.seriesBackground,\n\n      invalidType: chartSpec.invalidType,\n\n      seriesField: chartSpec.seriesField,\n\n      morph: chartSpec.morph,\n\n      interactions: chartSpec.interactions\n    };\n\n    const seriesType = this.seriesType;\n    if (seriesType) {\n      series.type = seriesType;\n      series[seriesType] = (chartSpec as any)[seriesType];\n    }\n\n    if (pickKeys && pickKeys.length) {\n      pickKeys.forEach(k => {\n        series[k] = chartSpec[k];\n      });\n    }\n    if (pickKeys2 && pickKeys2.length) {\n      pickKeys2.forEach(k => {\n        series[k] = chartSpec[k];\n      });\n    }\n    return series;\n  }\n\n  /** 遍历 spec 中每个有效的 region */\n  forEachRegionInSpec<K>(\n    chartSpec: T,\n    callbackfn: (constructor: IRegionConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ): K[] {\n    const regionSpec = (chartSpec.region as RegionSpec[]) ?? [];\n    return regionSpec.map((spec, index) =>\n      callbackfn(\n        Factory.getRegionInType('region'),\n        {\n          spec,\n          specPath: ['region', index],\n          type: 'region',\n          regionIndexes: [index]\n        },\n        chartSpecInfo\n      )\n    );\n  }\n\n  /** 遍历 spec 中每个有效的 series */\n  forEachSeriesInSpec<K>(\n    chartSpec: T,\n    callbackfn: (constructor: ISeriesConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ): K[] {\n    const seriesSpec = (chartSpec.series as ISeriesSpec[]) ?? [];\n    return seriesSpec.map((spec, index) =>\n      callbackfn(\n        Factory.getSeriesInType(spec.type),\n        {\n          spec,\n          specPath: ['series', index],\n          type: spec.type,\n          seriesIndexes: [index]\n        },\n        chartSpecInfo\n      )\n    );\n  }\n\n  /** 遍历 spec 中每个有效的 component */\n  forEachComponentInSpec<K>(\n    chartSpec: T,\n    callbackfn: (constructor: IComponentConstructor, specInfo: IModelSpecInfo, chartSpecInfo?: IChartSpecInfo) => K,\n    chartSpecInfo?: IChartSpecInfo\n  ): K[] {\n    const results: K[] = [];\n    const components = Factory.getComponents();\n\n    // 坐标轴组件只需要调用一次\n    let cartesianAxis: IComponentConstructor;\n    let polarAxis: IComponentConstructor;\n    let geoCoordinate: IComponentConstructor;\n    let tooltip: IComponentConstructor;\n    const otherComponents = [];\n\n    for (let index = 0; index < components.length; index++) {\n      const { cmp, alwaysCheck } = components[index];\n      if (cmp.type.startsWith(ComponentTypeEnum.cartesianAxis)) {\n        cartesianAxis = cmp;\n      } else if (cmp.type.startsWith(ComponentTypeEnum.polarAxis)) {\n        polarAxis = cmp;\n      } else if (cmp.type === ComponentTypeEnum.geoCoordinate) {\n        geoCoordinate = cmp;\n      } else if (alwaysCheck || (chartSpec as any)[cmp.specKey ?? cmp.type]) {\n        if (cmp.type === ComponentTypeEnum.tooltip) {\n          tooltip = cmp;\n        } else {\n          otherComponents.push(components[index]);\n        }\n      }\n    }\n\n    // NOTE: 坐标轴组件需要在其他组件之前创建\n    let hasInitAxis = false;\n    if (cartesianAxis) {\n      const infoList = cartesianAxis.getSpecInfo(chartSpec, chartSpecInfo);\n      if (infoList?.length > 0) {\n        hasInitAxis = true;\n        infoList.forEach(info => {\n          const cmp = Factory.getComponentInKey(info.type);\n          results.push(callbackfn(cmp, info, chartSpecInfo));\n        });\n      }\n    }\n\n    if (polarAxis && !hasInitAxis) {\n      const infoList = polarAxis.getSpecInfo(chartSpec, chartSpecInfo);\n      if (infoList?.length > 0) {\n        hasInitAxis = true;\n        infoList.forEach(info => {\n          const cmp = Factory.getComponentInKey(info.type);\n          results.push(callbackfn(cmp, info, chartSpecInfo));\n        });\n      }\n    }\n\n    if (geoCoordinate && !hasInitAxis) {\n      geoCoordinate.getSpecInfo(chartSpec, chartSpecInfo)?.forEach(info => {\n        results.push(callbackfn(geoCoordinate, info, chartSpecInfo));\n      });\n    }\n\n    otherComponents.sort((a, b) => {\n      return a.createOrder - b.createOrder;\n    });\n\n    otherComponents.forEach(({ cmp: C }) => {\n      (C.getSpecInfo ? C.getSpecInfo(chartSpec, chartSpecInfo) : getSpecInfo(chartSpec, C.specKey, C.type))?.forEach(\n        info => {\n          results.push(callbackfn(C, info, chartSpecInfo));\n        }\n      );\n    });\n\n    // NOTE: tooltip 组件需要在 crosshair 组件之后创建\n    if (tooltip) {\n      getSpecInfo(chartSpec, tooltip.specKey, tooltip.type)?.forEach(info => {\n        results.push(callbackfn(tooltip, info, chartSpecInfo));\n      });\n    }\n\n    return results;\n  }\n\n  /** 处理series配置 */\n  transformSeriesSpec(spec: T): void {\n    const defaultSeriesSpec = this._getDefaultSeriesSpec(spec);\n    if (!spec.series || spec.series.length === 0) {\n      spec.series = [defaultSeriesSpec];\n    } else {\n      spec.series.forEach(s => {\n        if (!this._isValidSeries(s.type)) {\n          return;\n        }\n        Object.keys(defaultSeriesSpec).forEach(k => {\n          if (!(k in s)) {\n            (s as any)[k] = defaultSeriesSpec[k];\n          }\n        });\n      });\n    }\n  }\n\n  protected _findBandAxisBySeries(seriesSpec: ISeriesSpec, seriesIndex: number, axesSpec: any) {\n    const isHorizontal = (seriesSpec as any)?.direction === 'horizontal';\n    const matchOrient = isHorizontal ? ['left', 'right'] : ['top', 'bottom'];\n    const targetBandAxis: any = axesSpec.find((axis: any) => {\n      if (!matchOrient.includes(axis.orient)) {\n        // orient必须匹配\n        return false;\n      }\n      if (isValid(axis.seriesId)) {\n        // 1. 通过seriesId绑定\n        if (array(axis.seriesId).includes(seriesSpec?.id)) {\n          return true;\n        }\n      } else if (isValid(axis.seriesIndex)) {\n        // 2. 通过seriesIndex绑定\n        if (array(axis.seriesIndex).includes(seriesIndex)) {\n          return true;\n        }\n      } else if (axis.type === 'band') {\n        // 3. 通过axis type识别\n        return true;\n      }\n      // 4. 剩下的情况满足axis orient要求\n      return true;\n    });\n\n    return targetBandAxis;\n  }\n\n  /**\n   * @description bar chart 和 common chart支持autoBandsize, 此方法用于识别barWidth配置后应用到轴上\n   * */\n  protected _applyAxisBandSize(\n    axis: ICartesianBandAxisSpec,\n    extend: number,\n    barWidthSpec: {\n      barMaxWidth: number | string;\n      barMinWidth: number | string;\n      barWidth: number | string;\n      barGapInGroup: number | string | (number | string)[];\n    }\n  ) {\n    const { barMaxWidth, barMinWidth, barWidth, barGapInGroup } = barWidthSpec;\n    let hasBarWidth = false;\n    if (isNumber(barMinWidth)) {\n      axis.minBandSize = barMinWidth as number;\n      hasBarWidth = true;\n    } else if (isNumber(barWidth)) {\n      axis.minBandSize = barWidth as number;\n      hasBarWidth = true;\n    } else if (isNumber(barMaxWidth)) {\n      axis.minBandSize = barMaxWidth as number;\n      hasBarWidth = true;\n    }\n    if (hasBarWidth) {\n      axis.bandSizeLevel = Number.MAX_VALUE; // 影响最底层的 scale\n      axis.bandSizeExtend = {\n        extend,\n        gap: isArray(barGapInGroup) ? barGapInGroup[(barGapInGroup as any[]).length - 1] : barGapInGroup\n      };\n    }\n  }\n}\n"]}