{"version":3,"sources":["../src/chart/area/area.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAG7D,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,wBAAwB,EAAE,MAAM,oBAAoB,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AACpF,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAC7D,OAAO,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,MAAM,6CAA6C,CAAC;AACjH,OAAO,EAAE,yBAAyB,EAAE,MAAM,2CAA2C,CAAC;AACtF,OAAO,EAAE,iCAAiC,EAAE,MAAM,qDAAqD,CAAC;AACxG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gDAAgD,CAAC;AAC9F,OAAO,EAAE,6BAA6B,EAAE,MAAM,iDAAiD,CAAC;AAEhG,MAAM,OAAO,SAAqD,SAAQ,SAAY;IAAtF;;QAIW,2BAAsB,GAAG,wBAAwB,CAAC;QAClD,SAAI,UAA8B;QAClC,eAAU,GAAW,cAAc,CAAC,IAAI,CAAC;IAOpD,CAAC;IALW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,yBAAyB,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,yBAAyB,CAAC;IACvE,CAAC;;AAXe,cAAI,UAA8B;AAClC,oBAAU,GAAW,cAAc,CAAC,IAAI,CAAC;AACzC,gCAAsB,GAAG,wBAAwB,CAAC;AAWpE,KAAK,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;AAElC,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAG,EAAE;IACpC,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,6BAA6B,EAAE,CAAC;IAChC,sBAAsB,EAAE,CAAC;IACzB,kBAAkB,EAAE,CAAC;IACrB,uBAAuB,EAAE,CAAC;IAC1B,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACnD,CAAC,CAAC","file":"area.js","sourcesContent":["import { registerAreaSeries } from '../../series/area/area';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport type { IAreaChartSpec } from './interface';\nimport { Factory } from '../../core/factory';\nimport { AreaChartSpecTransformer } from './area-transformer';\nimport { BaseChart } from '../base';\nimport { mixin } from '@visactor/vutils';\nimport { StackChartMixin } from '../stack';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class AreaChart<T extends IAreaChartSpec = IAreaChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.area;\n  static readonly seriesType: string = SeriesTypeEnum.area;\n  static readonly transformerConstructor = AreaChartSpecTransformer;\n  readonly transformerConstructor = AreaChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.area;\n  readonly seriesType: string = SeriesTypeEnum.area;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\nmixin(AreaChart, StackChartMixin);\n\nexport const registerAreaChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionHover();\n  registerAreaSeries();\n  registerDimensionEvents();\n  Factory.registerChart(AreaChart.type, AreaChart);\n};\n"]}