{"version":3,"sources":["../src/chart/polar/progress-like/progress-like-transformer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAGzC,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AACjE,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AAEvD,MAAM,OAAO,gCAA4D,SAAQ,yBAA4B;IACjG,QAAQ;QAChB,OAAO,KAAK,CAAC;IACf,CAAC;IAES,qBAAqB,CAAC,IAAS;QACvC,MAAM,MAAM,GAAQ,KAAK,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAExG,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC;QAC9D,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC;QAEvD,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,0BAA0B,CAClC,IAAO,EACP,oBAAoC,EACpC,qBAAqC,EACrC,mBAA6C,EAC7C,oBAA8C;;QAE9C,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAChB;QAED,IAAI,UAAU,GAAuB,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAoB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;QAChH,IAAI,SAAS,GAAyB,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAoB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC;QAEhH,IAAI,CAAC,SAAS,EAAE;YACd,SAAS,GAAG,oBAAoB,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC3B;QACD,IAAI,CAAC,UAAU,EAAE;YACf,UAAU,GAAG,qBAAqB,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC5B;QAKD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACzB,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC;SAC3B;QACD,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAC1B,UAAU,CAAC,IAAI,GAAG,MAAM,CAAC;SAC1B;QACD,MAAM,MAAM,GAAG,uBAAuB,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QACtE,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YACxB,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;SAC5B;QACD,IAAI,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YACxB,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;SAC5B;QAGD,IAAI,mBAAmB,EAAE;YACvB,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,EAAE,mBAAmB,EAAE,SAAS,CAAC,CAAC,CAAC;SACzE;QACD,IAAI,oBAAoB,EAAE;YACxB,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,EAAE,oBAAoB,EAAE,UAAU,CAAC,CAAC,CAAC;SAC5E;IACH,CAAC;CACF","file":"progress-like-transformer.js","sourcesContent":["import { isNil } from '@visactor/vutils';\nimport type { IPolarAxisSpec, IPolarBandAxisSpec, IPolarLinearAxisSpec } from '../../../component';\nimport type { IPolarChartSpec } from '../interface';\nimport { PolarChartSpecTransformer } from '../polar-transformer';\nimport { getLinearAxisSpecDomain } from '../../../component/axis/util';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport class ProgressLikeChartSpecTransformer<T extends IPolarChartSpec> extends PolarChartSpecTransformer<T> {\n  protected needAxes(): boolean {\n    return false;\n  }\n\n  protected _getDefaultSeriesSpec(spec: any): any {\n    const series: any = super._getDefaultSeriesSpec(spec, ['startAngle', 'endAngle', 'centerX', 'centerY']);\n\n    series.categoryField = spec.categoryField || spec.radiusField;\n    series.valueField = spec.valueField || spec.angleField;\n\n    return series;\n  }\n\n  protected _transformProgressAxisSpec(\n    spec: T,\n    angleAxisDefaultSpec: IPolarAxisSpec,\n    radiusAxisDefaultSpec: IPolarAxisSpec,\n    angleAxisAppendSpec?: Partial<IPolarAxisSpec>,\n    radiusAxisAppendSpec?: Partial<IPolarAxisSpec>\n  ): void {\n    if (!spec.axes) {\n      spec.axes = [];\n    }\n    // 找到用户配的角度轴和半径轴\n    let radiusAxis: IPolarBandAxisSpec = (spec.axes ?? []).find((axis: IPolarAxisSpec) => axis.orient === 'radius');\n    let angleAxis: IPolarLinearAxisSpec = (spec.axes ?? []).find((axis: IPolarAxisSpec) => axis.orient === 'angle');\n    // 如果没有找到对应的轴，则自动补充默认配置\n    if (!angleAxis) {\n      angleAxis = angleAxisDefaultSpec;\n      spec.axes.push(angleAxis);\n    }\n    if (!radiusAxis) {\n      radiusAxis = radiusAxisDefaultSpec;\n      spec.axes.push(radiusAxis);\n    }\n\n    // 在以上配置的基础上，对轴 spec 进行统一修改\n\n    // 自动补充缺失的配置\n    if (isNil(angleAxis.type)) {\n      angleAxis.type = 'linear';\n    }\n    if (isNil(radiusAxis.type)) {\n      radiusAxis.type = 'band';\n    }\n    const domain = getLinearAxisSpecDomain(angleAxis, { min: 0, max: 1 });\n    if (isNil(angleAxis.min)) {\n      angleAxis.min = domain.min;\n    }\n    if (isNil(angleAxis.max)) {\n      angleAxis.max = domain.max;\n    }\n\n    // merge 额外的配置\n    if (angleAxisAppendSpec) {\n      Object.assign(angleAxis, mergeSpec({}, angleAxisAppendSpec, angleAxis));\n    }\n    if (radiusAxisAppendSpec) {\n      Object.assign(radiusAxis, mergeSpec({}, radiusAxisAppendSpec, radiusAxis));\n    }\n  }\n}\n"]}