{"version":3,"sources":["../src/chart/polar/polar-transformer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAElE,OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS,CAAC;AAGnD,MAAM,OAAO,yBAAqD,SAAQ,wBAA2B;IACzF,cAAc,CAAC,IAAY;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3D,CAAC;IAES,gBAAgB,CAAC,IAAS;;QAClC,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAqB,CAAC;QAChE,MAAM,UAAU,GAAG,MAAA,IAAI,CAAC,WAAW,mCAAI,MAAA,MAAA,IAAI,CAAC,MAAM,0CAAG,CAAC,CAAC,0CAAE,WAAW,CAAC;QACrE,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;YACvB,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAChC,IAAI,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;oBAC/B,SAAS,CAAC,UAAU,GAAG,UAAU,CAAC;iBACnC;YACH,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAES,qBAAqB,CAAC,IAAS,EAAE,QAAmB;QAK5D,MAAM,MAAM,GAAQ,KAAK,CAAC,qBAAqB,CAC7C,IAAI,EACJ,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,CAAC,EACpF,QAAQ,CACT,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAO;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACtD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAmB,EAAE,EAAE;gBAG5C,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM,EAAE;oBAC9B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAG/B,IAAI,OAAO,CAAE,IAAY,CAAC,SAAS,CAAC,EAAE;YACnC,IAAY,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SACvD;IACH,CAAC;CACF","file":"polar-transformer.js","sourcesContent":["import { array, isArray, isNil, isValid } from '@visactor/vutils';\nimport type { IDataZoomSpec, IIndicatorSpec } from '../../component';\nimport { BaseChartSpecTransformer } from '../base';\nimport type { IPolarChartSpec } from './interface';\n\nexport class PolarChartSpecTransformer<T extends IPolarChartSpec> extends BaseChartSpecTransformer<T> {\n  protected _isValidSeries(type: string): boolean {\n    return this.seriesType ? type === this.seriesType : true;\n  }\n\n  protected getIndicatorSpec(spec: any): IIndicatorSpec[] {\n    const indicatorSpec = array(spec.indicator) as IIndicatorSpec[];\n    const limitRatio = spec.innerRadius ?? spec.series?.[0]?.innerRadius;\n    if (isValid(limitRatio)) {\n      indicatorSpec.forEach(indicator => {\n        if (isNil(indicator.limitRatio)) {\n          indicator.limitRatio = limitRatio;\n        }\n      });\n    }\n    return indicatorSpec;\n  }\n\n  protected _getDefaultSeriesSpec(spec: any, pickKeys?: string[]): any {\n    /**\n     * 旧的radius写法, 仅做兼容\n     * @deprecated use outerRadius instead\n     */\n    const series: any = super._getDefaultSeriesSpec(\n      spec,\n      ['radius', 'outerRadius', 'innerRadius', 'startAngle', 'endAngle', 'sortDataByAxis'],\n      pickKeys\n    );\n\n    return series;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n    /** 处理极坐标系下的 datazoom */\n    if (isArray(spec.dataZoom) && spec.dataZoom.length > 0) {\n      spec.dataZoom.forEach((zoom: IDataZoomSpec) => {\n        // 极坐标系下 datazoom 目前只支持数据过滤\n        // 理想效果：角度轴不支持 axis， 径向轴均支持（通过 group.clip 自定义 clipPath 支持）\n        if (zoom.filterMode === 'axis') {\n          zoom.filterMode = 'filter';\n        }\n      });\n    }\n\n    this.transformSeriesSpec(spec);\n\n    /* 处理 indicator 配置 */\n    if (isValid((spec as any).indicator)) {\n      (spec as any).indicator = this.getIndicatorSpec(spec);\n    }\n  }\n}\n"]}