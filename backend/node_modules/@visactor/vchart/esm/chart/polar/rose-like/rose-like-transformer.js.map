{"version":3,"sources":["../src/chart/polar/rose-like/rose-like-transformer.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AAEjE,MAAM,OAAO,4BAAwD,SAAQ,yBAA4B;IAC7F,QAAQ;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAES,qBAAqB,CAAC,IAAS;QACvC,MAAM,MAAM,GAAQ,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAGtD,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC;QAC7D,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC;QAExD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAO;;QACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAG1B,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;YACnB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACd,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;aAChB;YACD,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YAChD,CAAC,MAAA,IAAI,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAoB,EAAE,EAAE;gBACjD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;gBACxB,IAAI,MAAM,KAAK,QAAQ,EAAE;oBACvB,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;iBACvB;gBACD,IAAI,MAAM,KAAK,OAAO,EAAE;oBACtB,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;iBACtB;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBAClB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;oBACb,MAAM,EAAE,OAAO;iBAChB,CAAC,CAAC;aACJ;YACD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;oBACb,MAAM,EAAE,QAAQ;iBACjB,CAAC,CAAC;aACJ;SACF;IACH,CAAC;CACF","file":"rose-like-transformer.js","sourcesContent":["import type { IPolarAxisSpec } from '../../../component';\nimport type { IPolarChartSpec } from '../interface';\nimport { PolarChartSpecTransformer } from '../polar-transformer';\n\nexport class RoseLikeChartSpecTransformer<T extends IPolarChartSpec> extends PolarChartSpecTransformer<T> {\n  protected needAxes(): boolean {\n    return true;\n  }\n\n  protected _getDefaultSeriesSpec(spec: any): any {\n    const series: any = super._getDefaultSeriesSpec(spec);\n\n    // 兼容旧版写法\n    series.categoryField = spec.categoryField || spec.angleField;\n    series.valueField = spec.valueField || spec.radiusField;\n\n    return series;\n  }\n\n  transformSpec(spec: T): void {\n    super.transformSpec(spec);\n\n    // set default config for axis\n    if (this.needAxes()) {\n      if (!spec.axes) {\n        spec.axes = [];\n      }\n      const haxAxes = { radius: false, angle: false };\n      (spec.axes ?? []).forEach((axis: IPolarAxisSpec) => {\n        const { orient } = axis;\n        if (orient === 'radius') {\n          haxAxes.radius = true;\n        }\n        if (orient === 'angle') {\n          haxAxes.angle = true;\n        }\n      });\n      if (!haxAxes.angle) {\n        spec.axes.push({\n          orient: 'angle'\n        });\n      }\n      if (!haxAxes.radius) {\n        spec.axes.push({\n          orient: 'radius'\n        });\n      }\n    }\n  }\n}\n"]}