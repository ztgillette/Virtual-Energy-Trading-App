{"version":3,"sources":["../src/chart/common/common.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAG7C,OAAO,EAAE,0BAA0B,EAAE,MAAM,sBAAsB,CAAC;AAClE,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AACpF,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAC7D,OAAO,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,MAAM,6CAA6C,CAAC;AAEjH,OAAO,EAAE,qBAAqB,EAAE,MAAM,yCAAyC,CAAC;AAChF,OAAO,EAAE,yBAAyB,EAAE,MAAM,2CAA2C,CAAC;AACtF,OAAO,EAAE,iCAAiC,EAAE,MAAM,qDAAqD,CAAC;AACxG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gDAAgD,CAAC;AAC9F,OAAO,EAAE,6BAA6B,EAAE,MAAM,iDAAiD,CAAC;AAEhG,MAAM,OAAO,WAA2D,SAAQ,SAAoC;IAApH;;QAGW,2BAAsB,GAAG,0BAA0B,CAAC;QACpD,SAAI,YAAgC;IAY/C,CAAC;IAVW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,CAAC,KAAyB,EAAE,KAAmB,EAAE,SAAmB,EAAE,EAAE;;YAC3G,OAAO;gBACL,GAAG,CAAC,MAAA,yBAAyB,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,mCAAI,EAAE,CAAC;gBAC7D,GAAG,CAAC,MAAA,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,mCAAI,EAAE,CAAC;aAC/C,CAAC;QACJ,CAAC,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,yBAAyB,CAAC;IACvE,CAAC;;AAde,gBAAI,YAAgC;AACpC,kCAAsB,GAAG,0BAA0B,CAAC;AAgBtE,KAAK,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;AAEpC,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,6BAA6B,EAAE,CAAC;IAChC,uBAAuB,EAAE,CAAC;IAC1B,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACrD,sBAAsB,EAAE,CAAC;AAC3B,CAAC,CAAC","file":"common.js","sourcesContent":["import { BaseChart } from '../base/base-chart';\nimport { ChartTypeEnum } from '../interface/type';\nimport { Factory } from '../../core/factory';\nimport type { ICommonChartSpec } from './interface';\nimport type { AdaptiveSpec, ILayoutPoint } from '../../typings';\nimport { CommonChartSpecTransformer } from './common-transformer';\nimport { StackChartMixin } from '../stack';\nimport { mixin } from '@visactor/vutils';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport type { IChart } from '../interface/chart';\nimport { getPolarDimensionInfo } from '../../event/events/dimension/util/polar';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class CommonChart<T extends ICommonChartSpec = ICommonChartSpec> extends BaseChart<AdaptiveSpec<T, 'series'>> {\n  static readonly type: string = ChartTypeEnum.common;\n  static readonly transformerConstructor = CommonChartSpecTransformer;\n  readonly transformerConstructor = CommonChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.common;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = (chart: IChart | undefined, point: ILayoutPoint, isTooltip?: boolean) => {\n      return [\n        ...(getCartesianDimensionInfo(chart, point, isTooltip) ?? []),\n        ...(getPolarDimensionInfo(chart, point) ?? [])\n      ];\n    };\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nmixin(CommonChart, StackChartMixin);\n\nexport const registerCommonChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionEvents();\n  Factory.registerChart(CommonChart.type, CommonChart);\n  registerDimensionHover();\n};\n"]}