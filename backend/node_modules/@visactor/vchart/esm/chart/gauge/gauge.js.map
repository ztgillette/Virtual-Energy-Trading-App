{"version":3,"sources":["../src/chart/gauge/gauge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,0BAA0B,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACrF,OAAO,EAAE,8BAA8B,EAAE,MAAM,yCAAyC,CAAC;AACzF,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAE7D,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,OAAO,EAAE,yBAAyB,EAAE,MAAM,qBAAqB,CAAC;AAEhE,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EAAE,4BAA4B,EAAE,MAAM,gDAAgD,CAAC;AAE9F,MAAM,OAAO,UAAwD,SAAQ,SAAkC;IAA/G;;QAIW,2BAAsB,GAAG,yBAAyB,CAAC;QACnD,SAAI,WAA+B;QACnC,eAAU,GAAW,cAAc,CAAC,YAAY,CAAC;IAC5D,CAAC;;AANiB,eAAI,WAA+B;AACnC,qBAAU,GAAW,cAAc,CAAC,YAAY,CAAC;AACjD,iCAAsB,GAAG,yBAAyB,CAAC;AAMrE,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,4BAA4B,EAAE,CAAC;IAC/B,0BAA0B,EAAE,CAAC;IAC7B,mBAAmB,EAAE,CAAC;IAEtB,8BAA8B,EAAE,CAAC;IACjC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACrD,CAAC,CAAC","file":"gauge.js","sourcesContent":["import { registerGaugePointerSeries, registerGaugeSeries } from '../../series/gauge';\nimport { registerCircularProgressSeries } from '../../series/progress/circular/circular';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport { Factory } from '../../core/factory';\nimport type { IGaugeChartSpec } from './interface';\nimport { GaugeChartSpecTransformer } from './gauge-transformer';\nimport type { AdaptiveSpec } from '../../typings';\nimport { BaseChart } from '../base';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\n\nexport class GaugeChart<T extends IGaugeChartSpec = IGaugeChartSpec> extends BaseChart<AdaptiveSpec<T, 'axes'>> {\n  static readonly type: string = ChartTypeEnum.gauge;\n  static readonly seriesType: string = SeriesTypeEnum.gaugePointer;\n  static readonly transformerConstructor = GaugeChartSpecTransformer;\n  readonly transformerConstructor = GaugeChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.gauge;\n  readonly seriesType: string = SeriesTypeEnum.gaugePointer;\n}\n\nexport const registerGaugeChart = () => {\n  registerMarkTooltipProcessor();\n  registerGaugePointerSeries();\n  registerGaugeSeries();\n  // Gauge chart reused the code logic of CircularProgressSeries, So it needs to be registered by default.\n  registerCircularProgressSeries();\n  Factory.registerChart(GaugeChart.type, GaugeChart);\n};\n"]}