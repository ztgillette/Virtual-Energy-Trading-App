{"version":3,"sources":["../src/chart/sankey/sankey.ts"],"names":[],"mappings":"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","file":"sankey.js","sourcesContent":["import { BaseChart } from '../base/base-chart';\nimport { ChartTypeEnum } from '../interface/type';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport type { ISankeyChartSpec } from './interface';\nimport { registerSankeySeries } from '../../series/sankey/sankey';\nimport { Factory } from '../../core/factory';\nimport { SankeyChartSpecTransformer } from './sankey-transformer';\nimport type { Datum, MaybeArray } from '../../typings/common';\nimport type { ISeries } from '../../series/interface';\nimport type { IMark, IMarkGraphic } from '../../mark/interface/common';\nimport type { IRegionQuerier } from '../../typings/params';\nimport { isArray } from '@visactor/vutils';\nimport { loadScrollbar } from '@visactor/vrender-components';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { getDatumOfGraphic } from '../../util/mark';\n\nexport class SankeyChart<T extends ISankeyChartSpec = ISankeyChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.sankey;\n  static readonly seriesType: string = SeriesTypeEnum.sankey;\n  static readonly transformerConstructor = SankeyChartSpecTransformer;\n  readonly transformerConstructor = SankeyChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.sankey;\n  readonly seriesType: string = SeriesTypeEnum.sankey;\n\n  protected _setStateInDatum(\n    stateKey: string,\n    datum: MaybeArray<Datum> | null,\n    filter?: (series: ISeries, mark: IMark) => boolean,\n    region?: IRegionQuerier\n  ) {\n    const activeDatum = (isArray(datum) ? (datum as Datum[])[0] : datum) as Datum;\n    if (!activeDatum) {\n      this._interaction.clearByState(stateKey);\n      return;\n    }\n    let activeNodeOrLink: IMarkGraphic = null;\n    const markFilter = (series: ISeries, mark: IMark) => {\n      return mark.type !== 'text' && mark.getProduct() && (!filter || filter(series, mark));\n    };\n\n    this.filterGraphicsByDatum(activeDatum, {\n      filter: markFilter,\n      region,\n      getDatum: e => {\n        let d = (getDatumOfGraphic(e) as any)?.datum;\n\n        if (isArray(d)) {\n          // data of link\n          d = d[0];\n        }\n        return d;\n      },\n      callback: (element, mark, s, r) => {\n        const id = mark.getProductId();\n        if (id && (id.includes('node') || id.includes('link'))) {\n          (s as any)._handleEmphasisElement?.({ item: element, mark });\n        }\n      },\n      regionCallback: (elements, r) => {\n        if (activeDatum && elements.length) {\n          activeNodeOrLink = elements[0];\n        }\n      }\n    });\n\n    if (activeNodeOrLink) {\n      this._interaction.updateStateOfGraphics(stateKey, [activeNodeOrLink]);\n    }\n  }\n}\n\nexport const registerSankeyChart = () => {\n  registerMarkTooltipProcessor();\n  loadScrollbar();\n  registerSankeySeries();\n\n  Factory.registerChart(SankeyChart.type, SankeyChart);\n};\n"]}