{"version":3,"sources":["../src/chart/sequence/sequence.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAG/C,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAI7D,OAAO,EAAE,4BAA4B,EAAE,MAAM,wBAAwB,CAAC;AACtE,OAAO,EAAE,2BAA2B,EAAE,yBAAyB,EAAE,MAAM,gCAAgC,CAAC;AACxG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gDAAgD,CAAC;AAC9F,OAAO,EAAE,iCAAiC,EAAE,MAAM,qDAAqD,CAAC;AAExG,MAAM,OAAO,aAAiE,SAAQ,SAAY;IAAlG;;QAGW,2BAAsB,GAAG,4BAA4B,CAAC;QACtD,SAAI,cAAkC;IAyCjD,CAAC;IAnCW,aAAa,CAAC,WAA+B,EAAE,QAAwB;QAC/E,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO;SACR;QAED,MAAM,EAAE,IAAI,KAAgB,QAAQ,EAAnB,MAAM,UAAK,QAAQ,EAA9B,QAAmB,CAAW,CAAC;QAErC,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,EAAE;YACrC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC7D;QAED,IAAI,MAA2B,CAAC;QAChC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACvF;QACD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,8CAChC,IAAI,CAAC,YAAY,GACjB,MAAM,KACT,MAAM,EACN,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,IAAI,CAAC,YAAY,GACd,CAAC,CAAC;QAEpB,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,OAAO,EAAE,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC1B;IACH,CAAC;;AA3Ce,kBAAI,cAAkC;AACtC,oCAAsB,GAAG,4BAA4B,CAAC;AA6CxE,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,iBAAiB,EAAE,CAAC;IACpB,kBAAkB,EAAE,CAAC;IACrB,yBAAyB,EAAE,CAAC;IAC5B,2BAA2B,EAAE,CAAC;IAC9B,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC3D,CAAC,CAAC","file":"sequence.js","sourcesContent":["import { registerLinkSeries } from '../../series/link/link';\nimport { registerDotSeries } from '../../series/dot/dot';\nimport { BaseChart } from '../base/base-chart';\nimport type { ISequenceChartSpec } from './interface';\nimport type { IRegion } from '../../region/interface';\nimport { Factory } from '../../core/factory';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport type { ISeriesConstructor, ISeriesOption } from '../../series/interface';\nimport type { IModelSpecInfo } from '../../model/interface';\nimport { SequenceChartSpecTransformer } from './sequence-transformer';\nimport { registerCartesianLinearAxis, registerCartesianBandAxis } from '../../component/axis/cartesian';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\n\nexport class SequenceChart<T extends ISequenceChartSpec = ISequenceChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.sequence;\n  static readonly transformerConstructor = SequenceChartSpecTransformer;\n  readonly transformerConstructor = SequenceChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.sequence;\n\n  /**\n   * @override\n   * @description 主要是将link series关联的dot data放到link series中\n   */\n  protected _createSeries(constructor: ISeriesConstructor, specInfo: IModelSpecInfo) {\n    if (!constructor) {\n      return;\n    }\n\n    const { spec, ...others } = specInfo;\n\n    if (spec.type === SeriesTypeEnum.link) {\n      spec.dotSeriesSpec = this._spec.series[spec.dotSeriesIndex];\n    }\n\n    let region: IRegion | undefined;\n    if (spec.regionId) {\n      region = this.getRegionsInUserId(spec.regionId);\n    }\n    if (!region) {\n      region = this.getRegionsInIndex(spec.regionIndex ? [spec.regionIndex] : undefined)[0];\n    }\n    if (!region) {\n      return;\n    }\n    const series = new constructor(spec, {\n      ...this._modelOption,\n      ...others,\n      region,\n      specKey: 'series',\n      globalScale: this._globalScale\n    } as ISeriesOption);\n\n    if (series) {\n      series.created();\n      this._series.push(series);\n      region.addSeries(series);\n    }\n  }\n}\n\nexport const registerSequenceChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerDotSeries();\n  registerLinkSeries();\n  registerCartesianBandAxis();\n  registerCartesianLinearAxis();\n  Factory.registerChart(SequenceChart.type, SequenceChart);\n};\n"]}