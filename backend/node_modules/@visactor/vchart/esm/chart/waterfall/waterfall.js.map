{"version":3,"sources":["../src/chart/waterfall/waterfall.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAGlC,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAC;AAC3E,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,OAAO,EAAE,6BAA6B,EAAE,MAAM,yBAAyB,CAAC;AACxE,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AACpF,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAC7D,OAAO,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,MAAM,6CAA6C,CAAC;AACjH,OAAO,EAAE,yBAAyB,EAAE,MAAM,2CAA2C,CAAC;AACtF,OAAO,EAAE,iCAAiC,EAAE,MAAM,qDAAqD,CAAC;AACxG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gDAAgD,CAAC;AAC9F,OAAO,EAAE,6BAA6B,EAAE,MAAM,iDAAiD,CAAC;AAEhG,MAAM,OAAO,cAAoE,SAAQ,QAExF;IAFD;;QAOW,2BAAsB,GAAG,6BAA6B,CAAC;QACvD,SAAI,eAAmC;QACvC,eAAU,GAAW,cAAc,CAAC,SAAS,CAAC;IASzD,CAAC;IAPW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,yBAAyB,CAAC;QAE/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QAEpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,yBAAyB,CAAC;IACvE,CAAC;;AAde,mBAAI,eAAmC;AACvC,yBAAU,GAAW,cAAc,CAAC,SAAS,CAAC;AAC9C,qCAAsB,GAAG,6BAA6B,CAAC;AAezE,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,6BAA6B,EAAE,CAAC;IAChC,uBAAuB,EAAE,CAAC;IAC1B,sBAAsB,EAAE,CAAC;IACzB,uBAAuB,EAAE,CAAC;IAC1B,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;AAC7D,CAAC,CAAC","file":"waterfall.js","sourcesContent":["import { SeriesTypeEnum } from '../../series/interface/type';\nimport { BarChart } from '../bar';\nimport { ChartTypeEnum } from '../interface/type';\nimport type { IWaterfallChartSpec } from './interface';\nimport { registerWaterfallSeries } from '../../series/waterfall/waterfall';\nimport { Factory } from '../../core/factory';\nimport type { AdaptiveSpec } from '../../typings';\nimport { WaterfallChartSpecTransformer } from './waterfall-transformer';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class WaterfallChart<T extends IWaterfallChartSpec = IWaterfallChartSpec> extends BarChart<\n  AdaptiveSpec<T, 'type' | 'series' | 'label'>\n> {\n  static readonly type: string = ChartTypeEnum.waterfall;\n  static readonly seriesType: string = SeriesTypeEnum.waterfall;\n  static readonly transformerConstructor = WaterfallChartSpecTransformer;\n  // @ts-ignore\n  readonly transformerConstructor = WaterfallChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.waterfall;\n  readonly seriesType: string = SeriesTypeEnum.waterfall;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nexport const registerWaterfallChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  registerWaterfallSeries();\n  Factory.registerChart(WaterfallChart.type, WaterfallChart);\n};\n"]}