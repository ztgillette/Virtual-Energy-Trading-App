{"version":3,"sources":["../src/chart/stack.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAK/C,OAAO,EAAE,mBAAmB,EAAE,KAAK,EAAE,qBAAqB,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AAGxF,OAAO,EAAE,gCAAgC,EAAE,MAAM,kBAAkB,CAAC;AACpE,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAQ5D,MAAM,OAAO,KAAK;IAMhB,YACE,KAAa,EACb,OAEC;QAsBH,gBAAW,GAAG,CAAC,EAAE,KAAK,EAAsB,EAAE,EAAE;;YAC9C,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;YACjC,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEhD,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO;aACR;YAED,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;;gBAEpC,IAAI,MAAA,MAAA,CAAC,CAAC,OAAO,EAAE,0CAAE,UAAU,0CAAE,mBAAmB,EAAE;oBAChD,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,MAAA,MAAA,CAAC,CAAC,OAAO,EAAE,0CAAE,UAAU,0CAAE,OAAO,CAAC;YAC1C,CAAC,CAAC,CAAC;YACH,MAAM,UAAU,GAAG,aAAa,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;YACrE,MAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,EAAE,CAAC,CAAC;YAE3E,MAAM,eAAe,GAAG,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAGzD,KAAK,MAAM,UAAU,IAAI,eAAe,EAAE;gBACxC,KAAK,MAAM,GAAG,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE;oBACnD,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,eAAe,EAAE,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;iBACnG;aACF;YAED,IAAI,mBAAmB,EAAE;gBAEvB,KAAK,MAAM,UAAU,IAAI,eAAe,EAAE;oBACxC,KAAK,MAAM,GAAG,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE;wBACnD,qBAAqB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC/D;iBACF;aACF;YAED,IAAI,aAAa,EAAE;gBACjB,KAAK,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAC5B,MAAM,SAAS,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC;oBACnC,MAAM,UAAU,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;oBACrC,MAAM,eAAe,GAAG,CAAC,CAAC,kBAAkB,EAAE,CAAC;oBAC/C,IAAI,SAAS,IAAI,eAAe,EAAE;wBAChC,UAAU,CAAC,eAAe,CAAC,UAAU,CAAoB,EAAE,eAAe,CAAC,CAAC;qBAC7E;gBACH,CAAC,CAAC,CAAC;aACJ;YAED,IAAI,MAAA,IAAI,CAAC,QAAQ,0CAAE,gBAAgB,EAAE;gBACnC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;aACxD;QACH,CAAC,CAAC;QAtEA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACtC,CAAC,CAAC,KAAK,CAAC,EAAE,CACR,UAAU,CAAC,0BAA0B,EACrC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,MAAK,CAAC,CAAC,EAAE,EAAE,EAC7C,IAAI,CAAC,WAAqC,CAC3C,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACtC,IAAI,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;CAqDF;AAED,MAAM,OAAO,eAAe;IAIhB,WAAW;QACnB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,gCAAgC,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;SAC3E;IACH,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,IAAyB,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC;CACF","file":"stack.js","sourcesContent":["import { ChartEvent } from '../constant/event';\nimport type { IRegion } from '../region/interface';\nimport type { IChart } from './interface';\nimport type { IStackCacheNode, IStackCacheRoot } from '../util';\n// eslint-disable-next-line no-duplicate-imports\nimport { getRegionStackGroup, stack, stackOffsetSilhouette, stackTotal } from '../util';\nimport type { EventCallback } from '../event/interface';\nimport type { DataSet } from '@visactor/vdataset';\nimport { registerDataSetInstanceTransform } from '../data/register';\nimport { stackSplit } from '../data/transforms/stack-split';\n\n// stack\n// 1. 不可以多个region之间的series进行堆积，目前看这种需求没有场景。将堆积改为针对 region\n// 2. 堆积是一个数据层面的逻辑，但是会影响系列当前使用的yField到底是什么。\n// 3. ECharts 线系列参与堆积后，线系列的y不变，但是与它一起堆积的柱图，数据变化了了，是堆积后的值\n// 4. x 方向分组的功能，是属于轴的，与堆积和怎么堆积无关。\n// 现有功能，有支持堆积时的方向可以调整。也就是sort\nexport class Stack {\n  protected _chart: IChart;\n  protected _options?: {\n    afterStackRegion?: (region: IRegion, stackValueGroup: { [key: string]: IStackCacheRoot }) => void;\n  };\n\n  constructor(\n    chart: IChart,\n    options?: {\n      afterStackRegion?: (region: IRegion, stackValueGroup: { [key: string]: IStackCacheRoot }) => void;\n    }\n  ) {\n    this._chart = chart;\n    this._options = options;\n  }\n\n  init() {\n    this._chart.getAllRegions().forEach(r => {\n      r.event.on(\n        ChartEvent.regionSeriesDataFilterOver,\n        { filter: ({ model }) => model?.id === r.id },\n        this.stackRegion as EventCallback<unknown>\n      );\n    });\n  }\n\n  stackAll() {\n    this._chart.getAllRegions().forEach(r => {\n      this.stackRegion({ model: r });\n    });\n  }\n\n  stackRegion = ({ model }: { model: IRegion }) => {\n    const series = model.getSeries();\n    const hasStack = series.some(s => s.getStack());\n\n    if (!hasStack) {\n      return;\n    }\n    // total label need percent\n    const hasTotalLabel = series.some(s => {\n      // 如果设置了alwayCalculateTotal，那么一定需要计算total\n      if (s.getSpec()?.totalLabel?.alwayCalculateTotal) {\n        return true;\n      }\n      return s.getSpec()?.totalLabel?.visible;\n    });\n    const hasPercent = hasTotalLabel || series.some(s => s.getPercent());\n    const hasOffsetSilhouette = series.some(s => s.getStackOffsetSilhouette());\n\n    const stackValueGroup = getRegionStackGroup(model, true);\n\n    // 计算堆积\n    for (const stackValue in stackValueGroup) {\n      for (const key in stackValueGroup[stackValue].nodes) {\n        stack(stackValueGroup[stackValue].nodes[key], model.getStackInverse(), hasPercent, hasTotalLabel);\n      }\n    }\n\n    if (hasOffsetSilhouette) {\n      // 围绕中心轴偏移轮廓\n      for (const stackValue in stackValueGroup) {\n        for (const key in stackValueGroup[stackValue].nodes) {\n          stackOffsetSilhouette(stackValueGroup[stackValue].nodes[key]);\n        }\n      }\n    }\n\n    if (hasTotalLabel) {\n      model.getSeries().forEach(s => {\n        const stackData = s.getStackData();\n        const stackValue = s.getStackValue();\n        const stackValueField = s.getStackValueField(); // yField\n        if (stackData && stackValueField) {\n          stackTotal(stackValueGroup[stackValue] as IStackCacheNode, stackValueField);\n        }\n      });\n    }\n\n    if (this._options?.afterStackRegion) {\n      this._options.afterStackRegion(model, stackValueGroup);\n    }\n  };\n}\n\nexport class StackChartMixin {\n  protected _stack: Stack;\n  protected _dataSet: DataSet;\n\n  protected _beforeInit() {\n    if (this._dataSet) {\n      registerDataSetInstanceTransform(this._dataSet, 'stackSplit', stackSplit);\n    }\n  }\n\n  protected _initStack() {\n    this._stack = new Stack(this as unknown as IChart);\n    this._stack.init();\n  }\n}\n"]}