{"version":3,"sources":["../src/chart/bar/bar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAG7D,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AACpF,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAC7D,OAAO,EAAE,yBAAyB,EAAE,uBAAuB,EAAE,MAAM,6CAA6C,CAAC;AACjH,OAAO,EAAE,yBAAyB,EAAE,MAAM,2CAA2C,CAAC;AACtF,OAAO,EAAE,iCAAiC,EAAE,MAAM,qDAAqD,CAAC;AACxG,OAAO,EAAE,4BAA4B,EAAE,MAAM,gDAAgD,CAAC;AAC9F,OAAO,EAAE,6BAA6B,EAAE,MAAM,iDAAiD,CAAC;AAEhG,MAAM,OAAO,QAAkD,SAAQ,SAAY;IAAnF;;QAIW,2BAAsB,GAAG,uBAAuB,CAAC;QACjD,SAAI,SAA6B;QACjC,eAAU,GAAW,cAAc,CAAC,GAAG,CAAC;IAOnD,CAAC;IALW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,yBAAyB,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,yBAAyB,CAAC;IACvE,CAAC;;AAXe,aAAI,SAA6B;AACjC,mBAAU,GAAW,cAAc,CAAC,GAAG,CAAC;AACxC,+BAAsB,GAAG,uBAAuB,CAAC;AAYnE,KAAK,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;AAEjC,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,6BAA6B,EAAE,CAAC;IAChC,sBAAsB,EAAE,CAAC;IACzB,iBAAiB,EAAE,CAAC;IACpB,uBAAuB,EAAE,CAAC;IAC1B,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACjD,CAAC,CAAC","file":"bar.js","sourcesContent":["import { registerBarSeries } from '../../series/bar/bar';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport { ChartTypeEnum } from '../interface/type';\nimport type { IBarChartSpec } from './interface';\nimport { Factory } from '../../core/factory';\nimport { BarChartSpecTransformer } from './bar-transformer';\nimport { BaseChart } from '../base';\nimport { mixin } from '@visactor/vutils';\nimport { StackChartMixin } from '../stack';\nimport { registerDimensionHover } from '../../interaction/triggers/dimension-hover';\nimport { registerDimensionEvents } from '../../event/events';\nimport { getCartesianDimensionInfo, getDimensionInfoByValue } from '../../event/events/dimension/util/cartesian';\nimport { getCartesianCrosshairRect } from '../../component/crosshair/utils/cartesian';\nimport { registerDimensionTooltipProcessor } from '../../component/tooltip/processor/dimension-tooltip';\nimport { registerMarkTooltipProcessor } from '../../component/tooltip/processor/mark-tooltip';\nimport { registerGroupTooltipProcessor } from '../../component/tooltip/processor/group-tooltip';\n\nexport class BarChart<T extends IBarChartSpec = IBarChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.bar;\n  static readonly seriesType: string = SeriesTypeEnum.bar;\n  static readonly transformerConstructor = BarChartSpecTransformer;\n  readonly transformerConstructor = BarChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.bar;\n  readonly seriesType: string = SeriesTypeEnum.bar;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nmixin(BarChart, StackChartMixin);\n\nexport const registerBarChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerGroupTooltipProcessor();\n  registerDimensionHover();\n  registerBarSeries();\n  registerDimensionEvents();\n  Factory.registerChart(BarChart.type, BarChart);\n};\n"]}