{"version":3,"sources":["../src/theme/color-scheme/util.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAWtH,OAAO,EAAE,0BAA0B,EAAE,MAAM,wBAAwB,CAAC;AACpE,OAAO,EAAE,qBAAqB,EAAE,MAAM,UAAU,CAAC;AAQjD,MAAM,UAAU,aAAa,CAC3B,WAA+B,EAC/B,UAAwB;;IAExB,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,EAAE,CAAC;KACX;IACD,MAAM,MAAM,GAAG,sBAAsB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAC/D,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;QAE9B,OAAO,MAAC,MAA0E,mCAAI,EAAE,CAAC;KAC1F;SAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QAE3B,MAAM,EAAE,UAAU,EAAE,GAAG,MAA4B,CAAC;QACpD,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,EAAE,CAAC;SACX;QAED,IAAI,4BAA4B,CAAC,UAAU,CAAC,EAAE;YAC5C,OAAO,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iCACzB,IAAI,KACP,MAAM,EAAE,IAAI,CAAC,MAAM;qBAChB,GAAG,CAAC,KAAK,CAAC,EAAE;oBACX,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;wBACrB,OAAO,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;qBAClE;oBACD,OAAO,KAAK,CAAC;gBACf,CAAC,CAAC;qBACD,MAAM,CAAC,OAAO,CAAC,IAClB,CAAC,CAAC;SACL;QAED,OAAO,UAAU;aACd,GAAG,CAAC,KAAK,CAAC,EAAE;YACX,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;gBACrB,OAAO,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;aAClE;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;aACD,MAAM,CAAC,OAAO,CAAC,CAAC;KACpB;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAQD,MAAM,UAAU,uBAAuB,CACrC,UAA2E,EAC3E,WAAkB;;IAElB,IAAI,4BAA4B,CAAC,UAAU,CAAC,EAAE;QAC5C,OAAO,CACL,MAAA,MAAA,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACrB,IAAI,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBAC7B,IAAI,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBAChC,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;iBACtC;gBACD,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;aAC3B;iBAAM,IAAI,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;gBACxC,OAAO,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,KAAI,IAAI,CAAC,eAAe,CAAC;aACpD;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,0CAAE,MAAM,mCAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CACvD,CAAC;KACH;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AASD,MAAM,UAAU,yBAAyB,CACvC,WAA8B,EAC9B,QAAmB,EACnB,UAAwB;;IAExB,MAAM,MAAM,GAAG,sBAAsB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAC/D,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,KAAK,CAAC;IACV,MAAM,EAAE,OAAO,EAAE,GAAG,MAA4B,CAAC;IACjD,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QACrB,KAAK,GAAG,MAAA,qBAAqB,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,mCAAI,QAAQ,CAAC,OAAO,CAAC;KAC1E;IACD,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAChE,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QACvB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;QAC5B,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAChE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,GAAG,QAAQ,CAAC;KACd;IACD,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QACvB,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KAC1B;IACD,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;AACpB,CAAC;AAGD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAU,EAAE,WAA+B,EAAE,EAAE;IAC5E,IAAI,WAAW,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;QACpC,MAAM,KAAK,GAAG,yBAAyB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC5D,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,UAAU,UAAU,CAAC,GAAQ;IACjC,OAAO,GAAG,IAAK,GAAiB,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,CAAE,GAAiB,CAAC,GAAG,CAAC;AAClF,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAI,GAAQ;IACtD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;QACrC,OAAO,KAAK,CAAC;KACd;IACD,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,OAAO,CAAE,IAAsC,CAAC,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,oCAAoC,CAAC,WAAwB;IAC3E,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;QACxB,OAAO;YACL,UAAU,EAAE,WAAW;SACxB,CAAC;KACH;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,WAA+B,EAC/B,UAAwB;;IAExB,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,EAAE,CAAC;IAC9C,IAAI,MAA+B,CAAC;IACpC,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;QACpC,MAAM,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC;KAC/B;SAAM;QACL,MAAM,SAAS,GAAG,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACzD,MAAM,GAAG,MAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,GAAG,UAAU,IAAI,SAAS,EAAE,CAAC,mCAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,UAAU,CAAC,mCAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC;KAC3G;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","file":"util.js","sourcesContent":["import { isArray, isFunction, isObject, isString, isValid, Color, isNil, rgbToHsl, hslToRgb } from '@visactor/vutils';\nimport type {\n  ColorScheme,\n  ColorSchemeItem,\n  IColorKey,\n  IColorSchemeStruct,\n  IProgressiveDataSchemeCase,\n  IThemeColorScheme,\n  ProgressiveDataScheme\n} from './interface';\nimport type { ISeriesSpec } from '../../typings';\nimport { getDirectionFromSeriesSpec } from '../../series/util/spec';\nimport { getUpgradedTokenValue } from './legacy';\n\n/**\n * 从色板中获取数据色板（在此步骤中替换语义色值）\n * @param colorScheme\n * @param seriesType\n * @returns\n */\nexport function getDataScheme(\n  colorScheme?: IThemeColorScheme,\n  seriesSpec?: ISeriesSpec\n): Array<ColorSchemeItem> | ProgressiveDataScheme<ColorSchemeItem> {\n  if (!colorScheme) {\n    return [];\n  }\n  const scheme = getColorSchemeBySeries(colorScheme, seriesSpec);\n  if (!scheme || isArray(scheme)) {\n    // 不带语义色板，直接输出\n    return (scheme as Array<ColorSchemeItem> | ProgressiveDataScheme<ColorSchemeItem>) ?? [];\n  } else if (isObject(scheme)) {\n    // 带语义色板，转换颜色后输出\n    const { dataScheme } = scheme as IColorSchemeStruct;\n    if (!dataScheme) {\n      return [];\n    }\n    // 渐进式色板的情况\n    if (isProgressiveDataColorScheme(dataScheme)) {\n      return dataScheme.map(item => ({\n        ...item,\n        scheme: item.scheme\n          .map(color => {\n            if (isColorKey(color)) {\n              return queryColorFromColorScheme(colorScheme, color, seriesSpec);\n            }\n            return color;\n          })\n          .filter(isValid)\n      }));\n    }\n    // 普通色板的情况\n    return dataScheme\n      .map(color => {\n        if (isColorKey(color)) {\n          return queryColorFromColorScheme(colorScheme, color, seriesSpec);\n        }\n        return color;\n      })\n      .filter(isValid);\n  }\n  return [];\n}\n\n/**\n * 计算最终数据色板（在此步骤中获得渐进式色板的最终色板）\n * @param colorScheme\n * @param seriesType\n * @returns\n */\nexport function computeActualDataScheme(\n  dataScheme: Array<ColorSchemeItem> | ProgressiveDataScheme<ColorSchemeItem>,\n  colorDomain: any[]\n): Array<ColorSchemeItem> {\n  if (isProgressiveDataColorScheme(dataScheme)) {\n    return (\n      dataScheme.find(item => {\n        if (isValid(item.isAvailable)) {\n          if (isFunction(item.isAvailable)) {\n            return item.isAvailable(colorDomain);\n          }\n          return !!item.isAvailable;\n        } else if (isValid(item.maxDomainLength)) {\n          return colorDomain?.length <= item.maxDomainLength;\n        }\n        return true;\n      })?.scheme ?? dataScheme[dataScheme.length - 1].scheme\n    );\n  }\n  return dataScheme;\n}\n\n/**\n * 根据色板和色值索引生成颜色\n * @param colorScheme\n * @param colorKey\n * @param seriesType\n * @returns\n */\nexport function queryColorFromColorScheme(\n  colorScheme: IThemeColorScheme,\n  colorKey: IColorKey,\n  seriesSpec?: ISeriesSpec\n): ColorSchemeItem | undefined {\n  const scheme = getColorSchemeBySeries(colorScheme, seriesSpec);\n  if (!scheme) {\n    return undefined;\n  }\n  let color;\n  const { palette } = scheme as IColorSchemeStruct;\n  if (isObject(palette)) {\n    color = getUpgradedTokenValue(palette, colorKey.key) ?? colorKey.default;\n  }\n  if (!color) {\n    return undefined;\n  }\n  if ((isNil(colorKey.a) && isNil(colorKey.l)) || !isString(color)) {\n    return color;\n  }\n  let c = new Color(color);\n  if (isValid(colorKey.l)) {\n    const { r, g, b } = c.color;\n    const { h, s } = rgbToHsl(r, g, b);\n    const rgb = hslToRgb(h, s, colorKey.l);\n    const newColor = new Color(`rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`);\n    newColor.setOpacity(c.color.opacity);\n    c = newColor;\n  }\n  if (isValid(colorKey.a)) {\n    c.setOpacity(colorKey.a);\n  }\n  return c.toRGBA();\n}\n\n/** 查询语义化颜色 */\nexport const getActualColor = (value: any, colorScheme?: IThemeColorScheme) => {\n  if (colorScheme && isColorKey(value)) {\n    const color = queryColorFromColorScheme(colorScheme, value);\n    if (color) {\n      return color;\n    }\n  }\n  return value;\n};\n\nexport function isColorKey(obj: any): obj is IColorKey {\n  return obj && (obj as IColorKey).type === 'palette' && !!(obj as IColorKey).key;\n}\n\nexport function isProgressiveDataColorScheme<T>(obj: any): obj is ProgressiveDataScheme<T> {\n  if (!isArray(obj) || obj.length === 0) {\n    return false;\n  }\n  return obj.every(item => {\n    return isValid((item as IProgressiveDataSchemeCase<T>).scheme);\n  });\n}\n\n/** 将色板转化为标准形式 */\nexport function transformColorSchemeToStandardStruct(colorScheme: ColorScheme): IColorSchemeStruct {\n  if (isArray(colorScheme)) {\n    return {\n      dataScheme: colorScheme\n    };\n  }\n  return colorScheme;\n}\n\nexport function getColorSchemeBySeries(\n  colorScheme?: IThemeColorScheme,\n  seriesSpec?: ISeriesSpec\n): ColorScheme | undefined {\n  const { type: seriesType } = seriesSpec ?? {};\n  let scheme: ColorScheme | undefined;\n  if (!seriesSpec || isNil(seriesType)) {\n    scheme = colorScheme?.default;\n  } else {\n    const direction = getDirectionFromSeriesSpec(seriesSpec);\n    scheme = colorScheme?.[`${seriesType}_${direction}`] ?? colorScheme?.[seriesType] ?? colorScheme?.default;\n  }\n  return scheme;\n}\n"]}