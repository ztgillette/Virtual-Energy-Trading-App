{"version":3,"sources":["../src/theme/builtin/common/component/crosshair.ts"],"names":[],"mappings":"AASA,MAAM,YAAY,GAAG,GAAwB,EAAE,CAAC,CAAC;IAC/C,OAAO,EAAE,KAAK;IACd,KAAK,EAAE;QACL,UAAU,EAAE,QAAQ;QACpB,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,qBAAqB,EAAE;QACrD,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,YAAY,EAAE;KAE/C;IACD,eAAe,EAAE;QACf,OAAO,EAAE;YACP,MAAM,EAAE,CAAC;YACT,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,CAAC;SACT;QACD,KAAK,EAAE;YACL,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,2BAA2B,EAAE;YAC3D,YAAY,EAAE,CAAC;SAChB;KACF;CACF,CAAC,CAAC;AAEH,MAAM,YAAY,GAAG,GAAgC,EAAE,CAAC,CAAC;IACvD,OAAO,EAAE,KAAK;IACd,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI;QACb,KAAK,EAAE;YACL,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,eAAe,EAAE;YAC/C,OAAO,EAAE,GAAG;YACZ,SAAS,EAAE,CAAC;YAEZ,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,qBAAqB,EAAE;YACvD,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;SACjB;KACoB;IACvB,KAAK,EAAE,YAAY,EAAE;CACtB,CAAC,CAAC;AAEH,MAAM,cAAc,GAAG,GAA6B,EAAE,CAAC,CAAC;IACtD,OAAO,EAAE,KAAK;IACd,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,IAAI;QACb,KAAK,EAAE;YACL,MAAM,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,qBAAqB,EAAE;YACvD,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,GAAG;YACZ,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;SACjB;KACoB;IACvB,KAAK,EAAE,YAAY,EAAE;CACtB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,SAAS,GAAoB;IACxC,OAAO,EAAE,OAAO;IAChB,SAAS,EAAE,YAAY,EAAE;IACzB,WAAW,EAAE,cAAc,EAAE;CAC9B,CAAC","file":"crosshair.js","sourcesContent":["import type {\n  ICrosshairLineSpec,\n  ICrosshairRectSpec,\n  ICrosshairValueFieldSpec,\n  ICrosshairCategoryFieldSpec,\n  ICrosshairLabelSpec,\n  ICrosshairTheme\n} from '../../../../component/crosshair/interface';\n\nconst getLabelSpec = (): ICrosshairLabelSpec => ({\n  visible: false,\n  style: {\n    fontWeight: 'normal',\n    fill: { type: 'palette', key: 'axisMarkerFontColor' },\n    fontSize: { type: 'token', key: 'l5FontSize' }\n    //lineHeight: { type: 'token', key: 'l5LineHeight' },\n  },\n  labelBackground: {\n    padding: {\n      bottom: 0,\n      top: 0,\n      left: 2,\n      right: 2\n    },\n    style: {\n      fill: { type: 'palette', key: 'axisMarkerBackgroundColor' },\n      cornerRadius: 1\n    }\n  }\n});\n\nconst getBandField = (): ICrosshairCategoryFieldSpec => ({\n  visible: false,\n  line: {\n    type: 'rect',\n    visible: true,\n    style: {\n      fill: { type: 'palette', key: 'axisGridColor' },\n      opacity: 0.7,\n      lineWidth: 0, // 默认不显示边线\n      // 此处设置 stroke 和 lineDash 是为了用户想要 line 形式的 crosshair 时，可以直接复用颜色和配置\n      stroke: { type: 'palette', key: 'markLineStrokeColor' },\n      lineDash: [2, 3]\n    }\n  } as ICrosshairRectSpec,\n  label: getLabelSpec()\n});\n\nconst getLinearField = (): ICrosshairValueFieldSpec => ({\n  visible: false,\n  line: {\n    type: 'line',\n    visible: true,\n    style: {\n      stroke: { type: 'palette', key: 'markLineStrokeColor' },\n      fill: 'transparent',\n      opacity: 0.7,\n      lineDash: [2, 3]\n    }\n  } as ICrosshairLineSpec,\n  label: getLabelSpec()\n});\n\nexport const crosshair: ICrosshairTheme = {\n  trigger: 'hover',\n  bandField: getBandField(),\n  linearField: getLinearField()\n};\n"]}