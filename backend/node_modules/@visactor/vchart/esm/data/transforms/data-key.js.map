{"version":3,"sources":["../src/data/transforms/data-key.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,MAAM,qBAAqB,CAAC;AAItG,OAAO,EACL,uBAAuB,EACvB,sBAAsB,EACtB,4BAA4B,EAC7B,MAAM,0BAA0B,CAAC;AAIlC,MAAM,UAAU,UAAU;IACxB,OAAO;QACL,MAAM,EAAE,IAAI,GAAG,EAAE;QACjB,sBAAsB,EAAE,CAAC,IAAI,CAAC,YAAY;QAC1C,kBAAkB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;QACvE,MAAM,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;KACxD,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,CAAM,EAAE,CAAS,EAAE,OAAiC;IAC7E,IAAI,CAAC,CAAC,EAAE;QACN,OAAO;KACR;IACD,IAAI,OAAO,CAAC,sBAAsB,EAAE;QAClC,CAAC,CAAC,yBAAyB,CAAC,GAAG,OAAO,CAAC,kBAAkB,CAAC;KAC3D;IACD,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,UAAU,mBAAmB;IACjC,OAAO;QACL,MAAM,EAAE,IAAI,GAAG,EAAE;QACjB,sBAAsB,EAAE,IAAI;QAC5B,kBAAkB,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QAC3C,MAAM,EAAG,IAAY,CAAC,sBAAsB,CAAE,IAAY,CAAC,KAAK,CAAC,OAAO,CAAC;QACzE,aAAa,EAAE,IAAI,CAAC,gBAAgB,EAAE;KACvC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,CAAM,EACN,CAAS,EACT,OAAiC,EACjC,QAAgB,CAAC,EACjB,IAAa,EACb,SAAkB;IAElB,IAAI,SAAS,KAAK,SAAS,EAAE;QAC3B,SAAS,GAAG,CAAC,CAAC;KACf;IACD,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IAC1B,CAAC,CAAC,uBAAuB,CAAC,GAAG,KAAK,CAAC;IACnC,CAAC,CAAC,sBAAsB,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC7D,CAAC,CAAC,4BAA4B,CAAC,GAAG,SAAS,CAAC;IAC5C,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE;QACnC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAO,EAAE,EAAU,EAAE,EAAE,CACzC,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,EAAE,SAAS,CAAC,CAC3G,CAAC;KACH;AACH,CAAC","file":"data-key.js","sourcesContent":["import { DEFAULT_DATA_INDEX, DEFAULT_DATA_KEY, DEFAULT_DATA_SERIES_FIELD } from '../../constant/data';\nimport type { BaseSeries } from '../../series/base/base-series';\nimport type { TreemapSeries } from '../../series/treemap/treemap';\nimport type { AddVChartPropertyContext } from './add-property';\nimport {\n  DEFAULT_HIERARCHY_DEPTH,\n  DEFAULT_HIERARCHY_ROOT,\n  DEFAULT_HIERARCHY_ROOT_INDEX\n} from '../../constant/hierarchy';\nimport type { SunburstSeries } from '../../series/sunburst/sunburst';\nimport type { CirclePackingSeries } from '../../series/circle-packing/circle-packing';\n\nexport function initKeyMap(this: BaseSeries<any>) {\n  return {\n    keyMap: new Map(),\n    needDefaultSeriesField: !this._seriesField,\n    defaultSeriesField: !this._seriesField ? this.getSeriesKeys()[0] : null,\n    getKey: this.generateDefaultDataKey(this._spec.dataKey)\n  };\n}\n\nexport function addDataKey(d: any, i: number, context: AddVChartPropertyContext) {\n  if (!d) {\n    return;\n  }\n  if (context.needDefaultSeriesField) {\n    d[DEFAULT_DATA_SERIES_FIELD] = context.defaultSeriesField;\n  }\n  d[DEFAULT_DATA_INDEX] = i;\n  d[DEFAULT_DATA_KEY] = context.getKey(d, i, context);\n}\n\nexport function initHierarchyKeyMap(this: TreemapSeries | SunburstSeries | CirclePackingSeries) {\n  return {\n    keyMap: new Map(),\n    needDefaultSeriesField: true,\n    defaultSeriesField: this.getSeriesKeys()[0],\n    getKey: (this as any).generateDefaultDataKey((this as any)._spec.dataKey),\n    categoryField: this.getCategoryField()\n  };\n}\n\nexport function addHierarchyDataKey(\n  d: any,\n  i: number,\n  context: AddVChartPropertyContext,\n  depth: number = 0,\n  root?: string,\n  rootIndex?: number\n) {\n  if (rootIndex === undefined) {\n    rootIndex = i;\n  }\n  addDataKey(d, i, context);\n  d[DEFAULT_HIERARCHY_DEPTH] = depth;\n  d[DEFAULT_HIERARCHY_ROOT] = root || d[context.categoryField];\n  d[DEFAULT_HIERARCHY_ROOT_INDEX] = rootIndex;\n  if (d.children && d.children.length) {\n    d.children.forEach((_d: any, _i: number) =>\n      addHierarchyDataKey(_d, _i, context, d[DEFAULT_HIERARCHY_DEPTH] + 1, d[DEFAULT_HIERARCHY_ROOT], rootIndex)\n    );\n  }\n}\n"]}