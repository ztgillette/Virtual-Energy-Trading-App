{"version":3,"sources":["../src/data/transforms/legend-data/discrete/discrete.ts"],"names":[],"mappings":"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","file":"discrete.js","sourcesContent":["import { isValid, isArray } from '@visactor/vutils';\nimport type { ISeries } from '../../../../series/interface';\nimport type { IDiscreteLegendData, IDiscreteLegendDataMakeOption, IDiscreteLegendFilterOption } from './interface';\nimport { DEFAULT_DATA_SERIES_FIELD } from '../../../../constant/data';\n\nexport const discreteLegendDataMake = (data: Array<ISeries>, op: IDiscreteLegendDataMakeOption) => {\n  const result: IDiscreteLegendData[] = [];\n  const tempKey: { [key in string]: boolean } = {};\n  const { series, seriesField } = op;\n  series().forEach(s => {\n    const field = seriesField(s);\n    let infoList;\n    if (field === s.getSeriesField()) {\n      infoList = s.getSeriesInfoList();\n    } else {\n      infoList = s.getSeriesInfoInField(field);\n    }\n    infoList.forEach(info => {\n      if (tempKey[info.key]) {\n        return;\n      }\n      tempKey[info.key] = true;\n      result.push(info);\n    });\n  });\n  return result;\n};\n\nexport const discreteLegendFilter = (data: Array<any>, op: IDiscreteLegendFilterOption) => {\n  const { series, selected, field, data: legendData, customFilter } = op;\n  const selectedData = selected();\n  const legendKeys = legendData(); // 全量的图例项\n  if (selectedData.length === 0 && legendKeys.length) {\n    return [];\n  }\n\n  if (selectedData.length === legendKeys.length) {\n    return data;\n  }\n\n  const selectedFilter = {};\n  selectedData.forEach(s => {\n    selectedFilter[s] = true;\n  });\n\n  const datumField = field() ?? DEFAULT_DATA_SERIES_FIELD;\n\n  if (customFilter) {\n    return customFilter(data, selectedData, datumField);\n  } else if (isArray(data) && data[0]?.nodes) {\n    // data silter for sankey chart\n    data[0].nodes = data[0].nodes.filter((d: any) => selectedFilter[d.key] === true);\n    if (data[0]?.links) {\n      data[0].links = data[0].links.filter(\n        (d: any) => selectedFilter[d.source] === true && selectedFilter[d.target] === true\n      );\n    }\n  } else {\n    if (isValid(datumField)) {\n      data = data.filter(d => selectedFilter[series.getSeriesFieldValue(d, datumField)] === true);\n    }\n  }\n\n  return data;\n};\n"]}