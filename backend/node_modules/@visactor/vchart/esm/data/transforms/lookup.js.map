{"version":3,"sources":["../src/data/transforms/lookup.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAc9D,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,IAAqB,EAAE,GAAe,EAAE,EAAE;IAC/D,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE;QAC5B,OAAO,IAAI,CAAC;KACb;IAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1B,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IACpB,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1B,MAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC;IACjC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9B,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,UAAU,GAAwB,EAAE,GAAG;QACrE,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE;YACf,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,IAAI,GAAG,EAAkB,CAAC,CAAC;IAE9B,IAAI,GAAqB,CAAC;IAC1B,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACvB,GAAG,GAAG,UAAU,CAAM;YACpB,MAAM,CAAC,GAAI,KAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACrD,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC;KACH;SAAM,IAAI,MAAM,EAAE;QACjB,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,GAAG,GAAG,UAAU,CAAM;YACpB,MAAM,CAAC,GAAI,KAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACrD,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;gBACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;oBAC1B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;iBACzB;aACF;iBAAM;gBACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;oBAC1B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzB;aACF;QACH,CAAC,CAAC;KACH;SAAM;QACL,GAAG,GAAG,UAAU,CAAM;YACpB,MAAM,CAAC,GAAI,KAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QAC3C,CAAC,CAAC;KACH;IAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,EAAE,CAAC;KACX;IACD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAClB,GAAG,CAAC,CAAC,CAAC,CAAC;QACP,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","file":"lookup.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport { isFunction, isNil, isValid } from '@visactor/vutils';\nimport type { Datum } from '../../typings';\n\nexport interface ILookUpOpt {\n  from: () => object[];\n  key: string;\n  // 暂时不支持Multi-field lookup\n  fields: string;\n  values?: string[];\n  as?: string[];\n  default?: any;\n  set?: (A: Datum, B: Datum) => void;\n}\n\nexport const lookup = (data: Array<DataView>, opt: ILookUpOpt) => {\n  if (!opt.from || !opt.from()) {\n    return data;\n  }\n\n  const fields = opt.fields;\n  const key = opt.key;\n  const values = opt.values;\n  const defaultValue = opt.default;\n  const as = opt.as || [fields];\n  const index = opt.from().reduce(function (map: Map<string, object>, obj) {\n    if (obj[fields]) {\n      map.set(obj[fields], obj);\n    }\n    return map;\n  }, new Map<string, object>());\n\n  let set: (d: any) => void;\n  if (isFunction(opt.set)) {\n    set = function (d: any) {\n      const v = (index as Map<string, object>).get(d[key]);\n      opt.set(d, v);\n    };\n  } else if (values) {\n    const m = values.length;\n    set = function (d: any) {\n      const v = (index as Map<string, object>).get(d[key]);\n      if (isNil(v)) {\n        for (let i = 0; i < m; ++i) {\n          d[as[i]] = defaultValue;\n        }\n      } else {\n        for (let i = 0; i < m; ++i) {\n          d[as[i]] = v[values[i]];\n        }\n      }\n    };\n  } else {\n    set = function (d: any) {\n      const v = (index as Map<string, object>).get(d[key]);\n      d[as[0]] = isValid(v) ? v : defaultValue;\n    };\n  }\n\n  if (data.length === 0) {\n    return [];\n  }\n  return data.map(d => {\n    set(d);\n    return d;\n  });\n};\n"]}