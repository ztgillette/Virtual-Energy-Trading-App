{"version":3,"sources":["../src/data/transforms/dimension-data.ts"],"names":[],"mappings":"AAOA,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAqB,EAAE,EAAqB,EAAE,EAAE;IAC5E,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IACD,MAAM,WAAW,GAAG,IAAI;SACrB,GAAG,CAAC,CAAC,CAAC,EAAE;QACP,OAAO,CAAC,CAAC,UAAU,CAAC;IACtB,CAAC,CAAC;SACD,IAAI,EAAE,CAAC;IACV,MAAM,eAAe,GAAG,EAAE,CAAC;IAC3B,OAAO;QACL,eAAe;QACf,aAAa,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC;KAC/D,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,MAAM,CAAC,IAAa,EAAE,MAAgB,EAAE,eAAuB;IACtE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;IAEnC,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,IAAI,KAAK,CAAC,MAAM,EAAE;QAChB,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACvC,OAAO,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,OAAO,CAAC,IAAa,EAAE,KAAa,EAAE,GAAgB;IAC7D,MAAM,MAAM,GAAG,EAAE,CAAC;IAElB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACf,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACjB,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACd;QACD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,MAAc,EAAE,EAAoC;IAC5E,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;QAChD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;QACnC,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,IAAS,EAAE,MAAgB;IAC1D,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;QAC7B,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AAC9C,CAAC","file":"dimension-data.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport type { Datum } from '../../typings/common';\n\nexport interface IDimensionTreeOpt {\n  fields: string[];\n}\n\nexport const dimensionTree = (data: Array<DataView>, op: IDimensionTreeOpt) => {\n  if (!op.fields) {\n    return data;\n  }\n  const dataCollect = data\n    .map(d => {\n      return d.latestData;\n    })\n    .flat();\n  const dimensionValues = {};\n  return {\n    dimensionValues,\n    dimensionData: groups(dataCollect, op.fields, dimensionValues)\n  };\n};\n\nfunction groups(data: Datum[], fields: string[], dimensionValues: object): any {\n  if (fields.length === 0) {\n    return data;\n  }\n  const first = fields[0];\n  const _rest = fields.slice(1);\n  dimensionValues[first] = new Set();\n\n  const grouped = groupBy(data, first, dimensionValues[first]);\n  if (_rest.length) {\n    return mapValues(grouped, (value, key) => {\n      return groups(value, _rest, dimensionValues);\n    });\n  }\n\n  return grouped;\n}\n\nfunction groupBy(data: Datum[], field: string, set: Set<string>) {\n  const groups = {};\n\n  data.forEach(d => {\n    const key = d[field];\n    if (!groups[key]) {\n      groups[key] = [];\n      set.add(key);\n    }\n    groups[key].push(d);\n  });\n  return groups;\n}\n\nexport function mapValues(target: object, fn: (value: any, key: string) => any) {\n  return Object.keys(target).reduce((result, key) => {\n    result[key] = fn(target[key], key);\n    return result;\n  }, {});\n}\n\nexport function findDataInFields(data: any, fields: string[]): any {\n  if (fields.length === 0) {\n    return data;\n  }\n  const first = fields[0];\n  const _rest = fields.slice(1);\n  if (data[first] === undefined) {\n    return undefined;\n  }\n  return findDataInFields(data[first], _rest);\n}\n\n/**\n *\n  const data = [\n    { type: \"circle\", color: \"red\", x: 10, y:100 },\n    { type: \"circle\", color: \"blue\", x: 10, y:100 },\n    { type: \"rect\", color: \"red\", x: 10, y:100 },\n    { type: \"rect\", color: \"blue\", x: 10, y:100 },\n  ]\n\n  groups(data, [\"circle\", \"color\"])\n\n  =====>\n  {\n    circle: {\n      red:[{ type: \"circle\", color: \"red\", x: 10, y:100 }],\n      blue:[{ type: \"circle\", color: \"blue\", x: 10, y:100 }]\n    },\n    rect:{\n      red:[{ type: \"rect\", color: \"red\", x: 10, y:100 }],\n      blue:[{ type: \"rect\", color: \"blue\", x: 10, y:100 }]\n    }\n  }\n */\n"]}