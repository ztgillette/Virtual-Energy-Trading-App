{"version":3,"sources":["../src/common/clone.ts"],"names":[],"mappings":";;;;;AAAA,wDAAgC;AAChC,sDAA8B;AAC9B,0DAAkC;AAElC,SAAS,cAAc,CAAC,EAAO;IAC7B,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,EAAE,CAAC,MAAM,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC;IAC5B,EAAE,CAAC,UAAU,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC;IAChC,EAAE,CAAC,SAAS,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC;IAC/B,OAAO,KAAK,CAAC;AACf,CAAC;AAID,SAAwB,KAAK,CAAC,MAAW,EAAE,QAAQ,GAAG,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,YAAiB,SAAS;IAGhG,MAAM,UAAU,GAAe,EAAE,CAAC;IAClC,MAAM,WAAW,GAAe,EAAE,CAAC;IAEnC,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;QACnC,QAAQ,GAAG,IAAI,CAAC;KACjB;IAED,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;QAChC,KAAK,GAAG,QAAQ,CAAC;KAClB;IAGD,SAAS,MAAM,CAAC,MAAW,EAAE,KAAa;QAExC,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,OAAO,MAAM,CAAC;SACf;QAED,IAAI,KAAK,CAAC;QACV,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,OAAO,MAAM,CAAC;SACf;QAED,IAAI,IAAA,iBAAO,EAAC,MAAM,CAAC,EAAE;YACnB,KAAK,GAAG,EAAE,CAAC;SACZ;aAAM,IAAI,IAAA,kBAAQ,EAAC,MAAM,CAAC,EAAE;YAC3B,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;aACpC;SACF;aAAM,IAAI,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE;YACzB,KAAK,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;aACtD;iBAAM;gBACL,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aAClC;SACF;QAED,IAAI,QAAQ,EAAE;YACZ,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEzC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;aAC3B;YACD,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;YACtB,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;SACzC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/B,CAAC;AAhED,wBAgEC","file":"clone.js","sourcesContent":["import isArray from './isArray';\nimport isDate from './isDate';\nimport isRegExp from './isRegExp';\n\nfunction getRegExpFlags(re: any) {\n  let flags = '';\n  re.global && (flags += 'g');\n  re.ignoreCase && (flags += 'i');\n  re.multiline && (flags += 'm');\n  return flags;\n}\n\n// Adapted from https://github.com/pvorb/clone by Paul Vorbach\n// License: https://github.com/pvorb/clone/blob/master/LICENSE\nexport default function clone(parent: any, circular = false, depth = 0, prototype: any = undefined) {\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents: Array<any> = [];\n  const allChildren: Array<any> = [];\n\n  if (typeof circular === 'undefined') {\n    circular = true;\n  }\n\n  if (typeof depth === 'undefined') {\n    depth = Infinity;\n  }\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent: any, depth: number) {\n    // cloning null always returns null\n    if (parent === null) {\n      return null;\n    }\n\n    if (depth === 0) {\n      return parent;\n    }\n\n    let child;\n    if (typeof parent !== 'object') {\n      return parent;\n    }\n\n    if (isArray(parent)) {\n      child = [];\n    } else if (isRegExp(parent)) {\n      child = new RegExp(parent.source, getRegExpFlags(parent));\n      if (parent.lastIndex) {\n        child.lastIndex = parent.lastIndex;\n      }\n    } else if (isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else {\n      if (typeof prototype === 'undefined') {\n        child = Object.create(Object.getPrototypeOf(parent));\n      } else {\n        child = Object.create(prototype);\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index !== -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (const i in parent) {\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n  return _clone(parent, depth);\n}\n"]}