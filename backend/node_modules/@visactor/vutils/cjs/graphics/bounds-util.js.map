{"version":3,"sources":["../src/graphics/bounds-util.ts"],"names":[],"mappings":"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","file":"bounds-util.js","sourcesContent":["import type { IBoundsLike, IOBBBounds } from '../data-structure';\n\nexport type InsideBoundsAnchorType = 'inside' | 'inside-top' | 'inside-bottom' | 'inside-left' | 'inside-right';\n\nexport type BoundsAnchorType =\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'top-right'\n  | 'top-left'\n  | 'bottom-right'\n  | 'bottom-left'\n  | 'center';\n\nexport const calculateAnchorOfBounds = (bounds: IBoundsLike, anchorType: string) => {\n  const { x1, x2, y1, y2 } = bounds;\n  const rectWidth = Math.abs(x2 - x1);\n  const rectHeight = Math.abs(y2 - y1);\n  let anchorX = (x1 + x2) / 2;\n  let anchorY = (y1 + y2) / 2;\n\n  let sx = 0;\n  let sy = 0;\n\n  switch (anchorType) {\n    case 'top':\n    case 'inside-top':\n      sy = -0.5;\n      break;\n    case 'bottom':\n    case 'inside-bottom':\n      sy = 0.5;\n      break;\n    case 'left':\n    case 'inside-left':\n      sx = -0.5;\n      break;\n    case 'right':\n    case 'inside-right':\n      sx = 0.5;\n      break;\n    case 'top-right':\n      sx = 0.5;\n      sy = -0.5;\n      break;\n    case 'top-left':\n      sx = -0.5;\n      sy = -0.5;\n      break;\n    case 'bottom-right':\n      sx = 0.5;\n      sy = 0.5;\n      break;\n    case 'bottom-left':\n      sx = -0.5;\n      sy = 0.5;\n  }\n\n  anchorX += sx * rectWidth;\n  anchorY += sy * rectHeight;\n\n  return { x: anchorX, y: anchorY };\n};\n\nexport const aabbSeparation = (a: IBoundsLike, b: IBoundsLike) => {\n  return Math.max(b.x1 - a.x2, a.x1 - b.x2, b.y1 - a.y2, a.y1 - b.y2);\n};\n\nexport const obbSeparation = (a: IOBBBounds, b: IOBBBounds) => {\n  const axes = [\n    { x: Math.cos(a.angle), y: Math.sin(a.angle) }, // Rect A's first axis\n    { x: -Math.sin(a.angle), y: Math.cos(a.angle) }, // Rect A's second axis\n    { x: Math.cos(b.angle), y: Math.sin(a.angle) }, // Rect B's first axis\n    { x: -Math.sin(b.angle), y: Math.cos(a.angle) } // Rect B's second axis\n  ];\n\n  // calculate the projection range of a rectangle on a given axis\n  function getProjectionRange(obb: IOBBBounds, axisX: number, axisY: number): { min: number; max: number } {\n    const corners = obb.getRotatedCorners();\n    const projections = corners.map(p => p.x * axisX + p.y * axisY);\n    return { min: Math.min(...projections), max: Math.max(...projections) };\n  }\n\n  // Calculate distances for all axes\n  let maxDistance = 0;\n  for (const axis of axes) {\n    const rangeA = getProjectionRange(a, axis.x, axis.y);\n    const rangeB = getProjectionRange(b, axis.x, axis.y);\n    let distance;\n    if (rangeA.max < rangeB.min) {\n      distance = rangeB.min - rangeA.max; // B is to the right of A\n    } else if (rangeB.max < rangeA.min) {\n      distance = rangeA.min - rangeB.max; // A is to the right of B\n    } else {\n      distance = 0; // Overlapping\n    }\n    maxDistance = Math.max(maxDistance, distance);\n  }\n\n  return maxDistance;\n};\n"]}