{"version":3,"sources":["../src/fmin/nelder-mead.ts"],"names":[],"mappings":"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","file":"nelder-mead.js","sourcesContent":["/* Adapted from fmin by Ben Frederickson\n * https://github.com/benfred/fmin\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/benfred/fmin/blob/master/src/nelderMead.js\n * License: https://github.com/benfred/fmin/blob/master/LICENSE\n * @license\n */\n\nimport { weightedSum } from './blas1';\n\n/** minimizes a function using the downhill simplex method */\nexport function nelderMead(f: any, x0: any, parameters: any) {\n  parameters = parameters || {};\n\n  const maxIterations = parameters.maxIterations || x0.length * 200;\n  const nonZeroDelta = parameters.nonZeroDelta || 1.05;\n  const zeroDelta = parameters.zeroDelta || 0.001;\n  const minErrorDelta = parameters.minErrorDelta || 1e-6;\n  const minTolerance = parameters.minErrorDelta || 1e-5;\n  const rho = parameters.rho !== undefined ? parameters.rho : 1;\n  const chi = parameters.chi !== undefined ? parameters.chi : 2;\n  const psi = parameters.psi !== undefined ? parameters.psi : -0.5;\n  const sigma = parameters.sigma !== undefined ? parameters.sigma : 0.5;\n  let maxDiff;\n\n  // initialize simplex.\n  const N = x0.length;\n  const simplex = new Array(N + 1);\n  simplex[0] = x0;\n  simplex[0].fx = f(x0);\n  simplex[0].id = 0;\n  for (let i = 0; i < N; ++i) {\n    const point = x0.slice();\n    point[i] = point[i] ? point[i] * nonZeroDelta : zeroDelta;\n    simplex[i + 1] = point;\n    simplex[i + 1].fx = f(point);\n    simplex[i + 1].id = i + 1;\n  }\n\n  function updateSimplex(value: any) {\n    for (let i = 0; i < value.length; i++) {\n      simplex[N][i] = value[i];\n    }\n    simplex[N].fx = value.fx;\n  }\n\n  const sortOrder = function (a: any, b: any) {\n    return a.fx - b.fx;\n  };\n\n  const centroid = x0.slice();\n  const reflected = x0.slice();\n  const contracted = x0.slice();\n  const expanded = x0.slice();\n\n  for (let iteration = 0; iteration < maxIterations; ++iteration) {\n    simplex.sort(sortOrder);\n\n    if (parameters.history) {\n      // copy the simplex (since later iterations will mutate) and\n      // sort it to have a consistent order between iterations\n      const sortedSimplex = simplex.map(function (x) {\n        const state = x.slice();\n        state.fx = x.fx;\n        state.id = x.id;\n        return state;\n      });\n      sortedSimplex.sort(function (a, b) {\n        return a.id - b.id;\n      });\n\n      parameters.history.push({ x: simplex[0].slice(), fx: simplex[0].fx, simplex: sortedSimplex });\n    }\n\n    maxDiff = 0;\n    for (let i = 0; i < N; ++i) {\n      maxDiff = Math.max(maxDiff, Math.abs(simplex[0][i] - simplex[1][i]));\n    }\n\n    if (Math.abs(simplex[0].fx - simplex[N].fx) < minErrorDelta && maxDiff < minTolerance) {\n      break;\n    }\n\n    // compute the centroid of all but the worst point in the simplex\n    for (let i = 0; i < N; ++i) {\n      centroid[i] = 0;\n      for (let j = 0; j < N; ++j) {\n        centroid[i] += simplex[j][i];\n      }\n      centroid[i] /= N;\n    }\n\n    // reflect the worst point past the centroid  and compute loss at reflected\n    // point\n    const worst = simplex[N];\n    weightedSum(reflected, 1 + rho, centroid, -rho, worst);\n    reflected.fx = f(reflected);\n\n    // if the reflected point is the best seen, then possibly expand\n    if (reflected.fx < simplex[0].fx) {\n      weightedSum(expanded, 1 + chi, centroid, -chi, worst);\n      expanded.fx = f(expanded);\n      if (expanded.fx < reflected.fx) {\n        updateSimplex(expanded);\n      } else {\n        updateSimplex(reflected);\n      }\n    }\n\n    // if the reflected point is worse than the second worst, we need to\n    // contract\n    else if (reflected.fx >= simplex[N - 1].fx) {\n      let shouldReduce = false;\n\n      if (reflected.fx > worst.fx) {\n        // do an inside contraction\n        weightedSum(contracted, 1 + psi, centroid, -psi, worst);\n        contracted.fx = f(contracted);\n        if (contracted.fx < worst.fx) {\n          updateSimplex(contracted);\n        } else {\n          shouldReduce = true;\n        }\n      } else {\n        // do an outside contraction\n        weightedSum(contracted, 1 - psi * rho, centroid, psi * rho, worst);\n        contracted.fx = f(contracted);\n        if (contracted.fx < reflected.fx) {\n          updateSimplex(contracted);\n        } else {\n          shouldReduce = true;\n        }\n      }\n\n      if (shouldReduce) {\n        // if we don't contract here, we're done\n        if (sigma >= 1) {\n          break;\n        }\n\n        // do a reduction\n        for (let i = 1; i < simplex.length; ++i) {\n          weightedSum(simplex[i], 1 - sigma, simplex[0], sigma, simplex[i]);\n          simplex[i].fx = f(simplex[i]);\n        }\n      }\n    } else {\n      updateSimplex(reflected);\n    }\n  }\n\n  simplex.sort(sortOrder);\n  return { fx: simplex[0].fx, x: simplex[0] };\n}\n"]}