{"version":3,"sources":["../src/fmin/linesearch.ts"],"names":[],"mappings":"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","file":"linesearch.js","sourcesContent":["/* Adapted from fmin by Ben Frederickson\n * https://github.com/benfred/fmin\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/benfred/fmin/blob/master/src/linesearch.js\n * License: https://github.com/benfred/fmin/blob/master/LICENSE\n * @license\n */\n\nimport { dotProduct } from '../math';\nimport { weightedSum } from './blas1';\n\n/// searches along line 'pk' for a point that satifies the wolfe conditions\n/// See 'Numerical Optimization' by Nocedal and Wright p59-60\n/// f : objective function\n/// pk : search direction\n/// current: object containing current gradient/loss\n/// next: output: contains next gradient/loss\n/// returns a: step size taken\nexport function wolfeLineSearch(f: any, pk: number[], current: any, next: any, a: number, c1?: number, c2?: number) {\n  const phi0 = current.fx;\n  const phiPrime0 = dotProduct(current.fxprime, pk);\n  let phi = phi0;\n  let phi_old = phi0;\n  let phiPrime = phiPrime0;\n  let a0 = 0;\n\n  a = a || 1;\n  c1 = c1 || 1e-6;\n  c2 = c2 || 0.1;\n\n  function zoom(a_lo: number, a_high: number, phi_lo: number) {\n    for (let iteration = 0; iteration < 16; ++iteration) {\n      a = (a_lo + a_high) / 2;\n      weightedSum(next.x, 1.0, current.x, a, pk);\n      phi = next.fx = f(next.x, next.fxprime);\n      phiPrime = dotProduct(next.fxprime, pk);\n\n      if (phi > phi0 + c1 * a * phiPrime0 || phi >= phi_lo) {\n        a_high = a;\n      } else {\n        if (Math.abs(phiPrime) <= -c2 * phiPrime0) {\n          return a;\n        }\n\n        if (phiPrime * (a_high - a_lo) >= 0) {\n          a_high = a_lo;\n        }\n\n        a_lo = a;\n        phi_lo = phi;\n      }\n    }\n\n    return 0;\n  }\n\n  for (let iteration = 0; iteration < 10; ++iteration) {\n    weightedSum(next.x, 1.0, current.x, a, pk);\n    phi = next.fx = f(next.x, next.fxprime);\n    phiPrime = dotProduct(next.fxprime, pk);\n    if (phi > phi0 + c1 * a * phiPrime0 || (iteration && phi >= phi_old)) {\n      return zoom(a0, a, phi_old);\n    }\n\n    if (Math.abs(phiPrime) <= -c2 * phiPrime0) {\n      return a;\n    }\n\n    if (phiPrime >= 0) {\n      return zoom(a, a0, phi);\n    }\n\n    phi_old = phi;\n    a0 = a;\n    a *= 2;\n  }\n\n  return a;\n}\n"]}