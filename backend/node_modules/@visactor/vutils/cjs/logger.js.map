{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"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","file":"logger.js","sourcesContent":["/* Adapted from vega by University of Washington Interactive Data Lab\n * https://vega.github.io/vega/\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/vega/vega/blob/main/packages/vega-util/src/logger.js\n * License: https://github.com/vega/vega/blob/main/LICENSE\n * @license\n */\n\nimport isNumber from './common/isNumber';\nimport type { ILogger } from './type';\n\n// check console\nconst hasConsole = typeof console !== 'undefined';\n\nfunction log(method: string, level: any, input: any) {\n  const args = [level].concat([].slice.call(input));\n\n  if (hasConsole) {\n    // eslint-disable-next-line prefer-spread, no-undef\n    console[method].apply(console, args); // eslint-disable-line no-console\n  }\n}\n\nexport enum LoggerLevel {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Info = 3,\n  Debug = 4\n}\n\ntype ErrorHandler = (...args: any[]) => void;\n\nexport class Logger implements ILogger {\n  private static _instance: ILogger = null;\n\n  static getInstance(level?: number, method?: string) {\n    if (Logger._instance && isNumber(level)) {\n      Logger._instance.level(level);\n    } else if (!Logger._instance) {\n      Logger._instance = new Logger(level, method);\n    }\n    return Logger._instance;\n  }\n  static setInstance(logger: ILogger) {\n    return (Logger._instance = logger);\n  }\n\n  static setInstanceLevel(level: number) {\n    if (Logger._instance) {\n      Logger._instance.level(level);\n    } else {\n      Logger._instance = new Logger(level);\n    }\n  }\n\n  static clearInstance() {\n    Logger._instance = null;\n  }\n\n  private _level: number;\n\n  private _method: string;\n\n  private _onErrorHandler: ErrorHandler[] = [];\n\n  constructor(level: number = LoggerLevel.None, method?: string) {\n    this._level = level;\n    this._method = method;\n  }\n\n  addErrorHandler(handler: ErrorHandler) {\n    if (this._onErrorHandler.find(h => h === handler)) {\n      return;\n    }\n    this._onErrorHandler.push(handler);\n  }\n\n  removeErrorHandler(handler: ErrorHandler) {\n    const index = this._onErrorHandler.findIndex(h => h === handler);\n    if (index < 0) {\n      return;\n    }\n    this._onErrorHandler.splice(index, 1);\n  }\n\n  callErrorHandler(...args: any[]) {\n    this._onErrorHandler.forEach(h => h(...args));\n  }\n\n  canLogInfo() {\n    return this._level >= LoggerLevel.Info;\n  }\n\n  canLogDebug() {\n    return this._level >= LoggerLevel.Debug;\n  }\n\n  canLogError() {\n    return this._level >= LoggerLevel.Error;\n  }\n\n  canLogWarn() {\n    return this._level >= LoggerLevel.Warn;\n  }\n\n  level(): number;\n  level(levelValue: number): this;\n  level(levelValue?: number) {\n    if (arguments.length) {\n      this._level = +levelValue;\n      return this;\n    }\n\n    return this._level;\n  }\n\n  error(...args: any[]) {\n    if (this._level >= LoggerLevel.Error) {\n      if (this._onErrorHandler.length) {\n        this.callErrorHandler(...args);\n      } else {\n        log(this._method ?? 'error', 'ERROR', args);\n      }\n    }\n    return this;\n  }\n\n  warn(...args: any[]) {\n    if (this._level >= LoggerLevel.Warn) {\n      log(this._method || 'warn', 'WARN', args);\n    }\n    return this;\n  }\n\n  info(...args: any[]) {\n    if (this._level >= LoggerLevel.Info) {\n      log(this._method || 'log', 'INFO', args);\n    }\n    return this;\n  }\n\n  debug(...args: any[]) {\n    if (this._level >= LoggerLevel.Debug) {\n      log(this._method || 'log', 'DEBUG', args);\n    }\n    return this;\n  }\n}\n"]}