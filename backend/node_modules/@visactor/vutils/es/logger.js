import isNumber from "./common/isNumber";

const hasConsole = "undefined" != typeof console;

function log(method, level, input) {
    const args = [ level ].concat([].slice.call(input));
    hasConsole && console[method].apply(console, args);
}

export var LoggerLevel;

!function(LoggerLevel) {
    LoggerLevel[LoggerLevel.None = 0] = "None", LoggerLevel[LoggerLevel.Error = 1] = "Error", 
    LoggerLevel[LoggerLevel.Warn = 2] = "Warn", LoggerLevel[LoggerLevel.Info = 3] = "Info", 
    LoggerLevel[LoggerLevel.Debug = 4] = "Debug";
}(LoggerLevel || (LoggerLevel = {}));

export class Logger {
    static getInstance(level, method) {
        return Logger._instance && isNumber(level) ? Logger._instance.level(level) : Logger._instance || (Logger._instance = new Logger(level, method)), 
        Logger._instance;
    }
    static setInstance(logger) {
        return Logger._instance = logger;
    }
    static setInstanceLevel(level) {
        Logger._instance ? Logger._instance.level(level) : Logger._instance = new Logger(level);
    }
    static clearInstance() {
        Logger._instance = null;
    }
    constructor(level = LoggerLevel.None, method) {
        this._onErrorHandler = [], this._level = level, this._method = method;
    }
    addErrorHandler(handler) {
        this._onErrorHandler.find((h => h === handler)) || this._onErrorHandler.push(handler);
    }
    removeErrorHandler(handler) {
        const index = this._onErrorHandler.findIndex((h => h === handler));
        index < 0 || this._onErrorHandler.splice(index, 1);
    }
    callErrorHandler(...args) {
        this._onErrorHandler.forEach((h => h(...args)));
    }
    canLogInfo() {
        return this._level >= LoggerLevel.Info;
    }
    canLogDebug() {
        return this._level >= LoggerLevel.Debug;
    }
    canLogError() {
        return this._level >= LoggerLevel.Error;
    }
    canLogWarn() {
        return this._level >= LoggerLevel.Warn;
    }
    level(levelValue) {
        return arguments.length ? (this._level = +levelValue, this) : this._level;
    }
    error(...args) {
        var _a;
        return this._level >= LoggerLevel.Error && (this._onErrorHandler.length ? this.callErrorHandler(...args) : log(null !== (_a = this._method) && void 0 !== _a ? _a : "error", "ERROR", args)), 
        this;
    }
    warn(...args) {
        return this._level >= LoggerLevel.Warn && log(this._method || "warn", "WARN", args), 
        this;
    }
    info(...args) {
        return this._level >= LoggerLevel.Info && log(this._method || "log", "INFO", args), 
        this;
    }
    debug(...args) {
        return this._level >= LoggerLevel.Debug && log(this._method || "log", "DEBUG", args), 
        this;
    }
}

Logger._instance = null;
//# sourceMappingURL=logger.js.map