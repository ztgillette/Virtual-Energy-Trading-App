{"version":3,"sources":["../src/common/mixin.ts"],"names":[],"mappings":"AAKA,MAAM,UAAU,IAAI,CAAgB,GAAM;IACxC,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,EAAE,CAAC;KACX;IAID,IAAI,MAAM,CAAC,IAAI,EAAE;QACf,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAY,CAAC;KACpC;IACD,MAAM,OAAO,GAAY,EAAE,CAAC;IAC5B,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;QAErB,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC3B,OAAO,CAAC,IAAI,CAAC,GAAU,CAAC,CAAC;SAC1B;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,QAAQ,CAA2C,MAAS,EAAE,MAAS,EAAE,OAAiB;IACxG,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAE,MAAgB,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YACjE,MAAgB,CAAC,GAAG,CAAC,GAAI,MAAgB,CAAC,GAAG,CAAC,CAAC;SACjD;KACF;IACD,OAAO,MAAe,CAAC;AACzB,CAAC;AAGD,MAAM,UAAU,KAAK,CAAO,MAAoB,EAAE,MAAoB,EAAE,WAAoB,IAAI;IAG9F,MAAM,GAAG,WAAW,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;IAG3D,MAAM,GAAG,WAAW,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;IAG3D,IAAI,MAAM,CAAC,mBAAmB,EAAE;QAC9B,MAAM,OAAO,GAAG,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,GAAG,KAAK,aAAa,EAAE;gBACzB,IAAI,QAAQ,CAAC,CAAC,CAAE,MAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAE,MAAc,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;oBACzE,MAAc,CAAC,GAAG,CAAC,GAAI,MAAc,CAAC,GAAG,CAAC,CAAC;iBAC7C;aACF;SACF;KACF;SAAM;QACL,QAAQ,CAAC,MAAmB,EAAE,MAAmB,EAAE,QAAQ,CAAC,CAAC;KAC9D;AACH,CAAC","file":"mixin.js","sourcesContent":["import type { Dict } from '../type';\n\nexport type KeyOfDistributive<T> = T extends unknown ? keyof T : never;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-constraint\nexport function keys<T extends any>(obj: T): (KeyOfDistributive<T> & string)[] {\n  if (!obj) {\n    return [];\n  }\n  // Return type should be `keyof T` but exclude `number`, becuase\n  // `Object.keys` only return string rather than `number | string`.\n  type TKeys = KeyOfDistributive<T> & string;\n  if (Object.keys) {\n    return Object.keys(obj) as TKeys[];\n  }\n  const keyList: TKeys[] = [];\n  for (const key in obj) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (obj.hasOwnProperty(key)) {\n      keyList.push(key as any);\n    }\n  }\n  return keyList;\n}\n\nexport function defaults<T extends Dict<any>, S extends Dict<any>>(target: T, source: S, overlay?: boolean): T & S {\n  const keysArr = keys(source);\n  for (let i = 0; i < keysArr.length; i++) {\n    const key = keysArr[i];\n    if (overlay ? source[key] != null : (target as T & S)[key] == null) {\n      (target as S & T)[key] = (source as T & S)[key];\n    }\n  }\n  return target as T & S;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function mixin<T, S>(target: T | Function, source: S | Function, override: boolean = true) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  target = 'prototype' in target ? target.prototype : target;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  source = 'prototype' in source ? source.prototype : source;\n  // If build target is ES6 class. prototype methods is not enumerable. Use getOwnPropertyNames instead\n  // TODO: Determine if source is ES6 class?\n  if (Object.getOwnPropertyNames) {\n    const keyList = Object.getOwnPropertyNames(source);\n    for (let i = 0; i < keyList.length; i++) {\n      const key = keyList[i];\n      if (key !== 'constructor') {\n        if (override ? (source as any)[key] != null : (target as any)[key] == null) {\n          (target as any)[key] = (source as any)[key];\n        }\n      }\n    }\n  } else {\n    defaults(target as Dict<any>, source as Dict<any>, override);\n  }\n}\n"]}