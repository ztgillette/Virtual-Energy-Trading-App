export function getContainerSize(el, defaultWidth = 0, defaultHeight = 0) {
    if (!el) return {
        width: defaultWidth,
        height: defaultHeight
    };
    let getComputedStyle;
    try {
        getComputedStyle = null === window || void 0 === window ? void 0 : window.getComputedStyle;
    } catch (e) {
        getComputedStyle = () => ({});
    }
    const style = getComputedStyle(el);
    if (/^(\d*\.?\d+)(px)$/.exec(style.width)) {
        const computedWidth = parseFloat(style.width) - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight) || el.clientWidth - 1, computedHeight = parseFloat(style.height) - parseFloat(style.paddingTop) - parseFloat(style.paddingBottom) || el.clientHeight - 1;
        return {
            width: computedWidth <= 0 ? defaultWidth : computedWidth,
            height: computedHeight <= 0 ? defaultHeight : computedHeight
        };
    }
    return {
        width: defaultWidth,
        height: defaultHeight
    };
}

export function getElementAbsolutePosition(element) {
    const {x: x, y: y} = element.getBoundingClientRect();
    return {
        x: x,
        y: y
    };
}

export function getElementRelativePosition(element, base) {
    const posElement = getElementAbsolutePosition(element), posBase = getElementAbsolutePosition(base);
    return {
        x: posElement.x - posBase.x,
        y: posElement.y - posBase.y
    };
}

export const getScrollLeft = element => {
    var _a, _b, _c;
    return element === (null === (_a = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === _a ? void 0 : _a.body) ? (null === (_c = null === (_b = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === _b ? void 0 : _b.documentElement) || void 0 === _c ? void 0 : _c.scrollLeft) || element.scrollLeft : "html" === element.tagName.toLowerCase() ? 0 : element.scrollLeft;
};

export const getScrollTop = element => {
    var _a, _b, _c;
    return element === (null === (_a = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === _a ? void 0 : _a.body) ? (null === (_c = null === (_b = null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || void 0 === _b ? void 0 : _b.documentElement) || void 0 === _c ? void 0 : _c.scrollTop) || element.scrollTop : "html" === element.tagName.toLowerCase() ? 0 : element.scrollTop;
};

export const getScaleX = element => element.getBoundingClientRect().width / element.offsetWidth;

export const getScaleY = element => element.getBoundingClientRect().height / element.offsetHeight;

export const getScale = element => element.offsetWidth > 0 ? getScaleX(element) : getScaleY(element);

export function hasParentElement(element, target) {
    let parent = element.parentNode;
    for (;null !== parent; ) {
        if (parent === target) return !0;
        parent = parent.parentNode;
    }
    return !1;
}

export const styleStringToObject = (styleStr = "") => {
    const res = {};
    return styleStr.split(";").forEach((item => {
        if (item) {
            const arr = item.split(":");
            if (2 === arr.length) {
                const key = arr[0].trim(), value = arr[1].trim();
                key && value && (res[key] = value);
            }
        }
    })), res;
};

export const lowerCamelCaseToMiddle = str => str.replace(/([A-Z])/g, "-$1").toLowerCase();

export function toCamelCase(str) {
    return str.replace(/-([a-z])/g, ((_, letter) => letter.toUpperCase()));
}

export function isHTMLElement(obj) {
    try {
        return obj instanceof Element;
    } catch (_a) {
        const htmlElementKeys = [ "children", "innerHTML", "classList", "setAttribute", "tagName", "getBoundingClientRect" ], keys = Object.keys(obj);
        return htmlElementKeys.every((key => keys.includes(key)));
    }
}
//# sourceMappingURL=dom.js.map