{"version":3,"sources":["../src/axis/tick-data/discrete/polar-angle.ts"],"names":[],"mappings":"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","file":"polar-angle.js","sourcesContent":["import type { BandScale, IBaseScale } from '@visactor/vscale';\nimport { isFunction, isValid, maxInArray, minInArray, isNumberClose } from '@visactor/vutils';\nimport type { IPolarTickDataOpt, ITickCallbackOption, ITickData } from '../../type';\nimport { MIN_TICK_GAP, convertDomainToTickData, labelOverlap } from '../util';\nimport { AABBBounds } from '@visactor/vutils';\nimport { initTextMeasure } from '../../../util/text';\nimport { getPolarAngleLabelPosition } from '../../util';\n\nexport const getPolarAngleLabelBounds = (scale: IBaseScale, domain: any[], op: IPolarTickDataOpt): AABBBounds[] => {\n  const { labelStyle, getRadius, labelOffset, labelFormatter, inside } = op;\n  const radius = getRadius?.();\n  const labelAngle = labelStyle.angle ?? 0;\n\n  const textMeasure = initTextMeasure(labelStyle);\n  const labelBoundsList = domain.map((v: any) => {\n    const str = labelFormatter ? labelFormatter(v) : `${v}`;\n\n    // 估算文本宽高\n    const { width, height } = textMeasure.quickMeasure(str);\n    const textWidth = Math.max(width, MIN_TICK_GAP);\n    const textHeight = Math.max(height, MIN_TICK_GAP);\n\n    // 估算文本位置\n    const angle = scale.scale(v);\n    const center = { x: 0, y: 0 };\n    let textX = 0;\n    let textY = 0;\n    const orient = {\n      align: labelStyle.textAlign,\n      baseline: labelStyle.textBaseline\n    };\n\n    const { x, y } = getPolarAngleLabelPosition(angle, center, radius, labelOffset, inside);\n\n    if (!orient.align) {\n      if (isNumberClose(x, center.x)) {\n        if (!orient.baseline) {\n          if (y > center.y) {\n            orient.baseline = 'top';\n          } else {\n            orient.baseline = 'bottom';\n          }\n        }\n      } else if (x > center.x) {\n        orient.align = 'left';\n      } else if (x < center.x) {\n        orient.align = 'right';\n      }\n    }\n\n    textX = x + (orient.align === 'right' ? -textWidth : orient.align === 'left' ? 0 : -textWidth / 2);\n    textY = y + (orient.baseline === 'bottom' ? -textHeight : orient.baseline === 'top' ? 0 : -textHeight / 2);\n\n    // 计算 label 包围盒\n    const bounds = new AABBBounds()\n      .set(textX, textY, textX + textWidth, textY + textHeight)\n      .rotate(labelAngle, textX + textWidth / 2, textY + textHeight / 2);\n    return bounds;\n  });\n\n  return labelBoundsList;\n};\n/**\n * 对于离散轴：\n * - 如果spec配了tickCount、forceTickCount、tickStep，则直接输出BandScale的ticks()、forceTicks()、stepTicks()结果；\n * - 估算所有轴label的宽高并存为数组labelBoundsList；\n * - 通过循环来寻找最小的step，使：如果在这个step下采样，轴标签互不遮挡（此处用到labelBoundsList和scale.range()）；\n *\n * @param scale\n * @param op\n * @returns\n */\nexport const polarAngleAxisDiscreteTicks = (scale: BandScale, op: IPolarTickDataOpt): ITickData[] => {\n  const { tickCount, forceTickCount, tickStep, getRadius, labelOffset, labelGap = 0, labelStyle } = op;\n  const radius = getRadius?.();\n  if (!radius) {\n    return convertDomainToTickData(scale.domain());\n  }\n\n  let scaleTicks;\n  if (isValid(tickStep)) {\n    scaleTicks = scale.stepTicks(tickStep);\n  } else if (isValid(forceTickCount)) {\n    scaleTicks = scale.forceTicks(forceTickCount);\n  } else if (isValid(tickCount)) {\n    const range = scale.range();\n    const rangeSize = Math.abs(range[range.length - 1] - range[0]);\n    const count = isFunction(tickCount)\n      ? (tickCount as (option: ITickCallbackOption) => number)({ axisLength: rangeSize, labelStyle })\n      : tickCount;\n    scaleTicks = scale.ticks(count);\n  } else if (op.sampling) {\n    const domain = scale.domain();\n    const range = scale.range();\n\n    const labelBoundsList = getPolarAngleLabelBounds(scale, domain, op);\n\n    const rangeStart = minInArray(range);\n    const rangeEnd = maxInArray(range);\n\n    const axisLength = Math.abs(rangeEnd - rangeStart) * (radius + labelOffset);\n    const incrementUnit = axisLength / domain.length;\n    const { step, delCount } = getStep(\n      domain,\n      labelBoundsList,\n      labelGap,\n      Math.floor(\n        labelBoundsList.reduce((min, curBounds) => {\n          return Math.min(min, curBounds.width(), curBounds.height());\n        }, Number.MAX_VALUE) / incrementUnit\n      ) // 给step赋上合适的初值，有效改善外层循环次数\n    );\n\n    scaleTicks = (scale as BandScale).stepTicks(step);\n    scaleTicks = scaleTicks.slice(0, scaleTicks.length - delCount);\n  } else {\n    scaleTicks = scale.domain();\n  }\n\n  return convertDomainToTickData(scaleTicks);\n};\n\n/** 计算合适的step */\nconst getStep = (domain: any[], labelBoundsList: AABBBounds[], labelGap: number, defaultStep: number) => {\n  let step = defaultStep;\n  // 通过循环来寻找最小的step，使：如果在这个step下采样，轴标签互不遮挡\n  do {\n    let success = true;\n    step++;\n    let ptr = 0;\n    do {\n      if (ptr + step < domain.length && labelOverlap(labelBoundsList[ptr], labelBoundsList[ptr + step], labelGap)) {\n        success = false;\n      }\n      ptr += step;\n    } while (success && ptr < domain.length);\n    if (success) {\n      break;\n    }\n  } while (step <= domain.length);\n\n  let delCount = 0;\n  if (domain.length > 2) {\n    let ptr = domain.length - (domain.length % step);\n    if (ptr >= domain.length) {\n      ptr -= step;\n    }\n    // 判断首尾是否互相覆盖\n    while (ptr > 0 && labelOverlap(labelBoundsList[0], labelBoundsList[ptr])) {\n      delCount++;\n      ptr -= step;\n    }\n  }\n\n  return {\n    step,\n    delCount\n  };\n};\n"]}