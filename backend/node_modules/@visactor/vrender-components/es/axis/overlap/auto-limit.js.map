{"version":3,"sources":["../src/axis/overlap/auto-limit.ts"],"names":[],"mappings":"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","file":"auto-limit.js","sourcesContent":["/**\n * 自动省略\n */\nimport type { IText } from '@visactor/vrender-core';\nimport { isAngleHorizontal, isAngleVertical } from './util';\nimport type { AxisLabelOverlap } from '../type';\nimport { isEmpty, isNil, isObject, isValidNumber } from '@visactor/vutils';\n\ntype LimitConfig = {\n  orient: string;\n  limitLength: number;\n  axisLength: number;\n  verticalLimitLength?: number;\n  ellipsis?: string;\n  overflowLimitLength?: AxisLabelOverlap['overflowLimitLength'];\n};\n\nfunction normalizeOverflowLimitLength(overflowLimitLength?: AxisLabelOverlap['overflowLimitLength']) {\n  if (isValidNumber(overflowLimitLength)) {\n    return {\n      left: overflowLimitLength,\n      right: overflowLimitLength\n      // top: overflowLimitLength,\n      // bottom: overflowLimitLength\n    };\n  } else if (isObject(overflowLimitLength)) {\n    return {\n      left: overflowLimitLength.left || 0,\n      right: overflowLimitLength.right || 0\n      // top: overflowLimitLength.top || 0,\n      // bottom: overflowLimitLength.bottom || 0\n    };\n  }\n  return { left: 0, right: 0 };\n}\n\nexport function autoLimit(labels: IText[], config: LimitConfig) {\n  const { limitLength, verticalLimitLength, ellipsis = '...', orient, axisLength } = config;\n  if (isEmpty(labels) || !isValidNumber(limitLength)) {\n    return;\n  }\n  const overflowLimitLength = normalizeOverflowLimitLength(config.overflowLimitLength);\n  // 注意：自动隐藏算法暂时只考虑所有标签角度都一致的情况\n  const firstLabel = labels[0];\n  const angle = firstLabel.attribute.angle;\n  const hasAngle = !isNil(angle);\n  const cos = hasAngle ? Math.cos(angle) : 1;\n  const sin = hasAngle ? Math.sin(angle) : 0;\n  const isHorizontal = isAngleHorizontal(angle);\n  const isVertical = isAngleVertical(angle);\n  const isX = orient === 'top' || orient === 'bottom';\n  const direction = firstLabel.attribute.direction;\n  // 判断有长度差异的阀值\n  const THRESHOLD = 2;\n  const checkBox =\n    !isHorizontal &&\n    !isVertical &&\n    isX &&\n    (labels.length < 2 ||\n      labels.some(label => Math.abs(label.AABBBounds.width() - firstLabel.AABBBounds.width()) >= THRESHOLD)) &&\n    firstLabel.AABBBounds.width() > Math.abs(limitLength / sin);\n\n  labels.forEach(label => {\n    if (isX) {\n      if (isVertical && Math.floor(label.AABBBounds.height()) <= limitLength) {\n        return;\n      }\n      if (isHorizontal && Math.floor(label.AABBBounds.width()) <= verticalLimitLength) {\n        return;\n      }\n    }\n\n    if (!isX) {\n      if (direction === 'vertical' && Math.floor(label.AABBBounds.height()) <= verticalLimitLength) {\n        return;\n      }\n\n      if (direction !== 'vertical') {\n        if (isHorizontal && Math.floor(label.AABBBounds.width()) <= limitLength) {\n          return;\n        }\n        if (isVertical && Math.floor(label.AABBBounds.height()) <= verticalLimitLength) {\n          return;\n        }\n      }\n    }\n\n    // 如果水平并且文本未发生旋转，则不配置 maxLineWidth\n    let limitLabelLength = null;\n\n    if (!isHorizontal && !isVertical) {\n      if (isX) {\n        const { x1, x2 } = label.AABBBounds;\n        const tan = sin / cos;\n        const verticalSizeLimit = Math.abs(limitLength / sin);\n\n        if (\n          checkBox &&\n          tan > 0 &&\n          x1 <= axisLength + overflowLimitLength.right &&\n          limitLength / tan + x1 > axisLength + overflowLimitLength.right\n        ) {\n          // 以 x1 近似为锚点，文字在 x1 右侧\n          const lengthLimit = (axisLength - x1 + overflowLimitLength.right) / Math.abs(cos);\n          limitLabelLength = Math.min(lengthLimit, verticalSizeLimit);\n        } else if (\n          checkBox &&\n          tan < 0 &&\n          x2 >= -overflowLimitLength.left &&\n          limitLength / tan + x2 < -overflowLimitLength.left\n        ) {\n          // 以 x2 近似为锚点，文字在 x2 左侧\n          const lengthLimit = (x2 + overflowLimitLength.left) / Math.abs(cos);\n          limitLabelLength = Math.min(lengthLimit, verticalSizeLimit);\n        } else {\n          limitLabelLength = verticalSizeLimit;\n        }\n      } else {\n        // y轴暂时不限制在平行于坐标轴的矩形内，后续可以考虑通过配置开启\n        // const { y1, y2 } = label.AABBBounds;\n        // const tan = sin / cos;\n        // if (tan > 0 && y2 >= 0 && y2 - tan * limitLength < 0) {\n        //   limitLabelLength = y2 / Math.abs(sin);\n        // } else if (tan < 0 && y1 <= axisLength && y1 - tan * limitLength > axisLength) {\n        //   limitLabelLength = (axisLength - y1) / Math.abs(sin);\n        // } else {\n        // }\n        limitLabelLength = Math.abs(limitLength / cos);\n      }\n    } else if (isX) {\n      limitLabelLength = isHorizontal ? verticalLimitLength : limitLength;\n    } else {\n      limitLabelLength = direction === 'vertical' || isVertical ? verticalLimitLength : limitLength;\n    }\n\n    if (isValidNumber(label.attribute.maxLineWidth)) {\n      limitLabelLength = isValidNumber(limitLabelLength)\n        ? Math.min(label.attribute.maxLineWidth, limitLabelLength)\n        : label.attribute.maxLineWidth;\n    }\n    label.setAttributes({\n      maxLineWidth: limitLabelLength,\n      ellipsis: label.attribute.ellipsis ?? ellipsis\n    });\n  });\n}\n"]}