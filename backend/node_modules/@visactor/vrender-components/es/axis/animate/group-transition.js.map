{"version":3,"sources":["../src/axis/animate/group-transition.ts"],"names":[],"mappings":"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","file":"group-transition.js","sourcesContent":["import { AnimateMode } from '@visactor/vrender-core';\nimport type { EasingType, IGraphic, IGroup } from '@visactor/vrender-core';\nimport { ACustomAnimate } from '@visactor/vrender-animate';\nimport type { Dict } from '@visactor/vutils';\nimport { cloneDeep, interpolateString, isEqual, isValidNumber } from '@visactor/vutils';\nimport { traverseGroup } from '../../util';\n\nexport class GroupTransition extends ACustomAnimate<any> {\n  declare target: IGroup;\n\n  private _newElementAttrMap: Dict<any>;\n  mode = AnimateMode.NORMAL; // 组件的群组动画不需要设置走 AnimateMode.SET_ATTR_IMMEDIATELY\n\n  onBind(): void {\n    // @ts-ignore\n    const currentInnerView = this.target.getInnerView();\n    // @ts-ignore\n    const prevInnerView = this.target.getPrevInnerView();\n    if (!prevInnerView) {\n      return;\n    }\n\n    this._newElementAttrMap = {};\n\n    // 遍历新的场景树，将新节点属性更新为旧节点\n    // TODO: 目前只处理更新场景\n    traverseGroup(currentInnerView, (el: IGraphic) => {\n      if ((el as IGraphic).type !== 'group' && el.id) {\n        const oldEl = prevInnerView[el.id];\n        if (oldEl) {\n          if (!isEqual((el as IGraphic).attribute, (oldEl as IGraphic).attribute)) {\n            // 更新\n            const newProps = cloneDeep((el as IGraphic).attribute);\n            this._newElementAttrMap[el.id] = {\n              state: 'update',\n              node: el,\n              attrs: {\n                ...newProps,\n                opacity: newProps.opacity ?? 1,\n                fillOpacity: newProps.fillOpacity ?? 1,\n                strokeOpacity: newProps.strokeOpacity ?? 1\n              }\n            };\n\n            (el as IGraphic).setAttributes((oldEl as IGraphic).attribute);\n          }\n        } else {\n          // 新入场元素，进行 fadeIn 动画\n          const finalOpacityAttrs = {\n            opacity: el.attribute.opacity ?? 1,\n            fillOpacity: el.attribute.fillOpacity ?? 1,\n            strokeOpacity: el.attribute.strokeOpacity ?? 1\n          };\n          this._newElementAttrMap[el.id] = {\n            state: 'enter',\n            node: el,\n            attrs: finalOpacityAttrs\n          };\n          (el as IGraphic).setAttributes({\n            opacity: 0,\n            fillOpacity: 0,\n            strokeOpacity: 0\n          });\n        }\n      }\n    });\n  }\n\n  onStart(): void {\n    let duration = this.duration;\n    let easing = this.easing;\n\n    // 新的场景树\n    this._newElementAttrMap &&\n      Object.keys(this._newElementAttrMap).forEach(id => {\n        const { node, attrs, state } = this._newElementAttrMap[id];\n        if (state === 'enter') {\n          const { enter = {} } = this.params ?? {};\n          duration = isValidNumber(enter.duration) ? enter.duration : duration;\n          easing = enter.easing ? enter.easing : easing;\n        }\n        if ((node as IGraphic).type === 'path') {\n          (node as IGraphic)\n            .animate({\n              interpolate(key: string, ratio: number, from: any, to: any, nextAttributes: any) {\n                if (key === 'path') {\n                  nextAttributes.path = interpolateString(from, to)(ratio);\n                  return true;\n                }\n\n                return false;\n              }\n            })\n            // .wait(delay)\n            .to(attrs, duration, easing as EasingType);\n        } else {\n          (node as IGraphic)\n            .animate()\n            // .wait(delay)\n            .to(attrs, duration, easing as EasingType);\n        }\n      });\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    // do nothing\n  }\n}\n"]}