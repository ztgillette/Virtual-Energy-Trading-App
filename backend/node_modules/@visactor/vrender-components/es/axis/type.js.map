{"version":3,"sources":["../src/axis/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["import type {\n  ILineGraphicAttribute,\n  ITextGraphicAttribute,\n  ISymbolGraphicAttribute,\n  IRectGraphicAttribute,\n  IGroupGraphicAttribute,\n  IText,\n  IGroup,\n  IGraphic\n} from '@visactor/vrender-core';\nimport type { Dict } from '@visactor/vutils';\nimport type { ContinuousScale, CustomTicksFunc } from '@visactor/vscale';\nimport type { Point, TextContent } from '../core/type';\nimport type { SegmentAttributes } from '../segment/type';\nimport type { TagAttributes } from '../tag/type';\n\nexport type AxisItemStateStyle<T> = {\n  hover?: T;\n  hover_reverse?: T;\n  selected?: T;\n  selected_reverse?: T;\n};\n\nexport type callbackFunc<T> = (datum: Dict<any>, index: number, data?: Dict<any>[], layer?: number) => T;\n\n// 处理过的用于绘制的 tickLine 数据\nexport type TickLineItem = {\n  start: Point;\n  end: Point;\n  /** 归一化后的数据 */\n  value: number;\n  // 3d数据\n  anchor?: [number, number];\n  alpha?: number;\n  beta?: number;\n  [key: string]: any;\n};\n\n// 处理过的用于绘制的数据\nexport type TransformedAxisItem = AxisItem & {\n  point: Point;\n};\n\nexport type AxisItem = {\n  /** 标识符，用于动画以及图形查找 */\n  id?: string | number;\n  /** 显示文本 */\n  label: string | number;\n  /** 归一化后的数据 */\n  value: number;\n  /** 对应原始数据 */\n  rawValue: any;\n  [key: string]: any;\n};\n\nexport interface AxisBaseAttributes extends IGroupGraphicAttribute {\n  /**\n   * 是否开启动画\n   * @default false\n   */\n  animation?: boolean;\n  /**\n   * 标签入场动画配置\n   */\n  animationEnter?: boolean;\n  /**\n   * 标签更新动画配置\n   */\n  animationUpdate?: boolean;\n  /**\n   * 标签离场动画配置\n   */\n  animationExit?: boolean;\n  /**\n   * 是否开启选中交互\n   * @default false\n   */\n  select?: boolean;\n  /**\n   * 是否开启 hover 交互\n   * @default false\n   */\n  hover?: boolean;\n  /**\n   * 垂直于坐标轴方向的因子，默认为 1\n   */\n  verticalFactor?: number;\n  /**\n   * 坐标轴的显示位置，用于文本的防重叠处理\n   */\n  orient?: string;\n  /** 坐标轴数据 */\n  items: AxisItem[][];\n  /**\n   * 轴标题配置\n   */\n  title?: TitleAttributes;\n  /**\n   * 轴标签配置\n   */\n  label?: LabelAttributes;\n  /**\n   * 轴刻度线配置\n   */\n  tick?: TickAttributes;\n  /**\n   * 自刻度线配置\n   */\n  subTick?: SubTickAttributes;\n  /**\n   * 轴线配置\n   */\n  line?: LineAttributes;\n  /**\n   * 关闭交互效果\n   * @default false\n   */\n  disableTriggerEvent?: boolean;\n}\n\nexport interface ILine3dType {\n  alpha: number;\n  anchor3d?: [number, number];\n}\n\nexport interface BreakSymbol {\n  /**\n   * 是否显示\n   */\n  visible?: boolean;\n  /**\n   * 截断图形旋转的弧度。\n   */\n  angle?: number;\n\n  /**\n   * 样式配置\n   */\n  style?: Partial<ISymbolGraphicAttribute>;\n}\nexport interface AxisBreakProps {\n  /**\n   * 轴截断的范围，值为归一化后的数据\n   */\n  range: [number, number];\n  /**\n   * 截断图形配置\n   */\n  breakSymbol?: BreakSymbol;\n  /**\n   * 轴截断原始的数据范围\n   */\n  rawRange?: [number, number];\n}\n\nexport interface TransformedAxisBreak extends AxisBreakProps {\n  /**\n   * 截断的起始点\n   */\n  startPoint: Point;\n  /**\n   * 截断的结束点\n   */\n  endPoint: Point;\n}\n\nexport interface LineAxisAttributes extends Omit<AxisBaseAttributes, 'label'> {\n  /**\n   * 起始点坐标\n   */\n  start: Point;\n  /**\n   * 结束点坐标\n   */\n  end: Point;\n  /**\n   * 坐标轴垂直方向的限制空间，该配置会影响文本的显示，\n   * 即如果超出，文本则会进行自动旋转、自动隐藏等动作。\n   */\n  verticalLimitSize?: number;\n  /**\n   * 坐标轴垂直方向的最小空间，如果小于该值，则以该值占据显示空间。\n   * 如果同时声明了 verticalLimitSize，请保证 verticalMinSize <= verticalLimitSize，否则会以 verticalLimitSize 为准。\n   */\n  verticalMinSize?: number;\n\n  /**\n   * 轴标签配置\n   */\n  label?: LabelAttributes & {\n    /**\n     * label 相对于容器整体的对齐方式\n     * - `top`：整体向上对齐（垂直方向）\n     * - `middle`：整体居中对齐（垂直方向）\n     * - `bottom`：整体向下对齐（垂直方向）\n     * - `left`：整体向左对齐（水平方向）\n     * - `center`：整体居中对齐（水平方向）\n     * - `right`：整体向右对齐（水平方向）\n     */\n    containerAlign?: 'left' | 'right' | 'center' | 'top' | 'bottom' | 'middle';\n    /**\n     * 坐标轴首尾文字向内收缩\n     * @default false\n     */\n    flush?: boolean;\n    /**\n     * 保证最后的label必须展示\n     * @default false\n     * @since 0.17.10\n     */\n    lastVisible?: boolean;\n    /**\n     * 保证第一个的label必须展示\n     * @default false\n     * @since 0.20.7\n     */\n    firstVisible?: boolean;\n  };\n  /**\n   * 坐标轴背景配置\n   */\n  panel?: {\n    /**\n     * 是否绘制坐标轴背景\n     */\n    visible?: boolean;\n    /**\n     * 坐标轴背景配置\n     */\n    style?: Partial<IRectGraphicAttribute>;\n    /**\n     * 坐标轴背景交互状态样式配置\n     */\n    state?: AxisItemStateStyle<Partial<IRectGraphicAttribute>>;\n  };\n\n  /**\n   * 轴截断配置\n   * @since 0.20.3\n   */\n  breaks?: AxisBreakProps[];\n}\n\nexport interface CircleAxisAttributes extends AxisBaseAttributes {\n  /**\n   * 坐标轴可用布局区域的大小，之前是通过width,height传入，会影响组件的Bounds大小，影响拾取\n   * @since 0.20.11\n   */\n  size?: { width: number; height: number };\n  /**\n   * 当配置了 innerRadius 时，可以通过设置 inside: true，将坐标轴战士在内圆半径上。\n   * @default false\n   */\n  inside?: boolean;\n  /**\n   * 圆心坐标\n   */\n  center: Point;\n  /**\n   * **弧度值**，起始弧度，默认 -0.5 * Math.PI\n   *\n   */\n  startAngle?: number;\n  /**\n   * **弧度值**，结束弧度，默认 1.5 * Math.PI\n   */\n  endAngle?: number;\n  /**\n   * 半径\n   */\n  radius: number;\n  /** 内半径 */\n  innerRadius?: number;\n  /**\n   * 边数\n   * @since 0.19.24\n   */\n  sides?: number;\n}\n\n// 坐标轴标题配置\nexport type TitleAttributes = Omit<TagAttributes, 'shape' | 'space' | 'panel' | 'state'> & {\n  /**\n   * 是否展示标题\n   */\n  visible?: boolean;\n  /**\n   * 标题的显示位置，默认 'middle'\n   */\n  position?: 'start' | 'middle' | 'end';\n  /**\n   * 标题距离坐标轴(轴线、刻度、标签共同构成的包围盒)的距离\n   */\n  space?: number;\n  /**\n   * 标题是否自动旋转以和坐标轴平行\n   */\n  autoRotate?: boolean;\n  shape?: {\n    /**\n     * 是否展示 shape\n     */\n    visible?: boolean;\n    /**\n     * shape 同 文本的间距\n     */\n    space?: number;\n    style?: Omit<Partial<ISymbolGraphicAttribute>, 'visible'>;\n  };\n  /**\n   * 背景设置\n   */\n  background?: {\n    /**\n     * 是否绘制背景层\n     */\n    visible?: boolean;\n    /**\n     * 背景层样式\n     */\n    style?: Omit<Partial<IRectGraphicAttribute>, 'visible' | 'width' | 'height'>;\n  };\n\n  /**\n   * 交互状态样式配置\n   */\n  state?: {\n    /**\n     * text 文本的状态配置\n     */\n    text?: AxisItemStateStyle<Partial<ITextGraphicAttribute>>;\n    /**\n     * shape 标记的状态配置\n     */\n    shape?: AxisItemStateStyle<Partial<ISymbolGraphicAttribute>>;\n    /**\n     * panel 背景的状态配置\n     */\n    background?: AxisItemStateStyle<Partial<IRectGraphicAttribute>>;\n  };\n};\n// 坐标轴线配置\nexport interface LineAttributes extends Pick<SegmentAttributes, 'startSymbol' | 'endSymbol'> {\n  /**\n   * 是否展示轴线\n   */\n  visible?: boolean;\n  /**\n   * 线的样式配置\n   */\n  style?: Partial<ILineGraphicAttribute>;\n  state?: AxisItemStateStyle<Partial<ILineGraphicAttribute>>;\n}\n\n// 轴刻度线配置\nexport interface TickAttributes {\n  /** 是否显示轴刻度线 */\n  visible: boolean;\n  /**\n   * 刻度线朝向，默认朝外(坐标线包围盒外部)\n   * @default false\n   */\n  inside?: boolean;\n  /**\n   * tick 是否与 label 对齐\n   * @default true\n   */\n  alignWithLabel?: boolean;\n  /**\n   * 刻度线的长度\n   */\n  length?: number;\n  /**\n   * 刻度线样式配置\n   */\n  style?: Partial<ILineGraphicAttribute> | callbackFunc<Partial<ILineGraphicAttribute> | undefined>;\n  /**\n   * 刻度线状态样式配置\n   */\n  state?: AxisItemStateStyle<Partial<ILineGraphicAttribute> | callbackFunc<Partial<ILineGraphicAttribute> | undefined>>;\n  /**\n   * 用于 tick 的数据过滤\n   * @param data\n   * @returns\n   */\n  dataFilter?: (data: AxisItem[]) => AxisItem[];\n}\n\n// 子轴刻度线配置\nexport interface SubTickAttributes {\n  /** 是否显示子轴刻度线 */\n  visible: boolean;\n  /**\n   * TODO: 考虑下 log 轴，自刻度线之间的间距是不均匀的问题\n   * 子刻度个数\n   */\n  count?: number;\n  /**\n   * 子刻度线朝向，默认朝外(坐标线包围盒外部)\n   * @default false\n   */\n  inside?: boolean;\n  /**\n   * 子刻度线的长度\n   */\n  length?: number;\n  /**\n   * 子刻度线样式配置\n   */\n  style?: Partial<ILineGraphicAttribute> | callbackFunc<Partial<ILineGraphicAttribute> | undefined>;\n  /**\n   * 子刻度线状态样式配置\n   */\n  state?: AxisItemStateStyle<Partial<ILineGraphicAttribute> | callbackFunc<Partial<ILineGraphicAttribute> | undefined>>;\n}\n\nexport type CustomMethod = (items: IText[], separation: number) => IText[];\n\nexport interface AxisLabelOverlap {\n  /**\n   * 自动旋转配置\n   * @default false\n   */\n  autoRotate?: boolean;\n  /**\n   * 仅当 `autoRotate` 为 true 时生效，可选的旋转范围，默认为 [0, 45, 90]\n   * @default [0, 45, 90]\n   */\n  autoRotateAngle?: number[];\n  /**\n   * 自动隐藏配置\n   * @default false\n   */\n  autoHide?: boolean;\n  /**\n   * 防重叠策略，默认为 'parity'。\n   * - 'parity': 奇偶校验，使用删除所有其他标签的策略（这对于标准线性轴非常有效）。\n   * - 'greedy': 将执行标签的线性扫描，并删除与最后一个可见标签重叠的所有标签。\n   * - 也可以传入函数用于自定义策略\n   * @default 'parity'\n   */\n  autoHideMethod?: 'parity' | 'greedy' | CustomMethod;\n  /**\n   * 仅当 `autoHide` 为 true 时生效，设置文本之间的间隔距离，单位 px\n   * @default 0\n   */\n  autoHideSeparation?: number;\n  /**\n   * 自动隐藏配置\n   * @default false\n   */\n  autoLimit?: boolean;\n  /**\n   * 仅当 `autoLimit` 为 true 时生效，省略占位符，默认为 '...'\n   * @default '...'\n   */\n  limitEllipsis?: string;\n  /**\n   * 文字超出坐标轴范围时，两侧可以提供扩充的空间大小。\n   * 例如，x 轴坐标 135 度旋转时，左侧第一个标签可能超出坐标轴范围，导致文本被缩略，此时可以通过配置 `overflowLimitLength` 优化效果。\n   * 仅当 `autoLimit` 为 true 时生效。\n   * @default 0\n   * @since 0.20.3 支持 X 轴配置生效\n   */\n  overflowLimitLength?:\n    | number\n    | {\n        /**\n         * 左侧扩充空间的大小\n         */\n        left?: number;\n        /**\n         * 右侧扩充空间的大小\n         */\n        right?: number;\n        // top?: number;\n        // bottom?: number;\n      };\n\n  /**\n   * 自定义布局配置，如果声明了 `layoutFunc`，则默认提供的防重叠相关的配置（`autoHide`, `autoRotate`, `autoLimit`）均不生效\n   * @param labels 标签图形元素\n   * @param labelData 标签数据\n   * @param layer 当前轴的层级\n   * @param axis 当前轴组件实例\n   * @returns void\n   */\n  layoutFunc?: (labels: IText[], labelData: AxisItem[], layer: number, axis: IGroup) => void;\n\n  /**\n   * 标签自动换行。与 `autoRotate` 不能同时生效，若开启了 `autoRotate`，则优先使用自动旋转策略。\n   * @since 0.20.3\n   * @default false\n   */\n  autoWrap?: boolean;\n}\n\nexport type LabelAttributes = Omit<AxisLabelOverlap, 'text'> &\n  TextContent & {\n    /** 是否展示标签 */\n    visible: boolean;\n    /**\n     * 标签朝向，默认朝外(坐标线包围盒外部)\n     * @default false\n     */\n    inside?: boolean;\n    /** 标签同 tick 之间的间距 */\n    space?: number;\n    /**\n     * 格式化文本回调\n     * @param text 文本原始值\n     * @param item 对应的图形元素\n     * @param index 文本索引顺序\n     * @returns 格式化文本\n     */\n    formatMethod?: (value: string, datum: Dict<any>, index: number, data?: Dict<any>[], layer?: number) => string;\n    /**\n     * 文本样式\n     */\n    style?: Partial<ITextGraphicAttribute> | callbackFunc<Partial<ITextGraphicAttribute> | undefined>;\n    /**\n     * 文本状态样式配置\n     */\n    state?: AxisItemStateStyle<\n      Partial<ITextGraphicAttribute> | callbackFunc<Partial<ITextGraphicAttribute> | undefined>\n    >;\n\n    /**\n     * 用于 label 的数据过滤\n     * @param data\n     * @param layer\n     * @returns\n     */\n    dataFilter?: (data: AxisItem[], layer: number) => AxisItem[];\n  };\n\nexport type CoordinateType = 'cartesian' | 'polar' | 'geo' | 'none';\nexport type IOrientType = 'left' | 'top' | 'right' | 'bottom' | 'z';\nexport type IPolarOrientType = 'radius' | 'angle';\n\ntype breakData = {\n  /**\n   * 截断后的值域范围\n   */\n  domain?: [number, number][];\n  /**\n   * 截断后的归一化范围\n   */\n  scope?: [number, number][];\n  /**\n   * 用户配置的截断范围\n   */\n  breakDomains: [number, number][];\n};\n\nexport interface ITickDataOpt {\n  /**\n   * 是否进行轴采样\n   */\n  sampling?: boolean;\n  tickCount?: number | ((option: ITickCallbackOption) => number);\n  forceTickCount?: number;\n  tickStep?: number;\n  tickMode?: 'average' | 'd3' | string | CustomTicksFunc<ContinuousScale>;\n  noDecimals?: boolean;\n\n  coordinateType: CoordinateType;\n  axisOrientType: IOrientType | IPolarOrientType;\n  startAngle?: number;\n\n  labelFormatter?: (value: any) => string;\n  labelStyle: ITextGraphicAttribute;\n  labelGap?: number;\n  labelFirstVisible?: boolean;\n  labelLastVisible?: boolean;\n  /**\n   * 截断数据范围配置\n   */\n  breakData?: () => breakData;\n}\n\nexport interface ICartesianTickDataOpt extends ITickDataOpt {\n  axisOrientType: IOrientType;\n  labelFlush: boolean;\n  /**\n   * 截断数据范围配置\n   */\n  breakData?: () => breakData;\n}\n\nexport interface IPolarTickDataOpt extends ITickDataOpt {\n  axisOrientType: IPolarOrientType;\n  getRadius: () => number;\n  labelOffset: number;\n  inside: boolean;\n}\n\nexport interface ITickData {\n  index: number;\n  value: number | string;\n  // label: string;\n}\n\nexport type ITickCallbackOption = {\n  /**\n   * 坐标轴占据的画布大小。\n   * 直角坐标系中为轴的宽度或高度。\n   * 极坐标系中半径轴的长度。\n   */\n  axisLength?: number;\n  /**\n   * 轴标签的样式\n   */\n  labelStyle?: ITextGraphicAttribute;\n};\n\nexport interface ILabelItem<T> extends Pick<IGraphic, 'AABBBounds'> {\n  value?: T;\n}\n"]}