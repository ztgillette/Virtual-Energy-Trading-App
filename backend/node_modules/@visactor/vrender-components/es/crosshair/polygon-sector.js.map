{"version":3,"sources":["../src/crosshair/polygon-sector.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAE5F,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AACjE,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAC;AAGvC,OAAO,EAAE,mCAAmC,EAAE,MAAM,YAAY,CAAC;AACjE,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAEzC,mCAAmC,EAAE,CAAC;AACtC,MAAM,OAAO,sBAAuB,SAAQ,aAA0C;IAQpF,YAAY,UAAuC,EAAE,OAA0B;QAC7E,KAAK,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,sBAAsB,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,CAAC;IAC7G,CAAC;IAES,eAAe,CAAC,SAAiB;QACzC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,GAAG,CAAC,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,SAAwC,CAAC;QAC9G,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAChD,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;QAClG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;QAChG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;QAE7D,MAAM,OAAO,GAAG,SAAS,CAAC,mBAAmB,CAC3C,0BAA0B,kBAExB,IAAI,EAAE,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,IAC/B,kBAAkB,GAEvB,MAAM,CACP,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,WAAW,CAAC,KAAuB;QACjC,MAAM,EACJ,MAAM,EACN,UAAU,GAAG,iBAAiB,EAC9B,QAAQ,GAAG,eAAe,EAC3B,GAAG,IAAI,CAAC,SAAwC,CAAC;QAClD,MAAM,WAAW,GAAG,QAAQ,GAAG,UAAU,CAAC;QAC1C,MAAM,UAAU,GAAG,cAAc,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,CAAC;YACjB,UAAU,EAAE,UAAU,GAAG,WAAW,GAAG,CAAC;YACxC,QAAQ,EAAE,UAAU,GAAG,WAAW,GAAG,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;;AA5CM,wCAAiB,GAAG;IACzB,kBAAkB,EAAE;QAClB,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,GAAG;KACb;CACF,CAAC","file":"polygon-sector.js","sourcesContent":["/**\n * @description sector 类型 crosshair，用于极坐标系下\n */\nimport type { IGroup } from '@visactor/vrender-core';\nimport { merge, getAngleByPoint, radianToDegree, polarToCartesian } from '@visactor/vutils';\nimport type { PointLocationCfg } from '../core/type';\nimport { POLAR_END_ANGLE, POLAR_START_ANGLE } from '../constant';\nimport { CrosshairBase } from './base';\nimport type { PolygonSectorCrosshairAttrs } from './type';\nimport type { ComponentOptions } from '../interface';\nimport { loadPolygonSectorCrosshairComponent } from './register';\nimport { getPolygonPath } from '../axis';\n\nloadPolygonSectorCrosshairComponent();\nexport class PolygonSectorCrosshair extends CrosshairBase<PolygonSectorCrosshairAttrs> {\n  static defaultAttributes = {\n    polygonSectorStyle: {\n      fill: '#b2bacf',\n      opacity: 0.2\n    }\n  };\n\n  constructor(attributes: PolygonSectorCrosshairAttrs, options?: ComponentOptions) {\n    super(options?.skipDefault ? attributes : merge({}, PolygonSectorCrosshair.defaultAttributes, attributes));\n  }\n\n  protected renderCrosshair(container: IGroup) {\n    const { center, radius, innerRadius = 0, polygonSectorStyle } = this.attribute as PolygonSectorCrosshairAttrs;\n    const { startAngle, endAngle } = this.attribute;\n    const points = [];\n    points.push(polarToCartesian(center, innerRadius, startAngle));\n    points.push(polarToCartesian(center, radius * Math.cos((endAngle - startAngle) / 2), startAngle));\n    points.push(polarToCartesian(center, radius, (startAngle + endAngle) / 2));\n    points.push(polarToCartesian(center, radius * Math.cos((endAngle - startAngle) / 2), endAngle));\n    points.push(polarToCartesian(center, innerRadius, endAngle));\n\n    const polygon = container.createOrUpdateChild(\n      'crosshair-polygon-sector',\n      {\n        path: getPolygonPath(points, true),\n        ...polygonSectorStyle\n      },\n      'path'\n    );\n    return polygon;\n  }\n\n  setLocation(point: PointLocationCfg) {\n    const {\n      center,\n      startAngle = POLAR_START_ANGLE,\n      endAngle = POLAR_END_ANGLE\n    } = this.attribute as PolygonSectorCrosshairAttrs;\n    const sectorAngle = endAngle - startAngle;\n    const pointAngle = radianToDegree(getAngleByPoint(center, point));\n    this.setAttributes({\n      startAngle: pointAngle - sectorAngle / 2,\n      endAngle: pointAngle + sectorAngle / 2\n    });\n  }\n}\n"]}