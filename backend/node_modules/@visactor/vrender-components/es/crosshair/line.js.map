{"version":3,"sources":["../src/crosshair/line.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EAAE,aAAa,EAAE,MAAM,QAAQ,CAAC;AAGvC,OAAO,EAAE,0BAA0B,EAAE,MAAM,YAAY,CAAC;AAExD,0BAA0B,EAAE,CAAC;AAC7B,MAAM,OAAO,aAAc,SAAQ,aAAiC;IASlE,YAAY,UAA8B,EAAE,OAA0B;QACpE,KAAK,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,CAAC;IACpG,CAAC;IAES,eAAe,CAAC,SAAiB;QACzC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,SAA+B,CAAC;QAEvE,MAAM,IAAI,GAAG,SAAS,CAAC,mBAAmB,CACxC,gBAAgB,kBAEd,MAAM,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,IACjB,SAAS,GAEd,MAAM,CACP,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,WAAW,CAAC,MAAyB;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC;YACjB,KAAK;YACL,GAAG;SACJ,CAAC,CAAC;IACL,CAAC;;AAhCM,+BAAiB,GAAG;IACzB,SAAS,EAAE;QACT,MAAM,EAAE,SAAS;QACjB,SAAS,EAAE,CAAC;QACZ,QAAQ,EAAE,CAAC,CAAC,CAAC;KACd;CACF,CAAC","file":"line.js","sourcesContent":["/**\n * @description 直线类型 crosshair\n */\nimport type { IGroup } from '@visactor/vrender-core';\nimport { merge } from '@visactor/vutils';\nimport type { RegionLocationCfg } from '../core/type';\nimport { CrosshairBase } from './base';\nimport type { LineCrosshairAttrs } from './type';\nimport type { ComponentOptions } from '../interface';\nimport { loadLineCrosshairComponent } from './register';\n\nloadLineCrosshairComponent();\nexport class LineCrosshair extends CrosshairBase<LineCrosshairAttrs> {\n  static defaultAttributes = {\n    lineStyle: {\n      stroke: '#b2bacf',\n      lineWidth: 1,\n      lineDash: [2]\n    }\n  };\n\n  constructor(attributes: LineCrosshairAttrs, options?: ComponentOptions) {\n    super(options?.skipDefault ? attributes : merge({}, LineCrosshair.defaultAttributes, attributes));\n  }\n\n  protected renderCrosshair(container: IGroup) {\n    const { start, end, lineStyle } = this.attribute as LineCrosshairAttrs;\n\n    const line = container.createOrUpdateChild(\n      'crosshair-line',\n      {\n        points: [start, end],\n        ...lineStyle\n      },\n      'line'\n    );\n    return line;\n  }\n\n  setLocation(region: RegionLocationCfg) {\n    const { start, end } = region;\n    this.setAttributes({\n      start,\n      end\n    });\n  }\n}\n"]}