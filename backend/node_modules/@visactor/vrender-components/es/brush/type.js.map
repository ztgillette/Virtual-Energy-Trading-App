{"version":3,"sources":["../src/brush/type.ts"],"names":[],"mappings":"AAyFA,MAAM,CAAN,IAAY,YASX;AATD,WAAY,YAAY;IACtB,uCAAuB,CAAA;IACvB,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,iCAAiB,CAAA;IACjB,uCAAuB,CAAA;IACvB,mCAAmB,CAAA;IACnB,2CAA2B,CAAA;IAC3B,yCAAyB,CAAA;AAC3B,CAAC,EATW,YAAY,KAAZ,YAAY,QASvB","file":"type.js","sourcesContent":["import type { GraphicEventType, IGroupGraphicAttribute, IPolygonGraphicAttribute } from '@visactor/vrender-core';\nimport type { IDelayType } from '../interface';\n\nexport interface BrushAttributes extends IGroupGraphicAttribute {\n  /**\n   * 触发框选的事件名称\n   */\n  trigger?: GraphicEventType | GraphicEventType[];\n  /**\n   * 更新框选的事件名称\n   */\n  updateTrigger?: GraphicEventType | GraphicEventType[];\n  /**\n   * 结束框选的事件名称\n   */\n  endTrigger?: GraphicEventType | GraphicEventType[];\n  /**\n   * 清空框选的事件名称\n   */\n  resetTrigger?: GraphicEventType | GraphicEventType[];\n  /**\n   * 可交互范围\n   */\n  interactiveRange?: {\n    minX: number;\n    maxX: number;\n    minY: number;\n    maxY: number;\n  };\n  /**\n   * 框选模式\n   * @default 'single'\n   */\n  brushMode?: IBrushMode;\n  /**\n   * 框选类型\n   * @default 'rect'\n   */\n  brushType?: IBrushType;\n  /**\n   * brushType为'y'时, x的左右边界位置, 不配置的话不会生效\n   * @default [0,0]\n   */\n  xRange?: [number, number];\n  /**\n   * brushType为'x'时, y的左右边界位置, 不配置的话不会生效\n   * @default [0,0]\n   */\n  yRange?: [number, number];\n  /** 是否展示brush mask */\n  hasMask?: boolean;\n  /**\n   * 框选区域的样式\n   */\n  brushStyle?: IPolygonGraphicAttribute;\n  /**\n   * 是否可被平移\n   * @default true\n   */\n  brushMoved?: boolean;\n  /**\n   * 是否单击空白处, 清除选框\n   * @default true\n   */\n  removeOnClick?: boolean;\n  /**\n   * brush选框的大小阈值\n   */\n  sizeThreshold?: number;\n  /**\n   * 事件触发延迟类型\n   * @default 'throttle'\n   */\n  delayType?: IDelayType;\n  /**\n   * 事件触发延迟时长\n   * @default 0\n   */\n  delayTime?: number;\n  /**\n   * 关闭交互效果\n   * @default false\n   */\n  disableTriggerEvent?: boolean;\n}\n\nexport type IBrushType = 'x' | 'y' | 'rect' | 'polygon';\nexport type IBrushMode = 'single' | 'multiple';\n\nexport enum IOperateType {\n  drawStart = 'drawStart',\n  drawEnd = 'drawEnd',\n  drawing = 'drawing',\n  moving = 'moving',\n  moveStart = 'moveStart',\n  moveEnd = 'moveEnd',\n  brushActive = 'brushActive',\n  brushClear = 'brushClear'\n}\n"]}