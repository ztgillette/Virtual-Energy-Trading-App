{"version":3,"sources":["../src/player/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { OrientType } from '../interface';\nimport { DirectionEnum, DirectionType } from './type';\n\n/**\n * 检测下标是否正确\n */\ninterface ICheckIndex {\n  direction: DirectionType;\n  maxIndex: number;\n  minIndex: number;\n  dataIndex: number;\n}\nexport const checkIndex = ({ direction, maxIndex, minIndex, dataIndex }: ICheckIndex): boolean => {\n  // 若默认方向, 检测下标是否合法\n  if (direction === DirectionEnum.Default) {\n    return dataIndex < maxIndex;\n  }\n  // 若逆向, 检测下标是否合法\n  else if (direction === DirectionEnum.Reverse) {\n    return dataIndex > minIndex;\n  }\n};\n\n/**\n * 判断能否进入循环\n */\n\nexport const canPlay = ({ direction, maxIndex, minIndex, dataIndex }: ICheckIndex): boolean => {\n  return checkIndex({ direction, maxIndex, minIndex, dataIndex });\n};\n\n/**\n * 判断是否到达了末尾\n */\nexport const isReachEndByDefault = ({ direction, maxIndex, dataIndex }: Omit<ICheckIndex, 'minIndex'>) => {\n  if (direction === DirectionEnum.Default) {\n    return dataIndex === maxIndex;\n  }\n  return false;\n};\n\nexport const isReachEndByReverse = ({ direction, minIndex, dataIndex }: Omit<ICheckIndex, 'maxIndex'>) => {\n  if (direction === DirectionEnum.Reverse) {\n    return dataIndex === minIndex;\n  }\n  return false;\n};\n\nexport const isReachEnd = ({ direction, maxIndex, minIndex, dataIndex }: ICheckIndex) => {\n  return (\n    isReachEndByDefault({ direction, maxIndex, dataIndex }) || isReachEndByReverse({ direction, minIndex, dataIndex })\n  );\n};\n\n/**\n * 判断是否处于起点\n */\nexport const isReachStartByDefault = ({ direction, minIndex, dataIndex }: Omit<ICheckIndex, 'maxIndex'>) => {\n  if (direction === DirectionEnum.Default) {\n    return dataIndex === minIndex;\n  }\n  return false;\n};\n\nexport const isReachStartByReverse = ({ direction, maxIndex, dataIndex }: Omit<ICheckIndex, 'minIndex'>) => {\n  if (direction === DirectionEnum.Reverse) {\n    return dataIndex === maxIndex;\n  }\n  return false;\n};\n\nexport const isReachStart = ({ direction, maxIndex, minIndex, dataIndex }: ICheckIndex) => {\n  return (\n    isReachStartByDefault({ direction, minIndex, dataIndex }) ||\n    isReachStartByReverse({ direction, maxIndex, dataIndex })\n  );\n};\n\n/**\n * 得到初始化下标\n */\n\nexport const isVertical = (orient: OrientType) => orient === 'left' || orient === 'right';\n\nexport const isHorizontal = (orient: OrientType) => orient === 'top' || orient === 'bottom';\n\nexport const forwardStep = (direction: DirectionType, currentIndex: number, min: number, max: number) => {\n  if (direction === 'default') {\n    return Math.min(currentIndex + 1, max);\n  }\n  return Math.max(currentIndex - 1, min);\n};\n"]}