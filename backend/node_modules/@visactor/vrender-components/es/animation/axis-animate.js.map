{"version":3,"sources":["../src/animation/axis-animate.ts"],"names":[],"mappings":"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","file":"axis-animate.js","sourcesContent":["import { AComponentAnimate, AnimateExecutor, createComponentAnimator } from '@visactor/vrender-animate';\n\n/**\n * AxisEnter class handles the enter animation for Axis components\n */\nexport class AxisEnter extends AComponentAnimate<any> {\n  onBind(): void {\n    const animator = createComponentAnimator(this.target);\n    this._animator = animator;\n    const duration = this.duration;\n    const easing = this.easing;\n    const { config, lastScale, getTickCoord } = this.params;\n\n    let ratio = 1;\n    const currData = this.target.data;\n    if (lastScale && getTickCoord && currData) {\n      ratio = 0.7;\n\n      const oldValue = lastScale.scale(currData.rawValue);\n      const point = getTickCoord(oldValue);\n      const newX = this.target.attribute.x;\n      const newY = this.target.attribute.y;\n\n      this.target.setAttributes({ x: point.x, y: point.y });\n      animator.animate(this.target, {\n        type: 'to',\n        to: { x: newX, y: newY },\n        duration,\n        easing\n      });\n    }\n\n    // if (updateEls && updateEls.length > 1) {\n    //   ratio = 0.5;\n    //   const oldData1 = updateEls[0].oldEl.data;\n    //   const { rawValue: oldRawValue1, value: oldValue1 } = oldData1;\n    //   const oldData2 = updateEls[1].oldEl.data;\n    //   const { rawValue: oldRawValue2, value: oldValue2 } = oldData2;\n    //   const data = this.target.data;\n    //   const { rawValue: newRawValue } = data;\n    //   // rawValue 是原始值，value是映射出来的值，假设是线性映射，计算一下newRawValue在old阶段的value是什么值\n    //   const oldValue =\n    //     oldValue1 + ((oldValue2 - oldValue1) * (newRawValue - oldRawValue1)) / (oldRawValue2 - oldRawValue1);\n    //   // 将 x 和 y 做映射\n    //   const oldX1 = updateEls[0].oldEl.attribute.x;\n    //   const oldY1 = updateEls[0].oldEl.attribute.y;\n    //   const oldX2 = updateEls[1].oldEl.attribute.x;\n    //   const oldY2 = updateEls[1].oldEl.attribute.y;\n    //   const oldX = oldX1 + ((oldX2 - oldX1) * (oldValue - oldValue1)) / (oldValue2 - oldValue1);\n    //   const oldY = oldY1 + ((oldY2 - oldY1) * (oldValue - oldValue1)) / (oldValue2 - oldValue1);\n    //   const newX = this.target.attribute.x;\n    //   const newY = this.target.attribute.y;\n\n    //   this.target.setAttributes({ x: oldX, y: oldY });\n    //   animator.animate(this.target, {\n    //     type: 'to',\n    //     to: { x: newX, y: newY },\n    //     duration,\n    //     easing\n    //   });\n    // }\n\n    animator.animate(this.target, {\n      type: config.type ?? 'fadeIn',\n      to: config.to,\n      duration: duration * ratio,\n      easing\n    });\n    this.completeBind(animator);\n  }\n}\n\n/**\n * AxisUpdate class handles the update animation for Axis components\n */\nexport class AxisUpdate extends AComponentAnimate<any> {\n  onBind(): void {\n    const animator = createComponentAnimator(this.target);\n    this._animator = animator;\n    const duration = this.duration;\n    const easing = this.easing;\n    const { config, diffAttrs } = this.params;\n    // this.target.applyAnimationState(\n    //   ['update'],\n    //   [\n    //     {\n    //       name: 'update',\n    //       animation: {\n    //         type: 'to',\n    //         to: { ...this.props },\n    //         duration,\n    //         easing,\n    //         customParameters: {\n    //           diffAttrs: { ...this.props }\n    //         }\n    //       }\n    //     }\n    //   ]\n    // );\n    // console.log('this.props', this.props, { ...this.target.attribute });\n    animator.animate(this.target, {\n      type: 'to',\n      to: { ...diffAttrs },\n      duration,\n      easing,\n      customParameters: {\n        diffAttrs: { ...diffAttrs }\n      }\n    });\n    this.completeBind(animator);\n  }\n\n  // 轴动画本身没有逻辑，具体通过animator中执行，所以当需要屏蔽自身属性时，需要通过animator中执行\n  deleteSelfAttr(key: string): void {\n    super.deleteSelfAttr(key);\n    this._animator.deleteSelfAttr(key);\n  }\n\n  // 轴动画本身没有逻辑，具体通过animator中执行，所以本身不需要屏蔽冲突\n  protected tryPreventConflict(): void {\n    return;\n  }\n}\n\nexport function registerAxisAnimate() {\n  // Label update animation\n  AnimateExecutor.registerBuiltInAnimate('axisEnter', AxisEnter);\n  AnimateExecutor.registerBuiltInAnimate('axisUpdate', AxisUpdate);\n}\n"]}