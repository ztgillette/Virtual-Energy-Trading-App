{"version":3,"sources":["../src/label/line.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAIzC,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACnC,OAAO,EAAE,kBAAkB,EAAE,MAAM,QAAQ,CAAC;AAE5C,OAAO,EAAE,sBAAsB,EAAE,MAAM,uBAAuB,CAAC;AAG/D,MAAM,OAAO,SAAU,SAAQ,SAAyB;IAWtD,YAAY,UAA0B,EAAE,OAA0B;QAChE,MAAM,EAAE,IAAI,KAAwB,UAAU,EAA7B,cAAc,UAAK,UAAU,EAAxC,QAA2B,CAAa,CAAC;QAC/C,KAAK,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAC,CAAC,CAAC,UAAU,CAAC,CAAC,iBAAG,IAAI,IAAK,KAAK,CAAC,EAAE,EAAE,SAAS,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAE,CAAC,CAAC;QAZjH,SAAI,GAAG,YAAY,CAAC;IAapB,CAAC;IAES,gBAAgB,CAAC,OAAc,EAAE,QAAmC,EAAE,EAAE,QAAQ,GAAG,KAAK;QAChG,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE;YACpE,OAAO,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SAC/C;QAED,IAAI,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;QACtC,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;QAE5C,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;YAC1C,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAiB,EAAE,GAAa,EAAE,EAAE;;gBAC5D,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,GAAG,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAC;YACtC,CAAC,EAAE,EAAE,CAAC,CAAC;SACR;QAED,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,MAAM,GAAG,CAAC,KAAmB,CAAC,CAAC;SAChC;QAED,MAAM,KAAK,GAAG,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAClB,OAAO;SACR;QACD,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAW;YAC7B,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAW;YAC7B,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAW;YAC7B,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAW;SAC9B,CAAC;IACJ,CAAC;IAES,QAAQ,CAAC,UAAuB,EAAE,aAA0B,EAAE,WAAmB,KAAK,EAAE,MAAM,GAAG,CAAC;QAC1G,OAAO,kBAAkB,CAAC,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACzE,CAAC;;AA7CM,2BAAiB,GAA4B;IAClD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;KACb;IACD,QAAQ,EAAE,KAAK;IACf,MAAM,EAAE,CAAC;CACV,CAAC;AA0CJ,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,sBAAsB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC1C,sBAAsB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC,CAAC","file":"line.js","sourcesContent":["import type { IBoundsLike, IPointLike } from '@visactor/vutils';\nimport { merge } from '@visactor/vutils';\nimport type { ILine } from '@visactor/vrender-core';\nimport type { PointLocationCfg } from '../core/type';\nimport type { LineLabelAttrs } from './type';\nimport { LabelBase } from './base';\nimport { labelingLineOrArea } from './util';\nimport type { ComponentOptions } from '../interface';\nimport { registerLabelComponent } from './data-label-register';\nimport type { ISegment } from '@visactor/vrender-core';\n\nexport class LineLabel extends LabelBase<LineLabelAttrs> {\n  name = 'line-label';\n\n  static defaultAttributes: Partial<LineLabelAttrs> = {\n    textStyle: {\n      fill: '#000'\n    },\n    position: 'end',\n    offset: 6\n  };\n\n  constructor(attributes: LineLabelAttrs, options?: ComponentOptions) {\n    const { data, ...restAttributes } = attributes;\n    super(options?.skipDefault ? attributes : { data, ...merge({}, LineLabel.defaultAttributes, restAttributes) });\n  }\n\n  protected getGraphicBounds(graphic: ILine, point: Partial<PointLocationCfg> = {}, position = 'end') {\n    if (!graphic || (graphic.type !== 'line' && graphic.type !== 'area')) {\n      return super.getGraphicBounds(graphic, point);\n    }\n\n    let points = graphic.attribute.points;\n    const segments = graphic.attribute.segments;\n\n    if (!points && segments && segments.length) {\n      points = segments.reduce((res: IPointLike[], seg: ISegment) => {\n        return res.concat(seg.points ?? []);\n      }, []);\n    }\n\n    if (!points || points.length === 0) {\n      points = [point as IPointLike];\n    }\n\n    const index = position === 'start' ? 0 : points.length - 1;\n    if (!points[index]) {\n      return;\n    }\n    return {\n      x1: points[index].x as number,\n      x2: points[index].x as number,\n      y1: points[index].y as number,\n      y2: points[index].y as number\n    };\n  }\n\n  protected labeling(textBounds: IBoundsLike, graphicBounds: IBoundsLike, position: string = 'end', offset = 0) {\n    return labelingLineOrArea(textBounds, graphicBounds, position, offset);\n  }\n}\n\nexport const registerLineDataLabel = () => {\n  registerLabelComponent('line', LineLabel);\n  registerLabelComponent('area', LineLabel);\n};\n"]}