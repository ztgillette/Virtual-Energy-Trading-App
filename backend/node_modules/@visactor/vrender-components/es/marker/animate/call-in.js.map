{"version":3,"sources":["../src/marker/animate/call-in.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAEzC,MAAM,UAAU,WAAW,CACzB,QAAiB,EACjB,cAAqB,EACrB,IAAwC,EACxC,QAAgB,EAChB,KAAa,EACb,MAAkB;;IAElB,MAAM,mBAAmB,GAAG,GAAG,GAAG,QAAQ,CAAC;IAC3C,MAAM,YAAY,GAAG,IAAI,GAAG,QAAQ,CAAC;IACrC,MAAM,kBAAkB,GAAG,IAAI,GAAG,QAAQ,CAAC;IAC3C,MAAM,iBAAiB,GAAG,GAAG,GAAG,QAAQ,CAAC;IACzC,MAAM,aAAa,GAAG,GAAG,GAAG,QAAQ,CAAC;IAGrC,aAAa,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,mBAAmB,EAAE,MAAM,CAAC,CAAC;IAGxE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IAClE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;QAClC,MAAM,YAAY,GAAG,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;QAC1D,CAAC,CAAC,OAAO,EAAE;aACR,IAAI,CAAC,KAAK,GAAG,mBAAmB,GAAG,KAAK,GAAG,YAAY,CAAC;aACxD,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,aAAa,CAAC,cAAc,EAAE,KAAK,GAAG,mBAAmB,GAAG,YAAY,EAAE,kBAAkB,EAAE,MAAM,CAAC,CAAC;IAGtG,aAAa,CACX,QAAQ,CAAC,SAAS,EAClB,KAAK,GAAG,mBAAmB,GAAG,YAAY,GAAG,kBAAkB,EAC/D,iBAAiB,EACjB,MAAM,CACP,CAAC;IAEF,IAAI,MAAA,IAAI,CAAC,YAAY,oDAAI,EAAE;QAEzB,aAAa,CACX,IAAI,CAAC,YAAY,EAAE,EACnB,KAAK,GAAG,mBAAmB,GAAG,YAAY,GAAG,kBAAkB,GAAG,iBAAiB,EACnF,aAAa,EACb,MAAM,CACP,CAAC;QAGF,aAAa,CACX,IAAI,CAAC,SAAS,EAAE,EAChB,KAAK,GAAG,mBAAmB,GAAG,YAAY,GAAG,iBAAiB,EAC9D,aAAa,EACb,MAAM,CACP,CAAC;KACH;SAAM;QACL,aAAa,CAAC,IAAI,EAAE,KAAK,GAAG,mBAAmB,GAAG,YAAY,GAAG,iBAAiB,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;KAC5G;AACH,CAAC","file":"call-in.js","sourcesContent":["import type { EasingType, IImage, ILine, IRichText, ISymbol } from '@visactor/vrender-core';\nimport type { Segment } from '../../segment';\nimport type { Tag } from '../../tag';\nimport { graphicFadeIn } from './common';\n\nexport function pointCallIn(\n  itemLine: Segment,\n  decorativeLine: ILine,\n  item: Tag | IRichText | ISymbol | IImage,\n  duration: number,\n  delay: number,\n  easing: EasingType\n) {\n  const startSymbolDuration = 0.1 * duration;\n  const lineDuration = 0.65 * duration;\n  const decorativeDuration = 0.05 * duration;\n  const endSymbolDuration = 0.1 * duration;\n  const labelDuration = 0.1 * duration;\n\n  // start symbol\n  graphicFadeIn(itemLine.startSymbol, delay, startSymbolDuration, easing);\n\n  // line\n  itemLine.lines.forEach(line => line.setAttribute('clipRange', 0));\n  itemLine.lines.forEach((l, index) => {\n    const stepDuration = lineDuration / itemLine.lines.length;\n    l.animate()\n      .wait(delay + startSymbolDuration + index * stepDuration)\n      .to({ clipRange: 1 }, stepDuration, easing);\n  });\n\n  graphicFadeIn(decorativeLine, delay + startSymbolDuration + lineDuration, decorativeDuration, easing);\n\n  // end symbol\n  graphicFadeIn(\n    itemLine.endSymbol,\n    delay + startSymbolDuration + lineDuration + decorativeDuration,\n    endSymbolDuration,\n    easing\n  );\n\n  if (item.getTextShape?.()) {\n    // text\n    graphicFadeIn(\n      item.getTextShape(),\n      delay + startSymbolDuration + lineDuration + decorativeDuration + endSymbolDuration,\n      labelDuration,\n      easing\n    );\n\n    // text background\n    graphicFadeIn(\n      item.getBgRect(),\n      delay + startSymbolDuration + lineDuration + endSymbolDuration,\n      labelDuration,\n      easing\n    );\n  } else {\n    graphicFadeIn(item, delay + startSymbolDuration + lineDuration + endSymbolDuration, labelDuration, easing);\n  }\n}\n"]}