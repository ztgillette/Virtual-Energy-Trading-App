import type { EasingType, IArcGraphicAttribute, IGroup, IGroupGraphicAttribute, IImageGraphicAttribute, ILineGraphicAttribute, IPolygonAttribute, IPolygonGraphicAttribute, IRectGraphicAttribute, ISymbol, ISymbolGraphicAttribute, ITextGraphicAttribute } from '@visactor/vrender-core';
import type { CommonSegmentAttributes, ILineGraphicWithCornerRadius, SegmentAttributes } from '../segment/type';
import type { TagAttributes } from '../tag/type';
import type { Point, State } from '../core/type';
export declare enum IMarkLineLabelPosition {
    start = "start",
    startTop = "startTop",
    startBottom = "startBottom",
    insideStart = "insideStart",
    insideStartTop = "insideStartTop",
    insideStartBottom = "insideStartBottom",
    middle = "middle",
    insideMiddleTop = "insideMiddleTop",
    insideMiddleBottom = "insideMiddleBottom",
    end = "end",
    endTop = "endTop",
    endBottom = "endBottom",
    insideEnd = "insideEnd",
    insideEndTop = "insideEndTop",
    insideEndBottom = "insideEndBottom"
}
export declare enum IMarkAreaLabelPosition {
    left = "left",
    right = "right",
    top = "top",
    bottom = "bottom",
    topLeft = "topLeft",
    topRight = "topRight",
    bottomLeft = "bottomLeft",
    bottomRight = "bottomRight",
    middle = "middle",
    insideLeft = "insideLeft",
    insideRight = "insideRight",
    insideTop = "insideTop",
    insideBottom = "insideBottom",
    insideTopLeft = "insideTopLeft",
    insideTopRight = "insideTopRight",
    insideBottomLeft = "insideBottomLeft",
    insideBottomRight = "insideBottomRight"
}
export declare enum IMarkCommonArcLabelPosition {
    arcInnerStart = "arcInnerStart",
    arcInnerEnd = "arcInnerEnd",
    arcInnerMiddle = "arcInnerMiddle",
    arcOuterStart = "arcOuterStart",
    arcOuterEnd = "arcOuterEnd",
    arcOuterMiddle = "arcOuterMiddle",
    center = "center"
}
export declare enum IMarkPointItemPosition {
    top = "top",
    bottom = "bottom",
    middle = "middle",
    insideTop = "insideTop",
    insideBottom = "insideBottom",
    insideMiddle = "insideMiddle"
}
export type IMarkBackgroundAttributes = {
    visible: boolean;
    autoHeight?: boolean;
    autoWidth?: boolean;
} & Partial<IRectGraphicAttribute>;
export type IMarkLabel = Omit<TagAttributes, 'x' | 'y' | 'panel'> & {
    panel?: IMarkBackgroundAttributes;
};
export type IMarkRef = {
    autoRotate?: boolean;
    refX?: number;
    refY?: number;
    refAngle?: number;
};
export type MarkerAttrs<AnimationType> = IGroupGraphicAttribute & {
    type?: 'line' | 'arc-line' | 'area' | 'arc-area' | 'point';
    interactive?: boolean;
    select?: boolean;
    hover?: boolean;
    visible?: boolean;
    clipInRange?: boolean;
    limitRect?: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
} & BaseMarkerAnimation<AnimationType>;
export type BaseMarkerAnimation<T> = {
    animation?: MarkerAnimation<T> | boolean;
    animationEnter?: MarkerUpdateAnimation<T>;
    animationUpdate?: MarkerUpdateAnimation<T>;
    animationExit?: MarkerExitAnimation;
};
export type MarkerAnimation<T> = MarkerUpdateAnimation<T> | MarkerUpdateAnimation<T>;
export type MarkerUpdateAnimation<T> = {
    type: T;
} & MarkerExitAnimation;
export type MarkCommonLineAnimationType = 'clipIn' | 'fadeIn';
export type CommonMarkAreaAnimationType = 'fadeIn';
export type MarkPointAnimationType = 'callIn' | 'fadeIn';
export type MarkerExitAnimation = {
    type: 'fadeOut';
    duration?: number;
    delay?: number;
    easing?: EasingType;
};
export type MarkerAnimationState = 'enter' | 'update' | 'exit';
export type MarkCommonLineState<LineAttr> = {
    line?: State<LineAttr>;
    lineStartSymbol?: State<Partial<ISymbolGraphicAttribute>>;
    lineEndSymbol?: State<Partial<ISymbolGraphicAttribute>>;
    label?: State<Partial<ITextGraphicAttribute>> | State<Partial<ITextGraphicAttribute>>[];
    labelBackground?: State<Partial<IRectGraphicAttribute>> | State<Partial<IRectGraphicAttribute>>[];
};
export type CommonMarkAreaState<AreaAttr> = {
    area?: State<Partial<AreaAttr>>;
    label?: State<Partial<ITextGraphicAttribute>> | State<Partial<ITextGraphicAttribute>>[];
    labelBackground?: State<Partial<IRectGraphicAttribute>> | State<Partial<IRectGraphicAttribute>>[];
};
export type MarkPointState = {
    line?: State<ILineGraphicWithCornerRadius | Partial<ILineGraphicAttribute>[]>;
    lineStartSymbol?: State<Partial<ISymbolGraphicAttribute>>;
    lineEndSymbol?: State<Partial<ISymbolGraphicAttribute>>;
    textBackground?: State<Partial<IRectGraphicAttribute>>;
    targetItem?: State<Partial<ISymbolGraphicAttribute>>;
    itemContent?: State<Partial<ISymbolGraphicAttribute> | Partial<IImageGraphicAttribute> | Partial<ITextGraphicAttribute> | Partial<IGroupGraphicAttribute>>;
};
export type MarkerLineLabelAttrs<LineLabelPosition> = {
    position?: LineLabelPosition;
    confine?: boolean;
} & IMarkRef & IMarkLabel;
export type MarkCommonLineAttrs<LineAttr, LineLabelPosition, MarkCommonLineAnimationType> = MarkerAttrs<MarkCommonLineAnimationType> & Omit<CommonSegmentAttributes, 'state' | 'lineStyle'> & {
    label?: MarkerLineLabelAttrs<LineLabelPosition> | MarkerLineLabelAttrs<LineLabelPosition>[];
    state?: MarkCommonLineState<LineAttr>;
};
export type MarkLineAttrs = MarkCommonLineAttrs<ILineGraphicWithCornerRadius | ILineGraphicAttribute[], keyof typeof IMarkLineLabelPosition, MarkCommonLineAnimationType> & {
    type?: 'line';
    multiSegment?: boolean;
    mainSegmentIndex?: number;
    points: Point[] | Point[][];
    lineStyle?: ILineGraphicAttribute;
};
export type MarkArcLineAttrs = MarkCommonLineAttrs<IArcGraphicAttribute, keyof typeof IMarkCommonArcLabelPosition, MarkCommonLineAnimationType> & {
    type?: 'arc-line';
    center: {
        x: number;
        y: number;
    };
    radius: number;
    startAngle: number;
    endAngle: number;
    lineStyle?: IArcGraphicAttribute;
};
export type MarkerAreaLabelAttrs = {
    position?: keyof typeof IMarkAreaLabelPosition;
    confine?: boolean;
} & IMarkLabel;
export type MarkAreaAttrs = MarkerAttrs<CommonMarkAreaAnimationType> & {
    type?: 'area';
    points: Point[];
    label?: MarkerAreaLabelAttrs | MarkerAreaLabelAttrs[];
    areaStyle?: IPolygonAttribute;
    state?: CommonMarkAreaState<IPolygonGraphicAttribute>;
};
export type MarkerArcAreaLabelAttrs = {
    position?: keyof typeof IMarkCommonArcLabelPosition;
    confine?: boolean;
} & IMarkRef & IMarkLabel;
export type MarkArcAreaAttrs = MarkerAttrs<CommonMarkAreaAnimationType> & {
    type?: 'arc-area';
    center: {
        x: number;
        y: number;
    };
    innerRadius: number;
    outerRadius: number;
    startAngle: number;
    endAngle: number;
    label?: MarkerArcAreaLabelAttrs | MarkerArcAreaLabelAttrs[];
    areaStyle?: IArcGraphicAttribute;
    state?: CommonMarkAreaState<IArcGraphicAttribute>;
};
export type IItemContent = IMarkRef & {
    type?: 'symbol' | 'text' | 'image' | 'custom';
    position?: keyof typeof IMarkPointItemPosition;
    offsetX?: number;
    offsetY?: number;
    style?: ISymbolGraphicAttribute | IImageGraphicAttribute | IMarkLabel;
    renderCustomCallback?: () => IGroup;
    confine?: boolean;
};
export type IItemLine = {
    type?: 'type-s' | 'type-do' | 'type-po' | 'type-op' | 'type-arc';
    visible?: boolean;
    arcRatio?: number;
    decorativeLine?: {
        visible?: boolean;
        length?: number;
    };
} & Omit<SegmentAttributes, 'points'>;
export type MarkPointAttrs = Omit<MarkerAttrs<MarkPointAnimationType>, 'labelStyle'> & {
    position: Point;
    itemLine?: IItemLine;
    itemContent?: IItemContent;
    targetSymbol?: {
        offset?: number;
        visible?: boolean;
        size?: number;
        style?: ISymbol;
    };
    state?: MarkPointState;
} & BaseMarkerAnimation<MarkPointAnimationType>;
