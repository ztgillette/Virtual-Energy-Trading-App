{"version":3,"sources":["../src/ordinal-scale.ts"],"names":[],"mappings":"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","file":"ordinal-scale.js","sourcesContent":["import { ScaleEnum } from './type';\nimport type { DiscreteScaleType, IOrdinalScale } from './interface';\nimport { BaseScale } from './base-scale';\nimport { isValid } from '@visactor/vutils';\n\nexport const implicit = Symbol('implicit');\n\nexport class OrdinalScale extends BaseScale implements IOrdinalScale {\n  readonly type: DiscreteScaleType = ScaleEnum.Ordinal;\n  protected _index: Map<string, number>;\n  protected _domain: Array<number>;\n  protected _ordinalRange: Array<number>;\n  /** specified: support scale to return specific value on special input value */\n  protected _specified: Record<string, unknown>;\n  specified(): Record<string, unknown>;\n  specified(_: Record<string, unknown>): this;\n  specified(_?: Record<string, unknown>): this | Record<string, unknown> {\n    if (!_) {\n      return Object.assign({}, this._specified);\n    }\n    this._specified = Object.assign(this._specified ?? {}, _);\n    return this;\n  }\n\n  protected _getSpecifiedValue(input: string): undefined | any {\n    if (!this._specified) {\n      return undefined;\n    }\n    return this._specified[input];\n  }\n\n  constructor() {\n    super();\n    this._index = new Map();\n    this._domain = [];\n    this._ordinalRange = [];\n    this._unknown = implicit;\n  }\n\n  // TODO checkPoint\n  clone(): IOrdinalScale {\n    const s = new OrdinalScale().domain(this._domain).range(this._ordinalRange).unknown(this._unknown);\n    // _specified 为空时，不会返回this\n    this._specified && s.specified(this._specified);\n    return s;\n  }\n\n  calculateVisibleDomain(range: any[]) {\n    if (isValid(this._rangeFactorStart) && isValid(this._rangeFactorEnd) && range.length === 2) {\n      const d0 = this.invert(range[0]);\n      const d1 = this.invert(range[1]);\n\n      return [d0, d1];\n    }\n\n    return this._domain;\n  }\n\n  scale(d: any): any {\n    const key = `${d}`;\n    const special = this._getSpecifiedValue(key);\n    if (special !== undefined) {\n      return special;\n    }\n    let i = this._index.get(key);\n    if (!i) {\n      if (this._unknown !== implicit) {\n        return this._unknown;\n      }\n      // TODO checkPoint\n      i = this._domain.push(d);\n      this._index.set(key, i);\n    }\n    const output = this._ordinalRange[(i - 1) % this._ordinalRange.length];\n\n    return this._fishEyeTransform ? this._fishEyeTransform(output) : output;\n  }\n\n  // d3-scale里没有对ordinal-scale添加invert能力，这里只做简单的映射\n  invert(d: any): any {\n    // 找到index\n    let i = 0;\n    while (i < this._ordinalRange.length && this._ordinalRange[i] !== d) {\n      i++;\n    }\n    return this._domain[(i - 1) % this._domain.length];\n  }\n\n  domain(): any[];\n  domain(_: any[]): this;\n  domain(_?: any[]): this | any {\n    if (!_) {\n      return this._domain.slice();\n    }\n    this._domain = [];\n    this._index = new Map();\n    for (const value of _) {\n      const key = `${value}`;\n      if (this._index.has(key)) {\n        continue;\n      }\n      this._index.set(key, this._domain.push(value));\n    }\n    return this;\n  }\n\n  range(): any[];\n  range(_: any[]): this;\n  range(_?: any[]): this | any {\n    if (!_) {\n      return this._ordinalRange.slice();\n    }\n    const nextRange = Array.from(_);\n\n    this._ordinalRange = nextRange;\n    return this;\n  }\n\n  index(x: any): number {\n    if (!this._index) {\n      return -1;\n    }\n    return this._index.get(`${x}`) ?? -1;\n  }\n}\n"]}