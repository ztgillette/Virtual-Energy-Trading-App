import type { FloorCeilType, InterpolateType } from '../interface';
export declare function identity(x: any): any;
export declare const generatePow: (exponent: number) => (x: number) => number;
export declare const sqrt: (x: number) => number;
export declare const square: (x: number) => number;
export declare const log: (x: number) => number;
export declare const exp: (x: number) => number;
export declare const logNegative: (x: number) => number;
export declare const expNegative: (x: number) => number;
export declare const pow10: (x: number) => number;
export declare const powp: (base: number) => (x: number) => number;
export declare const logp: (base: number) => (x: number) => number;
export declare const symlog: (c: number) => (x: number) => number;
export declare const symexp: (c: number) => (x: number) => number;
export declare function normalize(a: number, b: number): (x: number) => number;
export declare function bimap(domain: [number, number], range: [any, any], interpolate: InterpolateType<any>): (x: number) => any;
export declare function bandSpace(count: number, paddingInner: number, paddingOuter: number): number;
export declare function scaleWholeRangeSize(count: number, bandwidth: number, paddingInner: number, paddingOuter: number): number;
export declare function calculateBandwidthFromWholeRangeSize(count: number, wholeSize: number, paddingInner: number, paddingOuter: number, round: boolean): number;
export declare function calculateWholeRangeFromRangeFactor(range: number[], rangeFactor: number[]): [number, number];
export declare function polymap(domain: number[], range: any[], interpolate: InterpolateType<any>): (x: number) => any;
export declare const nice: (domain: number[] | Date[], options: FloorCeilType<any>) => number[] | Date[];
export declare const niceNumber: (value: number, round?: boolean) => number;
export declare const restrictNumber: (value: number, domain: [number, number]) => number;
