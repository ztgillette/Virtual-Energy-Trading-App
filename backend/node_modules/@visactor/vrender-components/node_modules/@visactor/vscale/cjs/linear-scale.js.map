{"version":3,"sources":["../src/linear-scale.ts"],"names":[],"mappings":"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","file":"linear-scale.js","sourcesContent":["import { ScaleEnum } from './type';\nimport { d3Ticks, forceTicks, niceLinear, parseNiceOptions, stepTicks, ticks } from './utils/tick-sample';\nimport { ContinuousScale } from './continuous-scale';\nimport type { ContinuousScaleType, CustomTicksFunc, NiceOptions } from './interface';\nimport { isFunction, isValid } from '@visactor/vutils';\n\n/**\n * TODO:\n * 1. niceMax/niceMin\n * 2. tickFormat\n */\nexport class LinearScale extends ContinuousScale {\n  readonly type: ContinuousScaleType = ScaleEnum.Linear;\n\n  clone(): LinearScale {\n    const scale = new LinearScale();\n    scale\n      .domain(this._domain, true)\n      .range(this._range, true)\n      .unknown(this._unknown)\n      .clamp(this.clamp(), null, true)\n      .interpolate(this._interpolate) as LinearScale;\n    if (this._niceType) {\n      scale._niceType = this._niceType;\n      scale._domainValidator = this._domainValidator;\n      scale._niceDomain = this._niceDomain?.slice();\n    }\n    return scale;\n  }\n\n  tickFormat() {\n    // TODO\n    return () => {\n      // TODO\n    };\n  }\n\n  d3Ticks(count: number = 10, options?: { noDecimals?: boolean }) {\n    const d = this.calculateVisibleDomain(this._range);\n    return d3Ticks(d[0], d[d.length - 1], count, options);\n  }\n\n  /**\n   * the kind of algorithms will generate ticks that is smaller than the min or greater than the max\n   * if we don't update niceDomain, the ticks will exceed the domain\n   */\n  ticks(\n    count: number = 10,\n    options?: { noDecimals?: boolean; customTicks?: CustomTicksFunc<ContinuousScale> }\n  ): number[] {\n    if (isFunction(options?.customTicks)) {\n      return options.customTicks(this, count);\n    }\n    if (\n      (isValid(this._rangeFactorStart) &&\n        isValid(this._rangeFactorEnd) &&\n        (this._rangeFactorStart > 0 || this._rangeFactorEnd < 1) &&\n        this._range.length === 2) ||\n      !this._niceType\n    ) {\n      return this.d3Ticks(count, options);\n    }\n    const curNiceDomain = this._niceDomain ?? this._domain;\n    const originalDomain = this._domain;\n    const start = curNiceDomain[0];\n    const stop = curNiceDomain[curNiceDomain.length - 1];\n    let ticksResult = ticks(originalDomain[0], originalDomain[originalDomain.length - 1], count, options);\n\n    if (!ticksResult.length) {\n      return ticksResult;\n    }\n\n    if (this._domainValidator) {\n      ticksResult = ticksResult.filter(this._domainValidator);\n    } else if ((ticksResult[0] !== start || ticksResult[ticksResult.length - 1] !== stop) && this._niceType) {\n      const newNiceDomain = curNiceDomain.slice();\n\n      if (this._niceType === 'all') {\n        newNiceDomain[0] = ticksResult[0];\n        newNiceDomain[newNiceDomain.length - 1] = ticksResult[ticksResult.length - 1];\n        this._niceDomain = newNiceDomain;\n        this.rescale();\n      } else if (this._niceType === 'min' && ticksResult[0] !== start) {\n        newNiceDomain[0] = ticksResult[0];\n        this._niceDomain = newNiceDomain;\n        this.rescale();\n      } else if (this._niceType === 'max' && ticksResult[ticksResult.length - 1] !== stop) {\n        newNiceDomain[newNiceDomain.length - 1] = ticksResult[ticksResult.length - 1];\n        this._niceDomain = newNiceDomain;\n        this.rescale();\n      }\n\n      if (this._niceType !== 'all') {\n        const min = Math.min(newNiceDomain[0], newNiceDomain[newNiceDomain.length - 1]);\n        const max = Math.max(newNiceDomain[0], newNiceDomain[newNiceDomain.length - 1]);\n\n        ticksResult = ticksResult.filter((entry: number) => entry >= min && entry <= max);\n      }\n    }\n\n    return ticksResult;\n  }\n\n  /**\n   * 生成tick数组，这个tick数组的长度就是count的长度\n   * @param count\n   */\n  forceTicks(count: number = 10): any[] {\n    const d = this.calculateVisibleDomain(this._range);\n    return forceTicks(d[0], d[d.length - 1], count);\n  }\n\n  /**\n   * 基于给定step的ticks数组生成\n   * @param step\n   */\n  stepTicks(step: number): any[] {\n    const d = this.calculateVisibleDomain(this._range);\n\n    return stepTicks(d[0], d[d.length - 1], step);\n  }\n\n  nice(count: number = 10, option?: NiceOptions): this {\n    const originalDomain = this._domain;\n    let niceMinMax: number[] = [];\n\n    if (option) {\n      const res = parseNiceOptions(originalDomain, option);\n      niceMinMax = res.niceMinMax;\n      this._domainValidator = res.domainValidator;\n      this._niceType = res.niceType;\n\n      if (res.niceDomain) {\n        this._niceDomain = res.niceDomain;\n        this.rescale();\n\n        return this;\n      }\n    } else {\n      this._niceType = 'all';\n    }\n\n    if (this._niceType) {\n      const niceDomain = niceLinear(originalDomain.slice(), count);\n\n      if (this._niceType === 'min') {\n        niceDomain[niceDomain.length - 1] = niceMinMax[1] ?? niceDomain[niceDomain.length - 1];\n      } else if (this._niceType === 'max') {\n        niceDomain[0] = niceMinMax[0] ?? niceDomain[0];\n      }\n\n      this._niceDomain = niceDomain;\n      this.rescale();\n    }\n    return this;\n  }\n\n  /**\n   * 只对min区间进行nice\n   * 如果保持某一边界的值，就很难有好的nice效果，所以这里实现就是nice之后还原固定的边界值\n   * @param count\n   */\n  niceMin(count: number = 10): this {\n    this._niceType = 'min';\n\n    const maxD = this._domain[this._domain.length - 1];\n    const niceDomain = niceLinear(this.domain(), count);\n\n    if (niceDomain) {\n      niceDomain[niceDomain.length - 1] = maxD;\n\n      this._niceDomain = niceDomain;\n\n      this.rescale();\n    }\n\n    return this;\n  }\n\n  /**\n   * 只对max区间进行nice\n   * 如果保持某一边界的值，就很难有好的nice效果，所以这里实现就是nice之后还原固定的边界值\n   * @param count\n   * @returns\n   */\n  niceMax(count: number = 10): this {\n    this._niceType = 'max';\n    const minD = this._domain[0];\n    const niceDomain = niceLinear(this._domain.slice(), count);\n\n    if (niceDomain) {\n      niceDomain[0] = minD;\n      this._niceDomain = niceDomain;\n\n      this.rescale();\n    }\n\n    return this;\n  }\n}\n"]}