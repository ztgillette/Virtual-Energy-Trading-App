{"version":3,"sources":["../src/continuous-scale.ts"],"names":[],"mappings":"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","file":"continuous-scale.js","sourcesContent":["import { BaseScale } from './base-scale';\nimport type {\n  BimapType,\n  InterpolateType,\n  PolymapType,\n  TransformType,\n  IContinuousScale,\n  ContinuousScaleType,\n  TickData,\n  NiceType,\n  ScaleFishEyeOptions\n} from './interface';\nimport { interpolate } from './utils/interpolate';\nimport { bimap, identity, polymap } from './utils/utils';\nimport { clamper, toNumber, interpolateNumberRound, interpolateNumber, isValid, isNil } from '@visactor/vutils';\n\nexport class ContinuousScale extends BaseScale implements IContinuousScale {\n  readonly type: ContinuousScaleType;\n  protected transformer: TransformType;\n  protected untransformer: TransformType;\n\n  protected _niceDomain: number[];\n  protected _niceType?: NiceType;\n  protected _domain: number[];\n  protected _range: any[];\n  protected _unknown: any = undefined;\n  protected _forceAlign: boolean;\n\n  protected _output?: (x: number) => number;\n  protected _input?: (x: number) => number;\n  protected _interpolate?: InterpolateType<any>;\n  protected _piecewise: BimapType<any> | PolymapType<any>;\n  protected _domainValidator?: (val: number) => boolean;\n\n  _clamp?: (x: number) => number;\n  _autoClamp?: boolean;\n\n  constructor(transformer: TransformType = identity, untransformer: TransformType = identity) {\n    super();\n    this.transformer = transformer;\n    this.untransformer = untransformer;\n\n    this._forceAlign = true;\n    this._domain = [0, 1];\n    this._range = [0, 1];\n    this._clamp = identity;\n    this._piecewise = bimap;\n    this._interpolate = interpolate;\n  }\n\n  calculateVisibleDomain(range: any[]) {\n    if (isValid(this._rangeFactorStart) && isValid(this._rangeFactorEnd) && range.length === 2) {\n      const d0 = this.invert(range[0]);\n      const d1 = this.invert(range[1]);\n\n      return [d0, d1];\n    }\n\n    return this._niceDomain ?? this._domain;\n  }\n\n  fishEye(): ScaleFishEyeOptions;\n  fishEye(options: ScaleFishEyeOptions, slience?: boolean, clear?: boolean): this;\n  fishEye(options?: ScaleFishEyeOptions, slience?: boolean, clear?: boolean): this | ScaleFishEyeOptions {\n    if (options || clear) {\n      this._fishEyeOptions = options;\n      this._fishEyeTransform = null;\n\n      return this.rescale(slience);\n    }\n\n    return this._fishEyeOptions;\n  }\n\n  scale(x: any): any {\n    x = Number(x);\n    if (Number.isNaN(x) || (this._domainValidator && !this._domainValidator(x))) {\n      return this._unknown;\n    }\n    if (!this._output) {\n      this._output = (this._piecewise as PolymapType<any>)(\n        (this._niceDomain ?? this._domain).map(this.transformer),\n        this._calculateWholeRange(this._range),\n        this._interpolate\n      );\n    }\n    const output = this._output(this.transformer(this._clamp(x)));\n\n    return this._fishEyeTransform ? this._fishEyeTransform(output) : output;\n  }\n\n  invert(y: any): any {\n    if (!this._input) {\n      this._input = (this._piecewise as PolymapType<any>)(\n        this._calculateWholeRange(this._range),\n        (this._niceDomain ?? this._domain).map(this.transformer),\n        interpolateNumber\n      );\n    }\n    return this._clamp(this.untransformer(this._input(y)));\n  }\n\n  domain(): any[];\n  domain(_: any[], slience?: boolean): this;\n  domain(_?: any[], slience?: boolean): this | any[] {\n    if (!_) {\n      return (this._niceDomain ?? this._domain).slice();\n    }\n    this._domainValidator = null;\n    this._niceType = null;\n    this._niceDomain = null;\n    const nextDomain = Array.from(_, toNumber) as [number, number];\n\n    this._domain = nextDomain;\n    return this.rescale(slience);\n  }\n\n  range(): any[];\n  range(_: any[], slience?: boolean): this;\n  range(_?: any[], slience?: boolean): this | any[] {\n    if (!_) {\n      return this._range.slice();\n    }\n\n    const nextRange = Array.from(_) as [number, number];\n    this._range = nextRange;\n    return this.rescale(slience);\n  }\n\n  rangeRound(_: any[], slience?: boolean): this {\n    const nextRange = Array.from(_) as [number, number];\n    this._range = nextRange;\n    this._interpolate = interpolateNumberRound;\n    return this.rescale(slience);\n  }\n\n  rescale(slience?: boolean): this {\n    if (slience) {\n      return this;\n    }\n    const domain = this._niceDomain ?? this._domain;\n    const domainLength = domain.length;\n    const rangeLength = this._range.length;\n    let n = Math.min(domainLength, rangeLength);\n\n    if (domainLength && domainLength < rangeLength && this._forceAlign) {\n      // insert steps to domain\n      const deltaStep = rangeLength - domainLength + 1;\n      const last = domain[domainLength - 1];\n      const delta = domainLength >= 2 ? (last - domain[domainLength - 2]) / deltaStep : 0;\n\n      for (let i = 1; i <= deltaStep; i++) {\n        domain[domainLength - 2 + i] = last - delta * (deltaStep - i);\n      }\n      n = rangeLength;\n    }\n\n    if (this._autoClamp) {\n      this._clamp = clamper(domain[0], domain[n - 1]);\n    }\n    this._piecewise = n > 2 ? polymap : bimap;\n    this._output = this._input = null;\n    this._wholeRange = null;\n\n    this.generateFishEyeTransform();\n    return this;\n  }\n\n  clamp(): boolean;\n  clamp(_: boolean, f?: (x: number) => number, slience?: boolean): this;\n  clamp(_?: boolean, f?: (x: number) => number, slience?: boolean): this | boolean {\n    if (!arguments.length) {\n      return this._clamp !== identity;\n    }\n    if (f) {\n      this._autoClamp = false;\n      this._clamp = f;\n    } else {\n      this._autoClamp = !!_;\n      this._clamp = _ ? undefined : identity;\n    }\n\n    return this.rescale(slience);\n  }\n\n  interpolate(): InterpolateType<any>;\n  interpolate(_: InterpolateType<any>, slience?: boolean): this;\n  interpolate(_?: InterpolateType<any>, slience?: boolean) {\n    if (!arguments.length) {\n      return this._interpolate;\n    }\n    this._interpolate = _;\n    return this.rescale(slience);\n  }\n\n  ticks(count: number = 10): any[] {\n    return [];\n  }\n\n  tickData(count: number = 10): TickData[] {\n    const ticks = this.ticks(count);\n    return (ticks ?? []).map((tick, index) => {\n      const scaledValue = this.scale(tick);\n      return {\n        index,\n        tick,\n        value: (scaledValue - this._range[0]) / (this._range[1] - this._range[0])\n      };\n    });\n  }\n\n  rangeFactor(): [number, number];\n  rangeFactor(_: [number, number], slience?: boolean): this;\n  rangeFactor(_?: [number, number], slience?: boolean): this | any[] {\n    if (!_) {\n      return super.rangeFactor();\n    }\n    super.rangeFactor(_);\n    this._output = this._input = null;\n\n    return this;\n  }\n\n  rangeFactorStart(): number;\n  rangeFactorStart(_: number, slience?: boolean): this;\n  rangeFactorStart(_?: number, slience?: boolean): this | any {\n    if (isNil(_)) {\n      return super.rangeFactorStart();\n    }\n    super.rangeFactorStart(_);\n    this._output = this._input = null;\n\n    return this;\n  }\n\n  rangeFactorEnd(): number;\n  rangeFactorEnd(_: number, slience?: boolean): this;\n  rangeFactorEnd(_?: number, slience?: boolean): this | any {\n    if (isNil(_)) {\n      return super.rangeFactorEnd();\n    }\n    super.rangeFactorEnd(_);\n    this._output = this._input = null;\n\n    return this;\n  }\n\n  forceAlignDomainRange(): boolean;\n  forceAlignDomainRange(enable: boolean): this;\n  forceAlignDomainRange(forceAlign?: boolean): this | boolean {\n    if (!arguments.length) {\n      return this._forceAlign;\n    }\n    this._forceAlign = forceAlign;\n    return this;\n  }\n}\n"]}