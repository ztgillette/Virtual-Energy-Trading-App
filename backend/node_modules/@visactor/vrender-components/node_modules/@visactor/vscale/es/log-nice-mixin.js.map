{"version":3,"sources":["../src/log-nice-mixin.ts"],"names":[],"mappings":"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","file":"log-nice-mixin.js","sourcesContent":["import type { NiceOptions, NiceType } from './interface';\nimport { parseNiceOptions } from './utils/tick-sample';\nimport { nice } from './utils/utils';\n\nexport class LogNiceMixin {\n  protected _domain: number[];\n  protected _domainValidator?: (val: number) => boolean;\n  protected _niceDomain: number[];\n\n  nice(count: number = 10, option?: NiceOptions): this {\n    const originalDomain = this._domain;\n    let niceMinMax: number[] = [];\n    let niceType: NiceType = null;\n\n    if (option) {\n      const res = parseNiceOptions(originalDomain, option);\n      niceMinMax = res.niceMinMax;\n      this._domainValidator = res.domainValidator;\n\n      niceType = res.niceType;\n\n      if (res.niceDomain) {\n        this._niceDomain = res.niceDomain;\n        (this as any).rescale();\n        return this;\n      }\n    } else {\n      niceType = 'all';\n    }\n\n    if (niceType) {\n      const niceDomain = nice(\n        originalDomain.slice(),\n        (this as any).getNiceConfig?.() ?? {\n          floor: (x: number) => Math.floor(x),\n          ceil: (x: number) => Math.ceil(x)\n        }\n      );\n\n      if (niceType === 'min') {\n        niceDomain[niceDomain.length - 1] = niceMinMax[1] ?? niceDomain[niceDomain.length - 1];\n      } else if (niceType === 'max') {\n        niceDomain[0] = niceMinMax[0] ?? niceDomain[0];\n      }\n\n      this._niceDomain = niceDomain as number[];\n      (this as any).rescale();\n      return this;\n    }\n\n    return this;\n  }\n\n  /**\n   * 只对min区间进行nice\n   * 如果保持某一边界的值，就很难有好的nice效果，所以这里实现就是nice之后还原固定的边界值\n   */\n  niceMin(): this {\n    const maxD = this._domain[this._domain.length - 1];\n    this.nice();\n    const niceDomain = this._domain.slice();\n\n    if (this._domain) {\n      niceDomain[niceDomain.length - 1] = maxD;\n      this._niceDomain = niceDomain;\n      (this as any).rescale();\n    }\n\n    return this;\n  }\n\n  /**\n   * 只对max区间进行nice\n   * 如果保持某一边界的值，就很难有好的nice效果，所以这里实现就是nice之后还原固定的边界值\n   */\n  niceMax(): this {\n    const minD = this._domain[0];\n    this.nice();\n    const niceDomain = this._domain.slice();\n\n    if (this._domain) {\n      niceDomain[0] = minD;\n      this._niceDomain = niceDomain;\n      (this as any).rescale();\n    }\n\n    return this;\n  }\n}\n"]}