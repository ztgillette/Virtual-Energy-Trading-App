{"version":3,"sources":["../src/pow-scale.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACnC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAEpE,MAAM,OAAO,QAAS,SAAQ,WAAW;IAKvC;QACE,KAAK,EAAE,CAAC;QALD,SAAI,GAAwB,SAAS,CAAC,GAAG,CAAC;QAMjD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,KAAK;QACH,OAAO,IAAI,QAAQ,EAAE;aAClB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;aAC1B,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;aACxB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;aACtB,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC;aAC/B,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC;aACpC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAa,CAAC;IAC1C,CAAC;IAED,OAAO,CAAC,OAAiB;QACvB,IAAI,OAAO,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;YACxB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;YAC5B,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;SAC/B;aAAM,IAAI,IAAI,CAAC,SAAS,KAAK,GAAG,EAAE;YACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/C,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;SACtD;QAED,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAID,QAAQ,CAAC,CAAU,EAAE,OAAiB;QACpC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACrB,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAED,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QAEnB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;CACF","file":"pow-scale.js","sourcesContent":["import type { ContinuousScaleType } from './interface';\nimport { LinearScale } from './linear-scale';\nimport { ScaleEnum } from './type';\nimport { identity, sqrt, square, generatePow } from './utils/utils';\n\nexport class PowScale extends LinearScale {\n  readonly type: ContinuousScaleType = ScaleEnum.Pow;\n\n  _exponent: number;\n\n  constructor() {\n    super();\n    this._exponent = 1;\n  }\n\n  clone(): PowScale {\n    return new PowScale()\n      .domain(this._domain, true)\n      .range(this._range, true)\n      .unknown(this._unknown)\n      .clamp(this.clamp(), null, true)\n      .interpolate(this._interpolate, true)\n      .exponent(this._exponent) as PowScale;\n  }\n\n  rescale(slience?: boolean) {\n    if (slience) {\n      return this;\n    }\n    if (this._exponent === 1) {\n      this.transformer = identity;\n      this.untransformer = identity;\n    } else if (this._exponent === 0.5) {\n      this.transformer = sqrt;\n      this.untransformer = square;\n    } else {\n      this.transformer = generatePow(this._exponent);\n      this.untransformer = generatePow(1 / this._exponent);\n    }\n\n    super.rescale();\n    return this;\n  }\n\n  exponent(): number;\n  exponent(_: number, slience?: boolean): this;\n  exponent(_?: number, slience?: boolean): this | number {\n    if (!arguments.length) {\n      return this._exponent;\n    }\n\n    this._exponent = _;\n\n    return this.rescale(slience);\n  }\n}\n"]}