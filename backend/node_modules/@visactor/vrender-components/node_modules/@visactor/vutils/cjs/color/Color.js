"use strict";

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.RGB = exports.Color = exports.DEFAULT_COLORS = void 0;

const common_1 = require("../common"), hslToRgb_1 = __importDefault(require("./hslToRgb")), rgbToHsl_1 = __importDefault(require("./rgbToHsl")), REG_HEX = /^#([0-9a-f]{3,8})$/, DEFAULT_COLORS_OPACITY = {
    transparent: 4294967040
};

function hex(value) {
    return ((value = Math.max(0, Math.min(255, Math.round(value) || 0))) < 16 ? "0" : "") + value.toString(16);
}

function rgb(value) {
    return (0, common_1.isNumber)(value) ? new RGB(value >> 16, value >> 8 & 255, 255 & value, 1) : (0, 
    common_1.isArray)(value) ? new RGB(value[0], value[1], value[2]) : new RGB(255, 255, 255);
}

function rgba(value) {
    return (0, common_1.isNumber)(value) ? new RGB(value >>> 24, value >>> 16 & 255, value >>> 8 & 255, 255 & value) : (0, 
    common_1.isArray)(value) ? new RGB(value[0], value[1], value[2], value[3]) : new RGB(255, 255, 255, 1);
}

function SRGBToLinear(c) {
    return c < .04045 ? .0773993808 * c : Math.pow(.9478672986 * c + .0521327014, 2.4);
}

function LinearToSRGB(c) {
    return c < .0031308 ? 12.92 * c : 1.055 * Math.pow(c, .41666) - .055;
}

exports.DEFAULT_COLORS = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
};

const setHex = (formatValue, forceHex) => {
    const isHex = REG_HEX.exec(formatValue);
    if (forceHex || isHex) {
        const hex = parseInt(isHex[1], 16), hexLength = isHex[1].length;
        return 3 === hexLength ? new RGB((hex >> 8 & 15) + ((hex >> 8 & 15) << 4), (hex >> 4 & 15) + ((hex >> 4 & 15) << 4), (15 & hex) + ((15 & hex) << 4), 1) : 6 === hexLength ? rgb(hex) : 8 === hexLength ? new RGB(hex >> 24 & 255, hex >> 16 & 255, hex >> 8 & 255, (255 & hex) / 255) : null;
    }
};

class Color {
    static Brighter(source, b = 1) {
        return 1 === b ? source : new Color(source).brighter(b).toRGBA();
    }
    static SetOpacity(source, o = 1) {
        return 1 === o ? source : new Color(source).setOpacity(o).toRGBA();
    }
    static getColorBrightness(source, model = "hsl") {
        const color = source instanceof Color ? source : new Color(source);
        switch (model) {
          case "hsv":
          default:
            return color.getHSVBrightness();

          case "hsl":
            return color.getHSLBrightness();

          case "lum":
            return color.getLuminance();

          case "lum2":
            return color.getLuminance2();

          case "lum3":
            return color.getLuminance3();

          case "wcag":
            return color.getLuminanceWCAG();
        }
    }
    static parseColorString(value) {
        if ((0, common_1.isValid)(DEFAULT_COLORS_OPACITY[value])) return rgba(DEFAULT_COLORS_OPACITY[value]);
        if ((0, common_1.isValid)(exports.DEFAULT_COLORS[value])) return rgb(exports.DEFAULT_COLORS[value]);
        const formatValue = `${value}`.trim().toLowerCase(), hexRes = setHex(formatValue);
        if (void 0 !== hexRes) return hexRes;
        if (/^(rgb|RGB|rgba|RGBA)/.test(formatValue)) {
            const aColor = formatValue.replace(/(?:\(|\)|rgba|RGBA|rgb|RGB)*/g, "").split(",");
            return new RGB(parseInt(aColor[0], 10), parseInt(aColor[1], 10), parseInt(aColor[2], 10), parseFloat(aColor[3]));
        }
        if (/^(hsl|HSL|hsla|HSLA)/.test(formatValue)) {
            const aColor = formatValue.replace(/(?:\(|\)|hsla|HSLA|hsl|HSL)*/g, "").split(","), rgb = (0, 
            hslToRgb_1.default)(parseInt(aColor[0], 10), parseInt(aColor[1], 10), parseInt(aColor[2], 10));
            return new RGB(rgb.r, rgb.g, rgb.b, parseFloat(aColor[3]));
        }
    }
    constructor(value) {
        const color = Color.parseColorString(value);
        color ? this.color = color : (console.warn(`Warn: 传入${value}无法解析为Color`), this.color = new RGB(255, 255, 255));
    }
    toRGBA() {
        return this.color.formatRgb();
    }
    toString() {
        return this.color.formatRgb();
    }
    toHex() {
        return this.color.formatHex();
    }
    toHsl() {
        return this.color.formatHsl();
    }
    brighter(k) {
        const {r: r, g: g, b: b} = this.color;
        return this.color.r = Math.max(0, Math.min(255, Math.floor(r * k))), this.color.g = Math.max(0, Math.min(255, Math.floor(g * k))), 
        this.color.b = Math.max(0, Math.min(255, Math.floor(b * k))), this;
    }
    add(color) {
        const {r: r, g: g, b: b} = this.color;
        return this.color.r += Math.min(255, r + color.color.r), this.color.g += Math.min(255, g + color.color.g), 
        this.color.b += Math.min(255, b + color.color.b), this;
    }
    sub(color) {
        return this.color.r = Math.max(0, this.color.r - color.color.r), this.color.g = Math.max(0, this.color.g - color.color.g), 
        this.color.b = Math.max(0, this.color.b - color.color.b), this;
    }
    multiply(color) {
        const {r: r, g: g, b: b} = this.color;
        return this.color.r = Math.max(0, Math.min(255, Math.floor(r * color.color.r))), 
        this.color.g = Math.max(0, Math.min(255, Math.floor(g * color.color.g))), this.color.b = Math.max(0, Math.min(255, Math.floor(b * color.color.b))), 
        this;
    }
    getHSVBrightness() {
        return Math.max(this.color.r, this.color.g, this.color.b) / 255;
    }
    getHSLBrightness() {
        return .5 * (Math.max(this.color.r, this.color.g, this.color.b) / 255 + Math.min(this.color.r, this.color.g, this.color.b) / 255);
    }
    setHsl(h, s, l) {
        const opacity = this.color.opacity, hsl = (0, rgbToHsl_1.default)(this.color.r, this.color.g, this.color.b), rgb = (0, 
        hslToRgb_1.default)((0, common_1.isNil)(h) ? hsl.h : (0, common_1.clamp)(h, 0, 360), (0, 
        common_1.isNil)(s) ? hsl.s : s >= 0 && s <= 1 ? 100 * s : s, (0, common_1.isNil)(l) ? hsl.l : l <= 1 && l >= 0 ? 100 * l : l);
        return this.color = new RGB(rgb.r, rgb.g, rgb.b, opacity), this;
    }
    setRGB(r, g, b) {
        return !(0, common_1.isNil)(r) && (this.color.r = r), !(0, common_1.isNil)(g) && (this.color.g = g), 
        !(0, common_1.isNil)(b) && (this.color.b = b), this;
    }
    setHex(value) {
        const formatValue = `${value}`.trim().toLowerCase(), res = setHex(formatValue, !0);
        return null != res ? res : this;
    }
    setColorName(name) {
        const hex = exports.DEFAULT_COLORS[name.toLowerCase()];
        return void 0 !== hex ? this.setHex(hex) : console.warn("THREE.Color: Unknown color " + name), 
        this;
    }
    setScalar(scalar) {
        return this.color.r = scalar, this.color.g = scalar, this.color.b = scalar, this;
    }
    setOpacity(o = 1) {
        return this.color.opacity = o, this;
    }
    getLuminance() {
        return (.2126 * this.color.r + .7152 * this.color.g + .0722 * this.color.b) / 255;
    }
    getLuminance2() {
        return (.2627 * this.color.r + .678 * this.color.g + .0593 * this.color.b) / 255;
    }
    getLuminance3() {
        return (.299 * this.color.r + .587 * this.color.g + .114 * this.color.b) / 255;
    }
    getLuminanceWCAG() {
        const RsRGB = this.color.r / 255, GsRGB = this.color.g / 255, BsRGB = this.color.b / 255;
        let R, G, B;
        R = RsRGB <= .03928 ? RsRGB / 12.92 : Math.pow((RsRGB + .055) / 1.055, 2.4), G = GsRGB <= .03928 ? GsRGB / 12.92 : Math.pow((GsRGB + .055) / 1.055, 2.4), 
        B = BsRGB <= .03928 ? BsRGB / 12.92 : Math.pow((BsRGB + .055) / 1.055, 2.4);
        return .2126 * R + .7152 * G + .0722 * B;
    }
    clone() {
        return new Color(this.color.toString());
    }
    copyGammaToLinear(color, gammaFactor = 2) {
        return this.color.r = Math.pow(color.color.r, gammaFactor), this.color.g = Math.pow(color.color.g, gammaFactor), 
        this.color.b = Math.pow(color.color.b, gammaFactor), this;
    }
    copyLinearToGamma(color, gammaFactor = 2) {
        const safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
        return this.color.r = Math.pow(color.color.r, safeInverse), this.color.g = Math.pow(color.color.g, safeInverse), 
        this.color.b = Math.pow(color.color.b, safeInverse), this;
    }
    convertGammaToLinear(gammaFactor) {
        return this.copyGammaToLinear(this, gammaFactor), this;
    }
    convertLinearToGamma(gammaFactor) {
        return this.copyLinearToGamma(this, gammaFactor), this;
    }
    copySRGBToLinear(color) {
        return this.color.r = SRGBToLinear(color.color.r), this.color.g = SRGBToLinear(color.color.g), 
        this.color.b = SRGBToLinear(color.color.b), this;
    }
    copyLinearToSRGB(color) {
        return this.color.r = LinearToSRGB(color.color.r), this.color.g = LinearToSRGB(color.color.g), 
        this.color.b = LinearToSRGB(color.color.b), this;
    }
    convertSRGBToLinear() {
        return this.copySRGBToLinear(this), this;
    }
    convertLinearToSRGB() {
        return this.copyLinearToSRGB(this), this;
    }
}

exports.Color = Color;

class RGB {
    constructor(r, g, b, opacity) {
        this.r = isNaN(+r) ? 255 : Math.max(0, Math.min(255, +r)), this.g = isNaN(+g) ? 255 : Math.max(0, Math.min(255, +g)), 
        this.b = isNaN(+b) ? 255 : Math.max(0, Math.min(255, +b)), (0, common_1.isValid)(opacity) ? this.opacity = isNaN(+opacity) ? 1 : Math.max(0, Math.min(1, +opacity)) : this.opacity = 1;
    }
    formatHex() {
        return `#${hex(this.r) + hex(this.g) + hex(this.b) + (1 === this.opacity ? "" : hex(255 * this.opacity))}`;
    }
    formatRgb() {
        const opacity = this.opacity;
        return `${1 === opacity ? "rgb(" : "rgba("}${this.r},${this.g},${this.b}${1 === opacity ? ")" : `,${opacity})`}`;
    }
    formatHsl() {
        const opacity = this.opacity, {h: h, s: s, l: l} = (0, rgbToHsl_1.default)(this.r, this.g, this.b);
        return `${1 === opacity ? "hsl(" : "hsla("}${h},${s}%,${l}%${1 === opacity ? ")" : `,${opacity})`}`;
    }
    toString() {
        return this.formatHex();
    }
}

exports.RGB = RGB;
//# sourceMappingURL=Color.js.map