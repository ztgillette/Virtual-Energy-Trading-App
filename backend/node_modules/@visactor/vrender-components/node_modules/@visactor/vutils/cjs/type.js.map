{"version":3,"sources":["../src/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["export type LooseFunction = (...args: any) => any;\nexport type Dict<T> = { [key: string]: T };\nexport type Maybe<T> = T | null | undefined;\n\nexport interface ILogger {\n  addErrorHandler: (handler: (...args: any[]) => void) => void;\n  removeErrorHandler: (handler: (...args: any[]) => void) => void;\n  canLogInfo: () => boolean;\n  canLogDebug: () => boolean;\n  canLogError: () => boolean;\n  canLogWarn: () => boolean;\n  level: (levelValue?: number) => this | number;\n  error: (...args: any[]) => this;\n  warn: (...args: any[]) => this;\n  info: (...args: any[]) => this;\n  debug: (...args: any[]) => this;\n}\n"]}