import isArray from "./isArray";

import isArrayLike from "./isArrayLike";

import isPlainObject from "./isPlainObject";

import isValid from "./isValid";

export function baseMerge(target, source, shallowArray = !1, skipTargetArray = !1) {
    if (source) {
        if (target === source) return;
        if (isValid(source) && "object" == typeof source) {
            const iterable = Object(source), props = [];
            for (const key in iterable) props.push(key);
            let {length: length} = props, propIndex = -1;
            for (;length--; ) {
                const key = props[++propIndex];
                !isValid(iterable[key]) || "object" != typeof iterable[key] || skipTargetArray && isArray(target[key]) ? assignMergeValue(target, key, iterable[key]) : baseMergeDeep(target, source, key, shallowArray, skipTargetArray);
            }
        }
    }
}

function baseMergeDeep(target, source, key, shallowArray = !1, skipTargetArray = !1) {
    const objValue = target[key], srcValue = source[key];
    let newValue = source[key], isCommon = !0;
    if (isArray(srcValue)) {
        if (shallowArray) newValue = []; else if (isArray(objValue)) newValue = objValue; else if (isArrayLike(objValue)) {
            newValue = new Array(objValue.length);
            let index = -1;
            const length = objValue.length;
            for (;++index < length; ) newValue[index] = objValue[index];
        }
    } else isPlainObject(srcValue) ? (newValue = null != objValue ? objValue : {}, "function" != typeof objValue && "object" == typeof objValue || (newValue = {})) : isCommon = !1;
    isCommon && baseMerge(newValue, srcValue, shallowArray, skipTargetArray), assignMergeValue(target, key, newValue);
}

function assignMergeValue(target, key, value) {
    (void 0 !== value && !eq(target[key], value) || void 0 === value && !(key in target)) && (target[key] = value);
}

function eq(value, other) {
    return value === other || Number.isNaN(value) && Number.isNaN(other);
}

export default function merge(target, ...sources) {
    let sourceIndex = -1;
    const length = sources.length;
    for (;++sourceIndex < length; ) {
        baseMerge(target, sources[sourceIndex], !0);
    }
    return target;
}
//# sourceMappingURL=merge.js.map
