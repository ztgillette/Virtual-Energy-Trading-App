{"version":3,"sources":["../src/data-structure/hashTable.ts"],"names":[],"mappings":"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","file":"hashTable.js","sourcesContent":["import type { LooseFunction } from '../type';\n\nexport class HashValue<T> {\n  index: number;\n  key: string;\n  value: T;\n}\n\n// 基于 array 和 object的 HashTable\nexport class HashTable<T> {\n  private items: { [key: string]: HashValue<T> };\n  private itemList: Array<HashValue<T>>;\n  constructor() {\n    this.items = {};\n    this.itemList = [];\n  }\n  get type() {\n    return 'xhHashTable';\n  }\n  set(key: string, value: T): HashValue<T> {\n    const vl = new HashValue<T>();\n    vl.key = key;\n    vl.value = value;\n    let index = this.itemList.length;\n    if (this.has(key)) {\n      index = this.items[key].index;\n    }\n    vl.index = index;\n    this.itemList[index] = vl;\n    this.items[key] = vl;\n    return vl;\n  }\n\n  clear() {\n    this.items = {};\n    this.itemList = [];\n  }\n  del(key: string): void {\n    if (this.has(key)) {\n      const index = this.items[key].index;\n      if (index > -1) {\n        this.itemList.splice(index, 1);\n      }\n      delete this.items[key];\n      this.resetIndex();\n    }\n  }\n\n  /**\n   * 不包含当前index\n   * @param index\n   */\n  delFrom(index: number) {\n    for (let i = index + 1; i < this.count(); i++) {\n      const key = this.itemList[i].key;\n      delete this.items[key];\n    }\n    this.itemList.splice(index + 1, this.count() - index);\n    this.resetIndex();\n  }\n\n  resetIndex(): void {\n    this.foreachHashv((k: any, v: HashValue<T>) => {\n      const index = this.itemList.indexOf(v);\n      this.items[k].index = index;\n    });\n  }\n\n  has(key: string): boolean {\n    return key in this.items;\n  }\n\n  get(key: string): T | null {\n    if (this.has(key)) {\n      return this.items[key].value;\n    }\n    return null;\n  }\n\n  count(): number {\n    return this.itemList.length;\n  }\n\n  all(): Array<T> {\n    return this.itemList.map(vl => {\n      return vl.value;\n    });\n  }\n  first(): T {\n    return this.itemList[0].value;\n  }\n  last(): T {\n    return this.itemList[this.itemList.length - 1].value;\n  }\n  getByIndex(index: number): T {\n    return this.itemList[index].value;\n  }\n\n  getKeyByIndex(index: number): string {\n    return this.itemList[index].key;\n  }\n\n  //遍历 扩展\n  foreach(callback: (key: string, value: T) => boolean | void) {\n    for (const key in this.items) {\n      const returnVal = callback(key, this.items[key].value);\n      if (returnVal === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n  private foreachHashv(callback: (key: string, value: HashValue<T>) => boolean | void) {\n    for (const key in this.items) {\n      const returnVal = callback(key, this.items[key]);\n      if (returnVal === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n  hasValue(value: any): boolean {\n    for (const key in this.items) {\n      if (this.items[key].value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n  //获取index\n  indexOf(key: any): number {\n    if (this.has(key)) {\n      return this.items[key].index;\n    }\n    return -1;\n  }\n\n  //插入\n  insertAt(index: number, value: T, key: string) {\n    const hashV = new HashValue<T>();\n\n    hashV.index = index;\n    hashV.key = key;\n    hashV.value = value;\n    this.itemList.splice(index, 0, hashV);\n    this.items[key] = hashV;\n    this.resetIndex();\n  }\n\n  sort(callback: LooseFunction) {\n    return this.itemList.sort((a: HashValue<T>, b: HashValue<T>) => {\n      return callback(a.value, b.value);\n    });\n  }\n  toArray(): Array<T> {\n    return this.itemList.slice(0, this.itemList.length).map(vl => {\n      return vl.value;\n    });\n  }\n  push(lists: HashTable<any>) {\n    lists.foreach((key: string, value: T) => {\n      this.set(key, value);\n    });\n  }\n  mapKey(): string[] {\n    const returnArr: string[] = [];\n    for (const key in this.items) {\n      returnArr.push(key);\n    }\n    return returnArr;\n  }\n\n  toImmutableMap() {\n    // do nothing\n  }\n}\n"]}