{"version":3,"sources":["../src/format/number/specifier.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAetC,MAAM,OAAO,eAAe;IAY1B,YAAY,YAA8B,EAAE;QAC1C,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,EAAE,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;QACxE,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,EAAE,CAAC;QACrE,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAC1E,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;QACtF,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,EAAE,CAAC;IACtE,CAAC;IAED,QAAQ;QACN,OAAO,CACL,IAAI,CAAC,IAAI;YACT,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,IAAI;YACT,IAAI,CAAC,MAAM;YACX,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACtB,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAC7D,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACvB,CAAC,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;YAC3E,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CACV,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,0EAA0E,CAAC;AAE7G,MAAM,UAAU,eAAe,CAAC,SAAiB;IAC/C,IAAI,KAAK,CAAC;IACV,IAAI,CAAC,CAAC,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;QACjD,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,kBAAkB,GAAG,SAAS,CAAC,CAAC;QAC3D,OAAO;KACR;IACD,OAAO,IAAI,eAAe,CAAC;QACzB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACd,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACf,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACd,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QAChB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACd,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACf,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACf,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACxC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACd,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC;KAChB,CAAC,CAAC;AACL,CAAC","file":"specifier.js","sourcesContent":["import { Logger } from '../../logger';\n\nexport interface IFormatSpecifier {\n  fill?: string | undefined;\n  align?: string | undefined;\n  sign?: string | undefined;\n  symbol?: string | undefined;\n  zero?: string | undefined;\n  width?: string | undefined;\n  comma?: string | undefined;\n  precision?: string | undefined;\n  trim?: string | undefined;\n  type?: string | undefined;\n}\n\nexport class FormatSpecifier {\n  fill;\n  align;\n  sign;\n  symbol;\n  zero;\n  width;\n  comma;\n  precision;\n  trim;\n  type;\n\n  constructor(specifier: IFormatSpecifier = {}) {\n    this.fill = specifier.fill === undefined ? ' ' : specifier.fill + '';\n    this.align = specifier.align === undefined ? '>' : specifier.align + '';\n    this.sign = specifier.sign === undefined ? '-' : specifier.sign + '';\n    this.symbol = specifier.symbol === undefined ? '' : specifier.symbol + '';\n    this.zero = !!specifier.zero;\n    this.width = specifier.width === undefined ? undefined : +specifier.width;\n    this.comma = !!specifier.comma;\n    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n    this.trim = !!specifier.trim;\n    this.type = specifier.type === undefined ? '' : specifier.type + '';\n  }\n\n  toString() {\n    return (\n      this.fill +\n      this.align +\n      this.sign +\n      this.symbol +\n      (this.zero ? '0' : '') +\n      (this.width === undefined ? '' : Math.max(1, this.width | 0)) +\n      (this.comma ? ',' : '') +\n      (this.precision === undefined ? '' : '.' + Math.max(0, this.precision | 0)) +\n      (this.trim ? '~' : '') +\n      this.type\n    );\n  }\n}\n\nexport const numberSpecifierReg = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport function formatSpecifier(specifier: string) {\n  let match;\n  if (!(match = numberSpecifierReg.exec(specifier))) {\n    Logger.getInstance().error('invalid format: ' + specifier);\n    return;\n  }\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n"]}