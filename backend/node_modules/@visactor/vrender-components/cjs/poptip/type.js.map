{"version":3,"sources":["../src/poptip/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["import type {\n  IGraphic,\n  IGroupGraphicAttribute,\n  IRectGraphicAttribute,\n  ISymbolGraphicAttribute,\n  ITextGraphicAttribute\n} from '@visactor/vrender-core';\nimport type { Padding, State } from '../core/type';\nimport type { BackgroundAttributes } from '../interface';\nimport type { IAABBBoundsLike } from '@visactor/vutils';\n\ntype StateStyle = {\n  /**\n   * title 文本的状态配置\n   */\n  title?: State<Partial<ITextGraphicAttribute>>;\n  /**\n   * content 文本的状态配置\n   */\n  content?: State<Partial<ITextGraphicAttribute>>;\n  /**\n   * panel 背景的状态配置ß\n   */\n  panel?: State<Partial<IRectGraphicAttribute>>;\n};\n\nexport type PopTipAttributes = {\n  /**\n   * 弹出框的方位，有 12 个方位可供选择\n   */\n  position?:\n    | 'auto'\n    | 'top'\n    | 'tl'\n    | 'tr'\n    | 'bottom'\n    | 'bl'\n    | 'br'\n    | 'left'\n    | 'lt'\n    | 'lb'\n    | 'right'\n    | 'rt'\n    | 'rb'\n    | string[];\n  /**\n   * @since 0.22.7\n   * 锚点，默认是position，即锚点在position的位置，如果设置为bounds，则锚点会基于bounds进行计算\n   */\n  poptipAnchor?: 'position' | 'bounds';\n  /**\n   * @since 0.22.7\n   * 布局的包围盒\n   * positionBounds 是定位的包围盒，如果配置了的话\n   * position为'top' | 'tl' | 'tr': 锚点为positionBounds的上方中间位置\n   * position为'bottom' | 'bl' | 'br': 锚点为positionBounds的下方中间位置\n   * position为'left' | 'lt' | 'lb': 锚点为positionBounds的左侧中间位置\n   * position为'right' | 'rt' | 'rb': 锚点为positionBounds的右侧中间位置\n   */\n  positionBounds?: IAABBBoundsLike;\n  /**\n   * 标题内容，如果需要进行换行，则使用数组形式，如 ['abc', '123']\n   */\n  title?: string | string[] | number | number[];\n  /**\n   * 标题样式\n   */\n  titleStyle?: Partial<ITextGraphicAttribute>;\n  /**\n   * 标题的格式化方法\n   */\n  titleFormatMethod?: (t: string | string[] | number | number[]) => string | string[] | number | number[];\n  /**\n   * 内容文本，如果需要进行换行，则使用数组形式，如 ['abc', '123']\n   */\n  content?: string | string[] | number | number[];\n  /**\n   * 内容文本样式\n   */\n  contentStyle?: Partial<ITextGraphicAttribute>;\n  /**\n   * 内容的格式化方法\n   */\n  contentFormatMethod?: (t: string | string[] | number | number[]) => string | string[] | number | number[];\n  /**\n   * 标题与内容的间距\n   */\n  space?: number;\n  /**\n   * 内部边距\n   */\n  padding?: Padding;\n  /**\n   * 标签的背景面板配置, TODO: 支持symbol形状\n   * space: 与位置之间的距离\n   * square: 是否是正方形\n   */\n  panel?: BackgroundAttributes &\n    ISymbolGraphicAttribute & { space?: number; square?: boolean; panelSymbolType?: string };\n\n  // 标签三角的模式，默认是default，即默认的三角形状，concise是紧凑型三角形状显得更简洁\n  // @since 0.22.0\n  triangleMode?: 'default' | 'concise';\n\n  // 放置在poptip前方的logo区域\n  logoSymbol?: ISymbolGraphicAttribute;\n  // logo内的text\n  logoText?: string | string[] | number | number[];\n  // logo内的text样式\n  logoTextStyle?: Partial<ITextGraphicAttribute>;\n\n  /**\n   * 最小宽度，像素值\n   * @default 30\n   */\n  minWidth?: number;\n  /**\n   * 最大宽度，像素值。当文字超过最大宽度时，会自动省略。\n   */\n  maxWidth?: number;\n\n  /**\n   * 最大宽度比例\n   */\n  maxWidthPercent?: number;\n  /**\n   * 是否展示\n   */\n  visible?: boolean;\n  /**\n   * 自定义的展示逻辑\n   */\n  visibleFunc?: (graphic: IGraphic) => boolean;\n  state?: StateStyle;\n  dx?: number;\n  dy?: number;\n} & Omit<IGroupGraphicAttribute, 'background'>;\n\nexport type PoptipShapeAttributes = {\n  /**\n   * 是否展示 shape\n   */\n  visible: boolean;\n} & Partial<ISymbolGraphicAttribute>;\n"]}