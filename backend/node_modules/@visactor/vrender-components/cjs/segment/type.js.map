{"version":3,"sources":["../src/segment/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["import type {\n  IArcGraphicAttribute,\n  IGraphicAttribute,\n  IGroupGraphicAttribute,\n  ILineGraphicAttribute,\n  ISymbolGraphicAttribute,\n  SymbolType\n} from '@visactor/vrender-core';\nimport type { Point, State } from '../core/type';\n\nexport type SymbolAttributes = {\n  /** 是否展示 symbol */\n  visible: boolean;\n  /**\n   * symbol 形状，默认为带左右方向的箭头\n   */\n  symbolType?: SymbolType;\n  /**\n   * symbol 大小\n   */\n  size?: number;\n  /**\n   * 自动旋转，沿着线的方向，默认 true\n   */\n  autoRotate?: boolean;\n  /**\n   * symbol 相对line平行方向上的偏移\n   */\n  refX?: number;\n  /**\n   * symbol 相对line正交方向上的偏移\n   */\n  refY?: number;\n  /**\n   * symbol 相对默认角度的偏移\n   * @description (@chensiji: 默认角度为笛卡尔坐标系y正方向，即默认symbol包围盒的角度为笛卡尔坐标系y正方向, 做自动旋转时, 会在此基础上，将包围盒转换到line平行方向上。)\n   */\n  refAngle?: number;\n  /**\n   * symbol 是否clip line，即当symbol fill为false时，line在symbol内部的部分是否展示\n   * @defalut false\n   */\n  clip?: boolean;\n  /**\n   * symbol 样式配置\n   */\n  style?: Partial<IGraphicAttribute>;\n};\n\nexport interface CommonSegmentAttributes extends IGroupGraphicAttribute {\n  /**\n   * 可见性\n   * @default true\n   */\n  visible?: boolean;\n  /** 轴线起始点 symbol 配置 */\n  startSymbol?: SymbolAttributes;\n  /** 轴线末端 symbol 配置 */\n  endSymbol?: SymbolAttributes;\n}\nexport interface SegmentAttributes extends CommonSegmentAttributes {\n  /**\n   * 是否对 points 进行多段处理，默认为 false，即直接将所有的点连接成线。\n   * 如果需要进行多段处理，需要将 points 属性配置为 Point[][] 类型\n   * @default false\n   */\n  multiSegment?: boolean;\n  /**\n   * 在 `multiSegment` 属性开启的前提下，用于声明那一段线段用来作为主线段，如果不声明，默认全段为主线段\n   */\n  mainSegmentIndex?: number;\n  points: Point[] | Point[][];\n  /**\n   * 线样式配置\n   */\n  lineStyle?: ILineGraphicWithCornerRadius | Partial<ILineGraphicAttribute>[];\n  /**\n   * 图元状态\n   */\n  state?: {\n    line?: State<ILineGraphicWithCornerRadius | Partial<ILineGraphicAttribute>[]>;\n    symbol?: State<Partial<ISymbolGraphicAttribute>>;\n    startSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n    endSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n  };\n}\n\nexport interface ArcSegmentAttributes extends CommonSegmentAttributes {\n  /**\n   * 弧线中心位置\n   */\n  center: {\n    x: number;\n    y: number;\n  };\n  /**\n   * 弧线半径\n   */\n  radius: number;\n  /**\n   * 弧线起始角度（弧度）\n   */\n  startAngle: number;\n  /**\n   * 弧线终点角度（弧度）\n   */\n  endAngle: number;\n  /**\n   * 线样式配置\n   */\n  lineStyle?: IArcGraphicAttribute;\n  /**\n   * 图元状态\n   */\n  state?: {\n    line?: State<IArcGraphicAttribute>;\n    symbol?: State<Partial<ISymbolGraphicAttribute>>;\n    startSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n    endSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n  };\n}\n\nexport interface ILineGraphicWithCornerRadius extends Partial<ILineGraphicAttribute> {\n  /**\n   * 折现拐角处的圆角配置\n   */\n  cornerRadius?: number;\n}\n"]}