{"version":3,"sources":["../src/player/continuous-player.ts"],"names":[],"mappings":"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","file":"continuous-player.js","sourcesContent":["import type { FederatedPointerEvent } from '@visactor/vrender-core';\nimport { vglobal } from '@visactor/vrender-core';\nimport { BasePlayer } from './base-player';\nimport type { ContinuousPlayerAttributes } from './type';\nimport { PlayerEventEnum } from './type';\nimport { ControllerEventEnum } from './controller/constant';\nimport { loadContinuousPlayerComponent } from './register';\n\nloadContinuousPlayerComponent();\nexport class ContinuousPlayer extends BasePlayer<ContinuousPlayerAttributes> {\n  declare attribute: ContinuousPlayerAttributes;\n\n  private _activeIndex: number;\n\n  protected _alternate: boolean;\n  protected _interval: number;\n  protected _totalDuration: number;\n\n  private _isPlaying = false;\n  private _startTime: number = Date.now();\n  private _elapsed: number;\n  private _rafId: number;\n\n  constructor(attributes: ContinuousPlayerAttributes) {\n    super(attributes);\n\n    this._initAttributes();\n    this._initDataIndex();\n    this._initEvents();\n  }\n\n  /**\n   * 初始化属性\n   */\n  _initAttributes = () => {\n    super._initAttributes();\n    // 新增一个占位数据\n    this._maxIndex = this._data.length;\n    this._slider.setAttribute('max', this._maxIndex);\n\n    this._isPlaying = false;\n    this._elapsed = 0;\n    this._interval = this.attribute.interval ?? 1000;\n\n    // 播放帧数(10条数据, 需要10个播放帧)\n    const frames = this._data.length;\n\n    // 若用户配置了总时长\n    if (this.attribute.totalDuration && this._data.length) {\n      this._totalDuration = this.attribute.totalDuration;\n      // 避免除0\n      this._interval = this._totalDuration / (frames ?? 1);\n    }\n    // 若未配置总时长, 则根据interval算出一个总时长, interval有默认值\n    else {\n      this._totalDuration = this._interval * frames;\n      this._interval = this.attribute.interval;\n    }\n  };\n\n  /**\n   * 初始化dataIndex\n   */\n  _initDataIndex = () => {\n    this._dataIndex = this.attribute.dataIndex ?? this._minIndex;\n  };\n\n  /**\n   * 初始化事件\n   */\n  private _initEvents = () => {\n    if (this.attribute.disableTriggerEvent) {\n      return;\n    }\n    this._controller.addEventListener(ControllerEventEnum.OnPlay, (e: FederatedPointerEvent) => {\n      e.stopPropagation();\n      this.play();\n    });\n    this._controller.addEventListener(ControllerEventEnum.OnPause, (e: FederatedPointerEvent) => {\n      e.stopPropagation();\n      this.pause();\n    });\n    this._controller.addEventListener(ControllerEventEnum.OnForward, (e: FederatedPointerEvent) => {\n      e.stopPropagation();\n      this.forward();\n    });\n    this._controller.addEventListener(ControllerEventEnum.OnBackward, (e: FederatedPointerEvent) => {\n      e.stopPropagation();\n      this.backward();\n    });\n\n    this._slider.addEventListener('change', (e: FederatedPointerEvent) => {\n      e.stopPropagation();\n      /**\n       * 根据value, 反推开始时间\n       * 1. 计算进度\n       * 2. 计算流逝时间\n       * 3. 用现在的时间, 模拟一个开始时间\n       */\n      const value = (e.detail as unknown as { value: number; position: number })?.value;\n      const progress = value / this._maxIndex;\n      this._elapsed = progress * this._totalDuration;\n      this._startTime = Date.now() - this._elapsed;\n\n      this._dispatchChange(value);\n    });\n  };\n\n  /**\n   * 根据已流逝时间和总时长, 计算slider的值\n   */\n  private _getSliderValue = () => {\n    const progress = this._elapsed / this._totalDuration;\n    return Math.min(progress * this._maxIndex, this._maxIndex);\n  };\n\n  /**\n   * 根据流逝时间, 更新Slider的值\n   */\n  private _updateSlider = () => {\n    const value = this._getSliderValue();\n    this._dataIndex = Math.floor(value);\n    this._slider.setValue(Math.min(value, this._maxIndex));\n    this._dispatchChange(Math.floor(value));\n  };\n\n  /**\n   * 根据Slider的值, 判断是否要触发Change事件.\n   */\n  private _dispatchChange = (value: number) => {\n    const index = Math.floor(value);\n    if (index !== this._activeIndex) {\n      this._dataIndex = index;\n      this._activeIndex = index;\n\n      if (index !== this._maxIndex) {\n        this.dispatchCustomEvent(PlayerEventEnum.change);\n      }\n    }\n  };\n\n  /**\n   * 派遣事件\n   * @param eventType 事件类型\n   */\n  dispatchCustomEvent(eventType: PlayerEventEnum) {\n    super.dispatchCustomEvent(eventType, this._dataIndex);\n  }\n\n  /**\n   * 播放接口\n   */\n  play = async () => {\n    if (this._isPlaying) {\n      return;\n    }\n    // 切换按钮\n    this._controller.togglePause();\n    // 播放状态更新\n    this._isPlaying = true;\n    // 播放结束后再点击play, 此条件下生效.\n    if (this._elapsed >= this._totalDuration) {\n      this._elapsed = 0;\n    }\n    // 此时此刻减去已流逝的时间, 则为起点对应的时间戳.\n    this._startTime = Date.now() - this._elapsed;\n    // 事件\n    this.dispatchCustomEvent(PlayerEventEnum.play);\n    // 开始播放动画\n    this._rafId = vglobal.getRequestAnimationFrame()(this._play.bind(this));\n  };\n\n  /**\n   * 播放动画主要逻辑\n   */\n  private _play = () => {\n    // 计算已流逝的时间, 但不需要保存\n    this._elapsed = Date.now() - this._startTime;\n    // 计算Slider的值.\n    const value = this._getSliderValue();\n    // 更新Slider的值.\n    this._updateSlider();\n\n    // 播放终止条件\n    if (value >= this._maxIndex) {\n      this._playEnd();\n      return;\n    }\n\n    // 持续播放\n    this._rafId = vglobal.getRequestAnimationFrame()(this._play.bind(this));\n  };\n\n  /**\n   * 播放结束时触发\n   */\n  private _playEnd = () => {\n    // 播放状态更新\n    this._isPlaying = false;\n    // 取消播放动画\n    vglobal.getCancelAnimationFrame()(this._rafId);\n    // 切换按钮\n    this._controller.togglePlay();\n    // 事件\n    this.dispatchCustomEvent(PlayerEventEnum.end);\n  };\n\n  /**\n   * 暂停接口\n   */\n  pause = () => {\n    if (!this._isPlaying) {\n      return;\n    }\n    this._isPlaying = false;\n    // 计算已流逝的时间, 需要记录下来\n    this._elapsed = Date.now() - this._startTime;\n    vglobal.getCancelAnimationFrame()(this._rafId);\n    this._controller.togglePlay();\n\n    this.dispatchCustomEvent(PlayerEventEnum.pause);\n  };\n\n  /**\n   * 前进接口\n   */\n  backward = () => {\n    // 按下按钮的时间\n    const now = Date.now();\n    // 步长\n    const interval = this._interval * 1;\n    // 流逝时间 减去 interval\n    const elapsed = this._elapsed - interval;\n\n    // 若到达起点\n    if (elapsed <= 0) {\n      this._elapsed = 0;\n      this._startTime = now;\n    }\n    // 若未到达起点\n    else {\n      this._elapsed = elapsed;\n      this._startTime = this._startTime + this._interval;\n    }\n    // 更新slider\n    this._updateSlider();\n\n    this.dispatchCustomEvent(PlayerEventEnum.backward);\n  };\n\n  /**\n   * 后退接口\n   */\n  forward = () => {\n    // 按下按钮的时间\n    const now = Date.now();\n    // 步长\n    const interval = this._interval * 1;\n    // 流逝时间 加上 1个interval\n    const elapsed = this._elapsed + interval;\n    // 若超过终点\n    if (elapsed >= this._totalDuration) {\n      this._startTime = now - this._totalDuration;\n      this._elapsed = this._totalDuration;\n    }\n    // 未超过终点\n    else {\n      this._startTime = this._startTime - interval;\n      this._elapsed = elapsed;\n    }\n    // 更新slider\n    this._updateSlider();\n\n    this.dispatchCustomEvent(PlayerEventEnum.forward);\n  };\n\n  render() {\n    super.render();\n  }\n}\n"]}