{"version":3,"sources":["../src/marker/type.ts"],"names":[],"mappings":";;;AAmBA,IAAY,sBAkBX;AAlBD,WAAY,sBAAsB;IAChC,yCAAe,CAAA;IACf,+CAAqB,CAAA;IACrB,qDAA2B,CAAA;IAC3B,qDAA2B,CAAA;IAC3B,2DAAiC,CAAA;IACjC,iEAAuC,CAAA;IAEvC,2CAAiB,CAAA;IACjB,6DAAmC,CAAA;IACnC,mEAAyC,CAAA;IAEzC,qCAAW,CAAA;IACX,2CAAiB,CAAA;IACjB,iDAAuB,CAAA;IACvB,iDAAuB,CAAA;IACvB,uDAA6B,CAAA;IAC7B,6DAAmC,CAAA;AACrC,CAAC,EAlBW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAkBjC;AAED,IAAY,sBAoBX;AApBD,WAAY,sBAAsB;IAChC,uCAAa,CAAA;IACb,yCAAe,CAAA;IACf,qCAAW,CAAA;IACX,2CAAiB,CAAA;IACjB,6CAAmB,CAAA;IACnB,+CAAqB,CAAA;IACrB,mDAAyB,CAAA;IACzB,qDAA2B,CAAA;IAE3B,2CAAiB,CAAA;IAEjB,mDAAyB,CAAA;IACzB,qDAA2B,CAAA;IAC3B,iDAAuB,CAAA;IACvB,uDAA6B,CAAA;IAC7B,yDAA+B,CAAA;IAC/B,2DAAiC,CAAA;IACjC,+DAAqC,CAAA;IACrC,iEAAuC,CAAA;AACzC,CAAC,EApBW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAoBjC;AAED,IAAY,2BAQX;AARD,WAAY,2BAA2B;IACrC,8DAA+B,CAAA;IAC/B,0DAA2B,CAAA;IAC3B,gEAAiC,CAAA;IACjC,8DAA+B,CAAA;IAC/B,0DAA2B,CAAA;IAC3B,gEAAiC,CAAA;IACjC,gDAAiB,CAAA;AACnB,CAAC,EARW,2BAA2B,GAA3B,mCAA2B,KAA3B,mCAA2B,QAQtC;AAED,IAAY,sBAOX;AAPD,WAAY,sBAAsB;IAChC,qCAAW,CAAA;IACX,2CAAiB,CAAA;IACjB,2CAAiB,CAAA;IACjB,iDAAuB,CAAA;IACvB,uDAA6B,CAAA;IAC7B,uDAA6B,CAAA;AAC/B,CAAC,EAPW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAOjC","file":"type.js","sourcesContent":["import type {\n  EasingType,\n  IArcGraphicAttribute,\n  IGroup,\n  IGroupGraphicAttribute,\n  IImageGraphicAttribute,\n  ILineGraphicAttribute,\n  IPolygonAttribute,\n  IPolygonGraphicAttribute,\n  IRectGraphicAttribute,\n  IRichTextGraphicAttribute,\n  ISymbol,\n  ISymbolGraphicAttribute,\n  ITextGraphicAttribute\n} from '@visactor/vrender-core';\nimport type { CommonSegmentAttributes, ILineGraphicWithCornerRadius, SegmentAttributes } from '../segment/type';\nimport type { TagAttributes } from '../tag/type';\nimport type { Point, State } from '../core/type';\n\nexport enum IMarkLineLabelPosition {\n  start = 'start',\n  startTop = 'startTop',\n  startBottom = 'startBottom',\n  insideStart = 'insideStart',\n  insideStartTop = 'insideStartTop',\n  insideStartBottom = 'insideStartBottom',\n\n  middle = 'middle',\n  insideMiddleTop = 'insideMiddleTop',\n  insideMiddleBottom = 'insideMiddleBottom',\n\n  end = 'end',\n  endTop = 'endTop',\n  endBottom = 'endBottom',\n  insideEnd = 'insideEnd',\n  insideEndTop = 'insideEndTop',\n  insideEndBottom = 'insideEndBottom'\n}\n\nexport enum IMarkAreaLabelPosition {\n  left = 'left',\n  right = 'right',\n  top = 'top',\n  bottom = 'bottom',\n  topLeft = 'topLeft',\n  topRight = 'topRight',\n  bottomLeft = 'bottomLeft',\n  bottomRight = 'bottomRight',\n\n  middle = 'middle',\n\n  insideLeft = 'insideLeft',\n  insideRight = 'insideRight',\n  insideTop = 'insideTop',\n  insideBottom = 'insideBottom',\n  insideTopLeft = 'insideTopLeft',\n  insideTopRight = 'insideTopRight',\n  insideBottomLeft = 'insideBottomLeft',\n  insideBottomRight = 'insideBottomRight'\n}\n\nexport enum IMarkCommonArcLabelPosition {\n  arcInnerStart = 'arcInnerStart',\n  arcInnerEnd = 'arcInnerEnd',\n  arcInnerMiddle = 'arcInnerMiddle',\n  arcOuterStart = 'arcOuterStart',\n  arcOuterEnd = 'arcOuterEnd',\n  arcOuterMiddle = 'arcOuterMiddle',\n  center = 'center'\n}\n\nexport enum IMarkPointItemPosition {\n  top = 'top',\n  bottom = 'bottom',\n  middle = 'middle',\n  insideTop = 'insideTop',\n  insideBottom = 'insideBottom',\n  insideMiddle = 'insideMiddle'\n}\n\nexport type IMarkBackgroundAttributes = {\n  /**\n   * 是否绘制背景层\n   */\n  visible: boolean;\n  /**\n   * TODO: 根据文字宽度进行背景 panel size自适应\n   */\n  autoHeight?: boolean;\n  /**\n   * TODO: 根据文高度度进行背景 panel size自适应\n   */\n  autoWidth?: boolean;\n} & Partial<IRectGraphicAttribute>;\n\nexport type IMarkLabel = Omit<TagAttributes, 'x' | 'y' | 'panel'> & {\n  /**\n   * 标签的背景面板配置\n   */\n  panel?: IMarkBackgroundAttributes;\n};\n\nexport type IMarkRef = {\n  /**\n   * 自动旋转，沿着线的方向\n   * @default\n   * mark-line/mark-area/mark-point: false - 旧逻辑里autoRotate是false, 保持不变\n   * mark-arc-line/mark-arc-area: true - 新增逻辑, 如果不开启的话, 效果不太好, 所以默认true\n   * mark-point - 旧逻辑里autoRotate是true, 保持不变\n   */\n  autoRotate?: boolean;\n  /**\n   * label 相对line平行方向上的偏移\n   */\n  refX?: number;\n  /**\n   * label 相对line正交方向上的偏移\n   */\n  refY?: number;\n  /**\n   * label 相对默认角度的偏移 （label跟随line的角度做自动旋转时，默认按照line的平行向量作为初始角度）\n   */\n  refAngle?: number;\n};\n\nexport type MarkerAttrs<AnimationType> = IGroupGraphicAttribute & {\n  /**\n   * 设置标注的类型\n   */\n  type?: 'line' | 'arc-line' | 'area' | 'arc-area' | 'point';\n  /**\n   * 是否支持交互\n   * @default true\n   */\n  interactive?: boolean;\n  /**\n   * 是否开启选中交互\n   * @default false\n   */\n  select?: boolean;\n  /**\n   * 是否开启 hover 交互\n   * @default false\n   */\n  hover?: boolean;\n  /**\n   * 是否显示marker组件\n   * @default true\n   */\n  visible?: boolean;\n  /**\n   * 是否将组件在绘制区域内进行剪切\n   * @default true\n   */\n  clipInRange?: boolean;\n  /**\n   * 组件绘制范围配置\n   */\n  limitRect?: {\n    /**\n     * 绘制范围的起点x坐标\n     */\n    x: number;\n    /**\n     * 绘制范围的起点y坐标\n     */\n    y: number;\n    /**\n     * 绘制范围的宽度\n     */\n    width: number;\n    /**\n     * 绘制范围的高度\n     */\n    height: number;\n  };\n} & BaseMarkerAnimation<AnimationType>;\n\n/** animation type */\nexport type BaseMarkerAnimation<T> = {\n  /**\n   * 动画公共配置\n   */\n  animation?: MarkerAnimation<T> | boolean;\n  /**\n   * 入场动画配置\n   */\n  animationEnter?: MarkerUpdateAnimation<T>;\n  /**\n   * 更新动画配置\n   */\n  animationUpdate?: MarkerUpdateAnimation<T>;\n  /**\n   * 离场动画配置\n   */\n  animationExit?: MarkerExitAnimation;\n};\nexport type MarkerAnimation<T> = MarkerUpdateAnimation<T> | MarkerUpdateAnimation<T>;\n\nexport type MarkerUpdateAnimation<T> = {\n  /**\n   * 设置动画的类型\n   */\n  type: T;\n} & MarkerExitAnimation;\n\nexport type MarkCommonLineAnimationType = 'clipIn' | 'fadeIn';\n\nexport type CommonMarkAreaAnimationType = 'fadeIn';\n\nexport type MarkPointAnimationType = 'callIn' | 'fadeIn';\n\nexport type MarkerExitAnimation = {\n  /**\n   * 设置离场动画的类型为fadeOut，即淡出\n   */\n  type: 'fadeOut';\n  /**\n   * 动画的时长\n   */\n  duration?: number;\n  /**\n   * 动画延迟的时长\n   */\n  delay?: number;\n  /**\n   * 动画的缓动函数\n   */\n  easing?: EasingType;\n};\n\nexport type MarkerAnimationState = 'enter' | 'update' | 'exit';\n\n/** state type */\nexport type MarkCommonLineState<LineAttr> = {\n  /**\n   * 设置线图形的在特定状态下的样式\n   */\n  line?: State<LineAttr>;\n  /**\n   * 设置线的起点在特定状态下的样式\n   */\n  lineStartSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n  /**\n   * 设置线的终点在特定状态下的样式\n   */\n  lineEndSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n  /**\n   * 设置标签在特定状态下的样式\n   * 自 0.22.7 版本开始，支持多标签配置\n   */\n  label?: State<Partial<ITextGraphicAttribute>> | State<Partial<ITextGraphicAttribute>>[];\n  /**\n   * 设置标签背景区块在特定状态下的样式\n   */\n  labelBackground?: State<Partial<IRectGraphicAttribute>> | State<Partial<IRectGraphicAttribute>>[];\n};\n\nexport type CommonMarkAreaState<AreaAttr> = {\n  /**\n   * 设置标注区域在特定状态下的样式\n   */\n  area?: State<Partial<AreaAttr>>;\n  /**\n   * 设置标注区域标签在特定状态下的样式\n   * 自 0.22.7 版本开始，支持多标签配置\n   */\n  label?: State<Partial<ITextGraphicAttribute>> | State<Partial<ITextGraphicAttribute>>[];\n  /**\n   * 设置标签背景区块在特定状态下的样式\n   */\n  labelBackground?: State<Partial<IRectGraphicAttribute>> | State<Partial<IRectGraphicAttribute>>[];\n};\n\nexport type MarkPointState = {\n  /**\n   * 设置标注点连线在特定状态下的样式\n   */\n  line?: State<ILineGraphicWithCornerRadius | Partial<ILineGraphicAttribute>[]>;\n  /**\n   * 设置线起点图形在特定状态下的样式\n   */\n  lineStartSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n  /**\n   * 设置线终点图形在特定状态下的样式\n   */\n  lineEndSymbol?: State<Partial<ISymbolGraphicAttribute>>;\n  /**\n   * 设置标签背景区块在特定状态下的样式\n   */\n  textBackground?: State<Partial<IRectGraphicAttribute>>;\n  /**\n   * 设置目标元素在特定状态下的样式\n   */\n  targetItem?: State<Partial<ISymbolGraphicAttribute>>;\n  /**\n   * 设置content在特定状态下的样式\n   * 等价于原来的 symbol | image | text | richText | customMark\n   */\n  itemContent?: State<\n    | Partial<ISymbolGraphicAttribute>\n    | Partial<IImageGraphicAttribute>\n    | Partial<ITextGraphicAttribute>\n    | Partial<IGroupGraphicAttribute>\n  >;\n};\n\nexport type MarkerLineLabelAttrs<LineLabelPosition> = {\n  /**\n   * label 相对line的位置\n   */\n  position?: LineLabelPosition;\n  /**\n   * 当 mark 配置了 limitRect 之后，label 是否自动调整位置\n   * @default false\n   */\n  confine?: boolean;\n} & IMarkRef &\n  IMarkLabel;\n\nexport type MarkCommonLineAttrs<LineAttr, LineLabelPosition, MarkCommonLineAnimationType> =\n  MarkerAttrs<MarkCommonLineAnimationType> &\n    Omit<CommonSegmentAttributes, 'state' | 'lineStyle'> & {\n      /**\n       * 标签\n       * 自 0.22.7 版本开始，支持多标签配置\n       */\n      label?: MarkerLineLabelAttrs<LineLabelPosition> | MarkerLineLabelAttrs<LineLabelPosition>[];\n      /**\n       * 辅助线各种状态下的样式\n       */\n      state?: MarkCommonLineState<LineAttr>;\n    };\n\nexport type MarkLineAttrs = MarkCommonLineAttrs<\n  ILineGraphicWithCornerRadius | ILineGraphicAttribute[],\n  keyof typeof IMarkLineLabelPosition,\n  MarkCommonLineAnimationType\n> & {\n  /**\n   * 将辅助线的类型设置为 'line'\n   */\n  type?: 'line';\n  /**\n   * 是否对 points 进行多段处理，默认为 false，即直接将所有的点连接成线。\n   * 如果需要进行多段处理，需要将 points 属性配置为 Point[][] 类型\n   * @default false\n   */\n  multiSegment?: boolean;\n  /**\n   * 在 `multiSegment` 属性开启的前提下，用于声明那一段线段用来作为主线段，如果不声明，默认全段为主线段\n   */\n  mainSegmentIndex?: number;\n  /**\n   * 构成line的点: 如果是两个点，则为直线；多个点则为折线\n   */\n  points: Point[] | Point[][];\n  /**\n   * 线的样式设置\n   */\n  lineStyle?: ILineGraphicAttribute;\n};\n\nexport type MarkArcLineAttrs = MarkCommonLineAttrs<\n  IArcGraphicAttribute,\n  keyof typeof IMarkCommonArcLabelPosition,\n  MarkCommonLineAnimationType\n> & {\n  /**\n   * 将辅助线的类型设置为 'arc-line'，即弧线\n   */\n  type?: 'arc-line';\n  /**\n   * 弧线中心位置\n   */\n  center: {\n    x: number;\n    y: number;\n  };\n  /**\n   * 弧线半径\n   */\n  radius: number;\n  /**\n   * 弧线起始角度（弧度）\n   */\n  startAngle: number;\n  /**\n   * 弧线终点角度（弧度）\n   */\n  endAngle: number;\n  /**\n   * 设置弧线的样式\n   */\n  lineStyle?: IArcGraphicAttribute;\n};\n\nexport type MarkerAreaLabelAttrs = {\n  /**\n   * 设置标签的位置\n   */\n  position?: keyof typeof IMarkAreaLabelPosition;\n  /**\n   * 当 mark 配置了 limitRect 之后，label 是否自动调整位置\n   * @default false\n   */\n  confine?: boolean;\n} & IMarkLabel;\n\nexport type MarkAreaAttrs = MarkerAttrs<CommonMarkAreaAnimationType> & {\n  type?: 'area';\n  /**\n   * 构成area的点\n   */\n  points: Point[];\n  /**\n   * 标签\n   * 自 0.22.7 版本开始，支持多标签配置\n   */\n  label?: MarkerAreaLabelAttrs | MarkerAreaLabelAttrs[];\n  /**\n   * area的样式\n   */\n  areaStyle?: IPolygonAttribute;\n  /**\n   * 设置标注区域在各种状态下的样式\n   */\n  state?: CommonMarkAreaState<IPolygonGraphicAttribute>;\n};\n\nexport type MarkerArcAreaLabelAttrs = {\n  /**\n   * 标签的位置\n   */\n  position?: keyof typeof IMarkCommonArcLabelPosition;\n  /**\n   * 当 mark 配置了 limitRect 之后，label 是否自动调整位置\n   * @default false\n   */\n  confine?: boolean;\n} & IMarkRef &\n  IMarkLabel;\n\nexport type MarkArcAreaAttrs = MarkerAttrs<CommonMarkAreaAnimationType> & {\n  type?: 'arc-area';\n  /**\n   * 扇区中心位置\n   */\n  center: {\n    x: number;\n    y: number;\n  };\n  /**\n   * 扇区内半径\n   */\n  innerRadius: number;\n  /**\n   * 扇区外半径\n   */\n  outerRadius: number;\n  /**\n   * 扇区起始角度（弧度）\n   */\n  startAngle: number;\n  /**\n   * 扇区终点角度（弧度）\n   */\n  endAngle: number;\n  /**\n   * 标签\n   * 自 0.22.7 版本开始，支持多标签配置\n   */\n  label?: MarkerArcAreaLabelAttrs | MarkerArcAreaLabelAttrs[];\n  /**\n   * area的样式\n   */\n  areaStyle?: IArcGraphicAttribute;\n  /**\n   * 辅助区域这种状态下各个图元的样式设置\n   */\n  state?: CommonMarkAreaState<IArcGraphicAttribute>;\n};\n\nexport type IItemContent = IMarkRef & {\n  /**\n   * 标注类型\n   * Tips: 不保留'richText', 在vchart层做兼容\n   */\n  type?: 'symbol' | 'text' | 'image' | 'custom';\n  /**\n   * 设置标注的位置\n   */\n  position?: keyof typeof IMarkPointItemPosition;\n  /**\n   * x 方向偏移量\n   */\n  offsetX?: number;\n  /**\n   * y 方向偏移量\n   */\n  offsetY?: number;\n  /**\n   * item样式\n   */\n  style?: ISymbolGraphicAttribute | IImageGraphicAttribute | IMarkLabel;\n  /**\n   * type为custom时，允许以callback的方式传入需要render的item\n   */\n  renderCustomCallback?: () => IGroup;\n  /**\n   * 当 mark 配置了 limitRect 之后，label 是否自动调整位置\n   * @default false\n   */\n  confine?: boolean;\n};\n\nexport type IItemLine = {\n  /** TODO：'type-opo' */\n  type?: 'type-s' | 'type-do' | 'type-po' | 'type-op' | 'type-arc';\n  /**\n   * 是否展示该标注\n   */\n  visible?: boolean;\n  /**\n   * 当type为type-arc时生效, 数值决定曲率, 符号决定法向, 不能等于0\n   * @default 0.8\n   */\n  arcRatio?: number;\n  /**\n   * 垂直于引导线的装饰线，参考案例: https://observablehq.com/@mikelotis/edmonton-population-history-line-chart\n   */\n  decorativeLine?: {\n    /**\n     * 是否显示引导线的装饰线\n     */\n    visible?: boolean;\n    /**\n     * 装饰线的长度\n     */\n    length?: number;\n  };\n} & Omit<SegmentAttributes, 'points'>;\n\nexport type MarkPointAttrs = Omit<MarkerAttrs<MarkPointAnimationType>, 'labelStyle'> & {\n  /**\n   * markPoint的位置（也是path的起点）\n   */\n  position: Point;\n  /**\n   * 标注引导线\n   */\n  itemLine?: IItemLine;\n\n  /**\n   * 标注内容\n   */\n  itemContent?: IItemContent;\n\n  /**\n   * 被标注的内容\n   */\n  targetSymbol?: {\n    /**\n     * 被标注内容与标记线间的间隙\n     * @default 0\n     */\n    offset?: number;\n    /**\n     * 是否显示\n     * @default false\n     */\n    visible?: boolean;\n    /**\n     * 大小\n     * @default 20\n     */\n    size?: number;\n    /**\n     * 被标注内容的样式设置\n     */\n    style?: ISymbol;\n  };\n  /**\n   * 标注点各个状态下的样式\n   */\n  state?: MarkPointState;\n} & BaseMarkerAnimation<MarkPointAnimationType>;\n"]}