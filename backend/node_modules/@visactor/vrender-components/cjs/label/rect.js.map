{"version":3,"sources":["../src/label/rect.ts"],"names":[],"mappings":"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","file":"rect.js","sourcesContent":["import type { IBoundsLike } from '@visactor/vutils';\nimport { calculateAnchorOfBounds, merge } from '@visactor/vutils';\nimport type { RectLabelAttrs } from './type';\nimport { LabelBase } from './base';\nimport type { ComponentOptions } from '../interface';\nimport { registerLabelComponent } from './data-label-register';\n\nexport class RectLabel extends LabelBase<RectLabelAttrs> {\n  static tag = 'rect-label';\n\n  static defaultAttributes: Partial<RectLabelAttrs> = {\n    textStyle: {\n      fill: '#000'\n    },\n    position: 'top',\n    offset: 5\n  };\n\n  constructor(attributes: RectLabelAttrs, options?: ComponentOptions) {\n    const { data, ...restAttributes } = attributes;\n    super(options?.skipDefault ? attributes : { data, ...merge({}, RectLabel.defaultAttributes, restAttributes) });\n  }\n\n  protected labeling(textBounds: IBoundsLike, graphicBounds: IBoundsLike, position = 'top', offset = 0) {\n    if (!textBounds || !graphicBounds) {\n      return;\n    }\n\n    const { x1, y1, x2, y2 } = textBounds;\n    const width = Math.abs(x2 - x1);\n    const height = Math.abs(y2 - y1);\n\n    const { x: anchorX, y: anchorY } = calculateAnchorOfBounds(graphicBounds, position);\n\n    let vx = 0;\n    let vy = 0;\n\n    const isInside = position.includes('inside');\n\n    if (position.includes('top')) {\n      vy = isInside ? 1 : -1;\n    } else if (position.includes('bottom')) {\n      vy = isInside ? -1 : 1;\n    } else if (position.includes('left')) {\n      vx = isInside ? 1 : -1;\n    } else if (position.includes('right')) {\n      vx = isInside ? -1 : 1;\n    }\n\n    switch (position) {\n      case 'top-right':\n      case 'bottom-right':\n        vx = -1;\n        break;\n      case 'top-left':\n      case 'bottom-left':\n        vx = 1;\n        break;\n      default:\n        break;\n    }\n\n    const x = anchorX + vx * offset + (vx * width) / 2;\n    const y = anchorY + vy * offset + (vy * height) / 2;\n\n    return { x, y };\n  }\n}\n\nexport const registerRectDataLabel = () => {\n  registerLabelComponent('rect', RectLabel);\n};\n"]}