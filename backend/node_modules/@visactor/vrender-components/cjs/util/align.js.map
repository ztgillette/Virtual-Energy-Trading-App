{"version":3,"sources":["../src/util/align.ts"],"names":[],"mappings":";;;AAEA,SAAgB,eAAe,CAAC,MAAe,EAAE,KAAa,EAAE,aAAqB,EAAE,MAAc,EAAE,KAAa;IAClH,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,OAAO,EAAE;QAC3C,IAAI,KAAK,KAAK,MAAM,EAAE;YACpB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;gBACrB,KAAK,CAAC,aAAa,CAAC;oBAClB,EAAE,EAAE,CAAC,MAAA,KAAK,CAAC,SAAS,CAAC,EAAE,mCAAI,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;iBAC5D,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,KAAK,KAAK,OAAO,EAAE;YAC5B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;gBACrB,KAAK,CAAC,aAAa,CAAC;oBAClB,EAAE,EAAE,CAAC,MAAA,KAAK,CAAC,SAAS,CAAC,EAAE,mCAAI,CAAC,CAAC,GAAG,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;iBAC5E,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;gBACrB,KAAK,CAAC,aAAa,CAAC;oBAClB,EAAE,EAAE,CAAC,MAAA,KAAK,CAAC,SAAS,CAAC,EAAE,mCAAI,CAAC,CAAC,GAAG,KAAK,GAAG,aAAa,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC;iBAC5G,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;KACF;SAAM,IAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,KAAK,EAAE;QAClD,IAAI,KAAK,KAAK,KAAK,EAAE;YACnB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;gBACrB,KAAK,CAAC,aAAa,CAAC;oBAClB,EAAE,EAAE,CAAC,MAAA,KAAK,CAAC,SAAS,CAAC,EAAE,mCAAI,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;iBAC5D,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;gBACrB,KAAK,CAAC,aAAa,CAAC;oBAClB,EAAE,EAAE,CAAC,MAAA,KAAK,CAAC,SAAS,CAAC,EAAE,mCAAI,CAAC,CAAC,GAAG,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;iBAC5E,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;aAAM,IAAI,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;gBACrB,KAAK,CAAC,aAAa,CAAC;oBAClB,EAAE,EAAE,CAAC,MAAA,KAAK,CAAC,SAAS,CAAC,EAAE,mCAAI,CAAC,CAAC,GAAG,KAAK,GAAG,aAAa,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC;iBAC5G,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;KACF;AACH,CAAC;AA1CD,0CA0CC","file":"align.js","sourcesContent":["import type { IText } from '@visactor/vrender-core';\n\nexport function alignAxisLabels(labels: IText[], start: number, containerSize: number, orient: string, align: string) {\n  if (orient === 'left' || orient === 'right') {\n    if (align === 'left') {\n      labels.forEach(label => {\n        label.setAttributes({\n          dx: (label.attribute.dx ?? 0) + start - label.AABBBounds.x1\n        });\n      });\n    } else if (align === 'right') {\n      labels.forEach(label => {\n        label.setAttributes({\n          dx: (label.attribute.dx ?? 0) + start + containerSize - label.AABBBounds.x2\n        });\n      });\n    } else if (align === 'center') {\n      labels.forEach(label => {\n        label.setAttributes({\n          dx: (label.attribute.dx ?? 0) + start + containerSize / 2 - (label.AABBBounds.x1 + label.AABBBounds.x2) / 2\n        });\n      });\n    }\n  } else if (orient === 'bottom' || orient === 'top') {\n    if (align === 'top') {\n      labels.forEach(label => {\n        label.setAttributes({\n          dy: (label.attribute.dy ?? 0) + start - label.AABBBounds.y1\n        });\n      });\n    } else if (align === 'bottom') {\n      labels.forEach(label => {\n        label.setAttributes({\n          dy: (label.attribute.dy ?? 0) + start + containerSize - label.AABBBounds.y2\n        });\n      });\n    } else if (align === 'middle') {\n      labels.forEach(label => {\n        label.setAttributes({\n          dy: (label.attribute.dy ?? 0) + start + containerSize / 2 - (label.AABBBounds.y1 + label.AABBBounds.y2) / 2\n        });\n      });\n    }\n  }\n}\n"]}