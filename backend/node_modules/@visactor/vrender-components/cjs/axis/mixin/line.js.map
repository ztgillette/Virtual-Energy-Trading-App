{"version":3,"sources":["../src/axis/mixin/line.ts"],"names":[],"mappings":";;;AACA,qCAA8C;AAM9C,MAAa,aAAa;IACxB,cAAc,CAAC,KAAa;QAC1B,OAAO,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,YAAY,CAAC,SAAiB;QAC5B,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC5C,OAAO;YACL,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS;YACtC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS;SACvC,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,KAAa;QAC7B,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,iBAAiB,CAAC,MAAc,EAAE,MAAM,GAAG,KAAK,EAAE,KAAY;QAC5D,MAAM,EAAE,cAAc,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC5C,MAAM,oBAAoB,GAAG,IAAA,gBAAS,EAAC,UAAU,CAAC,CAAC;QACnD,MAAM,cAAc,GAAqB,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjG,OAAO,IAAA,YAAK,EAAC,cAAc,EAAE,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;IAC5E,CAAC;CACF;AA1BD,sCA0BC","file":"line.js","sourcesContent":["import type { Point } from '../../core/type';\nimport { normalize, scale } from '../../util';\n\nexport interface LineAxisMixin {\n  attribute: { start: Point; end: Point; verticalFactor?: number };\n}\n\nexport class LineAxisMixin {\n  isInValidValue(value: number) {\n    return value < 0 || value > 1;\n  }\n\n  getTickCoord(tickValue: number): Point {\n    const { start } = this.attribute;\n    const axisVector = this.getRelativeVector();\n    return {\n      x: start.x + axisVector[0] * tickValue,\n      y: start.y + axisVector[1] * tickValue\n    };\n  }\n\n  getRelativeVector(point?: Point): [number, number] {\n    const { start, end } = this.attribute;\n    return [end.x - start.x, end.y - start.y];\n  }\n\n  getVerticalVector(offset: number, inside = false, point: Point): [number, number] {\n    const { verticalFactor = 1 } = this.attribute;\n    const axisVector = this.getRelativeVector();\n    const normalizedAxisVector = normalize(axisVector);\n    const verticalVector: [number, number] = [normalizedAxisVector[1], normalizedAxisVector[0] * -1];\n    return scale(verticalVector, offset * (inside ? 1 : -1) * verticalFactor);\n  }\n}\n"]}