"use strict";

var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
    if (null != s && "function" == typeof Object.getOwnPropertySymbols) {
        var i = 0;
        for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
    }
    return t;
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.CircleAxisGrid = void 0;

const vutils_1 = require("@visactor/vutils"), base_1 = require("./base"), constant_1 = require("../../constant"), circle_1 = require("../mixin/circle"), register_1 = require("../register");

(0, register_1.loadCircleAxisGridComponent)();

class CircleAxisGrid extends base_1.BaseGrid {
    constructor(attributes, options) {
        super((null == options ? void 0 : options.skipDefault) ? attributes : (0, vutils_1.merge)({}, base_1.BaseGrid.defaultAttributes, attributes), options);
    }
    getGridPointsByValue(value) {
        const basePoint = this.getTickCoord(value), {radius: radius, innerRadius: innerRadius = 0} = this.attribute;
        return [ basePoint, this.getVerticalCoord(basePoint, radius - innerRadius, !0) ];
    }
    getGridAttribute(isSubGrid) {
        let gridAttribute, items = [];
        const _a = this.attribute, {radius: radius, innerRadius: innerRadius = 0, startAngle: startAngle = constant_1.POLAR_START_ANGLE, endAngle: endAngle = constant_1.POLAR_END_ANGLE, center: center, subGrid: subGrid} = _a, grid = __rest(_a, [ "radius", "innerRadius", "startAngle", "endAngle", "center", "subGrid" ]), {alignWithLabel: alignWithLabel = !0} = grid || {}, length = radius - innerRadius, tickSegment = this._parseTickSegment();
        if (isSubGrid) {
            gridAttribute = (0, vutils_1.merge)({}, grid, subGrid);
            const subGridItems = [], {count: subCount = 4} = subGrid || {}, tickLineCount = this.data.length;
            if (tickLineCount >= 2) {
                const points = this._getPointsOfSubGrid(tickSegment, alignWithLabel);
                for (let i = 0; i < tickLineCount; i++) {
                    const pre = points[i], next = points[i + 1];
                    subGridItems.push({
                        id: `sub-${i}-0`,
                        points: [ this.getTickCoord(pre.value), this.getVerticalCoord(this.getTickCoord(pre.value), length, !0) ],
                        datum: {}
                    });
                    for (let j = 0; j < subCount; j++) {
                        const percent = (j + 1) / (subCount + 1), value = (1 - percent) * pre.value + percent * (next ? next.value : alignWithLabel ? 1 : pre.value + tickSegment), point = this.getTickCoord(value), endPoint = this.getVerticalCoord(point, length, !0);
                        subGridItems.push({
                            id: `sub-${i}-${j + 1}`,
                            points: [ point, endPoint ],
                            datum: {}
                        });
                    }
                }
                Math.abs(endAngle - startAngle) % (2 * Math.PI) == 0 && subGridItems.push(subGridItems[0]), 
                items = subGridItems;
            }
        } else {
            gridAttribute = grid;
            const gridItems = [];
            let data;
            data = Math.abs(endAngle - startAngle) % (2 * Math.PI) == 0 ? [ ...this.data ].concat(this.data[0]) : this.data, 
            data.forEach((item => {
                let {point: point} = item;
                if (!alignWithLabel) {
                    const value = item.value - tickSegment / 2;
                    if (this.isInValidValue(value)) return;
                    point = this.getTickCoord(value);
                }
                const endPoint = this.getVerticalCoord(point, length, !0);
                gridItems.push({
                    id: item.id,
                    points: [ point, endPoint ],
                    datum: item
                });
            })), items = gridItems;
        }
        return Object.assign(Object.assign({}, gridAttribute), {
            items: items,
            center: center,
            type: "line"
        });
    }
}

exports.CircleAxisGrid = CircleAxisGrid, (0, vutils_1.mixin)(CircleAxisGrid, circle_1.CircleAxisMixin);
//# sourceMappingURL=circle.js.map
