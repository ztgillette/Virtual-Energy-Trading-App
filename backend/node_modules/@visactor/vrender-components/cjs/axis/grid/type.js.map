{"version":3,"sources":["../src/axis/grid/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["import type { ILineGraphicAttribute, IGroupGraphicAttribute } from '@visactor/vrender-core';\nimport type { Point } from '../../core/type';\nimport type { AxisItem, callbackFunc } from '../type';\n\nexport type SubGridAttributesForAxis = {\n  /**\n   * 是否展示子网格线\n   */\n  visible?: boolean;\n  /**\n   * 子网格线的个数\n   */\n  count?: number;\n} & Pick<GridBaseAttributes, 'alternateColor' | 'style' | 'zIndex'>;\n\nexport interface IGrid3dType {\n  beta: number;\n  anchor3d?: [number, number];\n}\n\nexport type GridItem = {\n  /**\n   * 标识符\n   */\n  id?: string | number;\n  /** 网格线点集合 */\n  points: Point[];\n  [key: string]: any;\n};\n\n// 网格线配置\nexport type GridBaseAttributes = {\n  type?: 'circle' | 'polygon' | 'line';\n  /**\n   * 是否展示网格线\n   */\n  visible?: boolean;\n  /**\n   * 网格线绘制点数据\n   */\n  items: AxisItem[];\n  /**\n   * 栅格线是否封闭\n   */\n  closed?: boolean;\n  /**\n   * 线样式配置\n   */\n  style?: ILineGraphicAttribute | callbackFunc<Partial<ILineGraphicAttribute> | undefined>;\n  /**\n   * 两个栅格线间的填充色\n   */\n  alternateColor?: string | string[];\n  /**\n   * 网格线的绘图层级\n   */\n  zIndex?: number;\n  /** grid 是否与 label 对齐 */\n  alignWithLabel?: boolean;\n  /**\n   * 子刻度对应网格线配置\n   */\n  subGrid?: SubGridAttributesForAxis;\n  /**\n   * 垂直于坐标轴方向的因子，默认为 1\n   */\n  verticalFactor?: number;\n} & IGroupGraphicAttribute;\n\nexport type LineGridAttributes = {\n  /**\n   * 当用户配置了 alternateColor 属性时，填充区域是否进行弧线连接\n   */\n  smoothLink?: boolean;\n  center?: Point;\n  /**\n   * 3d网格线的深度\n   */\n  depth?: number;\n} & GridBaseAttributes;\n\nexport type PolygonGridAttributes = {\n  type: 'polygon';\n} & GridBaseAttributes;\n\nexport type CircleGridAttributes = {\n  type: 'circle';\n  /**\n   * 用于圆弧型网格线的圆心位置声明\n   */\n  center: Point;\n} & GridBaseAttributes;\n\nexport type GridAttributes = LineGridAttributes | CircleGridAttributes | PolygonGridAttributes;\n\nexport type LineGridOfLineAxisAttributes = LineGridAttributes & {\n  type: 'line';\n  /**\n   * 网格线的长度\n   */\n  length: number;\n};\n\nexport type PolarGridOfLineAxisAttributes = (PolygonGridAttributes | CircleGridAttributes) & {\n  /**\n   * 圆心\n   */\n  center?: Point;\n  /**\n   * 边数\n   */\n  sides?: number;\n  /**\n   * **弧度值**，起始弧度，默认 -0.5 * Math.PI\n   *\n   */\n  startAngle?: number;\n  /**\n   * **弧度值**，结束弧度，默认 1.5 * Math.PI\n   */\n  endAngle?: number;\n};\n\nexport type LineAxisGridAttributes = (LineGridOfLineAxisAttributes | PolarGridOfLineAxisAttributes) & {\n  /**\n   * 起始点坐标\n   */\n  start: Point;\n  /**\n   * 结束点坐标\n   */\n  end: Point;\n};\n\nexport type CircleAxisGridAttributes = LineGridAttributes & {\n  /**\n   * 当配置了 innerRadius 时，可以通过设置 inside: true，将坐标轴战士在内圆半径上。\n   * @default false\n   */\n  inside?: boolean;\n  /**\n   * 圆心坐标\n   */\n  center: Point;\n  /**\n   * **弧度值**，起始弧度，默认 -0.5 * Math.PI\n   *\n   */\n  startAngle?: number;\n  /**\n   * **弧度值**，结束弧度，默认 1.5 * Math.PI\n   */\n  endAngle?: number;\n  /**\n   * 半径\n   */\n  radius: number;\n  /** 内半径 */\n  innerRadius?: number;\n};\n"]}