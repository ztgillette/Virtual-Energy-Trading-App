{"version":3,"sources":["../src/axis/grid/line.ts"],"names":[],"mappings":"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","file":"line.js","sourcesContent":["/**\n * @description 直线型坐标轴的网格线\n * - `type: 'line'` 用于直角坐标系下的坐标轴网格线绘制\n * - `type: 'circle'` 或者 `type: 'polygon'` 用于极坐标半径轴的网格线绘制\n */\nimport type { IPointLike } from '@visactor/vutils';\nimport { PointService, merge, mixin } from '@visactor/vutils';\nimport { BaseGrid } from './base';\nimport type {\n  GridItem,\n  LineAxisGridAttributes,\n  LineGridOfLineAxisAttributes,\n  PolarGridOfLineAxisAttributes\n} from './type';\nimport type { Point } from '../../core/type';\nimport { POLAR_START_ANGLE, POLAR_END_ANGLE } from '../../constant';\nimport { LineAxisMixin } from '../mixin/line';\nimport type { ComponentOptions } from '../../interface';\nimport { loadLineAxisGridComponent } from '../register';\nimport { getCirclePoints } from '../util';\n\nexport interface LineAxisGrid\n  extends Pick<LineAxisMixin, 'isInValidValue' | 'getTickCoord' | 'getVerticalVector'>,\n    BaseGrid<LineAxisGridAttributes> {}\n\nloadLineAxisGridComponent();\nexport class LineAxisGrid extends BaseGrid<LineAxisGridAttributes> {\n  constructor(attributes: LineAxisGridAttributes, options?: ComponentOptions) {\n    super(options?.skipDefault ? attributes : merge({}, BaseGrid.defaultAttributes, attributes), options);\n  }\n\n  private _getGridPoint(gridType: string, point: IPointLike): Point[] {\n    let gridPoints;\n    if (gridType === 'line') {\n      const { length } = this.attribute as LineGridOfLineAxisAttributes;\n      const endPoint = this.getVerticalCoord(point, length as number, true);\n\n      gridPoints = [point, endPoint];\n    } else if (gridType === 'circle' || gridType === 'polygon') {\n      const {\n        center,\n        sides = 6,\n        startAngle = POLAR_START_ANGLE,\n        endAngle = POLAR_END_ANGLE\n      } = this.attribute as PolarGridOfLineAxisAttributes;\n      const distance = PointService.distancePP(center as Point, point);\n      gridPoints = getCirclePoints(center as Point, sides as number, distance, startAngle, endAngle);\n    }\n\n    return gridPoints;\n  }\n\n  protected getGridPointsByValue(value: number) {\n    const basePoint = this.getTickCoord(value);\n\n    return this._getGridPoint(this.attribute.type, basePoint);\n  }\n\n  protected getGridAttribute(isSubGrid: boolean) {\n    const { type: gridType, alignWithLabel = true } = this.attribute;\n\n    const tickSegment = this._parseTickSegment();\n\n    let gridAttribute;\n    let items: GridItem[] = [];\n    if (!isSubGrid) {\n      gridAttribute = this.attribute;\n      // 计算 grid Items\n      const gridItems: GridItem[] = [];\n      this.data.forEach(item => {\n        let { point } = item;\n\n        if (!alignWithLabel) {\n          // tickLine 不同 tick 对齐时需要调整 point\n          const value = item.value - tickSegment / 2;\n          if (this.isInValidValue(value)) {\n            return;\n          }\n          point = this.getTickCoord(value);\n        }\n\n        gridItems.push({\n          id: item.label,\n          datum: item,\n          points: this._getGridPoint(gridType, point)\n        });\n      });\n      items = gridItems;\n    } else {\n      // 渲染 subGrid\n      gridAttribute = merge({}, this.attribute, this.attribute.subGrid);\n      // 计算 grid Items\n      const subGridItems: GridItem[] = [];\n      const { count: subCount = 4 } = gridAttribute;\n      const tickLineCount = this.data.length;\n      // 刻度线的数量大于 2 时，才绘制子刻度\n      if (tickLineCount >= 2) {\n        const points = this._getPointsOfSubGrid(tickSegment, alignWithLabel);\n\n        for (let i = 0; i < points.length - 1; i++) {\n          const pre = points[i];\n          const next = points[i + 1];\n          subGridItems.push({\n            id: `sub-${i}-0`,\n            points: this.getGridPointsByValue(pre.value),\n            // TODO: 其实这里也需要，后续需要考虑怎么挂上 data\n            datum: {}\n          });\n          for (let j = 0; j < subCount; j++) {\n            const percent = (j + 1) / (subCount + 1);\n            const value = (1 - percent) * pre.value + percent * next.value;\n            subGridItems.push({\n              id: `sub-${i}-${j + 1}`,\n              points: this.getGridPointsByValue(value),\n              // TODO: 其实这里也需要，后续需要考虑怎么挂上 data\n              datum: {}\n            });\n          }\n          if (i === points.length - 2) {\n            subGridItems.push({\n              id: `sub-${i}-${subCount + 1}`,\n              points: this.getGridPointsByValue(next.value),\n              // TODO: 其实这里也需要，后续需要考虑怎么挂上 data\n              datum: {}\n            });\n          }\n        }\n        items = subGridItems;\n      }\n    }\n\n    return {\n      ...gridAttribute,\n      items\n    };\n  }\n}\n\nmixin(LineAxisGrid, LineAxisMixin);\n"]}