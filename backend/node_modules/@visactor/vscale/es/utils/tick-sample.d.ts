import type { TransformType, ContinuousTicksFunc, NiceOptions, NiceType } from '../interface';
type TicksBaseTransformFunc = (start: number, stop: number, count: number, base: number, transformer: TransformType, untransformer: TransformType) => number[];
type ForceTicksBaseTransformFunc = (start: number, stop: number, count: number, transformer: TransformType, untransformer: TransformType) => number[];
type D3TicksForLogTransformFunc = (start: number, stop: number, count: number, base: number, transformer: TransformType, untransformer: TransformType, options?: {
    noDecimals?: boolean;
}) => number[];
export declare const calculateTicksOfSingleValue: (value: number, tickCount: number, noDecimals?: boolean) => any[];
export declare const d3Ticks: ContinuousTicksFunc;
export declare const appendTicksToCount: (ticks: number[], count: number, step: number) => number[];
export declare const ticks: ContinuousTicksFunc;
export declare function tickIncrement(start: number, stop: number, count: number): {
    step: number;
    gap: number;
    power: number;
};
export declare function forceTicks(start: number, stop: number, count: number): any[];
export declare function forceTickIncrement(start: number, stop: number, count: number): number;
export declare function stepTicks(start: number, stop: number, step: number): any[];
export declare function niceLinear(d: number[], count?: number): number[];
export declare function parseNiceOptions(originalDomain: number[], option: NiceOptions): {
    niceType: NiceType;
    niceDomain: number[];
    niceMinMax: number[];
    domainValidator: (x: number) => boolean;
};
export declare const fixPrecision: (start: number, stop: number, value: number) => number;
export declare const d3TicksForLog: D3TicksForLogTransformFunc;
export declare const ticksBaseTransform: TicksBaseTransformFunc;
export declare const forceTicksBaseTransform: ForceTicksBaseTransformFunc;
export declare const forceStepTicksBaseTransform: ForceTicksBaseTransformFunc;
export {};
