{"version":3,"sources":["../src/log-scale.ts"],"names":[],"mappings":"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","file":"log-scale.js","sourcesContent":["import { ticksBaseTransform, forceTicksBaseTransform, parseNiceOptions, d3TicksForLog } from './utils/tick-sample';\nimport { ContinuousScale } from './continuous-scale';\nimport { ScaleEnum } from './type';\nimport { logp, nice, powp, logNegative, expNegative, identity } from './utils/utils';\nimport type { ContinuousScaleType, IContinuousScale, NiceOptions, NiceType, PolymapType } from './interface';\nimport { mixin } from '@visactor/vutils';\nimport { LogNiceMixin } from './log-nice-mixin';\n\n/**\n * 逆反函数\n * @param f\n * @returns\n */\nfunction reflect(f: (x: number) => number) {\n  return (x: number) => -f(-x);\n}\n\nfunction limitPositiveZero(min: number = Number.EPSILON) {\n  return (x: number) => {\n    return Math.max(x, min);\n  };\n}\n\nfunction limitNegativeZero(min: number = Number.EPSILON) {\n  return (x: number) => {\n    return Math.min(x, -min);\n  };\n}\n\nexport interface LogScale extends ContinuousScale {\n  nice: (count?: number, option?: NiceOptions) => this;\n  niceMin: (count?: number) => this;\n  niceMax: (count?: number) => this;\n}\n\nexport class LogScale extends ContinuousScale {\n  readonly type: ContinuousScaleType = ScaleEnum.Log;\n\n  _base: number;\n  _logs: (x: number) => number;\n  _pows: (x: number) => number;\n  _limit: (x: number) => number;\n\n  constructor() {\n    super(logp(10), powp(10));\n\n    this._limit = limitPositiveZero();\n    this._logs = this.transformer;\n    this._pows = this.untransformer;\n    this._domain = [1, 10];\n    this._base = 10;\n  }\n\n  clone(): LogScale {\n    return new LogScale()\n      .domain(this._domain, true)\n      .range(this._range, true)\n      .unknown(this._unknown)\n      .clamp(this.clamp(), null, true)\n      .interpolate(this._interpolate, true)\n      .base(this._base) as LogScale;\n  }\n\n  rescale(slience?: boolean) {\n    if (slience) {\n      return this;\n    }\n    super.rescale();\n\n    const logs = logp(this._base);\n    const pows = powp(this._base);\n\n    const domain = this._niceDomain ?? this._domain;\n\n    if (domain[0] < 0) {\n      this._logs = reflect(logs);\n      this._pows = reflect(pows);\n      this._limit = limitNegativeZero();\n\n      this.transformer = logNegative;\n      this.untransformer = expNegative;\n    } else {\n      this._logs = logs;\n      this._pows = pows;\n      this._limit = limitPositiveZero();\n\n      this.transformer = this._logs;\n      this.untransformer = pows;\n    }\n\n    return this;\n  }\n\n  scale(x: any): any {\n    x = Number(x);\n    if (Number.isNaN(x) || (this._domainValidator && !this._domainValidator(x))) {\n      return this._unknown;\n    }\n    if (!this._output) {\n      this._output = (this._piecewise as PolymapType<any>)(\n        (this._niceDomain ?? this._domain).map(this._limit).map(this.transformer),\n        this._calculateWholeRange(this._range),\n        this._interpolate\n      );\n    }\n    const output = this._output(this.transformer(this._limit(this._clamp(x))));\n\n    return this._fishEyeTransform ? this._fishEyeTransform(output) : output;\n  }\n\n  base(): number;\n  base(_: number, slience?: boolean): this;\n  base(_?: number, slience?: boolean): this | number {\n    if (!arguments.length) {\n      return this._base;\n    }\n\n    this._base = _;\n    return this.rescale(slience);\n  }\n\n  tickFormat() {\n    // TODO\n    return identity;\n  }\n\n  d3Ticks(count: number = 10, options?: { noDecimals?: boolean }) {\n    const d = this.domain();\n    const u = this._limit(d[0]);\n    const v = this._limit(d[d.length - 1]);\n    return d3TicksForLog(u, v, count, this._base, this.transformer, this.untransformer, options);\n  }\n\n  ticks(count: number = 10) {\n    // return this.d3Ticks(count);\n    const d = this.calculateVisibleDomain(this._range);\n    return ticksBaseTransform(\n      this._limit(d[0]),\n      this._limit(d[d.length - 1]),\n      count,\n      this._base,\n      this.transformer,\n      this.untransformer\n    );\n  }\n\n  /**\n   * 生成tick数组，这个tick数组的长度就是count的长度\n   * @param count\n   */\n  forceTicks(count: number = 10): any[] {\n    const d = this.calculateVisibleDomain(this._range);\n    return forceTicksBaseTransform(d[0], d[d.length - 1], count, this.transformer, this.untransformer);\n  }\n\n  /**\n   * 基于给定step的ticks数组生成\n   * @param step\n   */\n  stepTicks(step: number): any[] {\n    const d = this.calculateVisibleDomain(this._range);\n    return forceTicksBaseTransform(\n      this._limit(d[0]),\n      this._limit(d[d.length - 1]),\n      step,\n      this.transformer,\n      this.untransformer\n    );\n  }\n\n  protected getNiceConfig() {\n    return {\n      floor: (x: number) => this._pows(Math.floor(this._logs(this._limit(x)))),\n      ceil: (x: number) => (Math.abs(x) >= 1 ? Math.ceil(x) : this._pows(Math.ceil(this._logs(this._limit(x)))))\n    };\n  }\n}\n\nmixin(LogScale, LogNiceMixin);\n"]}