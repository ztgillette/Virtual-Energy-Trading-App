{"version":3,"sources":["../src/transform/geo/projection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAG1C,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,OAAO;CACrB,CAAC;AAOF,MAAM,CAAC,MAAM,UAAU,GAAc,CAAC,IAAS,EAAE,OAA4B,EAAE,EAAE;IAC/E,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9B,OAAO,IAAI,CAAC;KACb;IACD,MAAM,EAAE,UAAU,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC;IACnC,MAAM,OAAO,GAAI,gBAAwB,CAAC,UAAU,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;QACf,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAA4B,EAAE,EAAE;YAC5D,uCACK,IAAI,KACP,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,IACnC;QACJ,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;KACpB;IACD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE;QACnC,MAAM,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC;QAC3C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;YAClC,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;YACzC,uCACK,GAAG,KACN,CAAC,EAAE,CAAC,EAAE,WAAW,IACjB;SACH;QACD,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAgB,EAAE,EAAE;YACvD,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAe,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;QACH,uCACK,GAAG,KACN,CAAC,EAAE,CAAC,EAAE,WAAW,EACjB,QAAQ,kCACH,GAAG,CAAC,QAAQ,KACf,CAAC,EAAE,CAAC,EAAE,WAAW,OAEnB;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","file":"projection.js","sourcesContent":["import { project } from '../../utils/geo';\nimport type { Transform } from '..';\n\nconst PROJECTION_GROUP = {\n  webmercator: project\n};\n\nexport interface IProjectionOptions {\n  projection: string;\n  as: string;\n}\n\nexport const projection: Transform = (data: any, options?: IProjectionOptions) => {\n  if (!data || data.length === 0) {\n    return data;\n  }\n  const { projection, as } = options;\n  const prjFunc = (PROJECTION_GROUP as any)[projection];\n  if (data[0].lng) {\n    const processData = data.map((item: { lng: any; lat: any }) => {\n      return {\n        ...item,\n        [as]: prjFunc([item.lng, item.lat])\n      };\n    });\n    return processData;\n  }\n  const result = data.map((ele: any) => {\n    const { coordinates } = ele.geometry || {};\n    if (!Array.isArray(coordinates[0])) {\n      const processData = prjFunc(coordinates);\n      return {\n        ...ele,\n        [as]: processData\n      };\n    }\n    const processData = coordinates.map((item: Array<any>) => {\n      return Array.isArray(item[0]) ? item.map((coord: number[]) => prjFunc(coord)) : prjFunc(item);\n    });\n    return {\n      ...ele,\n      [as]: processData,\n      geometry: {\n        ...ele.geometry,\n        [as]: processData\n      }\n    };\n  });\n  return result;\n};\n"]}