{"version":3,"sources":["../src/transform/statistics.ts"],"names":[],"mappings":"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","file":"statistics.js","sourcesContent":["import * as simpleStatistics from 'simple-statistics';\nimport { mergeDeepImmer } from '../utils/js';\nimport { isArray, uniqArray, flattenArray } from '@visactor/vutils';\nimport { STATISTICS_METHODS } from '../constants';\nimport type { Transform } from '.';\n\nexport interface IStatisticsOptions {\n  fields: string[];\n  operations: Array<\n    | 'count'\n    | 'max'\n    | 'min'\n    | 'mean'\n    | 'average'\n    | 'median'\n    | 'mode'\n    | 'product'\n    | 'standardDeviation'\n    | 'sum'\n    | 'sumSimple'\n    | 'variance'\n  >;\n  as?: string[];\n  groupBy?: string;\n}\n\nconst DEFAULT_STATISTICS_OPTIONS: IStatisticsOptions = {\n  as: [],\n  fields: [],\n  groupBy: null,\n  operations: ['count', 'max', 'min', 'average', 'sum']\n};\n\nconst aggregates: any = {\n  count(data: any[]) {\n    return data.length;\n  },\n  distinct(data: any[], field: string) {\n    const values = uniqArray(data.map(row => +row[field])) as number[];\n    return values.length;\n  }\n};\n\nSTATISTICS_METHODS.forEach(method => {\n  aggregates[method] = (data: any[], field: string) => {\n    let values = data.map(row => +row[field]);\n    if (isArray(values) && isArray(values[0])) {\n      values = flattenArray(values);\n    }\n    // @ts-ignore\n    return simpleStatistics[method](values);\n  };\n});\naggregates.average = aggregates.mean;\n\n/**\n * 聚合统计主要用于处理数据(诸如统计平均值,求和等),并返回计算后的数据结果\n * @param data\n * @param options\n * @returns\n */\nexport const statistics: Transform = (data: Array<object>, options?: IStatisticsOptions) => {\n  const mergeOptions = mergeDeepImmer(DEFAULT_STATISTICS_OPTIONS, options) as IStatisticsOptions;\n  const { as, fields, groupBy, operations } = mergeOptions;\n\n  // 分组\n  const groups: { [key: string]: Array<object> } = {};\n  data.forEach(d => {\n    groups[d[groupBy]] = groups[d[groupBy]] || [];\n    groups[d[groupBy]].push(d);\n  });\n\n  const results: any[] = [];\n  for (const key in groups) {\n    const result = {\n      group: key\n    };\n    const group = groups[key];\n    operations.forEach((operation, i) => {\n      const outputName = as[i] ?? operation;\n      const field = fields[i] ?? fields[0];\n      result[outputName] = aggregates[operation](group, field);\n    });\n    results.push(result);\n  }\n\n  return results;\n};\n"]}