{"version":3,"sources":["../src/transform/hexagon.ts"],"names":[],"mappings":"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","file":"hexagon.js","sourcesContent":["import { hexbin } from 'd3-hexbin';\nimport { colorLinearGenerator } from '../utils/color';\nimport type { Transform } from '.';\n\n// 根据六边形中心点生成position、indexes、colors\nconst point_hex_corner = (centerPoints: Array<any>, size: number, z: number, angle: number = 0) => {\n  const position: Array<number> = [];\n  const colors: Array<number> = [];\n  // const position = [center.x, center.y, 0];\n  let init_indexes = [0, 1, 2, 2, 3, 4, 4, 5, 0, 0, 2, 4];\n  const last_indexes: Array<number> = [];\n  const offset: Array<number> = [];\n  centerPoints.forEach((center, index) => {\n    const offetX = center.hexCenterCoord[0] - centerPoints[0].hexCenterCoord[0];\n    const offetY = center.hexCenterCoord[1] - centerPoints[0].hexCenterCoord[1];\n    offset.push(offetX, offetY, z);\n    // 通过中心点生成六边形顶点\n    for (let i = 0; i < 6; i++) {\n      const angle_deg = 60 * i - 30 + angle;\n      const angle_rad = (Math.PI / 180) * angle_deg;\n      position.push(\n        center.hexCenterCoord[0] + size * Math.cos(angle_rad),\n        center.hexCenterCoord[1] + size * Math.sin(angle_rad),\n        z\n      );\n    }\n    if (index === 0) {\n      // const r = earcut(hex_points, null, 3);\n      last_indexes.push(...init_indexes);\n    } else {\n      init_indexes = init_indexes.map(item => item + 6);\n      last_indexes.push(...init_indexes);\n    }\n    const { color, opacity } = center.colorObj;\n    const arrColor = [color.r, color.g, color.b, opacity];\n    colors.push(...arrColor);\n  });\n  return {\n    position,\n    indexes: last_indexes,\n    centerPoints: [...centerPoints[0].hexCenterCoord, z],\n    colors,\n    offset\n  };\n};\n\nexport interface IHexagonData {\n  position: number[];\n  indexes: number[];\n  centerPoints: number[];\n  colors: number[];\n  offset: number[];\n}\nexport interface IHexagonOptions {\n  padding?: number; // 六边形之间的留白\n  size?: number; // 六边形的大小\n  calcMethod?: string; //将点数据的 value 提取到六边形进行计算的方法\n  field?: string; // 使用哪一个字段作为热力大小的参考\n  angle?: number;\n  colorConfig?: {\n    type?: 'ordinal' | 'linear'; // 离散 / 线性 , 默认为 'linear'\n    range: Array<string>;\n    field?: string; // 选择某个 data 的key 作为 维度字段，默认为 'value'\n    default?: string; // 默认为白色\n    opacity?: number; // 蜂窝热力图 透明度\n  };\n}\nexport const pointToHexbin: Transform = (data: [number, number][], options?: IHexagonOptions): IHexagonData => {\n  const { size = 10, angle = 0, calcMethod = 'sum', padding = 0, field = 'value', colorConfig } = options;\n  if (data.length === 0) {\n    return null;\n  }\n  const { type, field: colorField, range } = colorConfig;\n  const transformHexbin = hexbin()\n    .radius(size)\n    // @ts-ignore\n    .x(c => c.coordinates[0])\n    // @ts-ignore\n    .y(c => c.coordinates[1]);\n\n  // 聚合后的六边形中心点坐标\n  const centerPoints = transformHexbin(data).map((hex: any, index: number) => {\n    const calcFields = hex.map((item: any) => item[field]);\n    const calcValue = calcFields.reduce((acc: number, curr: number) => acc + curr);\n    return {\n      _id: index,\n      hexCenterCoord: [hex.x, hex.y],\n      rawData: hex,\n      count: hex.length,\n      [field]: calcValue\n    };\n  });\n  centerPoints.sort((a: any, b: any) => {\n    return a[field] - b[field];\n  });\n  colorLinearGenerator(range[0], range[1], centerPoints, field);\n  const hex = point_hex_corner(centerPoints, size - padding, 0, angle);\n  return hex;\n};\n"]}