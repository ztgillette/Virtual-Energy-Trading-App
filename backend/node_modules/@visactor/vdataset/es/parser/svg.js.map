{"version":3,"sources":["../src/parser/svg.ts"],"names":[],"mappings":"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","file":"svg.js","sourcesContent":["import type { IMatrix } from '@visactor/vutils';\nimport { Matrix, isString, isValid, isValidNumber, merge, toCamelCase } from '@visactor/vutils';\nimport type { DataView } from '../data-view';\nimport type { Parser } from './index';\n\nexport interface ISVGSourceOption {\n  type?: 'svg';\n  customDOMParser?: (svg: string) => Document;\n}\n\nexport interface SVGParserResult {\n  root: SVGParsedElement;\n  width: number;\n  height: number;\n  elements: SVGParsedElement[];\n  viewBoxRect?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\nexport interface SVGParsedElement {\n  id: string;\n  tagName: string;\n  graphicType: string;\n  attributes: Record<string, any>;\n  name?: string;\n  transform?: IMatrix;\n  parent?: SVGParsedElement;\n  value?: string;\n  _inheritStyle?: Record<string, any>;\n  _textGroupStyle?: Record<string, any>;\n  _nameFromParent?: string;\n  [key: string]: any;\n}\nconst tagNameToType = {\n  svg: 'group',\n  rect: 'rect',\n  line: 'rule',\n  polygon: 'polygon',\n  path: 'path',\n  polyline: 'line',\n  g: 'group',\n  circle: 'arc',\n  ellipse: 'arc'\n};\nconst validTagName = Object.keys(tagNameToType);\nconst validGroupNode = ['g', 'svg', 'text', 'tspan', 'switch'];\nconst validTextAttributes = ['font-size', 'font-family', 'font-weight', 'font-style', 'text-align', 'text-anchor'];\nconst validCircleAttributes = ['cx', 'cy', 'r'];\nconst validEllipseAttributes = ['cx', 'cy', 'rx', 'ry'];\nconst validLineAttributes = ['x1', 'x2', 'y1', 'y2'];\nconst validAttributes = [\n  'visibility',\n  'x',\n  'y',\n  'width',\n  'height',\n  'd',\n  'points',\n  'stroke',\n  'stroke-width',\n  'fill',\n  'fill-opacity',\n  'stroke-opacity',\n  ...validTextAttributes,\n  ...validCircleAttributes,\n  ...validEllipseAttributes,\n  ...validLineAttributes\n];\nconst validInheritAttributes = [\n  'visible',\n  'fill',\n  'stroke',\n  'stroke-width',\n  'fill-opacity',\n  'stroke-opacity',\n  ...validTextAttributes\n];\nconst numberReg = /-?([0-9]*\\.)?[0-9]+([eE]-?[0-9]+)?/g;\nfunction splitNumberSequence(rawStr: string): string[] {\n  return rawStr.match(numberReg) || [];\n}\n/**\n * 将 svg 字符串转换为指定的数据结构 SVGParserResult\n * @param data\n * @param options\n * @returns\n */\nexport const svgParser: Parser = (data: string, option: ISVGSourceOption = {}, dataView: DataView) => {\n  let parser = option.customDOMParser;\n  if (!parser) {\n    if (window?.DOMParser) {\n      parser = (svg: string) => new DOMParser().parseFromString(svg, 'text/xml');\n    }\n  }\n\n  if (!parser) {\n    throw new Error('No Available DOMParser!');\n  }\n\n  const svg = parser(data);\n\n  let node = svg.nodeType === 9 ? svg.firstChild : svg;\n  while (node && (node.nodeName.toLowerCase() !== 'svg' || node.nodeType !== 1)) {\n    node = node.nextSibling;\n  }\n  if (node) {\n    const result = parseSvgNode(node as SVGElement);\n    return result;\n  }\n  return null;\n};\n\nlet idx = 0;\n\nfunction parseSvgNode(svg: SVGElement, opt: any = {}) {\n  const elements: SVGParsedElement[] = [];\n\n  const root: SVGParsedElement = parseNode(svg, null);\n  let width = parseFloat(svg.getAttribute('width') || opt.width);\n  let height = parseFloat(svg.getAttribute('height') || opt.height);\n  !isValidNumber(width) && (width = null);\n  !isValidNumber(height) && (height = null);\n\n  const viewBox = svg.getAttribute('viewBox');\n  let viewBoxRect: SVGParserResult['viewBoxRect'];\n\n  if (viewBox) {\n    const viewBoxArr = splitNumberSequence(viewBox);\n    if (viewBoxArr.length >= 4) {\n      viewBoxRect = {\n        x: parseFloat((viewBoxArr[0] || 0) as string),\n        y: parseFloat((viewBoxArr[1] || 0) as string),\n        width: parseFloat(viewBoxArr[2]),\n        height: parseFloat(viewBoxArr[3])\n      };\n      if (width || height) {\n        const boundingRect = { x: 0, y: 0, width, height };\n        const scaleX = boundingRect.width / viewBoxRect.width;\n        const scaleY = boundingRect.height / viewBoxRect.height;\n        const scale = Math.min(scaleX, scaleY);\n        const transLateX = -(viewBoxRect.x + viewBoxRect.width / 2) * scale + (boundingRect.x + boundingRect.width / 2);\n        const transLateY =\n          -(viewBoxRect.y + viewBoxRect.height / 2) * scale + (boundingRect.y + boundingRect.height / 2);\n        const viewBoxTransform = new Matrix().translate(transLateX, transLateY).scale(scale, scale);\n        root.transform = viewBoxTransform;\n      }\n    }\n  }\n\n  traverse(svg as SVGElement, root, elements);\n  return {\n    root,\n    width,\n    height,\n    elements,\n    viewBoxRect\n  };\n}\n\nfunction parseInheritAttributes(parsedElement: SVGParsedElement) {\n  let inheritedAttrs;\n  const { parent, attributes } = parsedElement;\n\n  const parse = (parent: any) => {\n    if (!parent) {\n      return {};\n    }\n    return validInheritAttributes.reduce((acc, attrName) => {\n      const camelAttrName = toCamelCase(attrName);\n      if (isValid(parent[camelAttrName])) {\n        acc[camelAttrName] = parent[camelAttrName];\n      }\n      return acc;\n    }, {});\n  };\n\n  if (parent) {\n    if (!parent._inheritStyle) {\n      parent._inheritStyle = parse(parent.attributes);\n    }\n    inheritedAttrs = merge({}, parent._inheritStyle, parse(attributes));\n  } else {\n    inheritedAttrs = parse(attributes);\n  }\n  return inheritedAttrs;\n}\n\nfunction parseAttributes(el: Element) {\n  const attrs = {} as any;\n  const attributes = el.attributes ?? {};\n  const style = (el as any).style ?? {};\n  for (let i = 0; i < validAttributes.length; i++) {\n    const attrName = validAttributes[i];\n    const attrValue =\n      isValid(style[attrName]) && style[attrName] !== '' ? style[attrName] : attributes[attrName]?.value;\n    if (isValid(attrValue)) {\n      attrs[toCamelCase(attrName)] = isNaN(+attrValue) ? attrValue : parseFloat(attrValue);\n    }\n  }\n\n  if (style.display === 'none') {\n    attrs.visible = false;\n  }\n\n  // 简单兼容处理 \"xxx:12px\" 类型的属性\n  ['fontSize', 'strokeWidth', 'width', 'height'].forEach(attr => {\n    const attrValue = attrs[attr];\n    if (isString(attrs[attr])) {\n      attrs[attr] = parseFloat(attrValue);\n    }\n  });\n\n  return attrs;\n}\n\nfunction parseNode(node: SVGElement, parent: SVGParsedElement) {\n  const tagName = node.tagName?.toLowerCase();\n  if (node.nodeType === 3 || tagName === 'text' || tagName === 'tspan') {\n    return parseText(node, parent);\n  }\n\n  if (!validTagName.includes(tagName)) {\n    return null;\n  }\n\n  const parsed: SVGParsedElement = {\n    tagName,\n    graphicType: tagNameToType[tagName],\n    attributes: parseAttributes(node),\n    parent,\n    name: node.getAttribute('name') ?? parent?.attributes?.name,\n    id: node.getAttribute('id') ?? `${tagName}-${idx++}`,\n    transform: parseTransform(node)\n  };\n\n  parsed._inheritStyle = parseInheritAttributes(parsed);\n\n  if (parent && !isValid(parsed.name)) {\n    parsed._nameFromParent = parent.name ?? parent._nameFromParent;\n  }\n\n  return parsed;\n}\n\nfunction parseText(node: SVGElement, parent: SVGParsedElement) {\n  if (!parent) {\n    return null;\n  }\n\n  const tagName = node.tagName?.toLowerCase();\n  // 孤立 #text 节点不处理\n  if (!tagName && parent.graphicType !== 'group') {\n    return null;\n  }\n\n  // text 当作 group 处理\n  // #text 都当作 text 处理\n  const nodeAsGroup = tagName === 'text' || tagName === 'tspan';\n  const elType = nodeAsGroup ? 'group' : 'text';\n  const value = nodeAsGroup ? undefined : node.textContent?.replace(/\\n/g, ' ').replace(/\\s+/g, ' ');\n\n  if (value === ' ') {\n    return null;\n  }\n\n  let parsed: SVGParsedElement;\n\n  if (nodeAsGroup) {\n    parsed = {\n      tagName,\n      graphicType: elType,\n      attributes: parseAttributes(node),\n      parent,\n      name: node.getAttribute('name'),\n      id: node.getAttribute('id') ?? `${tagName}-${idx++}`,\n      transform: parseTransform(node),\n      value\n    };\n  } else {\n    // #text or tspan\n    parsed = {\n      tagName,\n      graphicType: 'text',\n      attributes: parseAttributes(node),\n      parent,\n      name: parent?.name,\n      id: node.getAttribute?.('id') ?? `${tagName}-${idx++}`,\n      value\n    };\n  }\n\n  parsed._inheritStyle = parseInheritAttributes(parsed);\n\n  if (!isValid(parsed.name)) {\n    parsed._nameFromParent = parent.name ?? parent._nameFromParent;\n  }\n\n  if (!nodeAsGroup) {\n    parsed.attributes = parsed._inheritStyle;\n  } else {\n    if (parent._textGroupStyle) {\n      parsed._textGroupStyle = merge({}, parent._textGroupStyle, parseAttributes(node));\n    } else {\n      parsed._textGroupStyle = parseAttributes(node);\n    }\n  }\n\n  return parsed;\n}\n\nfunction parseTransform(node: SVGElement) {\n  const transforms = (node as any).transform?.baseVal as SVGTransformList;\n  if (!transforms) {\n    return null;\n  }\n  const matrix = transforms.consolidate()?.matrix;\n  if (!matrix) {\n    return null;\n  }\n  const { a, b, c, d, e, f } = matrix;\n  return new Matrix(a, b, c, d, e, f);\n}\n\nfunction traverse(node: SVGElement, parsedParent: SVGParsedElement, result: SVGParsedElement[] = []) {\n  if (!node) {\n    return;\n  }\n\n  let parseResult;\n  if (node.nodeName !== 'svg') {\n    parseResult = parseNode(node, parsedParent);\n  }\n\n  if (parseResult) {\n    result.push(parseResult);\n  }\n\n  let child: SVGElement | null = validGroupNode.includes(node.tagName?.toLocaleLowerCase())\n    ? (node.firstChild as SVGElement)\n    : null;\n\n  while (child) {\n    traverse(child, parseResult ?? parsedParent, result);\n    child = child.nextSibling as SVGElement;\n  }\n}\n"]}