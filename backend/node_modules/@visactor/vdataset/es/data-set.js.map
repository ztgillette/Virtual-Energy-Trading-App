{"version":3,"sources":["../src/data-set.ts"],"names":[],"mappings":"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","file":"data-set.js","sourcesContent":["import type { ILogger } from '@visactor/vutils';\nimport { EventEmitter, Logger } from '@visactor/vutils';\nimport type { DataView } from './data-view';\nimport { getUUID } from './utils/uuid';\nimport type { Transform } from './transform';\nimport type { IParserOptions, Parser } from './parser';\n\ninterface IDataSetOptions {\n  name?: string;\n  logger?: Logger;\n}\n\n/**\n * 数据集\n */\nexport class DataSet {\n  isDataSet: boolean = true;\n\n  /**\n   * 已注册的 Transform（key-value 对）\n   */\n  transformMap: Record<string, any> = {};\n\n  /**\n   * 已注册的 Parser(key-value 对）\n   */\n  parserMap: Record<string, any> = {};\n\n  /**\n   * 所有挂在数据集上的数据视图（key-value 对）\n   */\n  dataViewMap: Record<string | number, DataView> = {};\n\n  name: string;\n\n  /**\n   * 消息的监听与触发\n   */\n  target: any = new EventEmitter();\n\n  /**\n   * 多 DataView消息监听工具\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  _callMap: Map<Function, (...args: any[]) => void>;\n\n  protected _logger: ILogger;\n\n  constructor(public options?: IDataSetOptions) {\n    let name;\n    if (options?.name) {\n      name = options.name;\n    } else {\n      name = getUUID('dataset');\n    }\n    this.name = name;\n\n    this._logger = options?.logger ?? Logger.getInstance();\n  }\n\n  setLogger(logger: Logger) {\n    this._logger = logger;\n  }\n\n  /**\n   * 根据name 获取 dataView\n   * @param name - name\n   */\n  getDataView(name: string | number): DataView {\n    return this.dataViewMap[name];\n  }\n\n  /**\n   * 设置 dataView\n   * @param name - 名称\n   * @param dataView - data dataView\n   */\n  setDataView(name: string | number, dataView: DataView): void {\n    if (this.dataViewMap[name]) {\n      this._logger?.error(`Error: dataView ${name} 之前已存在，请重新命名`);\n    }\n    this.dataViewMap[name] = dataView;\n  }\n\n  /**\n   * 移除 dataview\n   * @param name\n   */\n  removeDataView(name: string | number) {\n    this.dataViewMap[name] = null;\n\n    delete this.dataViewMap[name];\n  }\n\n  /**\n   * 注册一个数据解析器\n   * @param name - 类型\n   * @param parser - 解析逻辑\n   */\n  registerParser(name: string, parser: Parser): void {\n    if (this.parserMap[name]) {\n      this._logger?.warn(`Warn: transform ${name} 之前已注册，执行覆盖逻辑`);\n    }\n    this.parserMap[name] = parser;\n  }\n\n  /**\n   * 移除 parser\n   * @param name\n   */\n  removeParser(name: string) {\n    this.parserMap[name] = null;\n    delete this.parserMap[name];\n  }\n\n  /**\n   * 根据名称获取数据解析器\n   * @param name\n   * @returns\n   */\n  getParser(name: string): Parser {\n    return this.parserMap[name] || this.parserMap.default;\n  }\n\n  /**\n   * 注册一个数据处理函数\n   * @param name\n   * @param transform\n   */\n  registerTransform(name: string, transform: Transform): void {\n    if (this.transformMap[name]) {\n      this._logger?.warn(`Warn: transform ${name} 之前已注册，执行覆盖逻辑`);\n    }\n    this.transformMap[name] = transform;\n  }\n\n  /**\n   * 移除 transform\n   * @param name\n   */\n  removeTransform(name: string) {\n    this.transformMap[name] = null;\n    delete this.transformMap[name];\n  }\n\n  /**\n   * 根据名称获取数据处理函数\n   * @param name\n   * @returns\n   */\n  getTransform(name?: string): Transform {\n    return this.transformMap[name];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  multipleDataViewAddListener(list: DataView[], event: string, call: Function) {\n    if (!this._callMap) {\n      this._callMap = new Map();\n    }\n\n    let callAd = this._callMap.get(call);\n    if (!callAd) {\n      callAd = () => {\n        if (list.some(l => l.isRunning)) {\n          return;\n        }\n        call();\n      };\n    }\n    list.forEach(l => {\n      l.target.addListener(event, callAd);\n    });\n    this._callMap.set(call, callAd);\n  }\n\n  allDataViewAddListener(event: string, call: () => void) {\n    this.multipleDataViewAddListener(Object.values(this.dataViewMap), event, call);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  multipleDataViewRemoveListener(list: DataView[], event: string, call: Function) {\n    if (this._callMap) {\n      const callAd = this._callMap.get(call);\n      if (callAd) {\n        list.forEach(l => {\n          l.target.removeListener(event, callAd);\n        });\n      }\n      this._callMap.delete(call);\n    }\n  }\n\n  multipleDataViewUpdateInParse(newData: { name: string; data: any; options?: IParserOptions }[]) {\n    newData.forEach(d => this.getDataView(d.name)?.markRunning());\n    newData.forEach(d => this.getDataView(d.name)?.parseNewData(d.data, d.options));\n  }\n\n  multipleDataViewUpdateInRawData(newData: { name: string; data: any; options?: IParserOptions }[]) {\n    newData.forEach(d => this.getDataView(d.name)?.markRunning());\n    newData.forEach(d => this.getDataView(d.name)?.updateRawData(d.data, d.options));\n  }\n\n  destroy() {\n    this.transformMap = null;\n    this.parserMap = null;\n    this.dataViewMap = null;\n    this._callMap = null;\n    this.target.removeAllListeners();\n  }\n}\n"]}