{"version":3,"sources":["../src/utils/js.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAQvD,MAAM,CAAC,MAAM,cAAc,GAAG,UAAU,MAAc,EAAE,GAAG,OAAsB;IAC/E,OAAO,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,OAAO,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,SAAS,gBAAgB,CAAC,MAAc,EAAE,MAAc,EAAE,GAAW;IACnE,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,WAAW,KAAK,SAAS,EAAE;QAC7B,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;KACpB;SAAM,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE;QAChC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;YAC1B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SAClB;QACD,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;YAC9B,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;SAClD;KACF;SAAM;QAEL,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;KAC3B;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,MAAc,EAAE,MAAc;IACtD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACrB,OAAO;KACR;IACD,IAAI,MAAM,KAAK,MAAM,EAAE;QACrB,OAAO;KACR;IAED,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;QACxB,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;KACvC;AACH,CAAC;AAED,SAAS,WAAW,CAAC,MAAc,EAAE,GAAG,OAAsB;IAC5D,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,GAAG,EAAE,CAAC;KACb;IACD,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC;IACrB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAC9B,OAAO,EAAE,WAAW,GAAG,MAAM,EAAE;QAC7B,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;QACpC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAClC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","file":"js.js","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { cloneDeep, isObject } from '@visactor/vutils';\n\n/**\n * 深拷贝\n * @param target 目标对象\n * @param sources 来源对象\n * @returns\n */\nexport const mergeDeepImmer = function (target: Object, ...sources: Array<Object>) {\n  return mergeOption(cloneDeep(target), ...sources);\n};\n\nfunction _mergeOptionDeep(target: Object, source: Object, key: string) {\n  const sourceValue = source[key];\n  if (sourceValue === undefined) {\n    target[key] = null; // undefined 转为 null 并且也覆盖\n  } else if (isObject(sourceValue)) {\n    if (!isObject(target[key])) {\n      target[key] = {};\n    }\n    for (const _key in sourceValue) {\n      _mergeOptionDeep(target[key], sourceValue, _key);\n    }\n  } else {\n    // 其余类型全部替换\n    target[key] = sourceValue;\n  }\n}\n\nfunction _mergeOptionBase(target: Object, source: Object) {\n  if (!isObject(source)) {\n    return;\n  }\n  if (target === source) {\n    return;\n  }\n  // keysIn\n  for (const key in source) {\n    _mergeOptionDeep(target, source, key);\n  }\n}\n\nfunction mergeOption(target: Object, ...sources: Array<Object>): any {\n  if (!target) {\n    target = {};\n  }\n  let sourceIndex = -1;\n  const length = sources.length;\n  while (++sourceIndex < length) {\n    const source = sources[sourceIndex];\n    _mergeOptionBase(target, source);\n  }\n  return target;\n}\n"]}