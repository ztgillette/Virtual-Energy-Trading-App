{"version":3,"sources":["../src/parser/dsv.ts"],"names":[],"mappings":";;;AAAA,mCAAuD;AACvD,6CAA4C;AAC5C,4CAA6C;AAE7C,oCAA6C;AAO7C,MAAM,0BAA0B,GAAG;IACjC,SAAS,EAAE,GAAG;CACf,CAAC;AAQK,MAAM,SAAS,GAAW,CAAC,IAAY,EAAE,UAA6B,EAAE,EAAE,QAAkB,EAAE,EAAE;IACrG,QAAQ,CAAC,IAAI,GAAG,yBAAa,CAAC,GAAG,CAAC;IAElC,MAAM,YAAY,GAAG,IAAA,mBAAc,EAAC,0BAA0B,EAAE,OAAO,CAAsB,CAAC;IAE9F,MAAM,EAAE,SAAS,EAAE,GAAG,YAAY,CAAC;IACnC,IAAI,CAAC,IAAA,iBAAQ,EAAC,SAAS,CAAC,EAAE;QACxB,MAAM,IAAI,SAAS,CAAC,sCAAsC,CAAC,CAAC;KAC7D;IACD,OAAO,IAAA,kBAAS,EAAC,SAAS,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC,CAAC;AAVW,QAAA,SAAS,aAUpB;AAOK,MAAM,SAAS,GAAW,CAAC,IAAY,EAAE,UAA6B,EAAE,EAAE,QAAkB,EAAE,EAAE;IACrG,QAAQ,CAAC,IAAI,GAAG,yBAAa,CAAC,GAAG,CAAC;IAClC,OAAO,IAAA,iBAAQ,EAAC,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;AAHW,QAAA,SAAS,aAGpB;AAOK,MAAM,SAAS,GAAW,CAAC,IAAY,EAAE,UAA6B,EAAE,EAAE,QAAkB,EAAE,EAAE;IACrG,QAAQ,CAAC,IAAI,GAAG,yBAAa,CAAC,GAAG,CAAC;IAClC,OAAO,IAAA,iBAAQ,EAAC,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;AAHW,QAAA,SAAS,aAGpB","file":"dsv.js","sourcesContent":["import { dsvFormat, csvParse, tsvParse } from 'd3-dsv';\nimport { isString } from '@visactor/vutils';\nimport { DATAVIEW_TYPE } from '../constants';\nimport type { DataView } from '../data-view';\nimport { mergeDeepImmer } from '../utils/js';\nimport type { Parser } from '.';\n\nexport interface IDsvParserOptions {\n  delimiter?: string; // delimiter 必须是一个单字符\n}\n\nconst DEFAULT_DSV_PARSER_OPTIONS = {\n  delimiter: ',' // delimiter参数值默认为半角逗号，即默认将被处理文件视为CSV,当delimiter='\\t'时，被处理文件就是TSV。\n};\n\n/**\n * 根据指定的 delimiter 构造一个新的 DSV(支持范式的分隔符分隔值文件，delimiter-separated values)解析以及格式化。\n * @param data\n * @param options\n * @returns\n */\nexport const dsvParser: Parser = (data: string, options: IDsvParserOptions = {}, dataView: DataView) => {\n  dataView.type = DATAVIEW_TYPE.DSV;\n\n  const mergeOptions = mergeDeepImmer(DEFAULT_DSV_PARSER_OPTIONS, options) as IDsvParserOptions;\n\n  const { delimiter } = mergeOptions;\n  if (!isString(delimiter)) {\n    throw new TypeError('Invalid delimiter: must be a string!');\n  }\n  return dsvFormat(delimiter).parse(data);\n};\n\n/**\n * 解析指定的 CSV 字符串并返回对象数组\n * @param data\n * @returns\n */\nexport const csvParser: Parser = (data: string, options: IDsvParserOptions = {}, dataView: DataView) => {\n  dataView.type = DATAVIEW_TYPE.DSV;\n  return csvParse(data);\n};\n\n/**\n * 解析指定的 TSV 字符串并返回对象数组\n * @param data\n * @returns\n */\nexport const tsvParser: Parser = (data: string, options: IDsvParserOptions = {}, dataView: DataView) => {\n  dataView.type = DATAVIEW_TYPE.DSV;\n  return tsvParse(data);\n};\n"]}