{"version":3,"sources":["../src/parser/geo/topojson.ts"],"names":[],"mappings":";;;AAAA,qDAA0C;AAE1C,6CAA4C;AAC5C,+CAAgD;AAGhD,uCAAgD;AAEhD,uCAAmE;AAMnE,MAAM,wBAAwB,GAAG,EAAE,CAAC;AAQ7B,MAAM,cAAc,GAAW,CAAC,IAAc,EAAE,OAA+B,EAAE,QAAkB,EAAE,EAAE;IAC5G,QAAQ,CAAC,IAAI,GAAG,yBAAa,CAAC,GAAG,CAAC;IAClC,MAAM,YAAY,GAAG,IAAA,mBAAc,EAAC,iCAAuB,EAAE,wBAAwB,EAAE,OAAO,CAAC,CAAC;IAChG,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC;IAChC,IAAI,CAAC,IAAA,iBAAQ,EAAC,MAAM,CAAC,EAAE;QACrB,MAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;KAC1D;IACD,MAAM,OAAO,GAAG,IAAA,yBAAO,EAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACpD,OAAO,IAAA,uBAAa,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;AACxD,CAAC,CAAC;AATW,QAAA,cAAc,kBASzB","file":"topojson.js","sourcesContent":["import { feature } from 'topojson-client';\nimport type { Topology } from 'topojson-specification';\nimport { isString } from '@visactor/vutils';\nimport { DATAVIEW_TYPE } from '../../constants';\nimport type { DataView } from '../../data-view';\nimport type { Parser } from '..';\nimport { mergeDeepImmer } from '../../utils/js';\nimport type { IGeoJSONOptions } from './geojson';\nimport { DEFAULT_GEOJSON_OPTIONS, geoJSONParser } from './geojson';\n\nexport interface ITopoJsonParserOptions extends IGeoJSONOptions {\n  object: string; // TopoJSON 相当于多个 GeoJSON 合并起来做了压缩，其中每一个 object 都相当于一份 GeoJSON 数据，指定 object 就是从中提取一份 Geo 数据\n}\n\nconst DEFAULT_TOPOJSON_OPTIONS = {};\n/**s\n * topojson 数据解析\n * @param data\n * @param options\n * @param dataView\n * @returns\n */\nexport const topoJSONParser: Parser = (data: Topology, options: ITopoJsonParserOptions, dataView: DataView) => {\n  dataView.type = DATAVIEW_TYPE.GEO;\n  const mergeOptions = mergeDeepImmer(DEFAULT_GEOJSON_OPTIONS, DEFAULT_TOPOJSON_OPTIONS, options);\n  const { object } = mergeOptions;\n  if (!isString(object)) {\n    throw new TypeError('Invalid object: must be a string!');\n  }\n  const geoData = feature(data, data.objects[object]);\n  return geoJSONParser(geoData, mergeOptions, dataView);\n};\n"]}