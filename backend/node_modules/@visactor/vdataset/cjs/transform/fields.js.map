{"version":3,"sources":["../src/transform/fields.ts"],"names":[],"mappings":"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","file":"fields.js","sourcesContent":["import { isValid, isValidNumber } from '@visactor/vutils';\nimport type { IFields } from '../data-view';\nimport type { IFieldsMeta } from '../data-view';\nimport type { Transform } from '.';\n\ntype SortInfoType = {\n  key: string;\n  type: 'ordinal' | 'linear';\n  index: number;\n  sortIndex: { [key: string]: number };\n  sortReverse: boolean;\n  sortIndexCount: number;\n};\n\nexport interface IFieldsOptions {\n  fields: IFields;\n}\n\ninterface IFieldsMetaTemp extends IFieldsMeta {\n  _domainCache: { [key: string]: number };\n  alias?: string;\n}\ninterface IFieldsTemp extends IFields {\n  [key: string]: IFieldsMetaTemp;\n}\n\n/**\n * 数据过滤\n * @param data\n * @param options\n * @returns\n */\nexport const fields: Transform = (data: Array<object>, options: IFieldsOptions) => {\n  if (!options?.fields) {\n    return data;\n  }\n  if (data.length === 0) {\n    return data;\n  }\n  const fields = options.fields;\n  const dataTemp = data[0];\n  const filterFields: IFieldsTemp = {};\n  const sortFields: SortInfoType[] = [];\n  for (const key in fields) {\n    if (Object.prototype.hasOwnProperty.call(fields, key)) {\n      const fieldInfo = fields[key] as IFieldsMetaTemp;\n      if (fieldInfo.sort) {\n        if (!isValidNumber(fieldInfo.sortIndex)) {\n          fieldInfo.sortIndex = 0;\n        }\n        if (!isValid(fieldInfo.sortReverse)) {\n          fieldInfo.sortReverse = fieldInfo.sort === 'desc';\n        }\n      }\n      if (!fieldInfo.type) {\n        let dataCheck = dataTemp;\n        if (!(key in dataTemp)) {\n          dataCheck = data.find(d => key in d) ?? dataTemp;\n        }\n        fieldInfo.type = typeof dataCheck[key] === 'number' ? 'linear' : 'ordinal';\n      }\n      let sortInfo: SortInfoType;\n      if (typeof fieldInfo.sortIndex === 'number') {\n        sortInfo = {\n          key,\n          type: fieldInfo.type,\n          index: fieldInfo.sortIndex,\n          sortIndex: {},\n          sortIndexCount: 0,\n          sortReverse: fieldInfo.sortReverse === true\n        };\n        sortFields.push(sortInfo);\n      }\n      // if has domain & type = ordinal, make domain cache\n      if (fieldInfo.domain?.length > 0) {\n        if (fieldInfo.type === 'ordinal') {\n          fieldInfo._domainCache = {};\n          filterFields[key] = fieldInfo;\n          // for sort\n          const _domainCache = {};\n          fieldInfo.domain.forEach((d, i) => {\n            _domainCache[d] = i;\n            fieldInfo._domainCache[d] = i;\n          });\n          if (sortInfo) {\n            sortInfo.sortIndex = _domainCache;\n            sortInfo.sortIndexCount = fieldInfo.domain.length;\n          }\n        } else if (fieldInfo.domain.length >= 2) {\n          filterFields[key] = fieldInfo;\n        }\n      }\n    }\n  }\n  // domain filter and sort\n  const filterKeys = Object.keys(filterFields);\n  if (filterKeys.length > 0) {\n    data = data.filter(d => {\n      for (const key in filterFields) {\n        const fieldInfo = filterFields[key];\n        if (fieldInfo.type === 'ordinal') {\n          if (!(d[key] in fieldInfo._domainCache)) {\n            return false;\n          }\n        } else {\n          if (fieldInfo.domain[0] > d[key] || fieldInfo.domain[1] < d[key]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    });\n  }\n\n  sortFields.sort((a, b) => a.index - b.index);\n\n  data.sort((a, b) => sortData(a, b, sortFields));\n\n  return data;\n};\n\nfunction sortData(a: object, b: object, sortFields: SortInfoType[]) {\n  for (let i = 0; i < sortFields.length; i++) {\n    const sortInfo = sortFields[i];\n    let v = 0;\n    if (sortInfo.type === 'ordinal') {\n      // eslint-disable-next-line no-undefined\n      if (sortInfo.sortIndex[b[sortInfo.key]] === undefined) {\n        sortInfo.sortIndex[b[sortInfo.key]] = sortInfo.sortIndexCount++;\n      }\n      // eslint-disable-next-line no-undefined\n      if (sortInfo.sortIndex[a[sortInfo.key]] === undefined) {\n        sortInfo.sortIndex[a[sortInfo.key]] = sortInfo.sortIndexCount++;\n      }\n      v = sortInfo.sortIndex[a[sortInfo.key]] - sortInfo.sortIndex[b[sortInfo.key]];\n    } else if (sortInfo.type === 'linear') {\n      v = a[sortInfo.key] - b[sortInfo.key];\n    }\n    if (sortInfo.sortReverse) {\n      v = -v;\n    }\n    if (v === 0) {\n      continue;\n    }\n    return v;\n  }\n  return 0;\n}\n"]}