{"version":3,"sources":["../src/utils/color/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { ColorUtil } from '@visactor/vutils';\nexport interface IColorRGBObj {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface IColorRGBAObj extends IColorRGBObj {\n  a: number;\n}\n\n/**\n * 根据值生成线性颜色（升序）, 修改data 插入 colorObj 字段\n * @param startColor\n * @param endColor\n * @param total\n */\nexport function colorLinearGenerator(startColor: string, endColor: string, data: Array<any>, field: string) {\n  // 未传入 startColor ， 即range = [] , 则返回原数据，颜色取defaultColor\n  if (!startColor) {\n    console.warn(`Warn: 颜色 range 未传入 startColor`);\n    return;\n  }\n  // 未传入 endColor ，则全部采用startColor\n  if (!endColor) {\n    const colorObj = ColorObjGenerator(startColor);\n    data.forEach((item, index) => {\n      item.colorObj = colorObj;\n    });\n    return;\n  }\n\n  const { color: startColorObj, opacity: startOpacity } = ColorObjGenerator(startColor);\n  const { r: startR, g: startG, b: startB } = startColorObj.color;\n  const { color: endColorObj, opacity: endOpacity } = ColorObjGenerator(endColor);\n  const { r: endR, g: endG, b: endB } = endColorObj.color;\n\n  const dR = endR - startR;\n  const dG = endG - startG;\n  const dB = endB - startB;\n  const dA = endOpacity - startOpacity;\n  const total = data.length;\n  if (total === 0) {\n    // 如果 数据传入空数组[]，则返回原数据，颜色取defaultColor\n    return;\n  }\n  if (total === 1) {\n    data[0].colorObj = {\n      color: new ColorUtil.Color(new ColorUtil.RGB(startR, startG, startB).toString()),\n      transparent: true,\n      opacity: startOpacity\n    };\n    return;\n  } else if (total === 2) {\n    data[0].colorObj = {\n      color: new ColorUtil.Color(new ColorUtil.RGB(startR, startG, startB).toString()),\n      transparent: true,\n      opacity: startOpacity\n    };\n    data[1].colorObj = {\n      color: new ColorUtil.Color(new ColorUtil.RGB(endR, endG, endB).toString()),\n      transparent: true,\n      opacity: endOpacity\n    };\n    return;\n  }\n  const dValue = data[total - 1][field] - data[0][field];\n\n  data.forEach((item, index) => {\n    const step = dValue === 0 ? 0 : (item[field] - data[0][field]) / dValue;\n\n    const color = `rgba(${Math.floor((startR + dR * step) * 255)},${Math.floor(\n      (startG + dG * step) * 255\n    )},${Math.floor((startB + dB * step) * 255)}, ${startOpacity + dA * step})`;\n    const colorObj = ColorObjGenerator(color);\n    item.colorObj = colorObj;\n  });\n\n  return;\n}\n\n/**\n * 根据值分布生成离散颜色（升序）\n * @param startColor\n * @param endColor\n * @param total\n */\nexport function colorOrdinalGenerator(colorRange: Array<string>, data: Array<any>) {\n  //  range = [] , 则返回原数据，颜色取defaultColor\n  if (colorRange.length === 0) {\n    console.warn(`Warn: 颜色 range 未传入 `);\n    return;\n  }\n  const step = data.length / colorRange.length;\n  const __processColorObjRange = colorRange.map(color => {\n    return ColorObjGenerator(color);\n  });\n  data.forEach((item, index) => {\n    const colorObj = __processColorObjRange[Math.ceil(index / step) - 1];\n    item.colorObj = colorObj;\n  });\n}\n\n/**\n * 颜色构造器\n * ! 因为Color不支持rgba解析，所以包一层hack实现\n * @param color\n */\nexport function ColorObjGenerator(color: string): IColorObjGenerator {\n  const reg = /^(rgba|RGBA)/;\n  let rgbaColor;\n  if (reg.test(color)) {\n    rgbaColor = rgbaStr2RgbaObj(color);\n  }\n\n  return {\n    color: new ColorUtil.Color(color),\n    transparent: !!rgbaColor,\n    opacity: rgbaColor ? rgbaColor.a : 1 // alpha 没有的话 默认为1\n  };\n}\n\nexport interface IColorObjGenerator {\n  color: ColorUtil.Color;\n  transparent: boolean;\n  opacity: number;\n}\n\n/**\n * rgba 字符串转对象\n * 将'rgba(255,255,255,1)' 改为 {r:255, g:255, b:255,a:1}\n * @param color\n */\nexport function rgbaStr2RgbaObj(color: string): IColorRGBAObj {\n  // 把RGB的3个数值变成数组\n  const colorArr = color.replace(/(?:\\(|\\)|rgba|RGBA)*/g, '').split(',');\n\n  return {\n    r: Number(colorArr[0]),\n    g: Number(colorArr[1]),\n    b: Number(colorArr[2]),\n    a: Number(colorArr[3])\n  };\n}\n"]}