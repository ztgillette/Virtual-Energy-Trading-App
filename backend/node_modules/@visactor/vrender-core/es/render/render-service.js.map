{"version":3,"sources":["../src/render/render-service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAG9D,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAE1D,MAAM,CAAC,MAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AACzD,MAAM,CAAC,MAAM,yBAAyB,GAAG,MAAM,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;AAO1E,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAO/B,YAEkB,gBAAmC;QAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;IAClD,CAAC;IAGJ,OAAO,CAAC,YAAqB;QAG3B,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO;SACR;QACD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAC/B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,OAAO;IACT,CAAC;IACS,QAAQ,CAAC,CAAW,EAAE,YAAqB;QACnD,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;YACpB,IAAI,CAAC,QAAQ,CAAC,CAAa,EAAE,YAAY,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,CAAC,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,iBAAiB;QACf,OAAO;IACT,CAAC;IAED,UAAU,CAAC,MAAgC;QACzC,OAAO;IACT,CAAC;IAED,IAAI,CAAC,MAAgC;QACnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,oBAAO,IAAI,CAAC,UAAU,EAAG,CAAC;IAC3D,CAAC;IAED,SAAS,CAAC,MAAgC;QACxC,IAAI,CAAC,gBAAgB,CAAC,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,oBAAO,IAAI,CAAC,UAAU,EAAG,CAAC;QACjG,OAAO;IACT,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,MAAgB,EAAE,MAAgC;QACvD,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAEzB,CAAC;CACF,CAAA;AAhEY,oBAAoB;IADhC,UAAU,EAAE;IASR,WAAA,MAAM,CAAC,gBAAgB,CAAC,CAAA;;GARhB,oBAAoB,CAgEhC;SAhEY,oBAAoB","file":"render-service.js","sourcesContent":["import { injectable, inject } from '../common/inversify-lite';\nimport type { IAABBBounds, IBounds } from '@visactor/vutils';\nimport type { IGroup, IGraphic, IRenderService, IRenderServiceDrawParams, IDrawContribution } from '../interface';\nimport { DrawContribution } from './contributions/render';\n\nexport const RenderService = Symbol.for('RenderService');\nexport const BeforeRenderConstribution = Symbol.for('BeforeRenderConstribution');\n\n/**\n * 渲染用的service，通常和stage一一绑定，\n * 并不是单例模式，所以会绑定此次渲染的一些数据\n */\n@injectable()\nexport class DefaultRenderService implements IRenderService {\n  // 每次render都会变的数据\n  dirtyBounds: IBounds;\n  renderTreeRoots: IGraphic[]; // 此次render的数组\n  renderLists: IGraphic[];\n  drawParams: IRenderServiceDrawParams;\n\n  constructor(\n    @inject(DrawContribution)\n    public readonly drawContribution: IDrawContribution\n  ) {}\n\n  // 渲染前准备工作，计算bounds等逻辑\n  prepare(updateBounds: boolean): void {\n    // 如果不需要计算Bounds，那么transMatrix也不需要计算\n    // TODO 后期可能存在依赖transMatrix的插件，但目前不存在\n    if (!updateBounds) {\n      return;\n    }\n    this.renderTreeRoots.forEach(g => {\n      this._prepare(g, updateBounds);\n    });\n    return;\n  }\n  protected _prepare(g: IGraphic, updateBounds: boolean) {\n    g.forEachChildren(g => {\n      this._prepare(g as IGraphic, updateBounds);\n    });\n    g.update({ bounds: updateBounds, trans: true });\n  }\n  // 获取要渲染的list，可能存在一些不用渲染的内容，以及外描边\n  prepareRenderList(): void {\n    return;\n  }\n  // 渲染前流程\n  beforeDraw(params: IRenderServiceDrawParams): void {\n    return;\n  }\n  // 具体渲染\n  draw(params: IRenderServiceDrawParams): void {\n    this.drawContribution.draw(this, { ...this.drawParams });\n  }\n  // 渲染后流程\n  afterDraw(params: IRenderServiceDrawParams): void {\n    this.drawContribution.afterDraw && this.drawContribution.afterDraw(this, { ...this.drawParams });\n    return;\n  }\n\n  reInit() {\n    this.drawContribution.reInit();\n  }\n  // 对外暴露的绘制方法\n  render(groups: IGroup[], params: IRenderServiceDrawParams): void {\n    this.renderTreeRoots = groups;\n    this.drawParams = params;\n    const updateBounds = params.updateBounds;\n    this.prepare(updateBounds);\n    this.prepareRenderList();\n    this.beforeDraw(params);\n    this.draw(params);\n    this.afterDraw(params);\n    this.drawParams = null;\n    // this.renderTreeRoots = [];\n  }\n}\n"]}