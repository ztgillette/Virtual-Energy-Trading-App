{"version":3,"sources":["../src/render/contributions/render/rect-module.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,uCAAuC,CAAC;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAE5D,OAAO,EACL,wCAAwC,EACxC,gCAAgC,EAChC,iCAAiC,EAClC,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAyB,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AAC1F,OAAO,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AACxD,OAAO,EAAa,aAAa,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAEhE,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;IACnD,IAAI,cAAc,EAAE;QAClB,OAAO;KACR;IACD,cAAc,GAAG,IAAI,CAAC;IAEtB,IAAI,CAAC,uBAAuB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IAC1D,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAChE,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC1C,IAAI,CAAC,gCAAgC,CAAC,CAAC,MAAM,EAAE,CAAC;IAChD,IAAI,CAAC,iCAAiC,CAAC,CAAC,MAAM,EAAE,CAAC;IACjD,IAAI,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;IACzE,IAAI,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;IAC1E,IAAI,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,wCAAwC,CAAC,CAAC;IAEjF,wBAAwB,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC","file":"rect-module.js","sourcesContent":["import { bindContributionProvider } from '../../../common/contribution-provider';\nimport { ContainerModule } from '../../../common/inversify';\nimport { DefaultCanvasArcRender } from './arc-render';\nimport {\n  DefaultBaseInteractiveRenderContribution,\n  SplitRectAfterRenderContribution,\n  SplitRectBeforeRenderContribution\n} from './contributions';\nimport { ArcRenderContribution, RectRenderContribution } from './contributions/constants';\nimport { DefaultCanvasRectRender } from './rect-render';\nimport { ArcRender, GraphicRender, RectRender } from './symbol';\n\nlet loadRectModule = false;\nexport const rectModule = new ContainerModule(bind => {\n  if (loadRectModule) {\n    return;\n  }\n  loadRectModule = true;\n  // rect 渲染器\n  bind(DefaultCanvasRectRender).toSelf().inSingletonScope();\n  bind(RectRender).to(DefaultCanvasRectRender).inSingletonScope();\n  bind(GraphicRender).toService(RectRender);\n  bind(SplitRectAfterRenderContribution).toSelf();\n  bind(SplitRectBeforeRenderContribution).toSelf();\n  bind(RectRenderContribution).toService(SplitRectAfterRenderContribution);\n  bind(RectRenderContribution).toService(SplitRectBeforeRenderContribution);\n  bind(RectRenderContribution).toService(DefaultBaseInteractiveRenderContribution);\n  // rect 渲染器注入contributions\n  bindContributionProvider(bind, RectRenderContribution);\n});\n"]}