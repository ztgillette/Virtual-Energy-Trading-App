{"version":3,"sources":["../src/render/contributions/render/draw-interceptor.ts"],"names":[],"mappings":"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","file":"draw-interceptor.js","sourcesContent":["import { injectable } from '../../../common/inversify-lite';\nimport { AABBBounds } from '@visactor/vutils';\nimport { mat3Tomat4, multiplyMat4Mat4 } from '../../../common/matrix';\nimport { graphicCreator } from '../../../graphic/graphic-creator';\nimport type {\n  IContext2d,\n  IDrawContext,\n  IDrawContribution,\n  IDrawItemInterceptorContribution,\n  IGraphic,\n  IGraphicRenderDrawParams,\n  IGroup,\n  ILayer,\n  IRenderService\n} from '../../../interface';\nimport { mat4Allocate, matrixAllocate } from '../../../allocator/matrix-allocate';\nimport { draw3dItem } from '../../../common/3d-interceptor';\n\n// 拦截器\nexport const DrawItemInterceptor = Symbol.for('DrawItemInterceptor');\n\n// @injectable()\n// export class DefaultDrawItemInterceptor implements IDrawItemInterceptor {\n//   drawItem(graphic: IGraphic, renderService: IRenderService, params?: IGraphicRenderDrawParams): boolean {\n//     return false;\n//   }\n// }\n\nconst tempDirtyBounds = new AABBBounds();\nconst tempBackupDirtyBounds = new AABBBounds();\n/**\n * 影子节点拦截器，用于渲染影子节点\n */\n// @injectable()\nexport class ShadowRootDrawItemInterceptorContribution implements IDrawItemInterceptorContribution {\n  order: number = 1;\n  afterDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    // 如果graphic没设置shadowRootIdx，shadowRoot设置了，那就使用shadowRoot的shadowRootIdx\n    if (\n      graphic.attribute.shadowRootIdx == null &&\n      graphic.shadowRoot &&\n      graphic.shadowRoot.attribute.shadowRootIdx < 0\n    ) {\n      return false;\n    }\n    if (\n      graphic.attribute.shadowRootIdx > 0 ||\n      !graphic.attribute.shadowRootIdx ||\n      (graphic.shadowRoot && graphic.shadowRoot.attribute.shadowRootIdx > 0)\n    ) {\n      this.drawItem(graphic, renderService, drawContext, drawContribution, params);\n    }\n    return false;\n  }\n\n  beforeDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    // 如果graphic没设置shadowRootIdx，shadowRoot设置了，那就使用shadowRoot的shadowRootIdx\n    if (\n      graphic.attribute.shadowRootIdx == null &&\n      graphic.shadowRoot &&\n      graphic.shadowRoot.attribute.shadowRootIdx > 0\n    ) {\n      return false;\n    }\n    if (graphic.attribute.shadowRootIdx < 0 || (graphic.shadowRoot && graphic.shadowRoot.attribute.shadowRootIdx < 0)) {\n      this.drawItem(graphic, renderService, drawContext, drawContribution, params);\n    }\n    return false;\n  }\n\n  protected drawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    if (!graphic.shadowRoot) {\n      return false;\n    }\n\n    const { context } = drawContext;\n    context.highPerformanceSave();\n    // 直接transform\n    context.transformFromMatrix(graphic.transMatrix, true);\n\n    // 变换dirtyBounds\n    if (drawContribution.dirtyBounds && drawContribution.backupDirtyBounds) {\n      tempDirtyBounds.copy(drawContribution.dirtyBounds);\n      tempBackupDirtyBounds.copy(drawContribution.backupDirtyBounds);\n      const m = graphic.globalTransMatrix.getInverse();\n      drawContribution.dirtyBounds.copy(drawContribution.backupDirtyBounds).transformWithMatrix(m);\n      drawContribution.backupDirtyBounds.copy(drawContribution.dirtyBounds);\n    }\n\n    // 设置context的transform到上一个节点\n    drawContribution.renderGroup(graphic.shadowRoot, drawContext, matrixAllocate.allocate(1, 0, 0, 1, 0, 0));\n\n    context.highPerformanceRestore();\n\n    if (drawContribution.dirtyBounds && drawContribution.backupDirtyBounds) {\n      drawContribution.dirtyBounds.copy(tempDirtyBounds);\n      drawContribution.backupDirtyBounds.copy(tempBackupDirtyBounds);\n    }\n\n    return true;\n  }\n}\n\n// @injectable()\nexport class DebugDrawItemInterceptorContribution implements IDrawItemInterceptorContribution {\n  order: number = 1;\n\n  afterDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    if (graphic.attribute._debug_bounds) {\n      this.drawItem(graphic, renderService, drawContext, drawContribution, params);\n    }\n    return false;\n  }\n\n  protected drawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    if (!graphic.attribute._debug_bounds) {\n      return false;\n    }\n\n    const { context } = drawContext;\n    context.highPerformanceSave();\n    // 直接transform\n    graphic.parent && context.setTransformFromMatrix(graphic.parent.globalTransMatrix, true);\n    graphic.glyphHost &&\n      graphic.glyphHost.parent &&\n      context.setTransformFromMatrix(graphic.glyphHost.parent.globalTransMatrix, true);\n\n    const b = graphic.AABBBounds;\n\n    if (graphic.attribute._debug_bounds !== true) {\n      graphic.attribute._debug_bounds(context, graphic);\n    }\n    context.strokeRect(b.x1, b.y1, b.width(), b.height());\n\n    context.highPerformanceRestore();\n\n    return true;\n  }\n}\n\n@injectable()\nexport class CommonDrawItemInterceptorContribution implements IDrawItemInterceptorContribution {\n  order: number = 1;\n  interceptors: IDrawItemInterceptorContribution[];\n  constructor() {\n    this.interceptors = [\n      new ShadowRootDrawItemInterceptorContribution(),\n      new Canvas3DDrawItemInterceptor(),\n      new InteractiveDrawItemInterceptorContribution(),\n      new DebugDrawItemInterceptorContribution()\n    ];\n  }\n  afterDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    // 【性能方案】判定写在外层,减少遍历判断耗时，10000条数据减少1ms\n    if (\n      (!graphic.in3dMode || drawContext.in3dInterceptor) &&\n      !graphic.shadowRoot &&\n      !graphic.attribute._debug_bounds &&\n      !(graphic.baseGraphic || graphic.attribute.globalZIndex || graphic.interactiveGraphic)\n    ) {\n      return false;\n    }\n\n    for (let i = 0; i < this.interceptors.length; i++) {\n      if (\n        this.interceptors[i].afterDrawItem &&\n        this.interceptors[i].afterDrawItem(graphic, renderService, drawContext, drawContribution, params)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  beforeDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    // 【性能方案】判定写在外层,减少遍历判断耗时，10000条数据减少1ms\n    if (\n      (!graphic.in3dMode || drawContext.in3dInterceptor) &&\n      !graphic.shadowRoot &&\n      !graphic.attribute._debug_bounds &&\n      !(graphic.baseGraphic || graphic.attribute.globalZIndex || graphic.interactiveGraphic)\n    ) {\n      return false;\n    }\n\n    for (let i = 0; i < this.interceptors.length; i++) {\n      if (\n        this.interceptors[i].beforeDrawItem &&\n        this.interceptors[i].beforeDrawItem(graphic, renderService, drawContext, drawContribution, params)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * 交互层节点拦截器，用于支持交互层图元\n */\n// @injectable()\nexport class InteractiveDrawItemInterceptorContribution implements IDrawItemInterceptorContribution {\n  order: number = 1;\n  processing: boolean;\n  // afterDrawItem(\n  //   graphic: IGraphic,\n  //   renderService: IRenderService,\n  //   drawContext: IDrawContext,\n  //   drawContribution: IDrawContribution,\n  //   params?: IGraphicRenderDrawParams\n  // ): boolean {\n\n  //   if (graphic.attribute.shadowRootIdx > 0 || !graphic.attribute.shadowRootIdx) {\n  //     this.drawItem(graphic, renderService, drawContext, drawContribution, params);\n  //   }\n  //   return false;\n  // }\n\n  beforeDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    if (this.processing) {\n      return false;\n    }\n    // 判断是否在交互层\n    if (graphic.baseGraphic) {\n      return this.beforeDrawInteractive(graphic, renderService, drawContext, drawContribution, params);\n    }\n    return this.beforeSetInteractive(graphic, renderService, drawContext, drawContribution, params);\n  }\n\n  /**\n   * 用于提升interactive\n   * @param graphic\n   * @param renderService\n   * @param drawContext\n   * @param drawContribution\n   * @param params\n   */\n  beforeSetInteractive(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    let interactiveGraphic: IGraphic = graphic.interactiveGraphic;\n    if (graphic.attribute.globalZIndex) {\n      if (!interactiveGraphic) {\n        interactiveGraphic = graphic.clone();\n        graphic.interactiveGraphic = interactiveGraphic;\n        interactiveGraphic.baseGraphic = graphic;\n      }\n      // 设置位置\n      // const m = graphic.globalTransMatrix;\n      interactiveGraphic.setAttributes(\n        {\n          globalZIndex: 0,\n          zIndex: graphic.attribute.globalZIndex\n        },\n        false,\n        { skipUpdateCallback: true }\n      );\n      // 添加到交互层中\n      drawContext.stage.tryInitInteractiveLayer();\n      const interactiveLayer = drawContext.stage.getLayer('_builtin_interactive');\n      if (interactiveLayer) {\n        const shadowRoot = this.getShadowRoot(interactiveLayer);\n        shadowRoot.add(interactiveGraphic);\n      }\n      return true;\n    } else if (interactiveGraphic) {\n      // 从交互层中删除\n      drawContext.stage.tryInitInteractiveLayer();\n      const interactiveLayer = drawContext.stage.getLayer('_builtin_interactive');\n      if (interactiveLayer) {\n        const shadowRoot = this.getShadowRoot(interactiveLayer);\n        shadowRoot.removeChild(interactiveGraphic);\n      }\n      graphic.interactiveGraphic = null;\n      interactiveGraphic.baseGraphic = null;\n    }\n    return false;\n  }\n\n  /**\n   * 用于绘制interactive\n   * @param graphic\n   * @param renderService\n   * @param drawContext\n   * @param drawContribution\n   * @param params\n   */\n  beforeDrawInteractive(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ): boolean {\n    // 默认使用原始的图元\n    const baseGraphic = graphic.baseGraphic as IGraphic;\n    // 如果主图元被删除了，那把交互图元这个也删除\n    // 一直往上找\n    let intree = !!baseGraphic.stage;\n    let _g = baseGraphic.parent;\n    while (intree && _g) {\n      if ((_g as any).stage === _g) {\n        break;\n      }\n      intree = !!_g.stage;\n      _g = _g.parent;\n    }\n    if (!intree) {\n      const interactiveLayer = drawContext.stage.getLayer('_builtin_interactive');\n      if (interactiveLayer) {\n        const shadowRoot = this.getShadowRoot(interactiveLayer);\n        shadowRoot.removeChild(graphic);\n      }\n      return true;\n    }\n    if (baseGraphic) {\n      this.processing = true;\n      const { context } = drawContext;\n      context.highPerformanceSave();\n      // 直接transform\n      context.setTransformFromMatrix(baseGraphic.parent.globalTransMatrix, true);\n      // context.fillRect(0, 0, 100, 100);\n      // 设置context的transform到上一个节点\n      baseGraphic.isContainer\n        ? drawContribution.renderGroup(baseGraphic as IGroup, drawContext, baseGraphic.parent.globalTransMatrix)\n        : drawContribution.renderItem(baseGraphic, drawContext);\n\n      context.highPerformanceRestore();\n      this.processing = false;\n\n      return true;\n    }\n    return false;\n  }\n  getShadowRoot(interactiveLayer: ILayer) {\n    // 获取绑定影子节点的group\n    let group = interactiveLayer.getElementById('_interactive_group') as IGroup;\n    if (!group) {\n      group = graphicCreator.CreateGraphic('group', {});\n      group.id = '_interactive_group';\n      interactiveLayer.add(group);\n    }\n    return group.shadowRoot ?? group.attachShadow();\n  }\n}\n\n/**\n * 3d拦截器，用于渲染3d视角\n */\n// @injectable()\nexport class Canvas3DDrawItemInterceptor implements IDrawItemInterceptorContribution {\n  // canvas?: ICanvas;\n  order: number = 1;\n\n  beforeDrawItem(\n    graphic: IGraphic,\n    renderService: IRenderService,\n    drawContext: IDrawContext,\n    drawContribution: IDrawContribution,\n    params?: IGraphicRenderDrawParams\n  ) {\n    if (!graphic.in3dMode || drawContext.in3dInterceptor) {\n      return false;\n    }\n\n    drawContext.in3dInterceptor = true;\n    const { context, stage } = renderService.drawParams;\n    const canvas = context.canvas;\n\n    // 使用3d模式渲染\n    context.save();\n    this.initCanvasCtx(context);\n    context.camera = stage.camera;\n\n    // 将三维矩阵换成四维矩阵\n    const m = context.currentMatrix;\n    m.a /= context.dpr;\n    m.b /= context.dpr;\n    m.c /= context.dpr;\n    m.d /= context.dpr;\n    m.e /= context.dpr;\n    m.f /= context.dpr;\n    const matrix = mat4Allocate.allocate();\n    mat3Tomat4(matrix, m);\n    const lastModelMatrix = context.modelMatrix;\n    if (lastModelMatrix) {\n      if (matrix) {\n        const m = mat4Allocate.allocate();\n        context.modelMatrix = multiplyMat4Mat4(m, lastModelMatrix, matrix);\n      }\n    } else {\n      context.modelMatrix = matrix;\n    }\n    context.setTransform(1, 0, 0, 1, 0, 0, true);\n\n    // 设置context的transform到上一个节点\n    if (graphic.isContainer) {\n      draw3dItem(\n        context,\n        graphic,\n        (isPie: boolean, is3d: boolean) => {\n          return drawContribution.renderGroup(\n            graphic as IGroup,\n            drawContext,\n            graphic.parent.globalTransMatrix,\n            !isPie && is3d\n          );\n        },\n        drawContext\n      );\n    } else {\n      drawContribution.renderItem(graphic, drawContext);\n    }\n    context.camera = null;\n    context.restore();\n\n    if (context.modelMatrix !== lastModelMatrix) {\n      mat4Allocate.free(context.modelMatrix);\n    }\n    context.modelMatrix = lastModelMatrix;\n\n    drawContext.in3dInterceptor = false;\n    return true;\n  }\n\n  initCanvasCtx(context: IContext2d) {\n    context.setTransformForCurrent();\n  }\n}\n"]}