import type { IGraphicAttribute, IContext2d, IMarkAttribute, IImage, IThemeAttribute, IGraphicRender, IImageRenderContribution, IContributionProvider, IDrawContext, IGraphicRenderDrawParams, IRenderService } from '../../../interface';
import { BaseRender } from './base-render';
export declare class DefaultCanvasImageRender extends BaseRender<IImage> implements IGraphicRender {
    protected readonly graphicRenderContributions: IContributionProvider<IImageRenderContribution>;
    type: 'image';
    numberType: number;
    constructor(graphicRenderContributions: IContributionProvider<IImageRenderContribution>);
    drawShape(image: IImage, context: IContext2d, x: number, y: number, drawContext: IDrawContext, params?: IGraphicRenderDrawParams, fillCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, strokeCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean): void;
    draw(image: IImage, renderService: IRenderService, drawContext: IDrawContext): void;
}
