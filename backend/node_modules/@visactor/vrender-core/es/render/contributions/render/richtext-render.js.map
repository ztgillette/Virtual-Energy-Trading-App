{"version":3,"sources":["../src/render/contributions/render/richtext-render.ts"],"names":[],"mappings":"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","file":"richtext-render.js","sourcesContent":["import { injectable } from '../../../common/inversify-lite';\nimport { createRectPath } from '../../../common/shape/rect';\nimport { getTheme } from '../../../graphic/theme';\nimport { RICHTEXT_NUMBER_TYPE } from '../../../graphic/constants';\nimport type {\n  IContext2d,\n  IRichText,\n  IRichTextIcon,\n  IDrawContext,\n  IRenderService,\n  IGraphicRender\n} from '../../../interface';\nimport { fillVisible } from './utils';\nimport { BaseRender } from './base-render';\nimport { defaultTextBackgroundRenderContribution } from './contributions/text-contribution-render';\n\n@injectable()\nexport class DefaultCanvasRichTextRender extends BaseRender<IRichText> implements IGraphicRender {\n  type: 'richtext';\n  numberType: number = RICHTEXT_NUMBER_TYPE;\n\n  constructor() {\n    super();\n    this.builtinContributions = [defaultTextBackgroundRenderContribution as any];\n    this.init();\n  }\n\n  drawShape(richtext: IRichText, context: IContext2d, x: number, y: number, drawContext: IDrawContext) {\n    const richtextAttribute = getTheme(richtext).richtext;\n    const {\n      strokeOpacity = richtextAttribute.strokeOpacity,\n      opacity = richtextAttribute.opacity,\n      fillOpacity = richtextAttribute.fillOpacity,\n      visible = richtextAttribute.visible\n    } = richtext.attribute;\n\n    if (!(richtext.valid && visible)) {\n      return;\n    }\n\n    const fVisible = fillVisible(opacity, fillOpacity, true);\n    const sVisible = fillVisible(opacity, strokeOpacity, true);\n    if (!fVisible) {\n      return;\n    }\n\n    // shadow\n    context.setShadowBlendStyle && context.setShadowBlendStyle(richtext, richtext.attribute, richtextAttribute);\n\n    context.translate(x, y);\n    this.beforeRenderStep(\n      richtext,\n      context,\n      x,\n      y,\n      fVisible,\n      sVisible,\n      fVisible,\n      sVisible,\n      richtextAttribute,\n      drawContext\n    );\n    const frame = richtext.getFrameCache();\n    frame.draw(context, this.drawIcon);\n\n    this.afterRenderStep(\n      richtext,\n      context,\n      x,\n      y,\n      fVisible,\n      sVisible,\n      fVisible,\n      sVisible,\n      richtextAttribute,\n      drawContext\n    );\n  }\n\n  drawIcon(icon: IRichTextIcon, context: IContext2d, x: number, y: number, baseline: number) {\n    const richtextIconAttribute = getTheme(icon).richtextIcon;\n\n    const {\n      width = richtextIconAttribute.width,\n      height = richtextIconAttribute.height,\n      opacity = richtextIconAttribute.opacity,\n      image: url,\n      backgroundFill = richtextIconAttribute.backgroundFill,\n      // backgroundFillColor = richtextIconAttribute.backgroundFillColor,\n      backgroundFillOpacity = richtextIconAttribute.backgroundFillOpacity,\n      backgroundStroke = richtextIconAttribute.backgroundStroke,\n      // backgroundStrokeColor = richtextIconAttribute.backgroundStrokeColor,\n      backgroundStrokeOpacity = richtextIconAttribute.backgroundStrokeOpacity,\n      backgroundRadius = richtextIconAttribute.backgroundRadius,\n      margin\n    } = icon.attribute;\n\n    const { backgroundWidth = width, backgroundHeight = height } = icon.attribute;\n\n    if (margin) {\n      x += icon._marginArray[3];\n      y += icon._marginArray[0];\n    }\n\n    // y -= height / 2 - baseline;\n\n    // 绘制background\n    if (icon._hovered) {\n      const expandX = (backgroundWidth - width) / 2;\n      const expandY = (backgroundHeight - height) / 2;\n\n      if (backgroundRadius === 0) {\n        // 不需要处理圆角\n        context.beginPath();\n        context.rect(x - expandX, y - expandY, backgroundWidth, backgroundHeight);\n      } else {\n        context.beginPath();\n        createRectPath(context, x - expandX, y - expandY, backgroundWidth, backgroundHeight, backgroundRadius, true);\n      }\n      if (backgroundFill) {\n        // context.setCommonStyle(rect, rect.attribute, x, y, rectAttribute);\n        context.globalAlpha = backgroundFillOpacity;\n        context.fillStyle = backgroundFill as string;\n        context.fill();\n      }\n      if (backgroundStroke) {\n        // context.setStrokeStyle(rect, rect.attribute, x, y, rectAttribute);\n        context.globalAlpha = backgroundStrokeOpacity;\n        context.strokeStyle = backgroundStroke as string;\n        context.stroke();\n      }\n    }\n\n    // 绘制图标\n    const res = url && icon?.resources?.get(url);\n    if (!res || res.state !== 'success') {\n      return;\n    }\n    // context.setCommonStyle(icon, icon.attribute, x, y, iconAttribute);\n    context.globalAlpha = opacity;\n    context.drawImage(res.data, x, y, width, height);\n  }\n\n  draw(richtext: IRichText, renderService: IRenderService, drawContext: IDrawContext) {\n    const richtextAttribute = getTheme(richtext).richtext;\n    this._draw(richtext, richtextAttribute, false, drawContext);\n  }\n}\n"]}