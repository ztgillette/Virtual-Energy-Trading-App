import { BaseRenderContributionTime } from '../../../../common/enums';
import type { IBaseRenderContribution, IContext2d, IDrawContext, IGraphic, IGraphicAttribute, IStage, ISymbol, IThemeAttribute } from '../../../../interface';
export declare class DefaultBaseTextureRenderContribution implements IBaseRenderContribution<IGraphic, IGraphicAttribute> {
    time: BaseRenderContributionTime;
    useStyle: boolean;
    textureMap?: Map<string, CanvasPattern>;
    order: number;
    _tempSymbolGraphic: ISymbol | null;
    createCommonPattern(size: number, padding: number, color: string, targetContext: IContext2d, cb: (r: number, targetContext: IContext2d) => void): CanvasPattern;
    createCirclePattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createDiamondPattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createRectPattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createVerticalLinePattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createHorizontalLinePattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createBiasLRLinePattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createBiasRLLinePattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    createGridPattern(size: number, padding: number, color: string, targetContext: IContext2d): CanvasPattern;
    initTextureMap(ctx: IContext2d, stage: IStage): void;
    drawShape(graphic: IGraphic, context: IContext2d, x: number, y: number, doFill: boolean, doStroke: boolean, fVisible: boolean, sVisible: boolean, graphicAttribute: Required<IGraphicAttribute>, drawContext: IDrawContext, fillCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, strokeCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, options?: any): void;
    protected drawTexture(texture: string, graphic: IGraphic, context: IContext2d, x: number, y: number, graphicAttribute: Required<IGraphicAttribute>, textureColor: string, textureSize: number, texturePadding: number): void;
}
export declare const defaultBaseTextureRenderContribution: DefaultBaseTextureRenderContribution;
