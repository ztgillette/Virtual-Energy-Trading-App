var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}, __param = this && this.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};

import { isArray } from "@visactor/vutils";

import { inject, injectable, named } from "../../../common/inversify-lite";

import { getTheme } from "../../../graphic/theme";

import { POLYGON_NUMBER_TYPE } from "../../../graphic/constants";

import { drawPolygon, drawRoundedPolygon } from "../../../common/polygon";

import { PolygonRenderContribution } from "./contributions/constants";

import { ContributionProvider } from "../../../common/contribution-provider";

import { BaseRender } from "./base-render";

import { defaultPolygonBackgroundRenderContribution, defaultPolygonTextureRenderContribution } from "./contributions/polygon-contribution-render";

let DefaultCanvasPolygonRender = class extends BaseRender {
    constructor(graphicRenderContributions) {
        super(), this.graphicRenderContributions = graphicRenderContributions, this.numberType = POLYGON_NUMBER_TYPE, 
        this.builtinContributions = [ defaultPolygonBackgroundRenderContribution, defaultPolygonTextureRenderContribution ], 
        this.init(graphicRenderContributions);
    }
    drawShape(polygon, context, x, y, drawContext, params, fillCb, strokeCb) {
        const polygonAttribute = getTheme(polygon, null == params ? void 0 : params.theme).polygon, {points: points = polygonAttribute.points, cornerRadius: cornerRadius = polygonAttribute.cornerRadius, x: originX = polygonAttribute.x, y: originY = polygonAttribute.y, closePath: closePath = polygonAttribute.closePath, fillStrokeOrder: fillStrokeOrder = polygonAttribute.fillStrokeOrder} = polygon.attribute, data = this.valid(polygon, polygonAttribute, fillCb, strokeCb);
        if (!data) return;
        const {fVisible: fVisible, sVisible: sVisible, doFill: doFill, doStroke: doStroke} = data;
        context.beginPath(), cornerRadius <= 0 || isArray(cornerRadius) && cornerRadius.every((num => 0 === num)) ? drawPolygon(context.camera ? context : context.nativeContext, points, x, y) : drawRoundedPolygon(context.camera ? context : context.nativeContext, points, x, y, cornerRadius, closePath), 
        closePath && context.closePath(), context.setShadowBlendStyle && context.setShadowBlendStyle(polygon, polygon.attribute, polygonAttribute), 
        this.beforeRenderStep(polygon, context, x, y, doFill, doStroke, fVisible, sVisible, polygonAttribute, drawContext, fillCb, strokeCb);
        const _runFill = () => {
            doFill && (fillCb ? fillCb(context, polygon.attribute, polygonAttribute) : fVisible && (context.setCommonStyle(polygon, polygon.attribute, originX - x, originY - y, polygonAttribute), 
            context.fill()));
        }, _runStroke = () => {
            doStroke && (strokeCb ? strokeCb(context, polygon.attribute, polygonAttribute) : sVisible && (context.setStrokeStyle(polygon, polygon.attribute, originX - x, originY - y, polygonAttribute), 
            context.stroke()));
        };
        fillStrokeOrder ? (_runStroke(), _runFill()) : (_runFill(), _runStroke()), this.afterRenderStep(polygon, context, x, y, doFill, doStroke, fVisible, sVisible, polygonAttribute, drawContext, fillCb, strokeCb);
    }
    draw(polygon, renderService, drawContext, params) {
        const polygonAttribute = getTheme(polygon, null == params ? void 0 : params.theme).polygon;
        this._draw(polygon, polygonAttribute, !1, drawContext, params);
    }
};

DefaultCanvasPolygonRender = __decorate([ injectable(), __param(0, inject(ContributionProvider)), __param(0, named(PolygonRenderContribution)), __metadata("design:paramtypes", [ Object ]) ], DefaultCanvasPolygonRender);

export { DefaultCanvasPolygonRender };
//# sourceMappingURL=polygon-render.js.map
