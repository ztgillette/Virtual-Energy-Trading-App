var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}, __param = this && this.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};

import { inject, injectable, named } from "../../../common/inversify-lite";

import { ContributionProvider } from "../../../common/contribution-provider";

import { renderCommandList } from "../../../common/render-command-list";

import { getTheme } from "../../../graphic/theme";

import { PATH_NUMBER_TYPE } from "../../../graphic/constants";

import { PathRenderContribution } from "./contributions/constants";

import { BaseRender } from "./base-render";

import { defaultPathBackgroundRenderContribution, defaultPathTextureRenderContribution } from "./contributions/path-contribution-render";

let DefaultCanvasPathRender = class extends BaseRender {
    constructor(graphicRenderContributions) {
        super(), this.graphicRenderContributions = graphicRenderContributions, this.numberType = PATH_NUMBER_TYPE, 
        this.builtinContributions = [ defaultPathBackgroundRenderContribution, defaultPathTextureRenderContribution ], 
        this.init(graphicRenderContributions);
    }
    drawShape(path, context, x, y, drawContext, params, fillCb, strokeCb) {
        var _a, _b, _c;
        const pathAttribute = null !== (_a = this.tempTheme) && void 0 !== _a ? _a : getTheme(path, null == params ? void 0 : params.theme).path, {x: originX = pathAttribute.x, y: originY = pathAttribute.y, fillStrokeOrder: fillStrokeOrder = pathAttribute.fillStrokeOrder} = path.attribute, z = null !== (_b = this.z) && void 0 !== _b ? _b : 0, data = this.valid(path, pathAttribute, fillCb, strokeCb);
        if (!data) return;
        const {fVisible: fVisible, sVisible: sVisible, doFill: doFill, doStroke: doStroke} = data;
        if (context.beginPath(), path.pathShape) renderCommandList(path.pathShape.commandList, context, x, y, 1, 1, z); else {
            const path2D = null !== (_c = path.attribute.path) && void 0 !== _c ? _c : pathAttribute.path;
            renderCommandList(path2D.commandList, context, x, y, 1, 1, z);
        }
        context.setShadowBlendStyle && context.setShadowBlendStyle(path, path.attribute, pathAttribute), 
        this.beforeRenderStep(path, context, x, y, doFill, doStroke, fVisible, sVisible, pathAttribute, drawContext, fillCb, strokeCb);
        const _runStroke = () => {
            doStroke && (strokeCb ? strokeCb(context, path.attribute, pathAttribute) : sVisible && (context.setStrokeStyle(path, path.attribute, originX - x, originY - y, pathAttribute), 
            context.stroke()));
        }, _runFill = () => {
            doFill && (fillCb ? fillCb(context, path.attribute, pathAttribute) : fVisible && (context.setCommonStyle(path, path.attribute, originX - x, originY - y, pathAttribute), 
            context.fill()));
        };
        fillStrokeOrder ? (_runStroke(), _runFill()) : (_runFill(), _runStroke()), this.afterRenderStep(path, context, x, y, doFill, doStroke, fVisible, sVisible, pathAttribute, drawContext, fillCb, strokeCb);
    }
    draw(path, renderService, drawContext, params) {
        const pathAttribute = getTheme(path, null == params ? void 0 : params.theme).path;
        this.tempTheme = pathAttribute, this._draw(path, pathAttribute, !1, drawContext, params), 
        this.tempTheme = null;
    }
};

DefaultCanvasPathRender = __decorate([ injectable(), __param(0, inject(ContributionProvider)), __param(0, named(PathRenderContribution)), __metadata("design:paramtypes", [ Object ]) ], DefaultCanvasPathRender);

export { DefaultCanvasPathRender };
//# sourceMappingURL=path-render.js.map
