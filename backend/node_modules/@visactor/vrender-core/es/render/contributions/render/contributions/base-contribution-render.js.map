{"version":3,"sources":["../src/render/contributions/render/contributions/base-contribution-render.ts"],"names":[],"mappings":"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","file":"base-contribution-render.js","sourcesContent":["import type {\n  IGraphicAttribute,\n  IContext2d,\n  IGraphic,\n  IThemeAttribute,\n  IBaseRenderContribution,\n  IContributionProvider,\n  IDrawContext,\n  ISymbol,\n  IPath,\n  ISymbolGraphicAttribute\n} from '../../../../interface';\nimport type { IBounds } from '@visactor/vutils';\nimport { inject, injectable, named } from '../../../../common/inversify-lite';\nimport { getTheme } from '../../../../graphic/theme';\nimport { canvasAllocate } from '../../../../allocator/canvas-allocate';\nimport { BaseRenderContributionTime } from '../../../../common/enums';\nimport { ContributionProvider } from '../../../../common/contribution-provider';\nimport { InteractiveSubRenderContribution } from './constants';\n\nexport class DefaultBaseBackgroundRenderContribution implements IBaseRenderContribution<IGraphic, IGraphicAttribute> {\n  time: BaseRenderContributionTime = BaseRenderContributionTime.beforeFillStroke;\n  useStyle: boolean = true;\n  order: number = 0;\n  drawShape(\n    graphic: IGraphic,\n    context: IContext2d,\n    x: number,\n    y: number,\n    doFill: boolean,\n    doStroke: boolean,\n    fVisible: boolean,\n    sVisible: boolean,\n    graphicAttribute: Required<IGraphicAttribute>,\n    drawContext: IDrawContext,\n    fillCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    strokeCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    options?: any\n  ) {\n    const {\n      background,\n      backgroundOpacity = graphic.attribute.fillOpacity ?? graphicAttribute.backgroundOpacity,\n      opacity = graphicAttribute.opacity,\n      backgroundMode = graphicAttribute.backgroundMode,\n      backgroundFit = graphicAttribute.backgroundFit,\n      backgroundKeepAspectRatio = graphicAttribute.backgroundKeepAspectRatio,\n      backgroundScale = graphicAttribute.backgroundScale,\n      backgroundOffsetX = graphicAttribute.backgroundOffsetX,\n      backgroundOffsetY = graphicAttribute.backgroundOffsetY,\n      backgroundClip = graphicAttribute.backgroundClip\n    } = graphic.attribute;\n    if (!background) {\n      return;\n    }\n\n    if (graphic.backgroundImg && graphic.resources) {\n      const res = graphic.resources.get(background as any);\n      if (res.state !== 'success' || !res.data) {\n        return;\n      }\n\n      context.save();\n\n      if (graphic.parent && !graphic.transMatrix.onlyTranslate()) {\n        const groupAttribute = getTheme(graphic.parent).group;\n        const { scrollX = groupAttribute.scrollX, scrollY = groupAttribute.scrollY } = graphic.parent.attribute;\n        context.setTransformFromMatrix(graphic.parent.globalTransMatrix, true);\n        context.translate(scrollX, scrollY);\n      }\n      backgroundClip && context.clip();\n      const b = graphic.AABBBounds;\n      context.setCommonStyle(graphic, graphic.attribute, x, y, graphicAttribute);\n      context.globalAlpha = backgroundOpacity * opacity;\n      this.doDrawImage(context, res.data, b, {\n        backgroundMode,\n        backgroundFit,\n        backgroundKeepAspectRatio,\n        backgroundScale,\n        backgroundOffsetX,\n        backgroundOffsetY\n      });\n      context.restore();\n      if (!graphic.transMatrix.onlyTranslate()) {\n        context.setTransformForCurrent();\n      }\n    } else {\n      context.highPerformanceSave();\n      context.setCommonStyle(graphic, graphic.attribute, x, y, graphicAttribute);\n      context.globalAlpha = backgroundOpacity * opacity;\n      context.fillStyle = background as string;\n      context.fill();\n      context.highPerformanceRestore();\n    }\n  }\n\n  protected doDrawImage(\n    context: IContext2d,\n    data: any,\n    b: IBounds,\n    params: {\n      backgroundMode: 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';\n      backgroundFit: boolean;\n      backgroundKeepAspectRatio: boolean;\n      backgroundScale?: number;\n      backgroundOffsetX?: number;\n      backgroundOffsetY?: number;\n    }\n  ): void {\n    const {\n      backgroundMode,\n      backgroundFit,\n      backgroundKeepAspectRatio,\n      backgroundScale = 1,\n      backgroundOffsetX = 0,\n      backgroundOffsetY = 0\n    } = params;\n    const targetW = b.width();\n    const targetH = b.height();\n    let w = targetW;\n    let h = targetH;\n    if (backgroundMode === 'no-repeat') {\n      if (backgroundFit) {\n        if (!backgroundKeepAspectRatio) {\n          context.drawImage(data, b.x1, b.y1, b.width(), b.height());\n        } else {\n          const maxScale = Math.max(targetW / data.width, targetH / data.height);\n          context.drawImage(\n            data,\n            b.x1 + backgroundOffsetX,\n            b.y1 + backgroundOffsetY,\n            data.width * maxScale * backgroundScale,\n            data.height * maxScale * backgroundScale\n          );\n        }\n      } else {\n        const resW = data.width * backgroundScale;\n        const resH = data.height * backgroundScale;\n        context.drawImage(data, b.x1 + backgroundOffsetX, b.y1 + backgroundOffsetY, resW, resH);\n      }\n    } else {\n      // debugger;\n      // TODO 考虑缓存\n      if (backgroundFit && backgroundMode !== 'repeat' && (data.width || data.height)) {\n        const resW = data.width;\n        const resH = data.height;\n\n        if (backgroundMode === 'repeat-x') {\n          // 高度适应\n          const ratio = targetH / resH;\n          w = resW * ratio;\n          h = targetH;\n        } else if (backgroundMode === 'repeat-y') {\n          // 宽度适应\n          const ratio = targetW / resW;\n          h = resH * ratio;\n          w = targetW;\n        }\n\n        const dpr = context.dpr;\n        const canvas = canvasAllocate.allocate({ width: w, height: h, dpr });\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n          ctx.inuse = true;\n          ctx.clearMatrix();\n          ctx.setTransformForCurrent(true);\n          ctx.clearRect(0, 0, w, h);\n          ctx.drawImage(data, 0, 0, w, h);\n          data = canvas.nativeCanvas;\n        }\n        canvasAllocate.free(canvas);\n      }\n      const dpr = context.dpr;\n      const pattern = context.createPattern(data, backgroundMode);\n      pattern.setTransform && pattern.setTransform(new DOMMatrix([1 / dpr, 0, 0, 1 / dpr, 0, 0]));\n      context.fillStyle = pattern;\n      context.translate(b.x1, b.y1);\n      context.fillRect(0, 0, targetW, targetH);\n      context.translate(-b.x1, -b.y1);\n    }\n  }\n}\n\nexport const defaultBaseBackgroundRenderContribution = new DefaultBaseBackgroundRenderContribution();\n\nexport interface IInteractiveSubRenderContribution {\n  render: (\n    graphic: IGraphic,\n    context: IContext2d,\n    x: number,\n    y: number,\n    doFill: boolean,\n    doStroke: boolean,\n    fVisible: boolean,\n    sVisible: boolean,\n    graphicAttribute: Required<IGraphicAttribute>,\n    drawContext: IDrawContext,\n    fillCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    strokeCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    options?: any\n  ) => void;\n}\n\n@injectable()\nexport class DefaultBaseInteractiveRenderContribution implements IBaseRenderContribution<IGraphic, IGraphicAttribute> {\n  time: BaseRenderContributionTime = BaseRenderContributionTime.afterFillStroke;\n  useStyle: boolean = true;\n  order: number = 0;\n\n  _subRenderContribitions?: IInteractiveSubRenderContribution[];\n  constructor(\n    @inject(ContributionProvider)\n    @named(InteractiveSubRenderContribution)\n    protected readonly subRenderContribitions: IContributionProvider<IInteractiveSubRenderContribution>\n  ) {}\n\n  drawShape(\n    graphic: IGraphic,\n    context: IContext2d,\n    x: number,\n    y: number,\n    doFill: boolean,\n    doStroke: boolean,\n    fVisible: boolean,\n    sVisible: boolean,\n    graphicAttribute: Required<IGraphicAttribute>,\n    drawContext: IDrawContext,\n    fillCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    strokeCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    options?: any\n  ) {\n    if (!this._subRenderContribitions) {\n      this._subRenderContribitions = this.subRenderContribitions.getContributions();\n    }\n    this._subRenderContribitions.forEach(c => {\n      c.render(\n        graphic,\n        context,\n        x,\n        y,\n        doFill,\n        doStroke,\n        fVisible,\n        sVisible,\n        graphicAttribute,\n        drawContext,\n        fillCb,\n        strokeCb,\n        options\n      );\n    });\n  }\n}\n\nexport class DefaultBaseClipRenderBeforeContribution implements IBaseRenderContribution<IGraphic, IGraphicAttribute> {\n  time: BaseRenderContributionTime = BaseRenderContributionTime.beforeFillStroke;\n  useStyle: boolean = true;\n  order: number = 0;\n  drawShape(\n    graphic: IGraphic,\n    context: IContext2d,\n    x: number,\n    y: number,\n    doFill: boolean,\n    doStroke: boolean,\n    fVisible: boolean,\n    sVisible: boolean,\n    graphicAttribute: Required<IGraphicAttribute>,\n    drawContext: IDrawContext,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IGraphicAttribute>,\n      themeAttribute: IThemeAttribute,\n      final?: boolean\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IGraphicAttribute>,\n      themeAttribute: IThemeAttribute,\n      final?: boolean\n    ) => boolean,\n    options?: any\n  ) {\n    const { clipConfig } = graphic.attribute;\n    if (!clipConfig) {\n      return;\n    }\n    const clipPath = graphic.getClipPath();\n    if (!clipPath) {\n      return;\n    }\n    const draw = !(fillCb || strokeCb);\n    const b = graphic.AABBBounds;\n    const width = (graphic.attribute as any).width ?? b.width();\n    const height = (graphic.attribute as any).height ?? b.height();\n    if (draw) {\n      context.save();\n    }\n    context.beginPath();\n    if (clipPath.draw(context, [width, height], x + width / 2, y + height / 2, 0) === false) {\n      context.closePath();\n    }\n    if (fillCb) {\n      fillCb(context, graphic.attribute, graphicAttribute, true);\n    }\n\n    if (draw) {\n      context.clip();\n    }\n  }\n}\n\nexport const defaultBaseClipRenderBeforeContribution = new DefaultBaseClipRenderBeforeContribution();\nexport class DefaultBaseClipRenderAfterContribution implements IBaseRenderContribution<IGraphic, IGraphicAttribute> {\n  time: BaseRenderContributionTime = BaseRenderContributionTime.afterFillStroke;\n  useStyle: boolean = true;\n  order: number = 0;\n  drawShape(\n    graphic: IGraphic,\n    context: IContext2d,\n    x: number,\n    y: number,\n    doFill: boolean,\n    doStroke: boolean,\n    fVisible: boolean,\n    sVisible: boolean,\n    graphicAttribute: Required<IGraphicAttribute>,\n    drawContext: IDrawContext,\n    fillCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    strokeCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    options?: any\n  ) {\n    const { clipConfig } = graphic.attribute;\n    if (!clipConfig) {\n      return;\n    }\n    const clipPath = graphic.getClipPath();\n    if (!clipPath) {\n      return;\n    }\n    if (!(fillCb || strokeCb)) {\n      context.restore();\n    }\n  }\n}\n\nexport const defaultBaseClipRenderAfterContribution = new DefaultBaseClipRenderAfterContribution();\n"]}