{"version":3,"sources":["../src/render/contributions/render/base-3d-render.ts"],"names":[],"mappings":"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","file":"base-3d-render.js","sourcesContent":["import { ColorStore, ColorType } from '../../../color-string/store';\nimport type { IContext2d } from '../../../interface/context';\nimport type { IGraphic, IGraphicAttribute } from '../../../interface/graphic';\nimport type { IMarkAttribute, IThemeAttribute } from '../../../interface/graphic/creator';\nimport type { IFace3d, IPolygonItem } from '../../../interface/graphic/face3d';\nimport type { IDirectionLight } from '../../../interface/light';\nimport { BaseRender } from './base-render';\n\nexport abstract class Base3dRender<T extends IGraphic> extends BaseRender<T> {\n  stroke(x: number, y: number, z: number, face3d: IFace3d, context: IContext2d) {\n    const vertices = face3d.vertices;\n    face3d.edges.forEach(edge => {\n      const p1 = vertices[edge[0]];\n      const v1 = {\n        x: x + p1[0],\n        y: y + p1[1],\n        z: z + p1[2]\n      };\n      const p2 = vertices[edge[1]];\n      const v2 = {\n        x: x + p2[0],\n        y: y + p2[1],\n        z: z + p2[2]\n      };\n      context.beginPath();\n      context.moveTo(v1.x, v1.y, v1.z);\n      context.lineTo(v2.x, v2.y, v2.z);\n      context.stroke();\n    });\n  }\n\n  fill(\n    x: number,\n    y: number,\n    z: number,\n    face3d: IFace3d,\n    faces: [boolean, boolean, boolean, boolean, boolean, boolean] | undefined,\n    fillColor: string,\n    context: IContext2d,\n    light: IDirectionLight,\n    graphic3d: T | undefined,\n    graphic3dAttribute: Partial<IMarkAttribute & IGraphicAttribute> | undefined,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    const rgbArray = ColorStore.Get(fillColor as string, ColorType.Color255);\n\n    // 上下左右前后\n    // 0,1,2,3,4,5\n    const vertices = face3d.vertices;\n    // 计算每个顶点的view\n    const viewdVerticesZ = vertices.map(v => {\n      return context.view(v[0], v[1], v[2])[2];\n    });\n    // 排序\n    const sortFace: { faceIdx: number; polygon: IPolygonItem }[] = [];\n    face3d.polygons.forEach((p, i) => {\n      if (faces && !faces[i]) {\n        return;\n      }\n      sortFace.push({\n        faceIdx: i,\n        polygon: p\n      });\n      // 设置ave_z进行排序\n      const { polygon } = p;\n\n      const z1 = viewdVerticesZ[polygon[0]];\n      const z2 = viewdVerticesZ[polygon[1]];\n      const z3 = viewdVerticesZ[polygon[2]];\n      const z4 = viewdVerticesZ[polygon[3]];\n\n      p.ave_z = z1 + z2 + z3 + z4;\n    });\n    sortFace.sort((a, b) => b.polygon.ave_z - a.polygon.ave_z);\n    sortFace.forEach(item => {\n      const { polygon, normal } = item.polygon;\n\n      const p1 = vertices[polygon[0]];\n      const p2 = vertices[polygon[1]];\n      const p3 = vertices[polygon[2]];\n      const p4 = vertices[polygon[3]];\n\n      const v1 = {\n        x: x + p1[0],\n        y: y + p1[1],\n        z: z + p1[2]\n      };\n      const v2 = {\n        x: x + p2[0],\n        y: y + p2[1],\n        z: z + p2[2]\n      };\n      const v3 = {\n        x: x + p3[0],\n        y: y + p3[1],\n        z: z + p3[2]\n      };\n      const v4 = {\n        x: x + p4[0],\n        y: y + p4[1],\n        z: z + p4[2]\n      };\n      context.beginPath();\n      context.moveTo(v1.x, v1.y, v1.z);\n      context.lineTo(v2.x, v2.y, v2.z);\n      context.lineTo(v3.x, v3.y, v3.z);\n      context.lineTo(v4.x, v4.y, v4.z);\n      context.closePath();\n      if (fillCb) {\n        fillCb(context, graphic3d && graphic3d.attribute, graphic3dAttribute);\n      } else {\n        context.fillStyle = light ? light.computeColor(normal, rgbArray as any) : fillColor;\n        context.fill();\n      }\n    });\n  }\n}\n"]}