{"version":3,"sources":["../src/render/contributions/render/incremental-line-render.ts"],"names":[],"mappings":"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","file":"incremental-line-render.js","sourcesContent":["import { injectable } from '../../../common/inversify-lite';\nimport type {\n  IContext2d,\n  ILine,\n  ILineGraphicAttribute,\n  IMarkAttribute,\n  IGraphicAttribute,\n  IThemeAttribute,\n  ISegment,\n  IGraphicRender,\n  IGraphicRenderDrawParams,\n  IDrawContext\n} from '../../../interface';\nimport { getTheme } from '../../../graphic/theme';\nimport { LINE_NUMBER_TYPE } from '../../../graphic/constants';\nimport { fillVisible, runFill, runStroke, strokeVisible } from './utils';\nimport { DefaultCanvasLineRender } from './line-render';\nimport { drawIncrementalSegments } from '../../../common/render-curve';\n\n/**\n * 默认的基于canvas的line渲染器\n * 单例\n */\n@injectable()\nexport class DefaultIncrementalCanvasLineRender extends DefaultCanvasLineRender implements IGraphicRender {\n  declare type: 'line';\n  numberType: number = LINE_NUMBER_TYPE;\n\n  drawShape(\n    line: ILine,\n    context: IContext2d,\n    x: number,\n    y: number,\n    drawContext: IDrawContext,\n    params?: IGraphicRenderDrawParams,\n    fillCb?: (\n      ctx: IContext2d,\n      lineAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      lineAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    // console.log(drawContext.multiGraphicOptions)\n    if (line.incremental && drawContext.multiGraphicOptions) {\n      const { startAtIdx, length } = drawContext.multiGraphicOptions;\n      const { segments = [] } = line.attribute;\n      if (startAtIdx > segments.length) {\n        return;\n      }\n\n      const lineAttribute = getTheme(line).line;\n\n      const {\n        fill = lineAttribute.fill,\n        stroke = lineAttribute.stroke,\n        opacity = lineAttribute.opacity,\n        fillOpacity = lineAttribute.fillOpacity,\n        strokeOpacity = lineAttribute.strokeOpacity,\n        lineWidth = lineAttribute.lineWidth,\n        visible = lineAttribute.visible\n      } = line.attribute;\n\n      // 不绘制或者透明\n      const fVisible = fillVisible(opacity, fillOpacity, fill);\n      const sVisible = strokeVisible(opacity, strokeOpacity);\n      const doFill = runFill(fill);\n      const doStroke = runStroke(stroke, lineWidth);\n\n      if (!(line.valid && visible)) {\n        return;\n      }\n\n      if (!(doFill || doStroke)) {\n        return;\n      }\n\n      // 如果存在fillCb和strokeCb，那就不直接跳过\n      if (!(fVisible || sVisible || fillCb || strokeCb)) {\n        return;\n      }\n\n      const { context } = drawContext;\n      // 不支持clipRange，不支持pick，仅支持最基础的线段绘制\n      for (let i = startAtIdx; i < startAtIdx + length; i++) {\n        this.drawIncreaseSegment(\n          line,\n          context,\n          segments[i - 1],\n          segments[i],\n          line.attribute.segments[i],\n          [lineAttribute, line.attribute],\n          x,\n          y\n        );\n      }\n    } else {\n      super.drawShape(line, context, x, y, drawContext, params, fillCb, strokeCb);\n    }\n  }\n\n  drawIncreaseSegment(\n    line: ILine,\n    context: IContext2d,\n    lastSeg: ISegment,\n    seg: ISegment,\n    attribute: Partial<ILineGraphicAttribute>,\n    defaultAttribute: Required<ILineGraphicAttribute> | Partial<ILineGraphicAttribute>[],\n    offsetX: number,\n    offsetY: number\n  ) {\n    if (!seg) {\n      return;\n    }\n\n    context.beginPath();\n    drawIncrementalSegments(context.nativeContext, lastSeg, seg, { offsetX, offsetY });\n\n    // shadow\n    context.setShadowBlendStyle && context.setShadowBlendStyle(line, attribute, defaultAttribute);\n    context.setStrokeStyle(line, attribute, offsetX, offsetY, defaultAttribute);\n    context.stroke();\n  }\n}\n"]}