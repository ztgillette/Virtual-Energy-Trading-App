{"version":3,"sources":["../src/render/contributions/render/contributions/area-texture-contribution-render.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,0BAA0B,EAAE,MAAM,0BAA0B,CAAC;AAUtE,OAAO,EAAE,oCAAoC,EAAE,MAAM,oCAAoC,CAAC;AAC1F,OAAO,EAAE,+BAA+B,EAAE,MAAM,0BAA0B,CAAC;AAE3E,MAAM,OAAO,oCACX,SAAQ,oCAAoC;IAD9C;;QAIE,SAAI,GAA+B,0BAA0B,CAAC,eAAe,CAAC;IAsChF,CAAC;IApCC,SAAS,CACP,OAAc,EACd,OAAmB,EACnB,CAAS,EACT,CAAS,EACT,MAAe,EACf,QAAiB,EACjB,QAAiB,EACjB,QAAiB,EACjB,gBAA6C,EAC7C,WAAyB,EACzB,MAAiH,EACjH,QAAmH,EACnH,OAEC;;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;SAC7C;QAED,MAAM,EAAE,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;QAExD,MAAM,EACJ,OAAO,GAAG,MAAA,OAAO,CAAC,SAAS,CAAC,OAAO,mCAAI,+BAA+B,CAAC,gBAAgB,EAAE,SAAS,CAAC,EACnG,YAAY,GAAG,MAAA,OAAO,CAAC,SAAS,CAAC,YAAY,mCAC3C,+BAA+B,CAAC,gBAAgB,EAAE,cAAc,CAAC,EACnE,WAAW,GAAG,MAAA,OAAO,CAAC,SAAS,CAAC,WAAW,mCAAI,+BAA+B,CAAC,gBAAgB,EAAE,aAAa,CAAC,EAC/G,cAAc,GAAG,MAAA,OAAO,CAAC,SAAS,CAAC,cAAc,mCAC/C,+BAA+B,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EACtE,GAAG,SAAS,CAAC;QACd,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,gBAAgB,EAAE,YAAY,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;IACjH,CAAC;CACF","file":"area-texture-contribution-render.js","sourcesContent":["import { BaseRenderContributionTime } from '../../../../common/enums';\nimport type {\n  IArcGraphicAttribute,\n  IArea,\n  IAreaRenderContribution,\n  IContext2d,\n  IDrawContext,\n  IGraphicAttribute,\n  IThemeAttribute\n} from '../../../../interface';\nimport { DefaultBaseTextureRenderContribution } from './base-texture-contribution-render';\nimport { getAttributeFromDefaultAttrList } from '../../../../common/utils';\n\nexport class DefaultAreaTextureRenderContribution\n  extends DefaultBaseTextureRenderContribution\n  implements IAreaRenderContribution\n{\n  time: BaseRenderContributionTime = BaseRenderContributionTime.afterFillStroke;\n\n  drawShape(\n    graphic: IArea,\n    context: IContext2d,\n    x: number,\n    y: number,\n    doFill: boolean,\n    doStroke: boolean,\n    fVisible: boolean,\n    sVisible: boolean,\n    graphicAttribute: Required<IGraphicAttribute>,\n    drawContext: IDrawContext,\n    fillCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    strokeCb?: (ctx: IContext2d, markAttribute: Partial<IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean,\n    options?: {\n      attribute?: Partial<IArcGraphicAttribute>;\n    }\n  ) {\n    if (!this.textureMap) {\n      this.initTextureMap(context, graphic.stage);\n    }\n\n    const { attribute = graphic.attribute } = options || {};\n\n    const {\n      texture = graphic.attribute.texture ?? getAttributeFromDefaultAttrList(graphicAttribute, 'texture'),\n      textureColor = graphic.attribute.textureColor ??\n        getAttributeFromDefaultAttrList(graphicAttribute, 'textureColor'),\n      textureSize = graphic.attribute.textureSize ?? getAttributeFromDefaultAttrList(graphicAttribute, 'textureSize'),\n      texturePadding = graphic.attribute.texturePadding ??\n        getAttributeFromDefaultAttrList(graphicAttribute, 'texturePadding')\n    } = attribute;\n    if (!texture) {\n      return;\n    }\n    this.drawTexture(texture, graphic, context, x, y, graphicAttribute, textureColor, textureSize, texturePadding);\n  }\n}\n"]}