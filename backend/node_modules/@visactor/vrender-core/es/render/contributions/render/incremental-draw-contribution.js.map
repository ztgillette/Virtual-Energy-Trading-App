{"version":3,"sources":["../src/render/contributions/render/incremental-draw-contribution.ts"],"names":[],"mappings":"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","file":"incremental-draw-contribution.js","sourcesContent":["import { injectable, inject, named, multiInject } from '../../../common/inversify-lite';\nimport type {\n  IGraphic,\n  IGroup,\n  IRenderService,\n  IDrawContext,\n  IDrawContribution,\n  IGraphicRender,\n  IDrawItemInterceptorContribution,\n  IContributionProvider\n} from '../../../interface';\nimport { DefaultAttribute } from '../../../graphic/config';\nimport { DefaultDrawContribution } from './draw-contribution';\nimport { SyncHook } from '../../../tapable';\nimport { GraphicRender } from './symbol';\nimport { DefaultIncrementalCanvasLineRender } from './incremental-line-render';\nimport { DefaultIncrementalCanvasAreaRender } from './incremental-area-render';\nimport { DrawItemInterceptor } from './draw-interceptor';\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { ContributionProvider } from '../../../common/contribution-provider';\nimport { foreachAsync } from '../../../common/sort';\n\nenum STATUS {\n  NORMAL = 0,\n  STOP = 1\n}\n\n/**\n * 增量渲染的contribution，基于树状结构针对图元的渲染\n * 不是单例模式\n */\n@injectable()\nexport class DefaultIncrementalDrawContribution extends DefaultDrawContribution implements IDrawContribution {\n  rendering: boolean = false;\n  protected currFrameStartAt: number = 0;\n  protected currentIdx: number = 0;\n  protected status: STATUS = STATUS.NORMAL;\n  protected checkingForDrawPromise: Promise<any> | null = null;\n  hooks = {\n    completeDraw: new SyncHook<[]>([])\n  };\n  protected lastRenderService: IRenderService;\n  protected lastDrawContext: IDrawContext;\n  protected count: number;\n\n  constructor(\n    // @inject(ContributionProvider)\n    // @named(GraphicRender)\n    // protected readonly contributions: ContributionProvider<IGraphicRender>,\n    @multiInject(GraphicRender) protected readonly contributions: IGraphicRender[],\n    // @inject(RenderSelector) protected readonly renderSelector: IRenderSelector, // 根据图元类型选择对应的renderItem进行渲染\n    @inject(DefaultIncrementalCanvasLineRender) protected readonly lineRender: IGraphicRender, // 默认的lineRender\n    @inject(DefaultIncrementalCanvasAreaRender) protected readonly areaRender: IGraphicRender, // 默认的lineRender\n    // 拦截器\n    @inject(ContributionProvider)\n    @named(DrawItemInterceptor)\n    protected readonly drawItemInterceptorContributions: IContributionProvider<IDrawItemInterceptorContribution>\n  ) {\n    super(contributions, drawItemInterceptorContributions);\n    this.defaultRenderMap.set(this.lineRender.numberType, this.lineRender);\n    this.defaultRenderMap.set(this.areaRender.numberType, this.areaRender);\n  }\n\n  /**\n   *\n   * @param renderService\n   * @param drawContext restartIncremental为true表示重新执行增量渲染，为false表示不执行增量渲染\n   * @returns\n   */\n  async draw(renderService: IRenderService, drawContext: IDrawContext): Promise<void> {\n    // 入口检查是否需要重新绘制\n    if (this.checkingForDrawPromise) {\n      return;\n    }\n    this.lastRenderService = renderService;\n    this.lastDrawContext = drawContext;\n\n    this.checkingForDrawPromise = this.checkForDraw(drawContext);\n    const skipDraw = await this.checkingForDrawPromise;\n    this.checkingForDrawPromise = null;\n    if (skipDraw) {\n      return;\n    }\n\n    this.currentRenderService = renderService;\n    const { context, viewBox } = drawContext;\n\n    if (!context) {\n      return;\n    }\n    // 增量渲染不需要dirtyBounds\n    // const dirtyBounds: IBounds | undefined = this.dirtyBounds.setValue(x, y, x + width, y + height);\n    // if (stage.dirtyBounds) {\n    //   const b = getRectIntersect(dirtyBounds, stage.dirtyBounds, false);\n    //   dirtyBounds.x1 = Math.floor(b.x1);\n    //   dirtyBounds.y1 = Math.floor(b.y1);\n    //   dirtyBounds.x2 = Math.ceil(b.x2);\n    //   dirtyBounds.y2 = Math.ceil(b.y2);\n    // }\n    context.inuse = true;\n    // 初始化context\n    context.clearMatrix();\n    context.setTransformForCurrent(true);\n\n    // const drawInArea =\n    //   dirtyBounds.width() * context.dpr !== context.canvas.width ||\n    //   dirtyBounds.height() * context.dpr !== context.canvas.height;\n    context.save();\n\n    // if (drawInArea) {\n    //   context.beginPath();\n    //   context.rect(dirtyBounds.x1, dirtyBounds.y1, dirtyBounds.width(), dirtyBounds.height());\n    //   context.clip();\n    // }\n\n    // this.clearScreen(renderService, context, drawContext);\n\n    // 绘制之前需要清空画布\n    drawContext.restartIncremental && this.clearScreen(this.currentRenderService, context, drawContext);\n    // 设置translate\n    context.translate(viewBox.x1, viewBox.y1, true);\n\n    context.save();\n    renderService.renderTreeRoots\n      .sort((a, b) => {\n        return (a.attribute.zIndex ?? DefaultAttribute.zIndex) - (b.attribute.zIndex ?? DefaultAttribute.zIndex);\n      })\n      .forEach(group => {\n        this.renderGroup(group as IGroup, drawContext);\n      });\n\n    this.hooks.completeDraw.tap('top-draw', () => {\n      context.restore();\n      context.restore();\n      context.draw();\n      context.inuse = false;\n      this.rendering = false;\n    });\n  }\n\n  protected async _increaseRender(group: IGroup, drawContext: IDrawContext) {\n    this.rendering = true;\n    await this._renderIncrementalGroup(group, drawContext);\n    return;\n  }\n\n  // 默认group后只有一层节点，也就是group是叶子结点的父节点\n  protected async _renderIncrementalGroup(group: IGroup, drawContext: IDrawContext) {\n    this.count = group.count;\n    await new Promise(resolve => {\n      this.renderItem(group, drawContext, {\n        drawingCb: async () => {\n          // 增量图元只支持一个，线段和面积图\n          if (group.count === 2) {\n            const graphic = group.getChildAt(0) as IGraphic;\n            if (graphic.incremental && (graphic.attribute as any).segments) {\n              if (!graphic.incrementalAt) {\n                graphic.incrementalAt = 0;\n              }\n              while (graphic.incrementalAt < (graphic.attribute as any).segments.length) {\n                drawContext.multiGraphicOptions = {\n                  startAtIdx: graphic.incrementalAt,\n                  length: graphic.incremental\n                };\n                this.renderItem(graphic, drawContext);\n                graphic.incrementalAt += graphic.incremental;\n                await this.waitToNextFrame();\n              }\n            } else {\n              this.renderItem(graphic, drawContext);\n            }\n            resolve(false);\n            return;\n          }\n          await foreachAsync(group, DefaultAttribute.zIndex, (item: IGraphic, i: number) => {\n            if (this.status === STATUS.STOP) {\n              return true;\n            }\n            if (item.isContainer) {\n              // 增量渲染group下不应该有其他的group节点\n              return false;\n            }\n            // 如果小于currentIdx，说明还没到当前的位置，那就直接跳过\n            if (i < this.currentIdx) {\n              return false;\n            }\n            const frameTail = this.currFrameStartAt + group.incremental;\n            // 绘制 currentIdx到this.lastFrameIdx + group.incremental的内容\n            if (i < frameTail) {\n              this.currentIdx = i + 1;\n              this.renderItem(item, drawContext);\n            }\n            // 下一帧\n            if (i === frameTail - 1) {\n              this.currFrameStartAt = this.currentIdx;\n              // this.lastFrameIdx = this.currentIdx;\n              return this.waitToNextFrame();\n            }\n\n            return false;\n          });\n          resolve(false);\n        }\n      });\n    });\n    this.hooks.completeDraw.call();\n  }\n\n  protected async waitToNextFrame(): Promise<boolean> {\n    return new Promise(resolve => {\n      this.global.getRequestAnimationFrame()(() => {\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * 检查这次绘制是否跳过，以及执行一些准备\n   * 增量渲染有自己的绘制逻辑流程，外部每次触发draw，该图层不一定会执行\n   * @returns 返回true代表跳过绘制，false代表进行绘制\n   */\n  protected async checkForDraw(drawContext: IDrawContext): Promise<boolean> {\n    let skip = this.rendering;\n    if (drawContext.restartIncremental) {\n      skip = false;\n      await this.forceStop();\n      this.resetToInit();\n    }\n    return skip;\n  }\n\n  protected async forceStop() {\n    if (this.rendering) {\n      this.status = STATUS.STOP;\n      await new Promise(resolve => {\n        this.hooks.completeDraw.tap('stopCb', () => {\n          this.status = STATUS.NORMAL;\n          this.hooks.completeDraw.taps = this.hooks.completeDraw.taps.filter(item => {\n            return item.name !== 'stopCb';\n          });\n          resolve(false);\n        });\n      });\n    }\n  }\n\n  protected resetToInit() {\n    this.currFrameStartAt = 0;\n    this.currentIdx = 0;\n  }\n\n  async renderGroup(group: IGroup, drawContext: IDrawContext) {\n    if (drawContext.break || group.attribute.visibleAll === false) {\n      return;\n    }\n    if (group.incremental && drawContext.startAtId === group._uid) {\n      await this._increaseRender(group, drawContext);\n      drawContext.break = true;\n      return;\n    }\n\n    await new Promise(resolve => {\n      this.renderItem(group, drawContext, {\n        drawingCb: async () => {\n          await foreachAsync(group, DefaultAttribute.zIndex, async (item: IGraphic) => {\n            if (drawContext.break) {\n              return;\n            }\n            if (item.isContainer) {\n              await this.renderGroup(item as IGroup, drawContext);\n            } else {\n              // 增量渲染不管非_increaseRender的内容\n              return;\n            }\n          });\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  // /**\n  //  * 一个每一帧都执行的脚本，用于检查和触发执行draw\n  //  */\n  // protected autoRunner() {\n\n  // }\n}\n"]}