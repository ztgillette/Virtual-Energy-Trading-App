{"version":3,"sources":["../src/core/contributions/textMeasure/layout.ts"],"names":[],"mappings":"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","file":"layout.js","sourcesContent":["import type { vec2 } from '@visactor/vutils';\nimport type { ITextMeasure, TextOptionsType } from '../../../interface/text';\nimport type { TextLayoutBBox, LayoutItemType, LayoutType, TextAlignType, TextBaselineType } from '../../../interface';\nimport { MeasureModeEnum } from '../../../interface';\n\nexport class CanvasTextLayout {\n  private fontFamily: string;\n  private textOptions: TextOptionsType;\n  private textMeasure: ITextMeasure;\n\n  constructor(fontFamily: string, options: TextOptionsType, textMeasure: ITextMeasure) {\n    this.fontFamily = fontFamily;\n    this.textOptions = options;\n    this.textMeasure = textMeasure;\n  }\n\n  /**\n   * 布局外部的盒子，盒子的alphabetic属性模拟文字的效果\n   * @param bbox\n   * @param textAlign\n   * @param textBaseline\n   * @returns\n   */\n  LayoutBBox(\n    bbox: TextLayoutBBox,\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    linesLayout: LayoutItemType[]\n  ): TextLayoutBBox {\n    if (textAlign === 'left' || textAlign === 'start') {\n      bbox.xOffset = 0;\n    } else if (textAlign === 'center') {\n      bbox.xOffset = bbox.width / -2;\n    } else if (textAlign === 'right' || textAlign === 'end') {\n      bbox.xOffset = -bbox.width;\n    } else {\n      bbox.xOffset = 0;\n    }\n\n    if (textBaseline === 'top') {\n      bbox.yOffset = 0;\n    } else if (textBaseline === 'middle') {\n      bbox.yOffset = bbox.height / -2;\n    } else if (textBaseline === 'alphabetic') {\n      // 如果仅有一行，要保证和直接使用canvas绘制的textBaseline一致\n      let percent = 0.79;\n      if (linesLayout.length === 1) {\n        const lineInfo = linesLayout[0];\n        percent = lineInfo.ascent / (lineInfo.ascent + lineInfo.descent);\n      }\n      bbox.yOffset = bbox.height * -percent;\n    } else {\n      bbox.yOffset = -bbox.height;\n    }\n\n    return bbox;\n  }\n\n  /**\n   * 给定拆分好的每行字符串进行布局，如果传入lineWidth，那么后面的字符就拆分\n   * @param lines\n   * @param lineWidth\n   */\n  GetLayoutByLines(\n    lines: (string | number)[],\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number,\n    suffix: string = '',\n    wordBreak: boolean,\n    params?: {\n      lineWidth?: number;\n      suffixPosition?: 'start' | 'end' | 'middle';\n      measureMode?: MeasureModeEnum;\n      keepCenterInLine?: boolean;\n    }\n  ): LayoutType {\n    const {\n      lineWidth,\n      suffixPosition = 'end',\n      measureMode = MeasureModeEnum.actualBounding,\n      keepCenterInLine = false\n    } = params ?? {};\n    lines = lines.map(l => l.toString()) as string[];\n    const linesLayout: LayoutItemType[] = [];\n    // bbox高度可能大于totalHeight\n    const bboxWH: vec2 = [0, 0];\n    if (typeof lineWidth === 'number' && lineWidth !== Infinity) {\n      // 直接使用lineWidth，并拆分字符串\n      let width: number;\n      for (let i = 0, len = lines.length; i < len; i++) {\n        const metrics = this.textMeasure.measureTextPixelADscentAndWidth(\n          lines[i] as string,\n          this.textOptions,\n          measureMode\n        );\n        let str: string = lines[i].toString();\n        // 大于最大宽度，需要裁剪\n        if (metrics.width > lineWidth) {\n          const data = this.textMeasure.clipTextWithSuffix(\n            lines[i] as string,\n            this.textOptions,\n            lineWidth,\n            suffix,\n            wordBreak,\n            suffixPosition\n          );\n          str = data.str;\n          width = data.width;\n        } else {\n          // 小于最大宽度，不需要裁剪，直接取文字总宽度即可\n          width = metrics.width;\n        }\n        linesLayout.push({\n          str,\n          width,\n          ascent: metrics.ascent,\n          descent: metrics.descent,\n          keepCenterInLine\n        });\n      }\n      bboxWH[0] = lineWidth;\n    } else {\n      // 使用所有行中最长的作为lineWidth\n      let _lineWidth = 0;\n      let width: number;\n      let text: string;\n      for (let i = 0, len = lines.length; i < len; i++) {\n        text = lines[i] as string;\n        const metrics = this.textMeasure.measureTextPixelADscentAndWidth(\n          lines[i] as string,\n          this.textOptions,\n          measureMode\n        );\n        width = metrics.width;\n        _lineWidth = Math.max(_lineWidth, width);\n        linesLayout.push({ str: text, width, ascent: metrics.ascent, descent: metrics.descent, keepCenterInLine });\n      }\n      bboxWH[0] = _lineWidth;\n    }\n    bboxWH[1] = linesLayout.length * lineHeight;\n\n    bboxWH[0] = linesLayout.reduce((a, b) => Math.max(a, b.width), 0);\n\n    const bbox: TextLayoutBBox = {\n      xOffset: 0,\n      yOffset: 0,\n      width: bboxWH[0],\n      height: bboxWH[1]\n    };\n\n    this.LayoutBBox(bbox, textAlign, textBaseline, linesLayout);\n\n    return this.layoutWithBBox(bbox, linesLayout, textAlign, textBaseline, lineHeight);\n  }\n\n  /**\n   * 给定了bbox，使用拆分好的每行字符串进行布局\n   * @param bbox\n   * @param lines\n   * @param textAlign\n   * @param textBaseline\n   * @param lineHeight\n   * @returns\n   */\n  layoutWithBBox(\n    bbox: TextLayoutBBox,\n    lines: LayoutItemType[],\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number\n  ): LayoutType {\n    const origin: vec2 = [0, 0];\n    const totalLineHeight = lines.length * lineHeight; // 总高度\n    // origin在y方向需要初始化，然后递增即可\n    if (textBaseline === 'top') {\n      // origin[1] = 0;\n    } else if (textBaseline === 'middle') {\n      origin[1] = (bbox.height - totalLineHeight) / 2;\n    } else if (textBaseline === 'bottom') {\n      origin[1] = bbox.height - totalLineHeight;\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      this.lineOffset(bbox, lines[i], textAlign, textBaseline, lineHeight, origin);\n    }\n\n    return {\n      bbox,\n      lines,\n      fontFamily: this.fontFamily,\n      fontSize: this.textOptions.fontSize,\n      fontWeight: this.textOptions.fontWeight,\n      lineHeight,\n      textAlign,\n      textBaseline\n    };\n  }\n\n  /**\n   * 计算line在bbox中的位置，需要配合layoutWithBBox使用\n   * @param bbox\n   * @param line\n   * @param textAlign\n   * @param textBaseline\n   * @param lineHeight\n   * @param origin 这个line的左上角位置，会复用并修改\n   */\n  private lineOffset(\n    bbox: TextLayoutBBox,\n    line: LayoutItemType,\n    textAlign: TextAlignType,\n    textBaseline: TextBaselineType,\n    lineHeight: number,\n    origin: vec2\n  ): LayoutItemType {\n    if (textAlign === 'left' || textAlign === 'start') {\n      line.leftOffset = 0;\n    } else if (textAlign === 'center') {\n      line.leftOffset = (bbox.width - line.width) / 2;\n    } else if (textAlign === 'right' || textAlign === 'end') {\n      line.leftOffset = bbox.width - line.width;\n    }\n\n    line.topOffset = lineHeight / 2 + (line.ascent - line.descent) / 2 + origin[1];\n\n    // 在行内进行偏移\n    if (!line.keepCenterInLine) {\n      const actualHeight = line.ascent + line.descent;\n      const buf = 0;\n      const actualHeightWithBuf = actualHeight + buf;\n      if (actualHeightWithBuf < lineHeight - buf) {\n        if (textBaseline === 'bottom') {\n          line.topOffset += (lineHeight - actualHeightWithBuf) / 2;\n        } else if (textBaseline === 'top') {\n          line.topOffset -= (lineHeight - actualHeightWithBuf) / 2;\n        }\n      }\n      if (textBaseline === 'alphabetic') {\n        const fontBoundingHeight = line.ascent + line.descent;\n        const ratio = lineHeight / fontBoundingHeight;\n        line.topOffset = lineHeight / 2 + ((line.ascent - line.descent) / 2) * ratio + origin[1];\n      }\n    }\n\n    origin[1] += lineHeight;\n\n    return line;\n  }\n}\n"]}