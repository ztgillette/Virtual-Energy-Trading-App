{"version":3,"sources":["../src/core/layer-service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAU,UAAU,EAAE,MAAM,0BAA0B,CAAC;AAE9D,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EACL,+BAA+B,EAC/B,8BAA8B,EAC9B,+BAA+B,EAChC,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAGtC,IAAM,mBAAmB,2BAAzB,MAAM,mBAAmB;IAS9B,MAAM,CAAC,eAAe;QACpB,OAAO,GAAG,qBAAmB,CAAC,QAAQ,IAAI,qBAAmB,CAAC,YAAY,EAAE,EAAE,CAAC;IACjF,CAAC;IAED;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IACnC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,CAAC;YAChE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;YAClE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACpB;IACH,CAAC;IAED,aAAa,CAAC,KAAa;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,uBAAuB,CAAC,SAAqB;QAC3C,IAAI,SAAS,EAAE;YACb,OAAO,SAAS,CAAC;SAClB;QAED,IAAI,IAAI,CAAC,qBAAqB,KAAK,CAAC,EAAE;YACpC,OAAO,QAAQ,CAAC;SACjB;aAAM,IAAI,IAAI,CAAC,sBAAsB,KAAK,CAAC,EAAE;YAC5C,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,eAAe,CAAC,SAAoB;QAClC,IAAI,YAAuC,CAAC;QAC5C,IAAI,SAAS,KAAK,QAAQ,EAAE;YAC1B,YAAY,GAAG,SAAS,CAAC,GAAG,CAA4B,8BAA8B,CAAC,CAAC;SACzF;aAAM,IAAI,SAAS,KAAK,SAAS,EAAE;YAClC,YAAY,GAAG,SAAS,CAAC,GAAG,CAA4B,+BAA+B,CAAC,CAAC;SAC1F;aAAM;YACL,YAAY,GAAG,SAAS,CAAC,GAAG,CAA4B,+BAA+B,CAAC,CAAC;SAC1F;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,WAAW,CAAC,KAAa,EAAE,UAAiC,EAAE,IAAI,EAAE,KAAK,EAAE;;QACzE,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAChE,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9E,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,gCACtD,IAAI,EAAE,KAAK,IACR,OAAO,KACV,SAAS,EACT,QAAQ,EAAE,MAAA,OAAO,CAAC,QAAQ,mCAAI,qBAAmB,CAAC,eAAe,EAAE,EACnE,YAAY,IACZ,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACnD,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QACtC,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IAED,iBAAiB,CAAC,KAAa;QAC7B,IAAI,WAAsC,CAAC;QAC3C,KAAK,CAAC,eAAe,CAAC,CAAC,CAAS,EAAE,EAAE;YAClC,MAAM,OAAO,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrC,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;gBAClC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC7C;iBAAM;gBACL,WAAW,GAAG,OAAO,CAAC;gBACtB,WAAW,CAAC,iBAAiB,GAAG,EAAE,CAAC;aACpC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,KAAa,EAAE,KAAa;QACvC,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACnD,IAAI,CAAC,QAAQ,CAAC,GAAG,CACf,KAAK,EACL,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CACrC,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;IACjD,CAAC;IACD,cAAc,CAAC,KAAa;QAE1B,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;YACjC,OAAO,EAAE,CAAC;SACX;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;AAxGM,4BAAQ,GAAW,gBAAgB,CAAC;AACpC,gCAAY,GAAW,CAAC,CAAC;AAPrB,mBAAmB;IAD/B,UAAU,EAAE;;GACA,mBAAmB,CA+G/B;SA/GY,mBAAmB","file":"layer-service.js","sourcesContent":["import { inject, injectable } from '../common/inversify-lite';\nimport type { ILayer, IStage, IGlobal, ILayerParams, LayerMode, ILayerHandlerContribution } from '../interface';\nimport { Layer } from './layer';\nimport type { ILayerService } from '../interface/core';\nimport { container } from '../container';\nimport {\n  DynamicLayerHandlerContribution,\n  StaticLayerHandlerContribution,\n  VirtualLayerHandlerContribution\n} from './constants';\nimport { application } from '../application';\n\n@injectable()\nexport class DefaultLayerService implements ILayerService {\n  declare layerMap: Map<IStage, ILayer[]>;\n  declare staticLayerCountInEnv: number;\n  declare dynamicLayerCountInEnv: number;\n  declare inited: boolean;\n  declare global: IGlobal;\n  static idprefix: string = 'visactor_layer';\n  static prefix_count: number = 0;\n\n  static GenerateLayerId() {\n    return `${DefaultLayerService.idprefix}_${DefaultLayerService.prefix_count++}`;\n  }\n\n  constructor() {\n    this.layerMap = new Map();\n    this.global = application.global;\n  }\n\n  tryInit() {\n    if (!this.inited) {\n      this.staticLayerCountInEnv = this.global.getStaticCanvasCount();\n      this.dynamicLayerCountInEnv = this.global.getDynamicCanvasCount();\n      this.inited = true;\n    }\n  }\n\n  getStageLayer(stage: IStage) {\n    return this.layerMap.get(stage);\n  }\n\n  getRecommendedLayerType(layerMode?: LayerMode): LayerMode {\n    if (layerMode) {\n      return layerMode;\n    }\n    // 默认推荐实体canvas，不行就推荐离屏canvas，最次才是virtual\n    if (this.staticLayerCountInEnv !== 0) {\n      return 'static';\n    } else if (this.dynamicLayerCountInEnv !== 0) {\n      return 'dynamic';\n    }\n    return 'virtual';\n  }\n\n  getLayerHandler(layerMode: LayerMode) {\n    let layerHandler: ILayerHandlerContribution;\n    if (layerMode === 'static') {\n      layerHandler = container.get<ILayerHandlerContribution>(StaticLayerHandlerContribution);\n    } else if (layerMode === 'dynamic') {\n      layerHandler = container.get<ILayerHandlerContribution>(DynamicLayerHandlerContribution);\n    } else {\n      layerHandler = container.get<ILayerHandlerContribution>(VirtualLayerHandlerContribution);\n    }\n    return layerHandler;\n  }\n\n  createLayer(stage: IStage, options: Partial<ILayerParams> = { main: false }): ILayer {\n    this.tryInit();\n    let layerMode = this.getRecommendedLayerType(options.layerMode);\n    layerMode = options.main ? 'static' : options.canvasId ? 'static' : layerMode;\n    const layerHandler = this.getLayerHandler(layerMode);\n    const layer = new Layer(stage, this.global, stage.window, {\n      main: false,\n      ...options,\n      layerMode,\n      canvasId: options.canvasId ?? DefaultLayerService.GenerateLayerId(),\n      layerHandler\n    });\n    const stageLayers = this.layerMap.get(stage) || [];\n    stageLayers.push(layer);\n    this.layerMap.set(stage, stageLayers);\n    this.staticLayerCountInEnv--;\n    return layer;\n  }\n\n  prepareStageLayer(stage: IStage) {\n    let mainHandler: ILayerHandlerContribution;\n    stage.forEachChildren((l: ILayer) => {\n      const handler = l.getNativeHandler();\n      if (handler.type === 'virtual') {\n        handler.mainHandler = mainHandler;\n        mainHandler.secondaryHandlers.push(handler);\n      } else {\n        mainHandler = handler;\n        mainHandler.secondaryHandlers = [];\n      }\n    });\n  }\n\n  releaseLayer(stage: IStage, layer: ILayer): void {\n    layer.release();\n    const stageLayers = this.layerMap.get(stage) || [];\n    this.layerMap.set(\n      stage,\n      stageLayers.filter(l => l !== layer)\n    );\n  }\n\n  layerCount(stage: IStage): number {\n    return (this.layerMap.get(stage) || []).length;\n  }\n  restLayerCount(stage: IStage): number {\n    // TODO: 设置精确的值\n    if (this.global.env === 'browser') {\n      return 10;\n    }\n    return 0;\n  }\n\n  releaseStage(stage: IStage) {\n    this.layerMap.delete(stage);\n  }\n}\n"]}