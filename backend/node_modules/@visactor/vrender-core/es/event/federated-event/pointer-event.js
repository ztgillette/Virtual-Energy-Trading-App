import { FederatedMouseEvent } from "./mouse-event";

export class FederatedPointerEvent extends FederatedMouseEvent {
    constructor() {
        super(...arguments), this.width = 0, this.height = 0, this.isPrimary = !1;
    }
    getCoalescedEvents() {
        return "pointermove" === this.type || "mousemove" === this.type || "touchmove" === this.type ? [ this ] : [];
    }
    getPredictedEvents() {
        throw new Error("getPredictedEvents is not supported!");
    }
    clone() {
        var _a, _b, _c;
        const event = new FederatedPointerEvent(this.manager);
        event.eventPhase = event.NONE, event.currentTarget = null, event.path = [], event.detailPath = [], 
        event.target = null, event.nativeEvent = this.nativeEvent, event.originalEvent = this.originalEvent, 
        null === (_a = this.manager) || void 0 === _a || _a.copyPointerData(this, event), 
        null === (_b = this.manager) || void 0 === _b || _b.copyMouseData(this, event), 
        null === (_c = this.manager) || void 0 === _c || _c.copyData(this, event), event.target = this.target, 
        event.path = this.composedPath().slice();
        const p = this.composedDetailPath();
        return event.detailPath = p && p.slice(), event.type = this.type, event;
    }
}
//# sourceMappingURL=pointer-event.js.map
