{"version":3,"sources":["../src/graphic/graphic-creator.ts"],"names":[],"mappings":"AA8IA,MAAM,cAAc;IAiBlB;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,sBAAsB,CAAC,IAAY,EAAE,EAAO;QAC1C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACxB,IAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED,aAAa,CAAC,IAAY,EAAE,MAAW;QACrC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,EAAE,EAAE;YACP,OAAO,IAAI,CAAC;SACb;QACD,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;IACpB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","file":"graphic-creator.js","sourcesContent":["// import type {\n//   IArc,\n//   IArcGraphicAttribute,\n//   IArea,\n//   IAreaGraphicAttribute,\n//   ICircle,\n//   ICircleGraphicAttribute,\n//   IGroup,\n//   IGroupGraphicAttribute,\n//   IImageGraphicAttribute,\n//   ILine,\n//   ILineGraphicAttribute,\n//   IPath,\n//   IPathGraphicAttribute,\n//   IPolygonGraphicAttribute,\n//   IRect,\n//   IRectGraphicAttribute,\n//   ISymbolGraphicAttribute,\n//   IText,\n//   ITextGraphicAttribute,\n//   ISymbol,\n//   IImage,\n//   IPolygon,\n//   IShadowRoot,\n//   IGraphic,\n//   IRichTextGraphicAttribute,\n//   IRichText,\n//   IGlyph,\n//   IGlyphGraphicAttribute,\n//   IRect3d,\n//   IRect3dGraphicAttribute,\n//   IArc3dGraphicAttribute,\n//   IPyramid3dGraphicAttribute,\n//   IPyramid3d,\n//   IWrapTextGraphicAttribute\n// } from '../interface';\n// import { Arc } from './arc';\n// import { Area } from './area';\n// import { Circle } from './circle';\n// import { Group } from './group';\n// import { Image } from './image';\n// import { Line } from './line';\n// import { Path } from './path';\n// import { Polygon } from './polygon';\n// import { Rect } from './rect';\n// // 这里git会将Symbol强行转成小写symbol，先重命名一下\n// import { Symbol as MarkSymbol } from './symbol';\n// import { ShadowRoot as MarkShadowRoot } from './shadow-root';\n// import { Text } from './text';\n// import { RichText } from './richtext';\n// import { Glyph } from './glyph';\n// import { Rect3d } from './rect3d';\n// import { Arc3d } from './arc3d';\n// import { Pyramid3d } from './pyramid3d';\n// import { WrapText } from './wrap-text';\n\nimport type {\n  IArc,\n  IArcGraphicAttribute,\n  IArea,\n  IAreaGraphicAttribute,\n  ICircle,\n  ICircleGraphicAttribute,\n  IGroup,\n  IGroupGraphicAttribute,\n  IImage,\n  IImageGraphicAttribute,\n  ILine,\n  ILineGraphicAttribute,\n  IPath,\n  IPathGraphicAttribute,\n  IPolygon,\n  IPolygonGraphicAttribute,\n  IRect,\n  IRect3d,\n  IRect3dGraphicAttribute,\n  IRectGraphicAttribute,\n  IRichText,\n  IRichTextGraphicAttribute,\n  IShadowRoot,\n  ISymbol,\n  ISymbolGraphicAttribute,\n  IText,\n  ITextGraphicAttribute,\n  IWrapTextGraphicAttribute\n} from '../interface';\n\n// export function createArc(attributes: IArcGraphicAttribute): IArc {\n//   return new Arc(attributes);\n// }\n// export function createArc3d(attributes: IArc3dGraphicAttribute): IArc {\n//   return new Arc3d(attributes);\n// }\n// export function createPyramid3d(attributes: IPyramid3dGraphicAttribute): IPyramid3d {\n//   return new Pyramid3d(attributes);\n// }\n// export function createArea(attributes: IAreaGraphicAttribute): IArea {\n//   return new Area(attributes);\n// }\n// export function createCircle(attributes: ICircleGraphicAttribute): ICircle {\n//   return new Circle(attributes);\n// }\n// export function createGroup(attributes: IGroupGraphicAttribute): IGroup {\n//   return new Group(attributes);\n// }\n// export function createLine(attributes: ILineGraphicAttribute): ILine {\n//   return new Line(attributes);\n// }\n// export function createPath(attributes: IPathGraphicAttribute): IPath {\n//   return new Path(attributes);\n// }\n// export function createRect(attributes: IRectGraphicAttribute): IRect {\n//   return new Rect(attributes);\n// }\n// export function createRect3d(attributes: IRect3dGraphicAttribute): IRect3d {\n//   return new Rect3d(attributes);\n// }\n// export function createGlyph(attributes: IGlyphGraphicAttribute): IGlyph {\n//   return new Glyph(attributes);\n// }\n// export function createText(attributes: ITextGraphicAttribute): IText {\n//   return new Text(attributes);\n// }\n// export function createWrapText(attributes: IWrapTextGraphicAttribute): IText {\n//   return new WrapText(attributes);\n// }\n// export function createSymbol(attributes: ISymbolGraphicAttribute): ISymbol {\n//   return new MarkSymbol(attributes);\n// }\n// export function createImage(attributes: IImageGraphicAttribute): IImage {\n//   return new Image(attributes);\n// }\n// export function createPolygon(attributes: IPolygonGraphicAttribute): IPolygon {\n//   return new Polygon(attributes);\n// }\n// export function createShadowRoot(graphic?: IGraphic): IShadowRoot {\n//   return new MarkShadowRoot(graphic);\n// }\n// export function createRichText(attributes: IRichTextGraphicAttribute): IRichText {\n//   return new RichText(attributes);\n// }\n\nclass GraphicCreator {\n  declare store: Map<string, any>;\n  declare arc?: (attribute: IArcGraphicAttribute) => IArc;\n  declare area?: (attribute: IAreaGraphicAttribute) => IArea;\n  declare circle?: (attribute: ICircleGraphicAttribute) => ICircle;\n  declare group?: (attribute: IGroupGraphicAttribute) => IGroup;\n  declare image?: (attribute: IImageGraphicAttribute) => IImage;\n  declare line?: (attribute: ILineGraphicAttribute) => ILine;\n  declare path?: (attribute: IPathGraphicAttribute) => IPath;\n  declare rect?: (attribute: IRectGraphicAttribute) => IRect;\n  declare rect3d?: (attribute: IRect3dGraphicAttribute) => IRect3d;\n  declare symbol?: (attribute: ISymbolGraphicAttribute) => ISymbol;\n  declare text?: (attribute: ITextGraphicAttribute) => IText;\n  declare richtext?: (attribute: IRichTextGraphicAttribute) => IRichText;\n  declare polygon?: (attribute: IPolygonGraphicAttribute) => IPolygon;\n  declare shadowRoot?: (attribute: IGroupGraphicAttribute) => IShadowRoot;\n  declare wraptext?: (attribute: IWrapTextGraphicAttribute) => IText;\n  constructor() {\n    this.store = new Map();\n  }\n\n  RegisterGraphicCreator(name: string, cb: any) {\n    this.store.set(name, cb);\n    (this as any)[name] = cb;\n  }\n\n  CreateGraphic(name: string, params: any) {\n    const cb = this.store.get(name);\n    if (!cb) {\n      return null;\n    }\n    return cb(params);\n  }\n}\n\nexport const graphicCreator = new GraphicCreator();\n\n// export const graphicCreator = {\n//   arc: createArc,\n//   area: createArea,\n//   circle: createCircle,\n//   group: createGroup,\n//   image: createImage,\n//   line: createLine,\n//   path: createPath,\n//   rect: createRect,\n//   rect3d: createRect3d,\n//   symbol: createSymbol,\n//   text: createText,\n//   richtext: createRichText,\n//   polygon: createPolygon,\n//   shadowRoot: createShadowRoot,\n//   wrapText: createWrapText\n// };\n"]}