{"version":3,"sources":["../src/graphic/glyph.ts"],"names":[],"mappings":"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","file":"glyph.js","sourcesContent":["import type { AABBBounds, IAABBBounds, IPointLike } from '@visactor/vutils';\nimport { Graphic, NOWORK_ANIMATE_ATTR } from './graphic';\nimport type {\n  GraphicType,\n  IGraphic,\n  IGlyph,\n  IGlyphGraphicAttribute,\n  IGraphicAttribute,\n  ISetAttributeContext\n} from '../interface';\nimport { getTheme } from './theme';\nimport { application } from '../application';\nimport { GLYPH_NUMBER_TYPE } from './constants';\n\nexport class Glyph extends Graphic<IGlyphGraphicAttribute> implements IGlyph {\n  type: GraphicType = 'glyph';\n  declare _onInit: (g: IGlyph) => void;\n  declare _onUpdate: (g: IGlyph) => void;\n  declare glyphStates?: Record<\n    string,\n    {\n      attributes: Partial<IGlyphGraphicAttribute>;\n      subAttributes: Partial<IGraphicAttribute>[];\n    }\n  >;\n  declare glyphStateProxy?: (\n    stateName: string,\n    targetStates?: string[]\n  ) => {\n    attributes: Partial<IGlyphGraphicAttribute>;\n    subAttributes: Partial<IGraphicAttribute>[];\n  };\n  protected declare subGraphic: IGraphic[];\n\n  static NOWORK_ANIMATE_ATTR = NOWORK_ANIMATE_ATTR;\n\n  constructor(params: Partial<IGlyphGraphicAttribute>) {\n    super(params);\n    this.numberType = GLYPH_NUMBER_TYPE;\n    this.subGraphic = [];\n    this._onInit && this._onInit(this);\n    this.valid = this.isValid();\n  }\n\n  setSubGraphic(subGraphic: IGraphic[]) {\n    this.detachSubGraphic();\n    this.subGraphic = subGraphic;\n    subGraphic.forEach(g => {\n      g.glyphHost = this;\n      Object.setPrototypeOf(g.attribute, this.attribute);\n    });\n    this.valid = this.isValid();\n    this.addUpdateBoundTag();\n  }\n\n  protected detachSubGraphic() {\n    this.subGraphic.forEach(g => {\n      g.glyphHost = null;\n      Object.setPrototypeOf(g.attribute, {});\n    });\n  }\n\n  getSubGraphic() {\n    return this.subGraphic;\n  }\n\n  onInit(cb: (g: this) => void): void {\n    this._onInit = cb;\n  }\n\n  onUpdate(cb: (g: this) => void): void {\n    this._onUpdate = cb;\n  }\n\n  isValid(): boolean {\n    return true;\n  }\n\n  setAttribute(key: string, value: any, forceUpdateTag?: boolean, context?: ISetAttributeContext) {\n    super.setAttribute(key, value, forceUpdateTag, context);\n    this.subGraphic.forEach(g => {\n      g.addUpdateShapeAndBoundsTag();\n      g.addUpdatePositionTag();\n    });\n  }\n\n  setAttributes(\n    params: Partial<IGlyphGraphicAttribute>,\n    forceUpdateTag: boolean = false,\n    context?: ISetAttributeContext\n  ) {\n    super.setAttributes(params, forceUpdateTag, context);\n    this.subGraphic.forEach(g => {\n      g.addUpdateShapeAndBoundsTag();\n      g.addUpdatePositionTag();\n    });\n  }\n\n  translate(x: number, y: number) {\n    super.translate(x, y);\n\n    this.subGraphic.forEach(g => {\n      g.addUpdatePositionTag();\n      g.addUpdateBoundTag();\n    });\n    return this;\n  }\n\n  translateTo(x: number, y: number) {\n    super.translateTo(x, y);\n\n    this.subGraphic.forEach(g => {\n      g.addUpdatePositionTag();\n      g.addUpdateBoundTag();\n    });\n    return this;\n  }\n\n  scale(scaleX: number, scaleY: number, scaleCenter?: IPointLike) {\n    super.scale(scaleX, scaleY, scaleCenter);\n\n    this.subGraphic.forEach(g => {\n      g.addUpdatePositionTag();\n      g.addUpdateBoundTag();\n    });\n    return this;\n  }\n\n  scaleTo(scaleX: number, scaleY: number) {\n    super.scaleTo(scaleX, scaleY);\n\n    this.subGraphic.forEach(g => {\n      g.addUpdatePositionTag();\n      g.addUpdateBoundTag();\n    });\n    return this;\n  }\n\n  rotate(angle: number) {\n    super.rotate(angle);\n\n    this.subGraphic.forEach(g => {\n      g.addUpdatePositionTag();\n      g.addUpdateBoundTag();\n    });\n    return this;\n  }\n\n  rotateTo(angle: number) {\n    super.rotate(angle);\n\n    this.subGraphic.forEach(g => {\n      g.addUpdatePositionTag();\n      g.addUpdateBoundTag();\n    });\n    return this;\n  }\n\n  getGraphicTheme(): Required<IGlyphGraphicAttribute> {\n    return getTheme(this as IGraphic).glyph;\n  }\n\n  protected updateAABBBounds(\n    attribute: IGlyphGraphicAttribute,\n    theme: Required<IGlyphGraphicAttribute>,\n    aabbBounds: IAABBBounds\n  ) {\n    // 添加子节点\n    this.getSubGraphic().forEach((node: IGraphic) => {\n      aabbBounds.union(node.AABBBounds);\n    });\n\n    // glyph不需要计算AABBBounds\n    // this.transformAABBBounds(attribute, aabbBounds, theme, graphic);\n    return aabbBounds;\n  }\n\n  protected doUpdateAABBBounds(): AABBBounds {\n    this.updateAABBBoundsStamp++;\n    this._AABBBounds.clear();\n    const bounds = this.updateAABBBounds(this.attribute, this.getGraphicTheme(), this._AABBBounds) as AABBBounds;\n    this.clearUpdateBoundTag();\n    return bounds;\n  }\n\n  protected needUpdateTags(keys: string[]): boolean {\n    return false;\n  }\n  protected needUpdateTag(key: string): boolean {\n    return false;\n  }\n\n  useStates(states: string[], hasAnimation?: boolean): void {\n    if (!states.length) {\n      this.clearStates(hasAnimation);\n      return;\n    }\n\n    const isChange =\n      this.currentStates?.length !== states.length ||\n      states.some((stateName, index) => this.currentStates[index] !== stateName);\n    if (!isChange) {\n      return;\n    }\n\n    this.stopStateAnimates();\n\n    const stateAttrs = {};\n    const subAttrs = this.subGraphic.map(() => ({}));\n    states.forEach(stateName => {\n      const attrs = this.glyphStateProxy ? this.glyphStateProxy(stateName, states) : this.glyphStates[stateName];\n\n      if (attrs) {\n        Object.assign(stateAttrs, attrs.attributes);\n\n        if (attrs.subAttributes?.length) {\n          subAttrs.forEach((subAttrs, index) => {\n            Object.assign(subAttrs, attrs.subAttributes[index]);\n          });\n        }\n      }\n    });\n\n    // this.subGraphic.forEach((graphic, index) => {\n    //   graphic.updateNormalAttrs(subAttrs[index]);\n    //   graphic.applyStateAttrs(subAttrs[index], states, hasAnimation);\n    // });\n\n    this.updateNormalAttrs(stateAttrs);\n    this.currentStates = states;\n    this.applyStateAttrs(stateAttrs, states, hasAnimation);\n  }\n\n  clearStates(hasAnimation?: boolean) {\n    this.stopStateAnimates();\n    if (this.hasState() && this.normalAttrs) {\n      this.currentStates = [];\n      // this.subGraphic.forEach(graphic => {\n      //   graphic.applyStateAttrs(graphic.normalAttrs, this.currentStates, hasAnimation, true);\n      //   graphic.normalAttrs = null;\n      // });\n      this.applyStateAttrs(this.normalAttrs, this.currentStates, hasAnimation, true);\n    } else {\n      this.currentStates = [];\n    }\n    this.normalAttrs = null;\n  }\n\n  clone(): IGraphic<Partial<IGlyphGraphicAttribute>> {\n    const glyph = new Glyph({ ...this.attribute });\n    glyph.setSubGraphic(this.subGraphic.map(g => g.clone()));\n    return glyph;\n  }\n\n  getNoWorkAnimateAttr(): Record<string, number> {\n    return Glyph.NOWORK_ANIMATE_ATTR;\n  }\n}\n\nexport function createGlyph(attributes: IGlyphGraphicAttribute): IGlyph {\n  return new Glyph(attributes);\n}\n"]}