{"version":3,"sources":["../src/graphic/builtin-symbol/line-v.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAEpC,MAAM,UAAU,KAAK,CAAC,GAAe,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAU;IAChF,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACrB,OAAO,IAAI,CAAC;AACd,CAAC;AAGD,MAAM,OAAO,WAAY,SAAQ,UAAU;IAA3C;;QACE,SAAI,GAAe,OAAO,CAAC;QAC3B,YAAO,GAAW,eAAe,CAAC;IAgBpC,CAAC;IAdC,IAAI,CAAC,GAAe,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS,EAAE,CAAU;QAClE,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnC,OAAO,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC;IAED,UAAU,CAAC,GAAe,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS,EAAE,MAAc,EAAE,CAAU;QACxF,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QAC5C,OAAO,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC;IAED,aAAa,CAAC,IAAY,EAAE,CAAS,EAAE,CAAS,EAAE,CAAU;QAC1D,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnC,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;IAC5C,CAAC;CACF;AAED,eAAe,IAAI,WAAW,EAAE,CAAC","file":"line-v.js","sourcesContent":["import type { IBounds } from '@visactor/vutils';\nimport { tau } from '@visactor/vutils';\nimport type { IContext2d, SymbolType, ISymbolClass, IPath2D } from '../../interface';\nimport { BaseSymbol } from './base';\n\nexport function lineV(ctx: IContext2d, r: number, x: number, y: number, z?: number) {\n  ctx.moveTo(x, y - r);\n  ctx.lineTo(x, y + r);\n  return true;\n}\n\n// 以中心为锚点，size为circle外接正方形的面积\nexport class LineVSymbol extends BaseSymbol implements ISymbolClass {\n  type: SymbolType = 'lineV';\n  pathStr: string = 'M0,-0.5L0,0.5';\n\n  draw(ctx: IContext2d, size: number, x: number, y: number, z?: number) {\n    const r = this.parseSize(size) / 2;\n    return lineV(ctx, r, x, y, z);\n  }\n\n  drawOffset(ctx: IContext2d, size: number, x: number, y: number, offset: number, z?: number) {\n    const r = this.parseSize(size) / 2 + offset;\n    return lineV(ctx, r, x, y, z);\n  }\n\n  drawToSvgPath(size: number, x: number, y: number, z?: number): string {\n    const r = this.parseSize(size) / 2;\n    return `M ${x}, ${y - r} L ${x},${y + r}`;\n  }\n}\n\nexport default new LineVSymbol();\n"]}