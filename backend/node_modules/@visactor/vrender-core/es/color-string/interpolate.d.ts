import type { IGradientColor, ILinearGradient, IRadialGradient, IConicalGradient } from '../interface';
export declare function interpolateColor(from: [number, number, number, number] | [string, string, string, string] | string | IGradientColor, to: [number, number, number, number] | [string, string, string, string] | string | IGradientColor, ratio: number, alphaChannel: boolean, cb?: (fromArray: [number, number, number, number], toArray: [number, number, number, number]) => void): false | string | IGradientColor | string[];
export declare function _interpolateColor(from: [number, number, number, number] | string | IGradientColor, to: [number, number, number, number] | string | IGradientColor, ratio: number, alphaChannel: boolean, cb?: (fromArray: [number, number, number, number], toArray: [number, number, number, number]) => void): false | string | IGradientColor | string[];
export declare function interpolateGradientLinearColor(fc: ILinearGradient, tc: ILinearGradient, ratio: number): false | ILinearGradient;
export declare function interpolateGradientRadialColor(fc: IRadialGradient, tc: IRadialGradient, ratio: number): false | IRadialGradient;
export declare function interpolateGradientConicalColor(fc: IConicalGradient, tc: IConicalGradient, ratio: number): false | IConicalGradient;
export declare function interpolatePureColorArray(from: [number, number, number, number], to: [number, number, number, number], ratio: number): [number, number, number, number];
export declare function interpolatePureColorArrayToStr(from: [number, number, number, number], to: [number, number, number, number], ratio: number): string;
export declare function colorStringInterpolationToStr(fromColor: string, toColor: string, ratio: number): string;
