{"version":3,"sources":["../src/color-string/store.ts"],"names":[],"mappings":"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","file":"store.js","sourcesContent":["import { Color } from '@visactor/vutils';\n\nexport function colorEqual(color1: string, color2: string): boolean {\n  const c1 = Color.parseColorString(color1);\n  const c2 = Color.parseColorString(color2);\n  return c1 && c2 ? c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.opacity === c2.opacity : false;\n}\n\nexport enum ColorType {\n  Color255 = 0,\n  Color1 = 1\n}\n\nexport class ColorStore {\n  private static store255: { [id: string]: [number, number, number, number] } = {};\n  private static store1: { [id: string]: [number, number, number, number] } = {};\n  static Get(\n    str: string,\n    size: number = ColorType.Color1,\n    arr: [number, number, number, number] = [0, 0, 0, 1]\n  ): [number, number, number, number] {\n    if (size === ColorType.Color1) {\n      const color: any = ColorStore.store1[str];\n      if (color) {\n        arr[0] = color[0];\n        arr[1] = color[1];\n        arr[2] = color[2];\n        arr[3] = color[3];\n        return arr;\n      }\n      const c = Color.parseColorString(str);\n      if (c) {\n        const data: [number, number, number, number] = [c.r / 255, c.g / 255, c.b / 255, c.opacity];\n        ColorStore.store1[str] = data;\n        // value[3] *= 255;\n        ColorStore.store255[str] = [c.r, c.g, c.b, c.opacity];\n        arr[0] = data[0];\n        arr[1] = data[1];\n        arr[2] = data[2];\n        arr[3] = data[3];\n      }\n      return arr;\n    }\n    const color: any = ColorStore.store255[str];\n    if (color) {\n      arr[0] = color[0];\n      arr[1] = color[1];\n      arr[2] = color[2];\n      arr[3] = color[3];\n      return arr;\n    }\n\n    const c = Color.parseColorString(str);\n    if (c) {\n      ColorStore.store1[str] = [c.r / 255, c.g / 255, c.b / 255, c.opacity];\n      // value[3] *= 255;\n      ColorStore.store255[str] = [c.r, c.g, c.b, c.opacity];\n      arr[0] = c.r;\n      arr[1] = c.g;\n      arr[2] = c.b;\n      arr[3] = c.opacity;\n    }\n    return arr;\n  }\n\n  static Set(str: string, size: number, arr: [number, number, number, number]) {\n    if (size === ColorType.Color1) {\n      if (ColorStore.store1[str]) {\n        return;\n      }\n      ColorStore.store1[str] = arr;\n      ColorStore.store255[str] = [\n        Math.floor(arr[0] * 255),\n        Math.floor(arr[1] * 255),\n        Math.floor(arr[2] * 255),\n        Math.floor(arr[3] * 255)\n      ];\n    } else {\n      if (ColorStore.store255[str]) {\n        return;\n      }\n      ColorStore.store255[str] = arr;\n      ColorStore.store1[str] = [arr[0] / 255, arr[1] / 255, arr[2] / 255, arr[3]];\n    }\n  }\n}\n"]}