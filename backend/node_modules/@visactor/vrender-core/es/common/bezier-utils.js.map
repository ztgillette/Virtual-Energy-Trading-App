{"version":3,"sources":["../src/common/bezier-utils.ts"],"names":[],"mappings":"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","file":"bezier-utils.js","sourcesContent":["import type { IPointLike, IPoint } from '@visactor/vutils';\nimport { PointService, Point } from '@visactor/vutils';\nexport function snapLength(xArr: number[], yArr: number[]) {\n  let totalLength = 0;\n  const count = xArr.length;\n  for (let i = 0; i < count; i++) {\n    const x = xArr[i];\n    const y = yArr[i];\n    const nextX = xArr[(i + 1) % count];\n    const nextY = yArr[(i + 1) % count];\n    totalLength += PointService.distanceNN(x, y, nextX, nextY);\n  }\n  return totalLength / 2;\n}\n\n/**\n * 计算贝塞尔曲线的长度\n * @param p0 起点\n * @param p1 控制点1\n * @param p2 控制点2\n * @param p3 终点\n * @param iterationCount\n */\nexport function cubicLength(p0: IPointLike, p1: IPointLike, p2: IPointLike, p3: IPointLike, iterationCount: number) {\n  return snapLength([p0.x, p1.x, p2.x, p3.x], [p0.y, p1.y, p2.y, p3.y]);\n}\n\nexport function cubicCalc(p0: number, p1: number, p2: number, p3: number, t: number): number {\n  const one = 1 - t;\n  return one * one * one * p0 + 3 * p1 * t * one * one + 3 * p2 * t * t * one + p3 * t * t * t;\n}\n\n/**\n * 根据t计算三次贝塞尔的点\n * example：\n *   x: cubicAt(x1, x2, x3, x4, t),\n *   y: cubicAt(y1, y2, y3, y4, t),\n * @param p0 起点坐标\n * @param p1 控制点1\n * @param p2 控制点2\n * @param p3 终点坐标\n * @param t\n */\nexport function cubicPointAt(p0: IPointLike, p1: IPointLike, p2: IPointLike, p3: IPointLike, t: number): IPoint {\n  const x = cubicCalc(p0.x, p1.x, p2.x, p3.x, t);\n  const y = cubicCalc(p0.y, p1.y, p2.y, p3.y, t);\n  return new Point(x, y);\n}\n\nexport function quadCalc(p0: number, p1: number, p2: number, t: number): number {\n  const one = 1 - t;\n  return one * one * p0 + 2 * one * t * p1 + t * t * p2;\n}\n\n/**\n * 根据t计算三次贝塞尔的点\n * example：\n *   x: cubicAt(x1, x2, x3, x4, t),\n *   y: cubicAt(y1, y2, y3, y4, t),\n * @param p0 起点坐标\n * @param p1 控制点1\n * @param p2 控制点2\n * @param p3 终点坐标\n * @param t\n */\nexport function quadPointAt(p0: IPointLike, p1: IPointLike, p2: IPointLike, t: number): IPoint {\n  const x = quadCalc(p0.x, p1.x, p2.x, t);\n  const y = quadCalc(p0.y, p1.y, p2.y, t);\n  return new Point(x, y);\n}\n\n/**\n * 计算贝塞尔曲线的长度\n * @param p0 起点\n * @param p1 控制点1\n * @param p2 控制点2\n * @param p3 终点\n * @param iterationCount\n */\nexport function quadLength(p0: IPointLike, p1: IPointLike, p2: IPointLike, iterationCount: number) {\n  return snapLength([p0.x, p1.x, p2.x], [p0.y, p1.y, p2.y]);\n}\n"]}