{"version":3,"sources":["../src/common/render-command-list.ts"],"names":[],"mappings":"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","file":"render-command-list.js","sourcesContent":["import type { CommandType, IPath2D } from '../interface';\n\nconst commandFuncs: Array<\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) => void\n> = [\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.arc(\n      (command[1] as number) * sx + x,\n      (command[2] as number) * sy + y,\n      ((command[3] as number) * (sx + sy)) / 2,\n      command[4] as number,\n      command[5] as number,\n      command[6] as boolean,\n      z\n    ),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.arcTo(\n      (command[1] as number) * sx + x,\n      (command[2] as number) * sy + y,\n      (command[3] as number) * sx + x,\n      (command[4] as number) * sy + y,\n      ((command[5] as number) * (sx + sy)) / 2,\n      z\n    ),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.bezierCurveTo(\n      (command[1] as number) * sx + x,\n      (command[2] as number) * sy + y,\n      (command[3] as number) * sx + x,\n      (command[4] as number) * sy + y,\n      (command[5] as number) * sx + x,\n      (command[6] as number) * sy + y,\n      z\n    ),\n  (command: CommandType, context: IPath2D, x: number, y: number) => context.closePath(),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number) =>\n    context.ellipse(\n      (command[1] as number) * sx + x,\n      (command[2] as number) * sy + y,\n      (command[3] as number) * sx,\n      (command[4] as number) * sy,\n      command[5] as number,\n      command[6] as number,\n      command[7] as number,\n      command[8] as boolean\n    ),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.lineTo((command[1] as number) * sx + x, (command[2] as number) * sy + y, z),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.moveTo((command[1] as number) * sx + x, (command[2] as number) * sy + y, z),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.quadraticCurveTo(\n      (command[1] as number) * sx + x,\n      (command[2] as number) * sy + y,\n      (command[3] as number) * sx + x,\n      (command[4] as number) * sy + y,\n      z\n    ),\n  (command: CommandType, context: IPath2D, x: number, y: number, sx: number, sy: number, z?: number) =>\n    context.rect(\n      (command[1] as number) * sx + x,\n      (command[2] as number) * sy + y,\n      (command[3] as number) * sx,\n      (command[4] as number) * sy,\n      z\n    )\n];\n\nexport function renderCommandList(\n  commandList: CommandType[],\n  context: IPath2D,\n  x: number = 0,\n  y: number = 0,\n  sx: number = 1,\n  sy: number = 1,\n  z?: number\n) {\n  for (let i = 0; i < commandList.length; i++) {\n    const command = commandList[i];\n    commandFuncs[command[0]](command, context, x, y, sx, sy, z);\n  }\n}\n"]}