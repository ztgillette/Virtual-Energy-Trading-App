{"version":3,"sources":["../src/common/inversify/metadata_keys.ts"],"names":[],"mappings":"AACA,MAAM,CAAC,MAAM,SAAS,GAAG,OAAO,CAAC;AAGjC,MAAM,CAAC,MAAM,QAAQ,GAAG,MAAM,CAAC;AAG/B,MAAM,CAAC,MAAM,aAAa,GAAG,WAAW,CAAC;AAGzC,MAAM,CAAC,MAAM,YAAY,GAAG,UAAU,CAAC;AAGvC,MAAM,CAAC,MAAM,UAAU,GAAG,QAAQ,CAAC;AAGnC,MAAM,CAAC,MAAM,gBAAgB,GAAG,cAAc,CAAC;AAG/C,MAAM,CAAC,MAAM,MAAM,GAAG,kBAAkB,CAAC;AAGzC,MAAM,CAAC,MAAM,WAAW,GAAG,wBAAwB,CAAC;AAGpD,MAAM,CAAC,MAAM,WAAW,GAAG,sBAAsB,CAAC;AAGlD,MAAM,CAAC,MAAM,kBAAkB,GAAG,mBAAmB,CAAC;AAGtD,MAAM,CAAC,MAAM,WAAW,GAAG,aAAa,CAAC;AAEzC,SAAS,mBAAmB;IAC1B,OAAO,CAAC,UAAU,EAAE,gBAAgB,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;AAC1F,CAAC;AAED,MAAM,CAAC,MAAM,mBAAmB,GAAa,mBAAmB,EAAE,CAAC","file":"metadata_keys.js","sourcesContent":["// Used for named bindings\nexport const NAMED_TAG = 'named';\n\n// The name of the target at design time\nexport const NAME_TAG = 'name';\n\n// The for unmanaged injections (in base classes when using inheritance)\nexport const UNMANAGED_TAG = 'unmanaged';\n\n// The for optional injections\nexport const OPTIONAL_TAG = 'optional';\n\n// The type of the binding at design time\nexport const INJECT_TAG = 'inject';\n\n// The type of the binding at design type for multi-injections\nexport const MULTI_INJECT_TAG = 'multi_inject';\n\n// used to store constructor arguments tags\nexport const TAGGED = 'inversify:tagged';\n\n// used to store class properties tags\nexport const TAGGED_PROP = 'inversify:tagged_props';\n\n// used to store types to be injected\nexport const PARAM_TYPES = 'inversify:paramtypes';\n\n// used to access design time types\nexport const DESIGN_PARAM_TYPES = 'design:paramtypes';\n\n// used to identify preDestroy functions\nexport const PRE_DESTROY = 'pre_destroy';\n\nfunction getNonCustomTagKeys(): string[] {\n  return [INJECT_TAG, MULTI_INJECT_TAG, NAME_TAG, UNMANAGED_TAG, NAMED_TAG, OPTIONAL_TAG];\n}\n\nexport const NON_CUSTOM_TAG_KEYS: string[] = getNonCustomTagKeys();\n"]}