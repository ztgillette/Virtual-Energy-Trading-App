{"version":3,"sources":["../src/common/event-listener-manager.ts"],"names":[],"mappings":"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","file":"event-listener-manager.js","sourcesContent":["import type { IEventListenerManager } from '../interface/event-listener-manager';\n\n/**\n * Base class to manage event listeners with support for event transformation\n * Used by DefaultGlobal and DefaultWindow to handle the transformation of event coordinates\n */\nexport class EventListenerManager implements IEventListenerManager {\n  /**\n   * Map that stores the mapping from original listeners to wrapped listeners\n   * Structure: Map<eventType, Map<originalListener, wrappedListener>>\n   */\n  protected _listenerMap: Map<string, Map<EventListenerOrEventListenerObject, EventListener>>;\n\n  /**\n   * Transformer function that transforms the event\n   */\n  protected _eventListenerTransformer: (event: Event) => Event;\n\n  constructor() {\n    this._listenerMap = new Map();\n    this._eventListenerTransformer = event => event; // Default: no transformation\n  }\n\n  /**\n   * Set the event transformer function\n   * @param transformer Function that transforms events\n   */\n  setEventListenerTransformer(transformer: (event: Event) => Event): void {\n    this._eventListenerTransformer = transformer || (event => event);\n  }\n\n  /**\n   * Add an event listener with event transformation\n   * @param type Event type\n   * @param listener Original event listener\n   * @param options Event listener options\n   */\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    if (!listener) {\n      return;\n    }\n\n    // Create a wrapped listener that applies the transformation\n    const wrappedListener = (event: Event) => {\n      const transformedEvent = this._eventListenerTransformer(event);\n      if (typeof listener === 'function') {\n        listener(transformedEvent);\n      } else if (listener.handleEvent) {\n        listener.handleEvent(transformedEvent);\n      }\n    };\n\n    // Store the mapping between original and wrapped listener\n    if (!this._listenerMap.has(type)) {\n      this._listenerMap.set(type, new Map());\n    }\n    this._listenerMap.get(type)!.set(listener, wrappedListener);\n\n    // Add the wrapped listener\n    this._nativeAddEventListener(type, wrappedListener, options);\n  }\n\n  /**\n   * Remove an event listener\n   * @param type Event type\n   * @param listener Event listener to remove\n   * @param options Event listener options\n   */\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void {\n    if (!listener) {\n      return;\n    }\n\n    // Get the wrapped listener from our map\n    const wrappedListener = this._listenerMap.get(type)?.get(listener);\n    if (wrappedListener) {\n      // Remove the wrapped listener\n      this._nativeRemoveEventListener(type, wrappedListener, options);\n\n      // Remove from our map\n      this._listenerMap.get(type)!.delete(listener);\n      if (this._listenerMap.get(type)!.size === 0) {\n        this._listenerMap.delete(type);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param event Event to dispatch\n   */\n  dispatchEvent(event: Event): boolean {\n    return this._nativeDispatchEvent(event);\n  }\n\n  /**\n   * Clear all event listeners\n   */\n  clearAllEventListeners(): void {\n    this._listenerMap.forEach((listenersMap, type) => {\n      listenersMap.forEach((wrappedListener, originalListener) => {\n        this._nativeRemoveEventListener(type, wrappedListener, undefined);\n      });\n    });\n    this._listenerMap.clear();\n  }\n\n  /**\n   * Native implementation of addEventListener\n   * To be implemented by derived classes\n   */\n  protected _nativeAddEventListener(\n    type: string,\n    listener: EventListener,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    throw new Error('_nativeAddEventListener must be implemented by derived classes');\n  }\n\n  /**\n   * Native implementation of removeEventListener\n   * To be implemented by derived classes\n   */\n  protected _nativeRemoveEventListener(\n    type: string,\n    listener: EventListener,\n    options?: boolean | EventListenerOptions\n  ): void {\n    throw new Error('_nativeRemoveEventListener must be implemented by derived classes');\n  }\n\n  /**\n   * Native implementation of dispatchEvent\n   * To be implemented by derived classes\n   */\n  protected _nativeDispatchEvent(event: Event): boolean {\n    throw new Error('_nativeDispatchEvent must be implemented by derived classes');\n  }\n}\n"]}