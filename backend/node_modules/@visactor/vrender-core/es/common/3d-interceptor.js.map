{"version":3,"sources":["../src/common/3d-interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAC;AACvC,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAKzD,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,OAAmB,EACnB,OAAiB,EACjB,QAAgD,EAChD,MAAW,EACX,EAAE;IAEF,IAAI,KAAK,GAAY,KAAK,CAAC;IAC3B,IAAI,IAAI,GAAY,KAAK,CAAC;IAC1B,OAAO,CAAC,eAAe,CAAC,CAAC,CAAW,EAAE,EAAE;QACtC,KAAK,GAAG,CAAC,CAAC,UAAU,KAAK,iBAAiB,CAAC;QAC3C,OAAO,CAAC,KAAK,CAAC;IAChB,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,eAAe,CAAC,CAAC,CAAW,EAAE,EAAE;QACtC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QACpB,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,IAAI,MAAW,CAAC;IAChB,IAAI,KAAK,EAAE;QACT,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAY,CAAC;QASjD,MAAM,cAAc,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;QACrC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;;YAC3B,IAAI,MAAM,GAAG,CAAC,MAAA,MAAA,CAAC,CAAC,SAAS,CAAC,UAAU,mCAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3E,IAAI,MAAM,GAAG,CAAC,MAAA,MAAA,CAAC,CAAC,SAAS,CAAC,UAAU,mCAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3E,OAAO,MAAM,GAAG,CAAC,EAAE;gBACjB,MAAM,IAAI,GAAG,CAAC;aACf;YACD,OAAO,MAAM,GAAG,CAAC,EAAE;gBACjB,MAAM,IAAI,GAAG,CAAC;aACf;YACD,OAAO,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACzB,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;YACf,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,cAAc,EAAE,CAAC;QACzB,OAAO,CAAC,MAAM,EAAE,CAAC;QACjB,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACzB,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,GAAG,SAAS,CAAC;QAChC,MAAM,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAE9B,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC;YAC/B,MAAM,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAChC;QACD,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAE9B,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;YAC5B,MAAM,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAChC;QACD,OAAO,CAAC,cAAc,EAAE,CAAC;QACzB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACnB,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;YACf,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACnB,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;KACJ;SAAM,IAAI,IAAI,EAAE;QAEf,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAgB,CAAC;QACrD,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACjC,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAEjC,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;;gBACtC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,mCAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACxD,OAAO;gBACL,KAAK;gBACL,CAAC;aACF,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAC5C,OAAO,CAAC,cAAc,EAAE,CAAC;QACzB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACpB,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;YACjB,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,MAAM,EAAE,CAAC;QACjB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACpB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAE/B,OAAO,CAAC,cAAc,EAAE,CAAC;QACzB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACnB,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;YACf,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,MAAM,EAAE,CAAC;QACjB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACnB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,MAAM,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAChC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","file":"3d-interceptor.js","sourcesContent":["import { pi2 } from '@visactor/vutils';\nimport { ARC3D_NUMBER_TYPE } from '../graphic/constants';\nimport type { IGraphic } from '../interface/graphic';\nimport type { IArc } from '../interface/graphic/arc';\nimport type { IContext2d } from '../interface/context';\n\nexport const draw3dItem = (\n  context: IContext2d,\n  graphic: IGraphic,\n  callback: (isPie: boolean, is3d: boolean) => any,\n  output: any\n) => {\n  // hack逻辑，如果是饼图的话，需要依次绘制不同的边\n  let isPie: boolean = false;\n  let is3d: boolean = false;\n  graphic.forEachChildren((c: IGraphic) => {\n    isPie = c.numberType === ARC3D_NUMBER_TYPE;\n    return !isPie;\n  });\n  graphic.forEachChildren((c: IGraphic) => {\n    is3d = !!c.findFace;\n    return !is3d;\n  });\n\n  let result: any;\n  if (isPie) {\n    const children = graphic.getChildren() as IArc[];\n    // 绘制内层\n    // drawContext.hack_pieFace = 'inside';\n    // drawContribution.renderGroup(graphic as IGroup, drawContext);\n    // 绘制底部\n    // drawContext.hack_pieFace = 'bottom';\n    // drawContribution.renderGroup(graphic as IGroup, drawContext);\n    // 绘制外部\n    // 排序一下\n    const sortedChildren = [...children];\n    sortedChildren.sort((a, b) => {\n      let angle1 = (a.attribute.startAngle ?? 0 + a.attribute.endAngle ?? 0) / 2;\n      let angle2 = (b.attribute.startAngle ?? 0 + b.attribute.endAngle ?? 0) / 2;\n      while (angle1 < 0) {\n        angle1 += pi2;\n      }\n      while (angle2 < 0) {\n        angle2 += pi2;\n      }\n      return angle2 - angle1;\n    });\n    sortedChildren.forEach(c => {\n      c._next = null;\n      c._prev = null;\n    });\n    graphic.removeAllChild();\n    graphic.update();\n    sortedChildren.forEach(c => {\n      graphic.appendChild(c);\n    });\n    output.hack_pieFace = 'outside';\n    result = callback(isPie, is3d);\n    if (!result || !result.graphic) {\n      // 绘制内部\n      output.hack_pieFace = 'inside';\n      result = callback(isPie, is3d);\n    }\n    if (!result || !result.graphic) {\n      // 绘制顶部\n      output.hack_pieFace = 'top';\n      result = callback(isPie, is3d);\n    }\n    graphic.removeAllChild();\n    children.forEach(c => {\n      c._next = null;\n      c._prev = null;\n    });\n    children.forEach(c => {\n      graphic.appendChild(c);\n    });\n  } else if (is3d) {\n    // 排序这些图元\n    const children = graphic.getChildren() as IGraphic[];\n    const zChildren = children.map(g => {\n      const face3d = g.findFace();\n      const vertices = face3d.vertices;\n      // 计算每个顶点的view\n      const viewdVerticesZ = vertices.map(v => {\n        return context.view(v[0], v[1], v[2] + g.attribute.z ?? 0)[2];\n      });\n      const ave_z = viewdVerticesZ.reduce((a, b) => a + b, 0);\n      return {\n        ave_z,\n        g\n      };\n    });\n    zChildren.sort((a, b) => b.ave_z - a.ave_z);\n    graphic.removeAllChild();\n    zChildren.forEach(i => {\n      i.g._next = null;\n      i.g._prev = null;\n    });\n    graphic.update();\n    zChildren.forEach(i => {\n      graphic.add(i.g);\n    });\n\n    result = callback(isPie, is3d);\n\n    graphic.removeAllChild();\n    children.forEach(g => {\n      g._next = null;\n      g._prev = null;\n    });\n    graphic.update();\n    children.forEach(g => {\n      graphic.add(g);\n    });\n  } else {\n    result = callback(isPie, is3d);\n  }\n\n  return result;\n};\n"]}