{"version":3,"sources":["../src/common/split-path.ts"],"names":[],"mappings":"AAWA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAEvE,OAAO,EAAE,mBAAmB,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAC3E,OAAO,EAAE,uBAAuB,EAAE,MAAM,cAAc,CAAC;AAIvD,MAAM,UAAU,YAAY,CAAC,KAAa,EAAE,MAAc,EAAE,KAAa;IACvE,MAAM,KAAK,GAAG,KAAK,GAAG,MAAM,CAAC;IAE7B,IAAI,QAAgB,CAAC;IACrB,IAAI,WAAmB,CAAC;IAExB,IAAI,KAAK,IAAI,MAAM,EAAE;QACnB,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;QAClD,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC;QAE3C,IAAI,QAAQ,KAAK,CAAC,EAAE;YAClB,QAAQ,GAAG,CAAC,CAAC;YACb,WAAW,GAAG,KAAK,CAAC;SACrB;KACF;SAAM;QACL,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;QAC/C,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC;QAE3C,IAAI,WAAW,KAAK,CAAC,EAAE;YACrB,WAAW,GAAG,CAAC,CAAC;YAChB,QAAQ,GAAG,KAAK,CAAC;SAClB;KACF;IAED,MAAM,KAAK,GAAa,EAAE,CAAC;IAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;QACjC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACzB;IACD,MAAM,QAAQ,GAAG,QAAQ,GAAG,WAAW,CAAC;IACxC,MAAM,QAAQ,GAAG,KAAK,GAAG,QAAQ,CAAC;IAElC,IAAI,QAAQ,GAAG,CAAC,EAAE;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,WAAW,EAAE;YAC9C,IAAI,CAAC,GAAG,WAAW,GAAG,QAAQ,EAAE;gBAC9B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACzB;iBAAM;gBACL,KAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;aAC1B;SACF;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,IAAW,EAAE,KAAa,EAAE,EAAE;IACtD,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAElE,MAAM,CAAC,GAAG,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG,CAAC,CAAC;IACZ,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IACjD,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,MAAM,UAAU,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAEzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;QAC1D,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,SAAS,GAAG,KAAK,GAAG,WAAW,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YACpC,GAAG,CAAC,IAAI,CAAC;gBACP,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,SAAS;gBACpB,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU;gBACrB,KAAK,EAAE,SAAS;gBAChB,MAAM,EAAE,UAAU;aACnB,CAAC,CAAC;SACJ;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,GAAS,EAAE,KAAa,EAAE,EAAE;IACnD,MAAM,CAAC,GAAG,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG,CAAC,CAAC;IACZ,MAAM,MAAM,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC;IACpC,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;IACrC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IACjC,MAAM,WAAW,GAAG,GAAG,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;IAC5D,MAAM,WAAW,GAAG,GAAG,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC;IACnD,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC;IAExD,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,UAAU,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAC/F,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,MAAM,UAAU,GAAG,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IAC9C,MAAM,UAAU,GAAG,WAAW,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,MAAM,SAAS,GAAG,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAElD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;QAC1D,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,SAAS,GAAG,UAAU,GAAG,WAAW,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YAEpC,GAAG,CAAC,IAAI,CAAC;gBACP,WAAW,EAAE,WAAW,GAAG,UAAU,GAAG,CAAC,GAAG,UAAU;gBACtD,WAAW,EAAE,WAAW,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;gBAC5D,UAAU,EAAE,UAAU,GAAG,SAAS,GAAG,CAAC,GAAG,SAAS;gBAClD,QAAQ,EAAE,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;aACvD,CAAC,CAAC;SACJ;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,GAAY,EAAE,KAAa,EAAE,EAAE;IACzD,MAAM,CAAC,GAAG,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG,CAAC,CAAC;IACZ,MAAM,UAAU,GAAG,GAAG,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAC1D,MAAM,QAAQ,GAAG,GAAG,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,MAAM,GAAG,GAAG,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAClD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC;IAEnD,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,GAAG,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/D,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,MAAM,SAAS,GAAG,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACxC,MAAM,UAAU,GAAG,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACzC,MAAM,SAAS,GAAG,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAElD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;QAC1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YAC5D,GAAG,CAAC,IAAI,CAAC;gBACP,WAAW,EAAE,UAAU,GAAG,CAAC;gBAC3B,WAAW,EAAE,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjC,UAAU,EAAE,UAAU,GAAG,SAAS,GAAG,CAAC,GAAG,SAAS;gBAClD,QAAQ,EAAE,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;aACvD,CAAC,CAAC;SACJ;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,MAAoB,EAAE,KAAa,EAAE,EAAE;IAC7D,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAEjH,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAO,EAAE,CAAC;KACX;IACD,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7D;IAED,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,IAAI,KAAK,IAAI,cAAc,CAAC,MAAM,EAAE;QAClC,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,GAAG,KAAK,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,OAAO,CAAC,GAAG,KAAK,EAAE;YAChB,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAE1C,GAAG,IAAI,IAAI,CAAC;YACZ,CAAC,EAAE,CAAC;SACL;QAED,OAAO,GAAG,CAAC;KACZ;IAED,MAAM,WAAW,GAAG,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC;IAClD,MAAM,UAAU,GAAG,WAAW,GAAG,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC7D,MAAM,UAAU,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACxC,IAAI,QAAQ,GAAG,CAAC,CAAC;IAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QACjD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;YACf,IAAI,GAAG,GAAG,UAAU,CAAC;YACrB,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAE9B,OAAO,GAAG,GAAG,CAAC,IAAI,QAAQ,GAAG,WAAW,EAAE;gBACxC,GAAG,CAAC,IAAI,CAAC;oBACP,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG;oBAC9B,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG;iBAC/B,CAAC,CAAC;gBACH,GAAG,IAAI,UAAU,CAAC;gBAClB,QAAQ,IAAI,CAAC,CAAC;aACf;SACF;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,IAAW,EAAE,KAAa,EAAE,EAAE;;IACtD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACjC,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAC9B,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC;IAErC,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;;YACrC,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,GAAG,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAC;QACtC,CAAC,EAAE,EAAE,CAAC,CAAC;KACR;IACD,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,KAAK,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAEjH,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;QAC1B,OAAO,EAAE,CAAC;KACX;IAED,MAAM,SAAS,GAAiB,EAAE,CAAC;IAEnC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAC7B,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,KAAK,IAAI,CAAC,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACnD,MAAM,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAEhC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,MAAA,KAAK,CAAC,EAAE,mCAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,MAAA,KAAK,CAAC,EAAE,mCAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;KACpE;IAED,MAAM,GAAG,GAA+B,EAAE,CAAC;IAE3C,wBAAwB,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAEhD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,IAAW,EAAE,KAAa,EAAE,EAAE;IACtD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACjC,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAEhC,IAAI,MAAM,EAAE;QACV,OAAO,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACtC;SAAM,IAAI,SAAS,CAAC,QAAQ,EAAE;QAC7B,MAAM,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC;QAChC,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;;YACzC,OAAO,GAAG,CAAC,MAAM,CAAC,MAAA,GAAG,CAAC,MAAM,mCAAI,EAAE,CAAC,CAAC;QACtC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;KACzC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,SAAS,YAAY,CAAC,IAAsB,EAAE,IAAsB;IAClE,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,MAAM,WAAW,GAAG,CAAC,MAAoB,EAAE,EAAE;IAC3C,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,MAAoB,EAAE,EAAc,EAAE,EAAc,EAAE,EAAE;IAClF,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;IAC1B,MAAM,aAAa,GAA4D,EAAE,CAAC;IAElF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC5B,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvD,MAAM,GAAG,GAAG,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5F,IAAI,GAAG,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE;YACnC,aAAa,CAAC,IAAI,CAAC;gBACjB,GAAG,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC7E,KAAK,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC/B,SAAS,EAAE,CAAC;aACb,CAAC,CAAC;SACJ;KACF;IAED,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;QAE5B,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;KACnD;IAED,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,GAAG,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC3B,IAAI,GAAG,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAElD,IAAI,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,EAAE;QACjC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KACzB;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IACxB,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IACxB,MAAM,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAEhD,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE;QACvD,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KACrD;IACD,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAE5C,MAAM,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAChD,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,QAAQ,GAAG,GAAG,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,EAAE,EAAE;QAClF,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAC1B,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KACrC;IACD,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAE5C,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAoB,EAAE,EAAE;IACzD,MAAM,GAAG,GAAG,IAAI,MAAM,EAAE,CAAC;IAEzB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACrB,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;IAC1B,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;IAE5B,IAAI,KAAK,IAAI,MAAM,EAAE;QAEnB,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;QAEhC,OAAO,kBAAkB,CACvB,MAAM,EACN;YACE,CAAC,EAAE,IAAI;YACP,CAAC,EAAE,GAAG,CAAC,EAAE;SACV,EACD;YACE,CAAC,EAAE,IAAI;YACP,CAAC,EAAE,GAAG,CAAC,EAAE;SACV,CACF,CAAC;KACH;IAED,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,MAAM,GAAG,CAAC,CAAC;IAEjC,OAAO,kBAAkB,CACvB,MAAM,EACN;QACE,CAAC,EAAE,GAAG,CAAC,EAAE;QACT,CAAC,EAAE,IAAI;KACR,EACD;QACE,CAAC,EAAE,GAAG,CAAC,EAAE;QACT,CAAC,EAAE,IAAI;KACR,CACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,MAAoB,EAAE,KAAa,EAAE,GAA+B,EAAE,EAAE;IAC/G,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;KACtB;SAAM;QACL,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACnC,MAAM,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAEvC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QAC5C,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC;KACrD;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,OAAiB,EAAE,KAAa,EAAE,EAAE;IAC/D,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;IAExC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAC7B,OAAO,EAAE,CAAC;KACX;IACD,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,OAAO,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KAC1C;IACD,MAAM,GAAG,GAA+B,EAAE,CAAC;IAE3C,wBAAwB,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IAE7C,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,IAAW,EAAE,KAAa,EAAE,EAAE;IACtD,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5C,MAAM,YAAY,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAEnD,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,KAAK,GAAG,CAAC,EAAE;QACrC,OAAO,EAAE,CAAC;KACX;IAED,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;IAEvC,IAAI,YAAY,CAAC,MAAM,IAAI,KAAK,EAAE;QAChC,MAAM,GAAG,GAA8B,EAAE,CAAC;QAC1C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;QAE1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC9B,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,EAAE,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;YAErG,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SACjD;QAED,OAAO,GAAG,CAAC;KACZ;IAED,MAAM,GAAG,GAA+B,EAAE,CAAC;IAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC;IACjD,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,MAAM,GAAiB,EAAE,CAAC;QAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;YAC7D,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;SACnE;QACD,wBAAwB,CAAC,MAAM,EAAE,CAAC,KAAK,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QACjF,MAAM,IAAI,SAAS,CAAC;KACrB;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC","file":"split-path.js","sourcesContent":["/* Adapted from zrender by ecomfe\n * https://github.com/ecomfe/zrender\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/ecomfe/zrender/blob/master/src/tool/dividePath.ts\n * License: https://github.com/ecomfe/zrender/blob/master/LICENSE\n * @license\n */\n\nimport type { ICustomPath2D } from './../interface/path';\nimport type { IPointLike } from '@visactor/vutils';\nimport { isNumber, Bounds, getIntersectPoint } from '@visactor/vutils';\nimport type { ILine, IRect, IArc, ICircle, IArea, IPolygon, IPath } from '../interface';\nimport { bezierCurversToPath, pathToBezierCurves } from './morphing-utils';\nimport { normalizeRectAttributes } from './rect-utils';\n/**\n * split a rect to grids\n */\nexport function splitToGrids(width: number, height: number, count: number) {\n  const ratio = width / height;\n\n  let rowCount: number;\n  let columnCount: number;\n\n  if (width >= height) {\n    columnCount = Math.ceil(Math.sqrt(count * ratio));\n    rowCount = Math.floor(count / columnCount);\n\n    if (rowCount === 0) {\n      rowCount = 1;\n      columnCount = count;\n    }\n  } else {\n    rowCount = Math.ceil(Math.sqrt(count / ratio));\n    columnCount = Math.floor(count / rowCount);\n\n    if (columnCount === 0) {\n      columnCount = 1;\n      rowCount = count;\n    }\n  }\n\n  const grids: number[] = [];\n  for (let i = 0; i < rowCount; i++) {\n    grids.push(columnCount);\n  }\n  const sumCount = rowCount * columnCount;\n  const remained = count - sumCount;\n\n  if (remained > 0) {\n    for (let i = 0; i < remained; i += columnCount) {\n      if (i + columnCount < remained) {\n        grids.push(columnCount);\n      } else {\n        grids.push(remained - i);\n      }\n    }\n  }\n  return grids;\n}\n\nexport const splitRect = (rect: IRect, count: number) => {\n  const { width, height } = normalizeRectAttributes(rect.attribute);\n\n  const x = 0;\n  const y = 0;\n  const grids = splitToGrids(width, height, count);\n  const res = [];\n  const gridHeight = height / grids.length;\n\n  for (let i = 0, rowCount = grids.length; i < rowCount; i++) {\n    const columnCount = grids[i];\n    const gridWidth = width / columnCount;\n    for (let j = 0; j < columnCount; j++) {\n      res.push({\n        x: x + j * gridWidth,\n        y: y + i * gridHeight,\n        width: gridWidth,\n        height: gridHeight\n      });\n    }\n  }\n\n  return res;\n};\n\nexport const splitArc = (arc: IArc, count: number) => {\n  const x = 0;\n  const y = 0;\n  const angles = arc.getParsedAngle();\n  const startAngle = angles.startAngle;\n  const endAngle = angles.endAngle;\n  const innerRadius = arc.getComputedAttribute('innerRadius');\n  const outerRadius = arc.getComputedAttribute('outerRadius');\n  const angleDelta = Math.abs(startAngle - endAngle);\n  const radiusDelta = Math.abs(outerRadius - innerRadius);\n\n  const grids = splitToGrids((angleDelta * (innerRadius + outerRadius)) / 2, radiusDelta, count);\n  const res = [];\n  const gridRadius = radiusDelta / grids.length;\n  const radiusSign = outerRadius >= innerRadius ? 1 : -1;\n  const angleSign = endAngle >= startAngle ? 1 : -1;\n\n  for (let i = 0, rowCount = grids.length; i < rowCount; i++) {\n    const columnCount = grids[i];\n    const gridAngle = angleDelta / columnCount;\n    for (let j = 0; j < columnCount; j++) {\n      // from outter to inner\n      res.push({\n        innerRadius: outerRadius - gridRadius * i * radiusSign,\n        outerRadius: outerRadius - gridRadius * (i + 1) * radiusSign,\n        startAngle: startAngle + gridAngle * j * angleSign,\n        endAngle: startAngle + gridAngle * (j + 1) * angleSign\n      });\n    }\n  }\n\n  return res;\n};\n\nexport const splitCircle = (arc: ICircle, count: number) => {\n  const x = 0;\n  const y = 0;\n  const startAngle = arc.getComputedAttribute('startAngle');\n  const endAngle = arc.getComputedAttribute('endAngle');\n  const radius = arc.getComputedAttribute('radius');\n  const angleDelta = Math.abs(startAngle - endAngle);\n\n  const grids = splitToGrids(angleDelta * radius, radius, count);\n  const res = [];\n  const gridAngle = angleDelta / grids[0];\n  const gridRadius = radius / grids.length;\n  const angleSign = endAngle >= startAngle ? 1 : -1;\n\n  for (let i = 0, rowCount = grids.length; i < rowCount; i++) {\n    for (let j = 0, columnCount = grids[i]; j < columnCount; j++) {\n      res.push({\n        innerRadius: gridRadius * i,\n        outerRadius: gridRadius * (i + 1),\n        startAngle: startAngle + gridAngle * j * angleSign,\n        endAngle: startAngle + gridAngle * (j + 1) * angleSign\n      });\n    }\n  }\n\n  return res;\n};\n\nconst samplingPoints = (points: IPointLike[], count: number) => {\n  const validatePoints = points.filter(point => point.defined !== false && isNumber(point.x) && isNumber(point.y));\n\n  if (validatePoints.length === 0) {\n    return [];\n  }\n  if (validatePoints.length === 1) {\n    return new Array(count).fill(0).map(i => validatePoints[0]);\n  }\n\n  const res = [];\n  if (count <= validatePoints.length) {\n    const step = validatePoints.length / count;\n    let i = 0;\n    let cur = 0;\n\n    while (i < count) {\n      res.push(validatePoints[Math.floor(cur)]);\n\n      cur += step;\n      i++;\n    }\n\n    return res;\n  }\n\n  const insertCount = count - validatePoints.length;\n  const insertStep = insertCount / (validatePoints.length - 1);\n  const insetRatio = 1 / (insertStep + 1);\n  let curCount = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    res.push(points[i]);\n\n    if (i < len - 1) {\n      let cur = insetRatio;\n      const xCur = points[i].x;\n      const yCur = points[i].y;\n      const xNext = points[i + 1].x;\n      const yNext = points[i + 1].y;\n\n      while (cur < 1 && curCount < insertCount) {\n        res.push({\n          x: xCur + (xNext - xCur) * cur,\n          y: yCur + (yNext - yCur) * cur\n        });\n        cur += insetRatio;\n        curCount += 1;\n      }\n    }\n  }\n\n  return res;\n};\n\nexport const splitArea = (area: IArea, count: number) => {\n  const attribute = area.attribute;\n  let points = attribute.points;\n  const segements = attribute.segments;\n\n  if (!points) {\n    points = segements.reduce((res, seg) => {\n      return res.concat(seg.points ?? []);\n    }, []);\n  }\n  const validatePoints = points.filter(point => point.defined !== false && isNumber(point.x) && isNumber(point.y));\n\n  if (!validatePoints.length) {\n    return [];\n  }\n\n  const allPoints: IPointLike[] = [];\n\n  validatePoints.forEach(point => {\n    allPoints.push({ x: point.x, y: point.y });\n  });\n\n  for (let i = validatePoints.length - 1; i >= 0; i--) {\n    const point = validatePoints[i];\n\n    allPoints.push({ x: point.x1 ?? point.x, y: point.y1 ?? point.y });\n  }\n\n  const res: { points: IPointLike[] }[] = [];\n\n  recursiveCallBinarySplit(allPoints, count, res);\n\n  return res;\n};\n\nexport const splitLine = (line: ILine, count: number) => {\n  const attribute = line.attribute;\n  const points = attribute.points;\n\n  if (points) {\n    return samplingPoints(points, count);\n  } else if (attribute.segments) {\n    const segs = attribute.segments;\n    const allPoints = segs.reduce((res, seg) => {\n      return res.concat(seg.points ?? []);\n    }, []);\n\n    return samplingPoints(allPoints, count);\n  }\n  return [];\n};\n\nfunction crossProduct(dir1: [number, number], dir2: [number, number]): number {\n  return dir1[0] * dir2[1] - dir1[1] * dir2[0];\n}\n\nconst clonePoints = (points: IPointLike[]) => {\n  return points.map(p => ({ x: p.x, y: p.y }));\n};\n\nconst splitPolygonByLine = (points: IPointLike[], p0: IPointLike, p1: IPointLike) => {\n  const len = points.length;\n  const intersections: { dot: number; point: IPointLike; edgeIndex: number }[] = [];\n\n  for (let i = 0; i < len; i++) {\n    const cur = points[i];\n    const next = i === len - 1 ? points[0] : points[i + 1];\n\n    const res = getIntersectPoint([p0.x, p0.y], [p1.x, p1.y], [cur.x, cur.y], [next.x, next.y]);\n\n    if (res && typeof res !== 'boolean') {\n      intersections.push({\n        dot: crossProduct([res[0] - p0.x, res[1] - p0.x], [p1.x - p0.x, p1.y - p0.x]),\n        point: { x: res[0], y: res[1] },\n        edgeIndex: i\n      });\n    }\n  }\n\n  if (intersections.length < 2) {\n    //  没有交点或者和某条边共线\n    return [clonePoints(points), clonePoints(points)];\n  }\n\n  intersections.sort((a, b) => a.dot - b.dot);\n  let is0 = intersections[0];\n  let is1 = intersections[intersections.length - 1];\n\n  if (is0.edgeIndex > is1.edgeIndex) {\n    [is0, is1] = [is1, is0];\n  }\n\n  const newP0 = is0.point;\n  const newP1 = is1.point;\n  const newPointsA = [{ x: newP0.x, y: newP0.y }];\n\n  for (let i = is0.edgeIndex + 1; i <= is1.edgeIndex; i++) {\n    newPointsA.push({ x: points[i].x, y: points[i].y });\n  }\n  newPointsA.push({ x: newP1.x, y: newP1.y });\n\n  const newPointsB = [{ x: newP1.x, y: newP1.y }];\n  for (let i = is1.edgeIndex + 1, maxIndex = is0.edgeIndex + len; i <= maxIndex; i++) {\n    const p = points[i % len];\n    newPointsB.push({ x: p.x, y: p.y });\n  }\n  newPointsB.push({ x: newP0.x, y: newP0.y });\n\n  return [newPointsA, newPointsB];\n};\n\nexport const binarySplitPolygon = (points: IPointLike[]) => {\n  const box = new Bounds();\n\n  points.forEach(point => {\n    box.add(point.x, point.y);\n  });\n  const width = box.width();\n  const height = box.height();\n\n  if (width >= height) {\n    // split horizontal\n    const midX = box.x1 + width / 2;\n\n    return splitPolygonByLine(\n      points,\n      {\n        x: midX,\n        y: box.y1\n      },\n      {\n        x: midX,\n        y: box.y2\n      }\n    );\n  }\n  // split vertical\n  const midY = box.y1 + height / 2;\n\n  return splitPolygonByLine(\n    points,\n    {\n      x: box.x1,\n      y: midY\n    },\n    {\n      x: box.x2,\n      y: midY\n    }\n  );\n};\n\nexport const recursiveCallBinarySplit = (points: IPointLike[], count: number, out: { points: IPointLike[] }[]) => {\n  if (count === 1) {\n    out.push({ points });\n  } else {\n    const half = Math.floor(count / 2);\n    const res = binarySplitPolygon(points);\n\n    recursiveCallBinarySplit(res[0], half, out);\n    recursiveCallBinarySplit(res[1], count - half, out);\n  }\n};\n\nexport const splitPolygon = (polygon: IPolygon, count: number) => {\n  const points = polygon.attribute.points;\n\n  if (!points || !points.length) {\n    return [];\n  }\n  if (count === 1) {\n    return [{ points: clonePoints(points) }];\n  }\n  const res: { points: IPointLike[] }[] = [];\n\n  recursiveCallBinarySplit(points, count, res);\n\n  return res;\n};\n\nexport const splitPath = (path: IPath, count: number) => {\n  const pathShape = path.getParsedPathShape();\n  const bezierCurves = pathToBezierCurves(pathShape);\n\n  if (!bezierCurves.length || count < 0) {\n    return [];\n  }\n\n  const subPathCnt = bezierCurves.length;\n\n  if (bezierCurves.length >= count) {\n    const res: { path: ICustomPath2D }[] = [];\n    const stepCount = Math.floor(bezierCurves.length / count);\n\n    for (let i = 0; i < count; i++) {\n      const curves = bezierCurves.slice(i * stepCount, i === count - 1 ? subPathCnt : (i + 1) * stepCount);\n\n      res.push({ path: bezierCurversToPath(curves) });\n    }\n\n    return res;\n  }\n\n  const res: { points: IPointLike[] }[] = [];\n  const stepCount = Math.floor(count / subPathCnt);\n  let remain = count;\n\n  for (let c = 0; c < subPathCnt; c++) {\n    const points: IPointLike[] = [];\n\n    for (let i = 2, len = bezierCurves[c].length; i < len; i += 2) {\n      points.push({ x: bezierCurves[0][i], y: bezierCurves[0][i + 1] });\n    }\n    recursiveCallBinarySplit(points, c === subPathCnt - 1 ? remain : stepCount, res);\n    remain -= stepCount;\n  }\n\n  return res;\n};\n"]}