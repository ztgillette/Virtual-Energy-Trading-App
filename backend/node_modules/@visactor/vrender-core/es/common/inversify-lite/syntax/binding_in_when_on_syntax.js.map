{"version":3,"sources":["../src/common/inversify-lite/syntax/binding_in_when_on_syntax.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE1D,MAAM,qBAAqB;IAQzB,YAAY,OAA8B;QACxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,kBAAkB,GAAG,IAAI,iBAAiB,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAElE,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,CAAI,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;IAChD,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;IAClD,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;IAClD,CAAC;IAMD,eAAe,CAAC,IAAY;QAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;CA6DF;AAED,OAAO,EAAE,qBAAqB,EAAE,CAAC","file":"binding_in_when_on_syntax.js","sourcesContent":["import type { interfaces } from '../interfaces/interfaces';\nimport { BindingInSyntax } from './binding_in_syntax';\n// import { BindingOnSyntax } from './binding_on_syntax';\nimport { BindingWhenSyntax } from './binding_when_syntax';\n\nclass BindingInWhenOnSyntax<T>\n  implements interfaces.BindingInSyntax<T>, interfaces.BindingWhenSyntax<T>, interfaces.BindingOnSyntax<T>\n{\n  private _bindingInSyntax: interfaces.BindingInSyntax<T>;\n  private _bindingWhenSyntax: interfaces.BindingWhenSyntax<T>;\n  // private _bindingOnSyntax: interfaces.BindingOnSyntax<T>;\n  private _binding: interfaces.Binding<T>;\n\n  constructor(binding: interfaces.Binding<T>) {\n    this._binding = binding;\n    this._bindingWhenSyntax = new BindingWhenSyntax<T>(this._binding);\n    // this._bindingOnSyntax = new BindingOnSyntax<T>(this._binding);\n    this._bindingInSyntax = new BindingInSyntax<T>(binding);\n  }\n\n  inRequestScope(): interfaces.BindingWhenOnSyntax<T> {\n    return this._bindingInSyntax.inRequestScope();\n  }\n\n  inSingletonScope(): interfaces.BindingWhenOnSyntax<T> {\n    return this._bindingInSyntax.inSingletonScope();\n  }\n\n  inTransientScope(): interfaces.BindingWhenOnSyntax<T> {\n    return this._bindingInSyntax.inTransientScope();\n  }\n\n  // public when(constraint: (request: interfaces.Request) => boolean): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.when(constraint);\n  // }\n\n  whenTargetNamed(name: string): interfaces.BindingOnSyntax<T> {\n    return this._bindingWhenSyntax.whenTargetNamed(name);\n  }\n\n  // public whenTargetIsDefault(): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenTargetIsDefault();\n  // }\n\n  // public whenTargetTagged(tag: string, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenTargetTagged(tag, value);\n  // }\n\n  // public whenInjectedInto(parent: NewableFunction | string): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenInjectedInto(parent);\n  // }\n\n  // public whenParentNamed(name: string): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenParentNamed(name);\n  // }\n\n  // public whenParentTagged(tag: string, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenParentTagged(tag, value);\n  // }\n\n  // public whenAnyAncestorIs(ancestor: NewableFunction | string): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\n  // }\n\n  // public whenNoAncestorIs(ancestor: NewableFunction | string): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\n  // }\n\n  // public whenAnyAncestorNamed(name: string): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\n  // }\n\n  // public whenAnyAncestorTagged(tag: string, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\n  // }\n\n  // public whenNoAncestorNamed(name: string): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenNoAncestorNamed(name);\n  // }\n\n  // public whenNoAncestorTagged(tag: string, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\n  // }\n\n  // public whenAnyAncestorMatches(constraint: (request: interfaces.Request) => boolean): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\n  // }\n\n  // public whenNoAncestorMatches(constraint: (request: interfaces.Request) => boolean): interfaces.BindingOnSyntax<T> {\n  //   return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\n  // }\n\n  // public onActivation(handler: (context: interfaces.Context, injectable: T) => T | Promise<T>): interfaces.BindingWhenSyntax<T> {\n  //   return this._bindingOnSyntax.onActivation(handler);\n  // }\n\n  // public onDeactivation(handler: (injectable: T) => void | Promise<void>): interfaces.BindingWhenSyntax<T> {\n  //   return this._bindingOnSyntax.onDeactivation(handler);\n  // }\n}\n\nexport { BindingInWhenOnSyntax };\n"]}