{"version":3,"sources":["../src/common/inversify-lite/annotation/injectable.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,WAAW,MAAM,yBAAyB,CAAC;AACvD,OAAO,KAAK,YAAY,MAAM,4BAA4B,CAAC;AAC3D,OAAO,OAAO,MAAM,wBAAwB,CAAC;AAE7C,SAAS,UAAU;IACjB,OAAO,UAA4D,MAAS;QAC1E,IAAK,OAAe,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAC;SAC9D;QAED,MAAM,KAAK,GAAI,OAAe,CAAC,WAAW,CAAC,YAAY,CAAC,kBAAkB,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;QACzF,OAAe,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEzE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,EAAE,UAAU,EAAE,CAAC","file":"injectable.js","sourcesContent":["import * as ERRORS_MSGS from '../constants/error_msgs';\nimport * as METADATA_KEY from '../constants/metadata_keys';\nimport Reflect from '../../Reflect-metadata';\n\nfunction injectable() {\n  return function <T extends abstract new (...args: any) => unknown>(target: T) {\n    if ((Reflect as any).hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\n      throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\n    }\n\n    const types = (Reflect as any).getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\n    (Reflect as any).defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\n\n    return target;\n  };\n}\n\nexport { injectable };\n"]}