{"version":3,"sources":["../src/common/inversify-lite/planning/reflection_utils.ts"],"names":[],"mappings":"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","file":"reflection_utils.js","sourcesContent":["import { LazyServiceIdentifer } from '../annotation/lazy_service_identifier';\nimport * as ERROR_MSGS from '../constants/error_msgs';\nimport { TargetTypeEnum } from '../constants/literal_types';\nimport * as METADATA_KEY from '../constants/metadata_keys';\nimport type { interfaces } from '../interfaces/interfaces';\nimport { getFunctionName } from '../utils/serialization';\nimport type { Metadata } from './metadata';\nimport { Target } from './target';\n\nfunction getDependencies(metadataReader: interfaces.MetadataReader, func: NewableFunction): interfaces.Target[] {\n  const constructorName = getFunctionName(func);\n  return getTargets(metadataReader, constructorName, func, false);\n}\n\nfunction getTargets(\n  metadataReader: interfaces.MetadataReader,\n  constructorName: string,\n  func: NewableFunction,\n  isBaseClass: boolean\n): interfaces.Target[] {\n  const metadata = metadataReader.getConstructorMetadata(func);\n\n  // TypeScript compiler generated annotations\n  const serviceIdentifiers = metadata.compilerGeneratedMetadata;\n\n  // All types resolved must be annotated with @injectable\n  if (serviceIdentifiers === undefined) {\n    const msg = `${ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION} ${constructorName}.`;\n    throw new Error(msg);\n  }\n\n  // User generated annotations\n  const constructorArgsMetadata = metadata.userGeneratedMetadata;\n\n  const keys = Object.keys(constructorArgsMetadata);\n  const hasUserDeclaredUnknownInjections = func.length === 0 && keys.length > 0;\n  const hasOptionalParameters = keys.length > func.length;\n\n  const iterations = hasUserDeclaredUnknownInjections || hasOptionalParameters ? keys.length : func.length;\n\n  // Target instances that represent constructor arguments to be injected\n  const constructorTargets = getConstructorArgsAsTargets(\n    isBaseClass,\n    constructorName,\n    serviceIdentifiers,\n    constructorArgsMetadata,\n    iterations\n  );\n\n  // Target instances that represent properties to be injected\n  const propertyTargets = getClassPropsAsTargets(metadataReader, func, constructorName);\n\n  const targets = [...constructorTargets, ...propertyTargets];\n\n  return targets;\n}\nfunction getConstructorArgsAsTarget(\n  index: number,\n  isBaseClass: boolean,\n  constructorName: string,\n  serviceIdentifiers: interfaces.ServiceIdentifier[],\n  constructorArgsMetadata: interfaces.MetadataMap\n): Target | null {\n  // Create map from array of metadata for faster access to metadata\n  const targetMetadata = constructorArgsMetadata[index.toString()] || [];\n  const metadata = formatTargetMetadata(targetMetadata);\n  const isManaged = metadata.unmanaged !== true;\n\n  // Take types to be injected from user-generated metadata\n  // if not available use compiler-generated metadata\n  let serviceIdentifier = serviceIdentifiers[index];\n  const injectIdentifier = metadata.inject || metadata.multiInject;\n  serviceIdentifier = (injectIdentifier ? injectIdentifier : serviceIdentifier) as\n    | interfaces.ServiceIdentifier<unknown>\n    | undefined;\n\n  // we unwrap LazyServiceIdentifer wrappers to allow circular dependencies on symbols\n  if (serviceIdentifier instanceof LazyServiceIdentifer) {\n    serviceIdentifier = serviceIdentifier.unwrap();\n  }\n\n  // Types Object and Function are too ambiguous to be resolved\n  // user needs to generate metadata manually for those\n  if (isManaged) {\n    const isObject = serviceIdentifier === Object;\n    const isFunction = serviceIdentifier === Function;\n    const isUndefined = serviceIdentifier === undefined;\n    const isUnknownType = isObject || isFunction || isUndefined;\n\n    if (!isBaseClass && isUnknownType) {\n      const msg = `${ERROR_MSGS.MISSING_INJECT_ANNOTATION} argument ${index} in class ${constructorName}.`;\n      throw new Error(msg);\n    }\n\n    const target = new Target(\n      TargetTypeEnum.ConstructorArgument,\n      metadata.targetName as string | symbol,\n      serviceIdentifier as interfaces.ServiceIdentifier\n    );\n    target.metadata = targetMetadata;\n    return target;\n  }\n\n  return null;\n}\n\nfunction getConstructorArgsAsTargets(\n  isBaseClass: boolean,\n  constructorName: string,\n  serviceIdentifiers: interfaces.ServiceIdentifier[],\n  constructorArgsMetadata: interfaces.MetadataMap,\n  iterations: number\n): interfaces.Target[] {\n  const targets: interfaces.Target[] = [];\n  for (let i = 0; i < iterations; i++) {\n    const index = i;\n    const target = getConstructorArgsAsTarget(\n      index,\n      isBaseClass,\n      constructorName,\n      serviceIdentifiers,\n      constructorArgsMetadata\n    );\n    if (target !== null) {\n      targets.push(target);\n    }\n  }\n\n  return targets;\n}\n\nfunction _getServiceIdentifierForProperty(\n  inject: string | symbol | unknown,\n  multiInject: object | unknown,\n  propertyName: string | symbol,\n  className: string\n) {\n  const serviceIdentifier = inject || multiInject;\n  if (serviceIdentifier === undefined) {\n    const msg = `${ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION} for property ${String(\n      propertyName\n    )} in class ${className}.`;\n    throw new Error(msg);\n  }\n  return serviceIdentifier;\n}\n\nfunction getClassPropsAsTargets(\n  metadataReader: interfaces.MetadataReader,\n  constructorFunc: NewableFunction,\n  constructorName: string\n) {\n  const classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n  let targets: interfaces.Target[] = [];\n  const symbolKeys = Object.getOwnPropertySymbols(classPropsMetadata);\n  const stringKeys: (string | symbol)[] = Object.keys(classPropsMetadata);\n  const keys: (string | symbol)[] = stringKeys.concat(symbolKeys);\n\n  for (const key of keys) {\n    // the metadata for the property being injected\n    const targetMetadata = classPropsMetadata[key] as interfaces.Metadata[];\n\n    // the metadata formatted for easier access\n    const metadata = formatTargetMetadata(targetMetadata);\n\n    const identifier = metadata.targetName || key;\n\n    // Take types to be injected from user-generated metadata\n    const serviceIdentifier = _getServiceIdentifierForProperty(\n      metadata.inject,\n      metadata.multiInject,\n      key,\n      constructorName\n    );\n\n    // The property target\n    const target = new Target(\n      TargetTypeEnum.ClassProperty,\n      identifier as string | symbol,\n      serviceIdentifier as interfaces.ServiceIdentifier<unknown>\n    );\n    target.metadata = targetMetadata;\n    targets.push(target);\n  }\n\n  // Check if base class has injected properties\n  const baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    const baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor, constructorName);\n\n    targets = [...targets, ...baseTargets];\n  }\n\n  return targets;\n}\n\nfunction getBaseClassDependencyCount(metadataReader: interfaces.MetadataReader, func: NewableFunction): number {\n  const baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n\n  if (baseConstructor !== Object) {\n    // get targets for base class\n    const baseConstructorName = getFunctionName(baseConstructor);\n\n    const targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n\n    // get unmanaged metadata\n    const metadata = targets.map(t => t.metadata.filter(m => m.key === METADATA_KEY.UNMANAGED_TAG));\n\n    // Compare the number of constructor arguments with the number of\n    // unmanaged dependencies unmanaged dependencies are not required\n    const unmanagedCount = ([] as Metadata[]).concat.apply([], metadata).length;\n    const dependencyCount = targets.length - unmanagedCount;\n\n    if (dependencyCount > 0) {\n      return dependencyCount;\n    }\n    return getBaseClassDependencyCount(metadataReader, baseConstructor);\n  }\n  return 0;\n}\n\nfunction formatTargetMetadata(targetMetadata: interfaces.Metadata[]) {\n  // Create map from array of metadata for faster access to metadata\n  const targetMetadataMap: Record<string, unknown> = {};\n  targetMetadata.forEach((m: interfaces.Metadata) => {\n    targetMetadataMap[m.key.toString()] = m.value;\n  });\n\n  // user generated metadata\n  return {\n    inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n    multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n    targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n    unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n  };\n}\n\nexport { getDependencies, getBaseClassDependencyCount, getFunctionName };\n"]}