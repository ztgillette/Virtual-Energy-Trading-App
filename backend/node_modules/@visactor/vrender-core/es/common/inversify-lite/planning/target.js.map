{"version":3,"sources":["../src/common/inversify-lite/planning/target.ts"],"names":[],"mappings":"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","file":"target.js","sourcesContent":["import * as METADATA_KEY from '../constants/metadata_keys';\nimport type { interfaces } from '../interfaces/interfaces';\nimport { id } from '../utils/id';\nimport { getSymbolDescription } from '../utils/serialization';\nimport { Metadata } from './metadata';\nimport { QueryableString } from './queryable_string';\n\nclass Target implements interfaces.Target {\n  id: number;\n  type: interfaces.TargetType;\n  serviceIdentifier: interfaces.ServiceIdentifier;\n  name: interfaces.QueryableString;\n  identifier: string | symbol;\n  key!: string | symbol;\n  metadata!: Metadata[];\n\n  constructor(\n    type: interfaces.TargetType,\n    identifier: string | symbol,\n    serviceIdentifier: interfaces.ServiceIdentifier,\n    namedOrTagged?: string | Metadata\n  ) {\n    this.id = id();\n    this.type = type;\n    this.serviceIdentifier = serviceIdentifier;\n    const queryableName = typeof identifier === 'symbol' ? getSymbolDescription(identifier) : identifier;\n    this.name = new QueryableString(queryableName || '');\n    this.identifier = identifier;\n    this.metadata = [];\n\n    let metadataItem: interfaces.Metadata | null = null;\n\n    // is named target\n    if (typeof namedOrTagged === 'string') {\n      metadataItem = new Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\n    } else if (namedOrTagged instanceof Metadata) {\n      // is target with metadata\n      metadataItem = namedOrTagged;\n    }\n\n    // target has metadata\n    if (metadataItem !== null) {\n      this.metadata.push(metadataItem);\n    }\n  }\n\n  hasTag(key: string): boolean {\n    for (const m of this.metadata) {\n      if (m.key === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isArray(): boolean {\n    return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\n  }\n\n  matchesArray(name: interfaces.ServiceIdentifier<unknown>): boolean {\n    return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\n  }\n\n  isNamed(): boolean {\n    return this.hasTag(METADATA_KEY.NAMED_TAG);\n  }\n\n  isTagged(): boolean {\n    return this.metadata.some(metadata => METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(key => metadata.key !== key));\n  }\n\n  isOptional(): boolean {\n    return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\n  }\n\n  getNamedTag(): interfaces.Metadata<string> | null {\n    if (this.isNamed()) {\n      return this.metadata.filter(m => m.key === METADATA_KEY.NAMED_TAG)[0] as interfaces.Metadata<string>;\n    }\n    return null;\n  }\n\n  getCustomTags(): interfaces.Metadata[] | null {\n    if (this.isTagged()) {\n      return this.metadata.filter(metadata => METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(key => metadata.key !== key));\n    }\n    return null;\n  }\n\n  matchesNamedTag(name: string): boolean {\n    return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\n  }\n\n  matchesTag(key: string) {\n    return (value: unknown) => {\n      for (const m of this.metadata) {\n        if (m.key === key && m.value === value) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n}\n\nexport { Target };\n"]}