{"version":3,"sources":["../src/allocator/bounds-allocate.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAG9C,MAAM,CAAC,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAE3D,MAAM,OAAO,qBAAqB;IAEhC;QADU,UAAK,GAAkB,EAAE,CAAC;QAGlC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;SACnC;IACH,CAAC;IACD,QAAQ,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;QACrD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtB,OAAO,IAAI,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;SAClD;QACD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAC3B,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;QACV,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;QACV,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;QACV,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;QACV,OAAO,CAAC,CAAC;IACX,CAAC;IACD,aAAa,CAAC,CAAc;QAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtB,OAAO,IAAI,UAAU,CAAC,CAAQ,CAAC,CAAC;SACjC;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAS,CAAC;QACnC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;QACb,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;QACb,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;QACb,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;QACb,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,IAAI,CAAC,CAAc;QACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IACD,OAAO,CAAC,GAAG,MAAW;QACpB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,qBAAqB,EAAE,CAAC","file":"bounds-allocate.js","sourcesContent":["import type { IAABBBounds } from '@visactor/vutils';\nimport { AABBBounds } from '@visactor/vutils';\nimport type { Releaseable, IAllocate } from '../interface';\n\nexport const BoundsAllocate = Symbol.for('BoundsAllocate');\n\nexport class DefaultBoundsAllocate implements IAllocate<IAABBBounds>, Releaseable {\n  protected pools: IAABBBounds[] = [];\n  constructor() {\n    // 默认添加10个\n    for (let i = 0; i < 10; i++) {\n      this.pools.push(new AABBBounds());\n    }\n  }\n  allocate(x1: number, y1: number, x2: number, y2: number): IAABBBounds {\n    if (!this.pools.length) {\n      return new AABBBounds().setValue(x1, y1, x2, y2);\n    }\n    const b = this.pools.pop();\n    b.x1 = x1;\n    b.y1 = y1;\n    b.x2 = x2;\n    b.y2 = y2;\n    return b;\n  }\n  allocateByObj(b: IAABBBounds): IAABBBounds {\n    if (!this.pools.length) {\n      return new AABBBounds(b as any);\n    }\n    const _b = this.pools.pop() as any;\n    _b.x1 = b.x1;\n    _b.y1 = b.y1;\n    _b.x2 = b.x2;\n    _b.y2 = b.y2;\n    return _b;\n  }\n  free(b: IAABBBounds) {\n    this.pools.push(b);\n  }\n  get length(): number {\n    return this.pools.length;\n  }\n  release(...params: any): void {\n    this.pools = [];\n  }\n}\n\nexport const boundsAllocate = new DefaultBoundsAllocate();\n"]}