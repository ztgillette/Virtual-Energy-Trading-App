{"version":3,"sources":["../src/allocator/canvas-allocate.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,MAAM,OAAO,qBAAqB;IAAlC;QACY,UAAK,GAAc,EAAE,CAAC;QAGtB,oBAAe,GAAc,EAAE,CAAC;IAuD5C,CAAC;IAtDC,WAAW;QACT,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YAC/B,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IACD,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;SACzE;QACD,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACD,QAAQ,CAAC,IAAoD;QAC3D,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtB,MAAM,CAAC,GAAG,UAAU,iBAClB,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAChD,IAAI,EACP,CAAC;YACH,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,OAAO,CAAC,CAAC;SACV;QACD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAC3B,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACjB,OAAO,CAAC,CAAC;IACX,CAAC;IACD,aAAa,CAAC,MAAe;QAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtB,MAAM,IAAI,GAAG;gBACX,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG;gBAChC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG;gBAClC,GAAG,EAAE,MAAM,CAAC,GAAG;aAChB,CAAC;YACF,MAAM,CAAC,GAAG,UAAU,iBAClB,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAChD,IAAI,EACP,CAAC;YACH,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,OAAO,CAAC,CAAC;SACV;QACD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAC3B,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACvB,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QACzB,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,CAAC,CAAU;QACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IACD,OAAO,CAAC,GAAG,MAAW;QACpB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,qBAAqB,EAAE,CAAC","file":"canvas-allocate.js","sourcesContent":["import { application } from '../application';\nimport type { ICanvas, Releaseable, IAllocate } from '../interface';\nimport { wrapCanvas } from '../canvas/util';\n\nexport class DefaultCanvasAllocate implements IAllocate<ICanvas>, Releaseable {\n  protected pools: ICanvas[] = [];\n  protected _commonCanvas: any;\n  // 已经被分配出去的canvas\n  protected allocatedCanvas: ICanvas[] = [];\n  shareCanvas(): ICanvas {\n    if (this.allocatedCanvas.length) {\n      return this.allocatedCanvas[0];\n    }\n    return this.getCommonCanvas();\n  }\n  getCommonCanvas(): ICanvas {\n    if (!this._commonCanvas) {\n      this._commonCanvas = this.allocate({ width: 100, height: 100, dpr: 2 });\n    }\n    return this._commonCanvas;\n  }\n  allocate(data: { width: number; height: number; dpr: number }): ICanvas {\n    if (!this.pools.length) {\n      const c = wrapCanvas({\n        nativeCanvas: application.global.createCanvas(data),\n        ...data\n      });\n      this.allocatedCanvas.push(c);\n      return c;\n    }\n    const m = this.pools.pop();\n    m.resize(data.width, data.height);\n    m.dpr = data.dpr;\n    return m;\n  }\n  allocateByObj(canvas: ICanvas): ICanvas {\n    if (!this.pools.length) {\n      const data = {\n        width: canvas.width / canvas.dpr,\n        height: canvas.height / canvas.dpr,\n        dpr: canvas.dpr\n      };\n      const c = wrapCanvas({\n        nativeCanvas: application.global.createCanvas(data),\n        ...data\n      });\n      this.allocatedCanvas.push(c);\n      return c;\n    }\n    const m = this.pools.pop();\n    m.width = canvas.width;\n    m.height = canvas.height;\n    return m;\n  }\n  free(d: ICanvas) {\n    this.pools.push(d);\n  }\n  get length(): number {\n    return this.pools.length;\n  }\n  release(...params: any): void {\n    this.pools = [];\n  }\n}\n\nexport const canvasAllocate = new DefaultCanvasAllocate();\n"]}