{"version":3,"sources":["../src/plugins/builtin-plugin/poptip-plugin.ts"],"names":[],"mappings":"","file":"poptip-plugin.js","sourcesContent":["// import type { FederatedPointerEvent } from '../../event';\n// import { Generator } from '../../common/generator';\n// import type { IGraphic, IPlugin, IPluginService } from '../../interface';\n\n// export class PopTipPlugin implements IPlugin {\n//   name: 'PopTipPlugin' = 'PopTipPlugin';\n//   activeEvent: 'onRegister' = 'onRegister';\n//   pluginService: IPluginService;\n//   _uid: number = Generator.GenAutoIncrementId();\n//   key: string = this.name + this._uid;\n//   activeGraphic: IGraphic;\n\n//   activate(context: IPluginService): void {\n//     this.pluginService = context;\n//     const { stage } = this.pluginService;\n\n//     stage.addEventListener('pointerover', this.poptip);\n//   }\n//   poptip = (e: FederatedPointerEvent) => {\n//     const graphic = e.target as any;\n//     if (graphic.isContainer || !graphic.attribute || graphic === this.activeGraphic) {\n//       this.unpoptip(e);\n//       return;\n//     }\n//     const { poptip } = graphic.attribute;\n//     if (poptip) {\n//       graphic._showPoptip = true;\n//     }\n\n//     if (this.activeGraphic) {\n//       this.activeGraphic._showPoptip = false;\n//     }\n//     console.log(graphic)\n//     this.setActiveGraphic(graphic, true);\n//   }\n\n//   unpoptip = (e: FederatedPointerEvent) => {\n//     if (!this.activeGraphic) {\n//       return;\n//     }\n//     this.activeGraphic._showPoptip = false;\n//     this.setActiveGraphic(null, true);\n//   }\n\n//   setActiveGraphic(graphic: any | null, rerender?: boolean) {\n//     this.activeGraphic = graphic;\n//     // 触发重绘\n//     this.pluginService.stage.renderNextFrame();\n//   }\n\n//   deactivate(context: IPluginService): void {\n//     const { stage } = this.pluginService;\n//     stage.removeEventListener('pointerover', this.poptip);\n//   }\n// }\n"]}