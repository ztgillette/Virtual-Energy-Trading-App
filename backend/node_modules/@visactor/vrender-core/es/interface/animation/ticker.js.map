{"version":3,"sources":["../src/interface/animation/ticker.ts"],"names":[],"mappings":"AAUA,MAAM,CAAN,IAAY,MAIX;AAJD,WAAY,MAAM;IAChB,yCAAW,CAAA;IACX,yCAAW,CAAA;IACX,qCAAS,CAAA;AACX,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB","file":"ticker.js","sourcesContent":["/**\n * Ticker Types for Animation Graph\n */\n\nimport type { EventEmitter } from '@visactor/vutils';\nimport type { ITimeline } from './timeline';\nimport type { IStage } from '../stage';\n\nexport type TickerMode = 'raf' | 'timeout' | 'manual';\n\nexport enum STATUS {\n  INITIAL = 0, // initial represents initial state\n  RUNNING = 1, // running represents executing\n  PAUSE = 2 // PAUSE represents tick continues but functions are not executed\n}\n\nexport interface ITickHandler {\n  /**\n   * Start executing tick\n   * @param interval Delay in ms\n   * @param cb Callback to execute\n   */\n  tick: (interval: number, cb: (handler: ITickHandler) => void) => void;\n  tickTo?: (t: number, cb: (handler: ITickHandler, params?: { once: boolean }) => void) => void;\n  getTime: () => number; // Get current time\n  release: () => void;\n}\n\nexport interface ITickerHandlerStatic {\n  new (): ITickHandler;\n}\n\nexport interface ITicker extends EventEmitter {\n  setFPS?: (fps: number) => void;\n  setInterval?: (interval: number) => void;\n  getFPS?: () => number;\n  getInterval?: () => number;\n  tick: (interval: number) => void;\n  tickAt?: (time: number) => void;\n  pause: () => boolean;\n  resume: () => boolean;\n  /**\n   * Start ticking, if force is true, start regardless;\n   * otherwise, don't start if timeline is empty\n   */\n  start: (force?: boolean) => boolean;\n  stop: () => void;\n  addTimeline: (timeline: ITimeline) => void;\n  remTimeline: (timeline: ITimeline) => void;\n  trySyncTickStatus: () => void;\n  getTimelines: () => ITimeline[];\n  release: () => void;\n\n  bindStage: (stage: IStage) => void;\n\n  // Whether to automatically stop, default is true\n  autoStop: boolean;\n}\n"]}