{"version":3,"sources":["../src/interface/canvas.ts"],"names":[],"mappings":"","file":"canvas.js","sourcesContent":["/**\n * 提供ICanvas和ICanvasLike封装\n */\nimport type { Releaseable } from './common';\nimport type { IContextLike, IContext2d } from './context';\n\nexport type CanvasConfigType = {\n  width?: number;\n  height?: number;\n  dpr?: number;\n  x?: number;\n  y?: number;\n  container?: HTMLElement | string;\n  visiable?: boolean;\n  nativeCanvas: HTMLCanvasElement | any;\n  canvasControled?: boolean;\n  id?: string;\n};\n\nexport interface ICanvas extends Releaseable {\n  width: number;\n  height: number;\n  id: number | string;\n  x: number;\n  y: number;\n  visiable: boolean;\n  nativeCanvas: HTMLCanvasElement | any;\n  displayWidth: number;\n  displayHeight: number;\n  dpr: number;\n\n  getContext: (contextId?: '2d', contextAttributes?: CanvasRenderingContext2DSettings) => IContext2d | null;\n\n  getNativeCanvas: () => HTMLCanvasElement | any;\n\n  // getContext(\n  //     contextId: 'bitmaprenderer',\n  //     contextAttributes?: WebGLContextAttributes,\n  // ): ImageBitmapRenderingContext | null;\n\n  // getContext(contextId: 'webgl', contextAttributes?: WebGLContextAttributes): WebGLRenderingContext | null;\n\n  // getContext(contextId: 'webgl2', contextAttributes?: WebGLContextAttributes): WebGL2RenderingContext | null;\n\n  convertToBlob: (options?: { type?: string | undefined; quality?: number | undefined }) => Promise<Blob>;\n\n  transferToImageBitmap: () => ImageBitmap;\n\n  resetStyle: (params: Partial<CanvasConfigType>) => void;\n  applyPosition: () => void;\n\n  hide: () => void;\n  show: () => void;\n\n  resize: (width: number, height: number) => void;\n\n  toDataURL: (() => string) &\n    ((mimeType: 'image/png') => string) &\n    ((mimeType: 'image/jpeg', quality: number) => string);\n\n  readPixels: (x: number, y: number, w: number, h: number) => ImageData | Promise<ImageData>;\n\n  release: () => void;\n}\n\nexport interface ICanvasLike {\n  width: number;\n  height: number;\n\n  /** _Non standard._ The type of the canvas. */\n  readonly type?: 'image' | 'pdf' | 'svg';\n\n  /** _Non standard._ Getter. The stride used by the canvas. */\n  readonly stride?: number;\n\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_NO_FILTERS?: number;\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_ALL_FILTERS?: number;\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_FILTER_NONE?: number;\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_FILTER_SUB?: number;\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_FILTER_UP?: number;\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_FILTER_AVG?: number;\n  /** Constant used in PNG encoding methods. */\n  readonly PNG_FILTER_PAETH?: number;\n\n  getContext: (contextId: string) => IContextLike;\n}\n\nexport interface ICanvasFactory extends Function {\n  (...params: any): ICanvas;\n}\n\nexport interface IContext2dFactory extends Function {\n  (...params: any): IContext2d;\n}\n"]}