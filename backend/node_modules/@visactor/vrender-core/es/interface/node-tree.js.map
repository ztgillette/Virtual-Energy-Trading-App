{"version":3,"sources":["../src/interface/node-tree.ts"],"names":[],"mappings":"","file":"node-tree.js","sourcesContent":["import type { IEventElement, Releaseable } from './common';\n\nexport interface INode extends Releaseable, IEventElement {\n  _prev?: INode;\n  _next?: INode;\n  /**\n   * 内部图形的唯一标识\n   */\n  _uid: number;\n\n  /**\n   * 用户配置的图形唯一标识\n   */\n  id?: number | string;\n  /** 图形名称标识 */\n  name?: string;\n  /**\n   * 图形类型\n   */\n  type?: string;\n  parent: INode | null;\n  // dirty: boolean; // 脏位，标记当前节点和子节点是否有修改\n  count: number;\n  childrenCount: number;\n  firstChild: INode | null;\n  lastChild: INode | null;\n  /**\n   * 获取子节点数组\n   */\n  getChildren: () => INode[];\n  /**\n   * 获取某个idx的节点\n   */\n  getChildAt: (idx: number) => INode | null;\n  at: (idx: number) => INode | null;\n\n  insertBefore: (newNode: INode, referenceNode: INode) => INode | null;\n  insertAfter: (newNode: INode, referenceNode: INode) => INode | null;\n\n  /**\n   * 向某个位置插入\n   */\n  insertInto: (ele: INode, idx: number) => INode | null;\n\n  insertIntoKeepIdx: (ele: INode, idx: number) => INode | null;\n  /**\n   * 遍历子节点\n   * @param cb 返回true则停止遍历\n   */\n  forEachChildren: (cb: (n: INode, i: number) => void | boolean, reverse?: boolean) => void;\n  forEachChildrenAsync: (\n    cb: (n: INode, i: number) => Promise<void | boolean> | void | boolean,\n    reverse?: boolean\n  ) => Promise<void>;\n  /**\n   * 添加子节点\n   * @param node\n   * @param highPerformance 是否高性能模式（不检查是否合法）\n   */\n  appendChild: (node: INode, highPerformance?: boolean) => INode | null;\n  /**\n   * 添加子节点\n   * @param node\n   * @param highPerformance 是否高性能模式（不检查是否合法）\n   */\n  add: (node: INode, highPerformance?: boolean) => INode | null;\n  /**\n   * 从当前节点的父节点删除当前节点\n   */\n  delete: () => void;\n  /**\n   * 删除节点\n   * @param node\n   * @param highPerformance 是否高性能模式（不检查是否合法）\n   */\n  removeChild: (node: INode, highPerformance?: boolean) => INode | null;\n  /**\n   * 移除所有节点\n   */\n  removeAllChild: (deep?: boolean) => void;\n  /**\n   * 判断该节点是否是node的子节点\n   * @param node\n   */\n  isChildOf: (node: INode) => boolean;\n  /**\n   * 判断该节点是否是node的父节点\n   * @param node\n   */\n  isParentOf: (node: INode) => boolean;\n  /**\n   * 判断节点是否是node的后代节点\n   * @param node\n   */\n  isDescendantsOf: (node: INode) => boolean;\n  /**\n   * 判断节点是否是node的祖先节点\n   * @param node\n   */\n  isAncestorsOf: (node: INode) => boolean;\n\n  // 事件相关的别名\n  /**\n   * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\n   * */\n  dispatchEvent: (event: Event) => boolean;\n\n  /**\n   * 返回的是一个布尔值，来表示传入的节点是否为该节点的后代节点。\n   * @param node 判断是否包含的节点\n   */\n  containNode: (node: INode) => boolean;\n\n  /**\n   * 设置该节点的所有后代节点某个属性\n   * @param propsName 属性名\n   * @param propsValue 属性值\n   */\n  setAllDescendantsProps: (propsName: string, propsValue: any) => any;\n\n  // 查找相关的接口\n  /**\n   * 根据自定义逻辑查找元素，返回单一图形元素\n   * @param callback 自定义查找过滤器\n   * @param deep 是否进行深度查找，默认为 false\n   * @returns 返回匹配的图形元素\n   */\n  find: (callback: (node: INode, index: number) => boolean, deep: boolean) => INode | null;\n  /**\n   * 根据自定义逻辑查找元素，返回匹配的元素集合\n   * @param callback 自定义查找过滤器\n   * @param deep 是否进行深度查找，默认为 false\n   * @returns 返回匹配的图形元素集合\n   */\n  findAll: (callback: (node: INode, index: number) => boolean, deep: boolean) => INode[];\n  /**\n   * 通过用户设置的 id 查找对应的图形元素\n   * @param id 子节点的 id\n   */\n  getElementById: (id: string | number) => INode | null;\n  /**\n   * @alias getElementById\n   * 通过用户设置的 id 查找对应的图形元素\n   * @param id 子节点的 id\n   */\n  findChildById: (id: string | number) => INode | null;\n  /**\n   * 通过内部生成的节点 id：_uid 查找对应的图形元素\n   * @param id 子节点的key\n   */\n  findChildByUid: (uid: number) => INode | null;\n  /**\n   * 根据用户传入的 name 查找元素，返回匹配的元素集合\n   * @param name 用户设置的图形名称\n   * @returns 匹配 name 的元素集合\n   */\n  getElementsByName: (name: string) => INode[];\n  /**\n   * @alias getElementsByName\n   * 根据用户传入的 name 查找元素，返回匹配的元素集合\n   * @param name 用户设置的图形名称\n   * @returns 匹配 name 的元素集合\n   */\n  findChildrenByName: (name: string) => INode[];\n  /**\n   * 根据用户传入的 name 查找元素，返回匹配的元素集合\n   * @param name 用户设置的图形名称\n   * @returns 匹配 name 的元素集合\n   */\n  getElementsByType: (type: string) => INode[];\n  // 其他不常用\n\n  [key: string]: any;\n}\n"]}