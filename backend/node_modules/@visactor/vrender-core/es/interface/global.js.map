{"version":3,"sources":["../src/interface/global.ts"],"names":[],"mappings":"","file":"global.js","sourcesContent":["import type { Dict, IAABBBoundsLike, IPointLike } from '@visactor/vutils';\nimport type { ICanvasLike } from './canvas';\nimport type { IEventElement } from './common';\nimport type { IContribution } from './contribution';\nimport type { ISyncHook } from './sync-hook';\n\nexport interface ILoader {\n  loadImage: (url: string) => HTMLImageElement | ImageData;\n  loadJson: (url: string) => JSON;\n}\n\n// 环境定义\nexport type EnvType = 'browser' | 'feishu' | 'tt' | 'taro' | 'node' | 'native' | 'lynx' | 'wx' | 'harmony';\n\n// 创建canvas需要的参数\nexport interface ICreateCanvasParams {\n  id?: string;\n  // 像素宽\n  width?: number;\n  // 像素高\n  height?: number;\n  dpr?: number;\n}\n\nexport interface ILoader {\n  loadImage: (url: string) => HTMLImageElement | ImageData;\n  loadJson: (url: string) => JSON;\n}\n\nexport interface IEnvContribution\n  extends IContribution<IGlobal>,\n    Omit<IEventElement, 'on' | 'off' | 'once' | 'emit' | 'removeAllListeners'> {\n  // 当前代码所运行的环境\n  type: EnvType;\n\n  // 是否支持事件\n  // node环境不需要事件\n  supportEvent: boolean;\n\n  // 开始配置环境，相当于init\n  configure: (global: IGlobal, ...p: any) => void;\n\n  // 创建销毁\n  createCanvas: (params: ICreateCanvasParams) => ICanvasLike | any;\n  createOffscreenCanvas: (params: ICreateCanvasParams) => ICanvasLike | any;\n  releaseCanvas: (canvas: ICanvasLike | string | any) => void;\n\n  getNativeAABBBounds: (dom: string | HTMLElement | any) => IAABBBoundsLike;\n  removeDom: (dom: HTMLElement) => boolean;\n  createDom: (params: CreateDOMParamsType) => HTMLElement | null;\n  updateDom: (dom: HTMLElement, params: CreateDOMParamsType) => boolean;\n  getElementTop: (dom: any, baseWindow?: boolean) => number;\n  getElementLeft: (dom: any, baseWindow?: boolean) => number;\n  getElementTopLeft: (dom: any, baseWindow?: boolean) => { top: number; left: number };\n\n  /**\n   * 获取动态canvas的数量，offscreenCanvas或者framebuffer\n   */\n  getDynamicCanvasCount: () => number;\n\n  /**\n   * 获取静态canvas的数量，纯粹canvas\n   */\n  getStaticCanvasCount: () => number;\n\n  // 设备信息\n  getDevicePixelRatio: () => number;\n\n  // 通用接口\n  getRequestAnimationFrame: () => (callback: FrameRequestCallback) => number;\n  getCancelAnimationFrame: () => (h: number) => void;\n\n  // DOM接口\n  getElementById?: (str: string) => HTMLElement | null;\n  getRootElement?: () => HTMLElement | null;\n  /**\n   * get document instance\n   */\n  getDocument?: () => Document | null;\n  /**\n   * whether supports TouchEvent.\n   */\n  supportsTouchEvents: boolean;\n  /**\n   * whether supports PointerEvent.\n   */\n  supportsPointerEvents: boolean;\n  /**\n   * whether supports MouseEvent.\n   */\n  supportsMouseEvents: boolean;\n  /**\n   * Whether to allow setting the cursor style\n   */\n  applyStyles?: boolean;\n\n  /**\n   * 将窗口坐标转换为画布坐标，小程序/小组件环境需要兼容\n   */\n  mapToCanvasPoint?: (event: any, domElement?: any) => IPointLike | null;\n\n  loadImage: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: HTMLImageElement | ImageData | null;\n  }>;\n  loadSvg: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: HTMLImageElement | ImageData | null;\n  }>;\n  loadJson: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: Record<string, unknown> | null;\n  }>;\n  loadArrayBuffer: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: ArrayBuffer | null;\n  }>;\n  loadBlob: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: Blob | null;\n  }>;\n  // @since 0.21.3\n  /**\n   * 加载字体，参数对应Font类\n   * @param font 字体名\n   * @param source 数据源\n   * @param descriptors 其他描述\n   * @returns\n   */\n  loadFont: (\n    font: string,\n    source: string | any,\n    descriptors?: FontFaceDescriptors\n  ) => Promise<{\n    loadState: 'success' | 'fail';\n  }>;\n\n  isMacOS: () => boolean;\n  copyToClipBoard: (text: string) => Promise<void>;\n}\n\nexport type IMiniAppEnvParams = {\n  /** dom 容器对象 */\n  domref?: Dict<any>;\n  /**\n   * 强行设置env，如果env重复设置也设置\n   */\n  force?: boolean;\n  /**\n   * 可用的canvas列表\n   */\n  canvasIdLists?: (string | number)[];\n  /**\n   * 表示可以自由使用的canvas索引\n   */\n  freeCanvasIdx?: string | number;\n  /** taro 环境使用 */\n  taro?: any;\n  pixelRatio?: number;\n  [key: string]: any;\n};\n\nexport interface IEnvParamsMap {\n  readonly taro: IMiniAppEnvParams;\n  readonly feishu: IMiniAppEnvParams;\n  readonly tt: IMiniAppEnvParams;\n  readonly browser: any;\n  readonly node: any;\n  readonly native: any;\n  readonly lynx: any;\n  readonly wx: any;\n  readonly harmony: any;\n}\n\nexport type CreateDOMParamsType = {\n  tagName?: string;\n  width?: number;\n  height?: number;\n  style?: string | Record<string, any>;\n  parent?: string | HTMLElement;\n};\nexport interface IGlobal extends Omit<IEventElement, 'on' | 'off' | 'once' | 'emit' | 'removeAllListeners'> {\n  // 当前代码所运行的环境\n  env: EnvType;\n\n  // 设备的dpr\n  devicePixelRatio: number;\n\n  // 当设置env的时候被调用\n  hooks: {\n    onSetEnv: ISyncHook<[EnvType | undefined, EnvType, IGlobal]>;\n  };\n\n  // 设置env的时候传入的参数\n  // node环境需要传入整个node-canvas包\n  // 小程序环境需要传入小程序要用到的参数\n  envParams?: any;\n\n  // 是否支持事件\n  // node环境不需要事件\n  supportEvent: boolean;\n\n  // 是否在不显示canvas的时候停止绘图操作，默认false\n  optimizeVisible: boolean;\n\n  setEnv: (env: EnvType, params?: IEnvParamsMap[EnvType]) => void;\n  setActiveEnvContribution: (contribution: IEnvContribution) => void;\n  createCanvas: (params: ICreateCanvasParams) => HTMLCanvasElement | any;\n  createOffscreenCanvas: (params: ICreateCanvasParams) => HTMLCanvasElement | any;\n  releaseCanvas: (canvas: HTMLCanvasElement | string | any) => void;\n  setEventListenerTransformer: (transformer: (event: Event) => Event) => void;\n\n  /**\n   * 获取环境中最大动态canvas的数量，offscreenCanvas或者framebuffer\n   */\n  getDynamicCanvasCount: () => number;\n\n  isChrome: () => boolean;\n  isSafari: () => boolean;\n  isMacOS: () => boolean;\n  copyToClipBoard: (text: string) => Promise<void>;\n\n  /**\n   * 获取环境中最大静态canvas的数量，纯粹canvas\n   */\n  getStaticCanvasCount: () => number;\n\n  /* 浏览器环境 - dom tree */\n  getElementById: (str: string) => HTMLElement | null;\n  getRootElement: () => HTMLElement | null;\n  /**\n   * get document instance\n   */\n  getDocument: () => Document | null;\n  /**\n   * whether supports TouchEvent.\n   */\n  supportsTouchEvents: boolean;\n  /**\n   * whether supports PointerEvent.\n   */\n  supportsPointerEvents: boolean;\n  /**\n   * whether supports MouseEvent.\n   */\n  supportsMouseEvents: boolean;\n  /**\n   * Whether to allow setting the cursor style\n   */\n  applyStyles?: boolean;\n  /**\n   * 测量文字的方法\n   */\n  measureTextMethod: 'native' | 'simple' | 'quick';\n\n  getRequestAnimationFrame: () => null | ((callback: FrameRequestCallback) => number);\n  getCancelAnimationFrame: () => null | ((h: number) => void);\n  getSpecifiedRequestAnimationFrame: (id: number) => (callback: FrameRequestCallback) => number;\n  getSpecifiedCancelAnimationFrame: (id: number) => (h: number) => void;\n\n  /**\n   * 将窗口坐标转换为画布坐标，小程序/小组件环境需要兼容\n   */\n  mapToCanvasPoint: (nativeEvent: any, domElement?: any) => IPointLike | null;\n\n  loadImage: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: HTMLImageElement | ImageData | null;\n  }>;\n  loadSvg: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: HTMLImageElement | ImageData | null;\n  }>;\n  loadJson: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: Record<string, unknown> | null;\n  }>;\n  loadArrayBuffer: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: ArrayBuffer | null;\n  }>;\n  loadBlob: (url: string) => Promise<{\n    loadState: 'success' | 'fail';\n    data: Blob | null;\n  }>;\n\n  removeDom: (dom: HTMLElement) => boolean;\n  createDom: (params: CreateDOMParamsType) => HTMLElement | null;\n  updateDom: (dom: HTMLElement, params: CreateDOMParamsType) => boolean;\n\n  getElementTop: (dom: any, baseWindow?: boolean) => number;\n  getElementLeft: (dom: any, baseWindow?: boolean) => number;\n  getElementTopLeft: (dom: any, baseWindow?: boolean) => { top: number; left: number };\n\n  isImageAnonymous: boolean;\n}\n"]}