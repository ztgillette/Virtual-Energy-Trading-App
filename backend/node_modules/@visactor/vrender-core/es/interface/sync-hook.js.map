{"version":3,"sources":["../src/interface/sync-hook.ts"],"names":[],"mappings":"","file":"sync-hook.js","sourcesContent":["import type { AsArray } from './common';\n\nexport type Tap = TapOptions & {\n  name: string;\n};\n\nexport type TapOptions = {\n  before?: string;\n  stage?: number;\n};\n\nexport type IfSet<X> = X extends UnsetAdditionalOptions ? any : X;\n\nexport interface UnsetAdditionalOptions {\n  _UnsetAdditionalOptions: true;\n}\n\nexport interface IHook<T, R, AdditionalOptions = UnsetAdditionalOptions> {\n  name?: string;\n  taps: FullTap[];\n  tap: (options: string | (Tap & IfSet<AdditionalOptions>), fn: (...args: AsArray<T>) => R) => void;\n  unTap: (options: string | (Tap & IfSet<AdditionalOptions>), fn?: (...args: AsArray<T>) => R) => void;\n}\n\nexport interface ISyncHook<T, R = void, AdditionalOptions = UnsetAdditionalOptions>\n  extends IHook<T, R, AdditionalOptions> {\n  call: (...args: AsArray<T>) => R;\n}\n\nexport type FullTap = Tap & {\n  type: 'sync' | 'async' | 'promise';\n  fn: (...d: any) => any;\n};\n\nexport type ICompileOptions = any;\n"]}