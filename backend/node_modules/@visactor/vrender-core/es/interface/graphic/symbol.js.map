{"version":3,"sources":["../src/interface/graphic/symbol.ts"],"names":[],"mappings":"","file":"symbol.js","sourcesContent":["import type { IBounds } from '@visactor/vutils';\nimport type { IGraphicAttribute, IGraphic } from '../graphic';\nimport type { ICustomPath2D, IPath2D } from '../path';\n\nexport type ISymbolAttribute = {\n  symbolType: SymbolType;\n  size: number | [number, number];\n  clipRange: number;\n};\n\nexport type ISymbolGraphicAttribute = Partial<IGraphicAttribute> & Partial<ISymbolAttribute>;\n\nexport interface ISymbol extends IGraphic<ISymbolGraphicAttribute> {\n  getParsedPath: () => ISymbolClass;\n  getParsedPath2D: (x?: number, y?: number, size?: number) => Path2D | null;\n}\n\nexport type SymbolType =\n  | 'circle'\n  | 'cross'\n  | 'diamond'\n  | 'square'\n  | 'arrow'\n  | 'arrowLeft'\n  | 'arrowRight'\n  | 'arrow2Left'\n  | 'arrow2Right'\n  | 'wedge'\n  | 'thinTriangle'\n  | 'triangle'\n  | 'triangleUp'\n  | 'triangleDown'\n  | 'triangleRight'\n  | 'triangleLeft'\n  | 'stroke'\n  | 'star'\n  | 'wye'\n  | 'rect'\n  | 'rectRound'\n  | 'roundLine'\n  | string;\n\nexport interface ISymbolClass {\n  type: SymbolType | string;\n  path?: ICustomPath2D;\n  pathStr: string;\n  isSvg?: boolean;\n\n  // 返回true表示内部已经调用closePath，返回false表示没有调用closePath，外部需要调用closePath\n  draw: (\n    ctx: IPath2D,\n    size: number | [number, number],\n    x: number,\n    y: number,\n    z?: number,\n    cb?: (p: ICustomPath2D, a: any) => void\n  ) => boolean;\n  drawWithClipRange?: (\n    ctx: IPath2D,\n    size: number | [number, number],\n    x: number,\n    y: number,\n    clipRange: number,\n    z?: number,\n    cb?: (p: ICustomPath2D, a: any) => void\n  ) => boolean;\n  drawOffset: (\n    ctx: IPath2D,\n    size: number | [number, number],\n    x: number,\n    y: number,\n    offset: number,\n    z?: number,\n    cb?: (p: ICustomPath2D, a: any) => void\n  ) => boolean;\n\n  drawToSvgPath?: (size: number | [number, number], x: number, y: number, z?: number) => string;\n\n  bounds: (size: number | [number, number], bounds: IBounds) => void;\n}\n"]}