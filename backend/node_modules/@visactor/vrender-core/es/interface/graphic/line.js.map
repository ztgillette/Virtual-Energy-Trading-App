{"version":3,"sources":["../src/interface/graphic/line.ts"],"names":[],"mappings":"","file":"line.js","sourcesContent":["import type { IPointLike } from '@visactor/vutils';\nimport type { IGraphicAttribute, IGraphic, IConnectedStyle } from '../graphic';\nimport type { ICurveType } from '../common';\nimport type { ISegPath2D } from '../curve';\n\n// 依据x纬度做clipRange\n// 依据y纬度做clipRange\n// 依据线段自动匹配纬度做clipRange\n// 依据线长纬度做clipRange\nexport type IClipRangeByDimensionType = 'x' | 'y' | 'auto' | 'default';\n\nexport type ILineAttribute = {\n  /**\n   * 分段设置point和样式\n   */\n  segments: ISegment[];\n  /**\n   * 所有点的坐标，segments 和 points 不能同时生效\n   */\n  points: IPointLike[];\n  /**\n   * 曲线的类型，默认为linear\n   */\n  curveType: ICurveType;\n  /**\n   * 线段的裁切比例/显示长度占总长度的比例\n   */\n  clipRange: number;\n  /**\n   * 裁剪的维度\n   */\n  clipRangeByDimension: IClipRangeByDimensionType;\n  /**\n   * 是否封闭路径\n   */\n  closePath: boolean;\n  /**\n   * 曲线类型为catmullRom时，对应的张力参数\n   */\n  curveTension: number;\n};\n\nexport type ILineGraphicAttribute = Partial<IGraphicAttribute> & Partial<ILineAttribute> & Partial<IConnectedStyle>;\n\nexport interface ILine extends IGraphic<ILineGraphicAttribute> {\n  cache?: ISegPath2D | ISegPath2D[];\n}\n\ntype ISegmentStyle = Pick<\n  IGraphicAttribute,\n  'stroke' | 'strokeOpacity' | 'lineDash' | 'lineDashOffset' | 'lineCap' | 'lineJoin' | 'lineWidth' | 'miterLimit'\n>;\n\nexport interface ISegment extends Partial<ISegmentStyle>, Partial<IConnectedStyle> {\n  points: IPointLike[];\n  simplify?: boolean;\n}\n"]}