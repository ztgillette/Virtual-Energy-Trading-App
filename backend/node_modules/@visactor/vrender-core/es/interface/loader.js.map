{"version":3,"sources":["../src/interface/loader.ts"],"names":[],"mappings":"","file":"loader.js","sourcesContent":["export type SupportResourceType =\n  | 'json'\n  | 'image'\n  | 'svg'\n  | 'bitmap'\n  | 'canvas'\n  | 'arrayBuffer'\n  | 'blob'\n  | 'imageData'\n  | 'offscreenCanvas';\n\nexport interface ResourceData {\n  type: SupportResourceType; // 资源类型\n  data?:\n    | HTMLImageElement\n    | ImageBitmap\n    | OffscreenCanvas\n    | ArrayBuffer\n    | Blob\n    | ImageData\n    | { [id: string]: any }\n    | null; // 资源的数据\n  dataPromise?: Promise<{\n    loadState: 'success' | 'fail';\n    data: HTMLImageElement | ImageData | ArrayBuffer | Blob | Record<string, unknown> | null;\n  }>; // loader返回的promise，可能会修改原始loader的返回值\n  loadState: 'init' | 'loading' | 'success' | 'fail'; // 资源的状态\n  waitingMark?: ImagePayload[]; // 使用该资源的VRender Mark，资源加载完成后，逐一处理Mark中的逻辑\n}\n\nexport interface ImagePayload {\n  imageLoadFail: (url: string) => void;\n  imageLoadSuccess: (url: string, data: HTMLImageElement) => void;\n}\n"]}