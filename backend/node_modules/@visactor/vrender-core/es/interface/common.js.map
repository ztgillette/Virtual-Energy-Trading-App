{"version":3,"sources":["../src/interface/common.ts"],"names":[],"mappings":"","file":"common.js","sourcesContent":["export type ICurveType =\n  | 'basis'\n  | 'basisClosed'\n  | 'basisOpen'\n  | 'bundle'\n  | 'cardinal'\n  | 'cardinalClosed'\n  | 'cardinalOpen'\n  | 'stepBefore'\n  | 'stepAfter'\n  | 'stepClosed'\n  | 'catmullRom'\n  | 'catmullRomClosed'\n  | 'catmullRomOpen'\n  | 'linear'\n  | 'linearClosed'\n  | 'monotoneX'\n  | 'monotoneY'\n  | 'natural'\n  | 'radial'\n  | 'step';\n\nexport type MaybePromise<T> = T | PromiseLike<T>;\n\n// 所有的接口都应当继承这个，避免内存没有释放\nexport interface Releaseable {\n  release: (...params: any) => void;\n}\n\nexport interface IEventElement {\n  // event接口\n  addEventListener: (<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ) => void) &\n    ((type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);\n  on: (<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ) => void) &\n    ((type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);\n  once: (<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ) => void) &\n    ((type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);\n  removeEventListener: (<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ) => void) &\n    ((type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);\n  off: (<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ) => void) &\n    ((type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void);\n  removeAllListeners: (<K extends keyof DocumentEventMap>(type: K) => void) & ((type: string) => void);\n  dispatchEvent: (event: any) => boolean;\n  emit: (event: any, ...args: any) => boolean;\n}\n\nexport interface IDomRectLike {\n  bottom: number;\n  left: number;\n  right: number;\n  top: number;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\nexport type IDirection = 1 | 2;\n\nexport type AsArray<T> = T extends any[] ? T : [T];\n"]}