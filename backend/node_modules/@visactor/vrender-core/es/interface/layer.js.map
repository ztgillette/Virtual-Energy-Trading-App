{"version":3,"sources":["../src/interface/layer.ts"],"names":[],"mappings":"","file":"layer.js","sourcesContent":["import type { IAABBBounds, IBounds, IBoundsLike, IMatrix } from '@visactor/vutils';\nimport type { IGraphic } from './graphic';\nimport type { IGroup } from './graphic/group';\nimport type { IColor } from './color';\nimport type { IDrawContext, IDrawContribution, IRenderService, IRenderServiceDrawParams } from './render';\nimport type { IStage } from './stage';\nimport type { Releaseable } from './common';\nimport type { IContext2d } from './context';\nimport type { IWindow } from './window';\nimport { ICanvasLike } from './canvas';\n\nexport type LayerMode = 'static' | 'dynamic' | 'virtual';\nexport interface ILayerParams {\n  main: boolean;\n  zIndex?: number;\n  layerMode: LayerMode;\n  layerHandler: ILayerHandlerContribution;\n  canvasId?: string;\n}\n\nexport interface ILayerDrawParams {\n  renderService: IRenderService;\n  background?: string | IColor;\n  updateBounds: boolean;\n  viewBox: IAABBBounds;\n  transMatrix: IMatrix;\n}\n\nexport interface IDrawToParams {\n  viewBox: IAABBBounds;\n  transMatrix: IMatrix;\n  clear?: boolean;\n  renderService: IRenderService;\n  background?: string | IColor;\n  updateBounds: boolean;\n}\n\n// 不建议用户操作layer，尽量都通过stage实现\nexport interface ILayer extends IGroup {\n  parent: any;\n  // rootNode: IStage;\n  main: boolean;\n  width: number;\n  height: number;\n  viewWidth: number;\n  viewHeight: number;\n\n  readonly layerMode: LayerMode;\n  renderCount: number;\n\n  offscreen: boolean;\n  subLayers: Map<number, { layer: ILayer; group?: IGroup; zIndex: number; drawContribution?: IDrawContribution }>;\n\n  // mode: 'dynamic' | 'static';\n  readonly dirtyBound: IAABBBounds;\n  background: string;\n  dpr: number;\n  opacity: number;\n  canvasId?: string;\n  imageData?: ImageData;\n  blendMode?: string;\n  // TODO: getElementById\n  pickable: boolean;\n  pick: (x: number, y: number) => { graphic?: IGraphic; group?: IGroup } | false;\n  render: (params: ILayerDrawParams, userParams?: Partial<IDrawContext>) => void;\n  afterDraw: (cb: (l: this) => void) => void;\n\n  resize: (w: number, h: number) => void;\n  resizeView: (w: number, h: number) => void;\n  setDpr: (dpr: number) => void;\n  getNativeHandler: () => ILayerHandlerContribution;\n  combineSubLayer: (removeIncrementalKey?: boolean) => void;\n\n  // 动画相关\n  startAnimate: (t: number) => void;\n  setToFrame: (t: number) => void;\n  prepare: (dirtyBounds: IBounds, params: ILayerHandlerDrawParams) => void;\n  drawTo: (target: IWindow, params: IDrawToParams) => void;\n  // combineTo: (target: IWindow, params: IDrawToParams) => void;\n  // 考虑操作回放\n}\n\nexport interface ILayerHandlerDrawParams extends ILayerDrawParams {\n  layer: ILayer;\n  stage: IStage;\n  updateBounds: boolean;\n}\n\nexport interface ILayerHandlerInitParams {\n  main: boolean;\n  canvasId?: string;\n  width: number;\n  height: number;\n  zIndex: number;\n  dpr?: number;\n}\n\n// TODO: layer在resize的时候需要判断是否需要resize window对应的canvas\n\n// 具体的Layer实现\n// Canvas2d的Layer可以对应一个Canvas或者ImageData\nexport interface ILayerHandlerContribution extends Releaseable {\n  // 所绑定的副layer handler\n  secondaryHandlers?: ILayerHandlerContribution[];\n  // 所依赖的主layer handler\n  mainHandler?: ILayerHandlerContribution;\n  type: LayerMode;\n  init: (layer: ILayer, window: IWindow, params: ILayerHandlerInitParams) => void;\n  resize: (w: number, h: number) => void;\n  resizeView: (w: number, h: number) => void;\n  setDpr: (dpr: number) => void;\n  render: (group: IGroup[], params: ILayerHandlerDrawParams, userParams?: Partial<IDrawContext>) => void;\n  prepare: (dirtyBounds: IBoundsLike, params: IRenderServiceDrawParams) => void;\n  drawTo: (target: IWindow, group: IGroup[], params: IDrawToParams & ILayerHandlerDrawParams) => void;\n  merge: (layerHandlers: ILayerHandlerContribution[]) => void;\n  getContext: () => IContext2d;\n  offscreen: boolean;\n  layer: ILayer;\n}\n"]}