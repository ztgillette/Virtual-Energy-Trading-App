{"version":3,"sources":["../src/interface/context.ts"],"names":[],"mappings":"","file":"context.js","sourcesContent":["import type { Matrix, IMatrix, IBoundsLike, IPointLike } from '@visactor/vutils';\nimport type { ICamera } from './camera';\nimport type { ICanvas } from './canvas';\nimport type { Releaseable } from './common';\nimport type { mat4, vec3 } from './matrix';\nimport type { IFillType, IStrokeType, ITransform } from './graphic';\n\nexport interface IConicalGradientData {\n  addColorStop: (pos: number, color: string) => void;\n  readonly stops: [number, string][];\n  GetPattern: (minW: number, minH: number, deltaAngle?: number) => CanvasPattern | null;\n}\n\n// 用于commonStyle函数的参数\nexport interface ICommonStyleParams {\n  fill?: IFillType;\n  fillOpacity?: number;\n  shadowBlur?: number;\n  shadowColor?: string;\n  shadowOffsetX?: number;\n  shadowOffsetY?: number;\n  globalCompositeOperation?: CanvasRenderingContext2D['globalCompositeOperation'] | '';\n  opacity?: number;\n  blur?: number;\n  filter?: string;\n}\n\nexport interface IStrokeStyleParams {\n  stroke?: IStrokeType | IStrokeType[];\n  strokeOpacity?: number;\n  lineDash?: number[];\n  lineDashOffset?: number;\n  lineWidth?: number;\n  lineCap?: CanvasLineCap;\n  lineJoin?: CanvasLineJoin;\n  miterLimit?: number;\n  opacity?: number;\n  keepStrokeScale?: boolean;\n}\nexport interface ITextStyleParams {\n  font?: string;\n  fontSize: number;\n  fontFamily?: string;\n  fontWeight?: string | number;\n  textAlign?: CanvasTextAlign;\n  textBaseline?: CanvasTextBaseline;\n  scaleIn3d?: boolean;\n}\n\nexport interface ISetCommonStyleParams {\n  attribute: Partial<ICommonStyleParams & ITransform>;\n  AABBBounds: IBoundsLike;\n}\n\nexport interface ISetStrokeStyleParams {\n  attribute: Partial<IStrokeStyleParams & ITransform>;\n  AABBBounds: IBoundsLike;\n}\nexport interface IContext2d extends Releaseable {\n  stack: IMatrix[];\n  inuse?: boolean;\n  camera?: ICamera;\n  modelMatrix?: mat4;\n  drawPromise?: Promise<any>;\n  baseGlobalAlpha?: number;\n  // 属性代理\n  fillStyle: string | CanvasGradient | CanvasPattern;\n  disableFill?: boolean;\n  disableStroke?: boolean;\n  disableBeginPath?: boolean;\n  /**\n   * @deprecated font方法不建议使用，请使用setTextStyle\n   */\n  font: string;\n  globalAlpha: number;\n  lineCap: string;\n  lineDashOffset: number;\n  lineJoin: string;\n  lineWidth: number;\n  miterLimit: number;\n  shadowBlur: number;\n  shadowColor: string;\n  shadowOffsetX: number;\n  shadowOffsetY: number;\n  strokeStyle: string | CanvasGradient | CanvasPattern;\n  dpr: number;\n  /**\n   * @deprecated textAlign方法不建议使用，请使用setTextStyle\n   */\n  textAlign: string;\n  /**\n   * @deprecated textBaseline方法不建议使用，请使用setTextStyle\n   */\n  textBaseline: string;\n  nativeContext: CanvasRenderingContext2D | any;\n  canvas: ICanvas;\n  [key: string]: any; //类型没有索引签名\n\n  getCanvas: () => ICanvas;\n\n  getContext: () => any;\n\n  reset: (setTransform?: boolean) => void;\n\n  /**\n   * 设置当前ctx 的transform信息\n   */\n  setTransformForCurrent: (force?: boolean) => void;\n  /**\n   * 获取当前矩阵信息\n   */\n  currentMatrix: IMatrix;\n\n  /**\n   * 清空画布\n   */\n  clear: () => void;\n\n  restore: () => void;\n  highPerformanceRestore: () => void;\n\n  /**\n   *\n   * @param angle 弧度数\n   */\n  rotate: (angle: number, setTransform?: boolean) => void;\n\n  save: () => void;\n  highPerformanceSave: () => void;\n\n  project?: (x: number, y: number, z?: number) => IPointLike;\n  view?: (x: number, y: number, z?: number) => vec3;\n\n  scale: (x: number, y: number, setTransform?: boolean) => void;\n\n  scalePoint: (sx: number, sy: number, px: number, py: number, setTransform?: boolean) => void;\n  transform: (\n    m11: number,\n    m12: number,\n    m21: number,\n    m22: number,\n    dx: number,\n    dy: number,\n    setTransform?: boolean\n  ) => void;\n  transformFromMatrix: (matrix: Matrix, setTransform?: boolean) => void;\n  setTransform: (\n    m11: number,\n    m12: number,\n    m21: number,\n    m22: number,\n    dx: number,\n    dy: number,\n    setTransform?: boolean,\n    dpr?: number\n  ) => void;\n  setTransformFromMatrix: (matrix: Matrix, setTransform?: boolean, dpr?: number) => void;\n\n  resetTransform: (setTransform?: boolean, dpr?: number) => void;\n\n  translate: (x: number, y: number, setTransform?: boolean) => void;\n  /**\n   * 旋转角度，自动转换为弧度\n   * @param deg 角度数\n   */\n  rotateDegrees: (deg: number, setTransform?: boolean) => void;\n\n  /**\n   * 绕点旋转\n   * @param rad 弧度\n   * @param x 旋转中心点x\n   * @param y 旋转中心点y\n   */\n  rotateAbout: (rad: number, x: number, y: number, setTransform?: boolean) => void;\n\n  /**\n   * 绕点旋转\n   * @param deg 旋转角度\n   * @param x 旋转中心点x\n   * @param y 旋转中心点y\n   */\n  rotateDegreesAbout: (deg: number, x: number, y: number, setTransform?: boolean) => void;\n\n  beginPath: () => void;\n\n  clip: ((fillRule?: CanvasFillRule) => void) & ((path: Path2D, fillRule?: CanvasFillRule) => void);\n\n  arc: (\n    x: number,\n    y: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean,\n    z?: number\n  ) => void;\n\n  arcTo: (x1: number, y1: number, x2: number, y2: number, radius: number) => void;\n\n  bezierCurveTo: (cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number) => void;\n\n  closePath: () => void;\n\n  ellipse: (\n    x: number,\n    y: number,\n    radiusX: number,\n    radiusY: number,\n    rotation: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean\n  ) => void;\n\n  lineTo: (x: number, y: number, z?: number) => void;\n\n  moveTo: (x: number, y: number, z?: number) => void;\n\n  quadraticCurveTo: (cpx: number, cpy: number, x: number, y: number, z?: number) => void;\n\n  rect: (x: number, y: number, w: number, h: number, z?: number) => void;\n\n  createImageData: (imageDataOrSw: number | ImageData, sh?: number) => ImageData;\n\n  createLinearGradient: (x0: number, y0: number, x1: number, y1: number) => CanvasGradient;\n\n  createPattern: (\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ICanvas | any,\n    repetition: string\n  ) => CanvasPattern | null;\n\n  createRadialGradient: (x0: number, y0: number, r0: number, x1: number, y1: number, r1: number) => CanvasGradient;\n\n  createConicGradient: (x: number, y: number, startAngle: number, endAngle: number) => IConicalGradientData | null;\n\n  // createConicGradient: (x: number, y: number, startAngle: number, endAngle: number) => IConicalGradient | null;\n\n  // fill(fillRule?: CanvasFillRule): void;\n  fill: (path?: Path2D, fillRule?: CanvasFillRule) => void;\n\n  fillRect: (x: number, y: number, w: number, h: number) => void;\n\n  clearRect: (x: number, y: number, w: number, h: number) => void;\n\n  fillText: (text: string, x: number, y: number, z?: number) => void;\n\n  getImageData: (sx: number, sy: number, sw: number, sh: number) => ImageData;\n\n  getLineDash: () => number[];\n\n  isPointInPath: (x: number, y: number) => boolean;\n  isPointInStroke: (x: number, y: number) => boolean;\n\n  measureText: (text: string, method?: 'native' | 'simple' | 'quick') => { width: number };\n\n  putImageData: (imagedata: ImageData, dx: number, dy: number) => void;\n\n  setLineDash: (segments: number[]) => void;\n\n  stroke: (path?: Path2D) => void;\n\n  strokeRect: (x: number, y: number, w: number, h: number) => void;\n\n  strokeText: (text: string, x: number, y: number, z?: number) => void;\n\n  drawImage: ((\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap | ICanvas | any,\n    dstX: number,\n    dstY: number\n  ) => void) &\n    ((\n      image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap | ICanvas | any,\n      dstX: number,\n      dstY: number,\n      dstW: number,\n      dstH: number\n    ) => void) &\n    ((\n      image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap | ICanvas | any,\n      srcX: number,\n      srcY: number,\n      srcW: number,\n      srcH: number,\n      dstX: number,\n      dstY: number,\n      dstW: number,\n      dstH: number\n    ) => void);\n\n  setCommonStyle: (\n    params: ISetCommonStyleParams,\n    attribute: ICommonStyleParams,\n    // 用于渐变色\n    offsetX: number,\n    offsetY: number,\n    defultParams?: ICommonStyleParams | Partial<ICommonStyleParams>[]\n  ) => void;\n\n  setShadowBlendStyle?: (\n    params: ISetCommonStyleParams,\n    attribute: ICommonStyleParams,\n    defultParams?: ICommonStyleParams | Partial<ICommonStyleParams>[]\n  ) => void;\n\n  setStrokeStyle: (\n    params: ISetStrokeStyleParams,\n    attribute: IStrokeStyleParams,\n    // 用于渐变色\n    offsetX: number,\n    offsetY: number,\n    defultParams?: Required<IStrokeStyleParams> | Partial<IStrokeStyleParams>[]\n  ) => void;\n\n  setTextStyle: (params: Partial<ITextStyleParams>, defaultParams?: ITextStyleParams, z?: number) => void;\n  setTextStyleWithoutAlignBaseline: (\n    params: Partial<ITextStyleParams>,\n    defaultParams?: ITextStyleParams,\n    z?: number\n  ) => void;\n\n  draw: (...params: any) => void;\n\n  clearMatrix: (setTransform?: boolean, dpr?: number) => void;\n  setClearMatrix: (a: number, b: number, c: number, d: number, e: number, f: number) => void;\n  onlyTranslate: (dpr?: number) => boolean;\n}\n\nexport interface IContextLike {\n  // 属性代理\n  fillStyle: string | CanvasGradient | CanvasPattern;\n  /**\n   * @deprecated font方法不建议使用，请使用setTextStyle\n   */\n  font: string;\n  globalAlpha: number;\n  lineCap: string;\n  lineDashOffset: number;\n  lineJoin: string;\n  lineWidth: number;\n  miterLimit: number;\n  shadowBlur: number;\n  shadowColor: string;\n  shadowOffsetX: number;\n  shadowOffsetY: number;\n  strokeStyle: string | CanvasGradient | CanvasPattern;\n  dpr: number;\n  /**\n   * @deprecated textAlign方法不建议使用，请使用setTextStyle\n   */\n  textAlign: string;\n  /**\n   * @deprecated textBaseline方法不建议使用，请使用setTextStyle\n   */\n  textBaseline: string;\n  nativeContext: CanvasRenderingContext2D | any;\n  [key: string]: any; //类型没有索引签名\n\n  /**\n   * 清空画布\n   */\n  clear: () => void;\n\n  restore: () => void;\n\n  save: () => void;\n\n  // transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n\n  translate: (x: number, y: number) => void;\n\n  beginPath: () => void;\n\n  clip: ((fillRule?: CanvasFillRule) => void) & ((path: Path2D, fillRule?: CanvasFillRule) => void);\n\n  arc: (x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean) => void;\n\n  arcTo: ((x1: number, y1: number, x2: number, y2: number, radius: number) => void) &\n    ((x1: number, y1: number, x2: number, y2: number, radiusX: number, radiusY: number, rotation: number) => void);\n\n  bezierCurveTo: (cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number) => void;\n\n  closePath: () => void;\n\n  ellipse: (\n    x: number,\n    y: number,\n    radiusX: number,\n    radiusY: number,\n    rotation: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean\n  ) => void;\n\n  lineTo: (x: number, y: number) => void;\n\n  moveTo: (x: number, y: number) => void;\n\n  quadraticCurveTo: (cpx: number, cpy: number, x: number, y: number) => void;\n\n  rect: (x: number, y: number, w: number, h: number) => void;\n\n  fill: (path?: Path2D, fillRule?: CanvasFillRule) => void;\n\n  fillRect: (x: number, y: number, w: number, h: number) => void;\n\n  clearRect: (x: number, y: number, w: number, h: number) => void;\n\n  fillText: (text: string, x: number, y: number, maxWidth?: number) => void;\n\n  getImageData: (sx: number, sy: number, sw: number, sh: number) => ImageData;\n\n  getLineDash: () => number[];\n\n  isPointInPath: (x: number, y: number) => boolean;\n  isPointInStroke: (x: number, y: number) => boolean;\n\n  measureText: (text: string, method?: 'native' | 'simple' | 'quick') => { width: number };\n\n  putImageData: (\n    imagedata: ImageData,\n    dx: number,\n    dy: number,\n    dirtyX?: number,\n    dirtyY?: number,\n    dirtyWidth?: number,\n    dirtyHeight?: number\n  ) => void;\n\n  setLineDash: (segments: number[]) => void;\n\n  stroke: (path?: Path2D) => void;\n\n  strokeRect: (x: number, y: number, w: number, h: number) => void;\n\n  strokeText: (text: string, x: number, y: number, maxWidth?: number) => void;\n\n  drawImage: ((\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap | any,\n    dstX: number,\n    dstY: number\n  ) => void) &\n    ((\n      image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap | any,\n      dstX: number,\n      dstY: number,\n      dstW: number,\n      dstH: number\n    ) => void) &\n    ((\n      image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap | any,\n      srcX: number,\n      srcY: number,\n      srcW: number,\n      srcH: number,\n      dstX: number,\n      dstY: number,\n      dstW: number,\n      dstH: number\n    ) => void);\n\n  clearMatrix: () => void;\n  onlyTranslate: () => boolean;\n}\n"]}