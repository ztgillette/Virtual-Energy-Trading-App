{"version":3,"sources":["../src/interface/core.ts"],"names":[],"mappings":"","file":"core.js","sourcesContent":["import type { ICanvas } from './canvas';\nimport type { IContext2d } from './context';\nimport type { IGraphic, IGraphicAttribute } from './graphic';\nimport type { ITextAttribute } from './graphic/text';\nimport type { ILayer, ILayerParams } from './layer';\nimport type { IStage } from './stage';\nimport type { ITextMeasure, TextOptionsType } from './text';\nimport type { IMatrix, IPointLike, ITextMeasureOption, TextMeasure } from '@visactor/vutils';\n\nexport interface IGraphicUtil {\n  canvas?: ICanvas;\n  context?: IContext2d | null;\n  textMeasure: ITextMeasure;\n  measureText: (text: string, tc: TextOptionsType) => { width: number; height: number };\n  bindTextMeasure: (tm: ITextMeasure) => void;\n  createTextMeasureInstance: (\n    textSpec?: Partial<ITextAttribute>,\n    option?: Partial<ITextMeasureOption>,\n    getCanvasForMeasure?: () => any\n  ) => TextMeasure<ITextAttribute>;\n  drawGraphicToCanvas: (\n    graphic: IGraphic,\n    stage: IStage\n  ) => HTMLCanvasElement | null | Promise<HTMLCanvasElement | null>;\n}\n\nexport type TransformType = Pick<IGraphicAttribute, 'x' | 'y' | 'scaleX' | 'scaleY' | 'angle' | 'dx' | 'dy'> & {\n  anchor?: IGraphicAttribute['anchor'];\n};\nexport interface ITransformUtil {\n  init: (origin: TransformType) => ITransformUtil;\n  fromMatrix: (source: IMatrix, target: IMatrix) => ITransformUtil;\n  scale: (sx: number, sy: number, center?: IPointLike) => ITransformUtil;\n  rotate: (angle: number, center?: IPointLike) => ITransformUtil;\n  translate: (dx: number, dy: number) => ITransformUtil;\n}\n\nexport interface ILayerService {\n  createLayer: (stage: IStage, options?: Partial<ILayerParams>) => ILayer;\n  // stage绘制前调用\n  prepareStageLayer: (stage: IStage) => void;\n  releaseLayer: (stage: IStage, layer: ILayer) => void;\n  restLayerCount: (stage: IStage) => number;\n  getStageLayer: (stage: IStage) => ILayer[];\n  layerCount: (stage: IStage) => number;\n  releaseStage: (stage: IStage) => void;\n}\n"]}