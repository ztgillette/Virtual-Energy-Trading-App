{"version":3,"sources":["../src/interface/graphic-utils.ts"],"names":[],"mappings":"","file":"graphic-utils.js","sourcesContent":["// import { IPoint } from \"@visactor/vutils\";\n// import { IContext2d } from \"./context\";\n// import { IGraphicAttribute } from \"./graphic\";\n\n// interface TextType {\n//   text: string;\n//   fontFamily: string;\n//   fontSize: number;\n// }\n\n// export declare function measureText(\n//   params: TextType,\n//   ctx?: IContext2d\n// ): { width: number; height: number };\n\n// export * from \"./graphic/bounds\";\n\n// // export type TransformType = Pick<IGraphicAttribute, 'x' | 'y' | 'scaleX' | 'scaleY' | 'angle'> & {\n// //   anchor?: IGraphicAttribute['anchor'];\n// // };\n\n// // export interface Transform {\n// //   init: (origin: TransformType) => Transform;\n// //   translate: (x: number, y: number) => Transform;\n// //   translateTo: (x: number, y: number) => Transform;\n// //   scale: (sx: number, sy: number, center: IPoint) => Transform;\n// //   scaleTo: (sx: number, sy: number, center: IPoint) => Transform;\n// //   rotate: (rx: number, ry: number, center: IPoint) => Transform;\n// //   rotateTo: (rx: number, ry: number, center: IPoint) => Transform;\n// //   // 语法糖\n// //   interactive: (dx: number, dy: number, dsx: number, dsy: number, drx: number, dry: number) => Transform;\n// //   // 扩展padding像素，用于外描边，内描边\n// //   extend: (origin: TransformType, padding: number) => Transform;\n// //   // 将所有的transform生成为一次的transform\n// //   simplify: (target?: TransformType) => TransformType;\n// // }\n"]}