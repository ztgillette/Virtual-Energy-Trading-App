{"version":3,"sources":["../src/interface/animate.ts"],"names":[],"mappings":"","file":"animate.js","sourcesContent":["// import type { EventEmitter } from '@visactor/vutils';\n// import type { AnimateStepType } from '../common/enums';\n// import type { Releaseable } from './common';\n// import type { IGraphic } from './graphic';\n\n// enum AnimateStatus {\n//   INITIAL = 0,\n//   RUNNING = 1,\n//   PAUSED = 2,\n//   END = 3\n// }\n\n// enum AnimateMode {\n//   NORMAL = 0b0000,\n//   SET_ATTR_IMMEDIATELY = 0b0001\n// }\n\n// // export type EasingType = (...args: any) => any;\n\n// // export declare class Easing {\n// //   static linear(t: number): number;\n// //   static none(): typeof Easing.linear;\n// //   /**\n// //    * 获取缓动函数，amount指示这个缓动函数的插值方式\n// //    * @param amount\n// //    * @returns\n// //    */\n// //   static get(amount: number): (t: number) => number;\n// //   static getPowIn(pow: number): (t: number) => number;\n// //   static getPowOut(pow: number): (t: number) => number;\n// //   static getPowInOut(pow: number): (t: number) => number;\n// //   static quadIn: (t: number) => number;\n// //   static quadOut: (t: number) => number;\n// //   static quadInOut: (t: number) => number;\n// //   static cubicIn: (t: number) => number;\n// //   static cubicOut: (t: number) => number;\n// //   static cubicInOut: (t: number) => number;\n// //   static quartIn: (t: number) => number;\n// //   static quartOut: (t: number) => number;\n// //   static quartInOut: (t: number) => number;\n// //   static quintIn: (t: number) => number;\n// //   static quintOut: (t: number) => number;\n// //   static quintInOut: (t: number) => number;\n// //   static getBackIn(amount: number): (t: number) => number;\n// //   static getBackOut(amount: number): (t: number) => number;\n// //   static getBackInOut(amount: number): (t: number) => number;\n// //   static backIn: (t: number) => number;\n// //   static backOut: (t: number) => number;\n// //   static backInOut: (t: number) => number;\n// //   static circIn(t: number): number;\n// //   static circOut(t: number): number;\n// //   static circInOut(t: number): number;\n// //   static bounceOut(t: number): number;\n// //   static bounceIn(t: number): number;\n// //   static bounceInOut(t: number): number;\n// //   static getElasticIn(amplitude: number, period: number): (t: number) => number;\n// //   static getElasticOut(amplitude: number, period: number): (t: number) => number;\n// //   static getElasticInOut(amplitude: number, period: number): (t: number) => number;\n// //   static elasticIn: (t: number) => number;\n// //   static elasticOut: (t: number) => number;\n// //   static elasticInOut: (t: number) => number;\n// // }\n\n// // timeline管理一堆的animate，多个timeline互不影响\n// // timeline主要作用是基于layer层面的整体管理\n// // 每个layer默认带有一个timeline\n// export interface Timeline {\n//   AnimateList: IAnimate[];\n// }\n\n// type IStopType = 'end' | 'start' | 'current';\n\n// // TODO: 提供options配置可序列化\n// interface AnimateSpecItem {\n//   type: 'to' | 'delay' | 'stop' | 'any';\n//   params: any[];\n// }\n\n// export type EasingTypeStr =\n//   | 'linear'\n//   | 'quadIn'\n//   | 'quadOut'\n//   | 'quadInOut'\n//   | 'quadInOut'\n//   | 'cubicIn'\n//   | 'cubicOut'\n//   | 'cubicInOut'\n//   | 'quartIn'\n//   | 'quartOut'\n//   | 'quartInOut'\n//   | 'quintIn'\n//   | 'quintOut'\n//   | 'quintInOut'\n//   | 'backIn'\n//   | 'backOut'\n//   | 'backInOut'\n//   | 'circIn'\n//   | 'circOut'\n//   | 'circInOut'\n//   | 'bounceOut'\n//   | 'bounceIn'\n//   | 'bounceInOut'\n//   | 'elasticIn'\n//   | 'elasticOut'\n//   | 'elasticInOut'\n//   | 'sineIn'\n//   | 'sineOut'\n//   | 'sineInOut'\n//   | 'expoIn'\n//   | 'expoOut'\n//   | 'expoInOut'\n//   // @since 0.21.0\n//   | 'easeInOutQuad'\n//   | 'easeOutElastic'\n//   | 'easeInOutElastic'\n//   | '';\n// export type EasingTypeFunc = (t: number) => number;\n\n// export type EasingType = EasingTypeStr | EasingTypeFunc;\n\n// export type IAnimateStepType = keyof typeof AnimateStepType;\n\n// export interface IStep {\n//   type: IAnimateStepType;\n//   prev?: IStep;\n//   // 持续时间\n//   duration: number;\n//   // 在animate中的位置\n//   position: number;\n//   next?: IStep;\n//   props?: any;\n//   parsedProps?: any;\n//   propKeys?: string[];\n//   easing?: EasingTypeFunc;\n//   customAnimate?: ICustomAnimate;\n\n//   append: (step: IStep) => void;\n//   getLastProps: () => any;\n// }\n\n// export interface IStepConfig {\n//   tempProps?: boolean; // props为临时props，可以直接使用不用拷贝\n//   noPreventAttrs?: boolean;\n// }\n\n// export interface IAnimateTarget {\n//   onAnimateBind?: (animte: IAnimate | ISubAnimate) => void;\n//   // 获取属性\n//   getComputedAttribute: (name: string) => any;\n//   // 获取默认属性\n//   getDefaultAttribute: (name: string) => any;\n//   onStop: (props?: Record<string, any>) => void;\n//   animates: Map<string | number, IAnimate>;\n//   [key: string]: any;\n// }\n\n// export interface ICustomAnimate {\n//   duration: number;\n//   easing: EasingType;\n//   step?: IStep;\n//   mode?: AnimateMode;\n\n//   bind: (target: IAnimateTarget, subAni: ISubAnimate) => void;\n//   // 在第一次调用的时候触发\n//   onBind: () => void;\n//   // 第一次执行的时候调用\n//   onFirstRun: () => void;\n//   // 开始执行的时候调用（如果有循环，那每个周期都会调用）\n//   onStart: () => void;\n//   // 结束执行的时候调用（如果有循环，那每个周期都会调用）\n//   onEnd: () => void;\n//   onUpdate: (end: boolean, ratio: number, out: Record<string, any>) => void;\n//   update: (end: boolean, ratio: number, out: Record<string, any>) => void;\n//   getEndProps: () => Record<string, any> | void;\n//   getFromProps: () => Record<string, any> | void;\n//   getMergedEndProps: () => Record<string, any> | void;\n// }\n\n// export type IAnimateConstructor = new (...args: any[]) => IAnimate;\n\n// // 每一个animate绑定一个graphic，用于描述这个graphic的动画内容\n// // 在timeline层面，animate相当于是一段timeslice\n// export interface IAnimate {\n//   readonly id: string | number;\n//   status: AnimateStatus;\n\n//   interpolateFunc: (key: string, ratio: number, from: any, to: any, nextAttributes: any) => boolean;\n\n//   _onStart?: (() => void)[];\n//   _onFrame?: ((step: IStep, ratio: number) => void)[];\n//   _onEnd?: (() => void)[];\n//   _onRemove?: (() => void)[];\n\n//   getStartProps: () => Record<string, any>;\n//   getEndProps: () => Record<string, any>;\n\n//   setTimeline: (timeline: ITimeline) => void;\n//   // getTimeline: () => ITimeline;\n//   readonly timeline: ITimeline;\n\n//   bind: (target: IAnimateTarget) => this;\n//   to: (props: Record<string, any>, duration: number, easing: EasingType, params?: IStepConfig) => this;\n//   from: (props: Record<string, any>, duration: number, easing: EasingType, params?: IStepConfig) => this;\n//   pause: () => void;\n//   resume: () => void;\n//   onStart: (cb: () => void) => void;\n//   onEnd: (cb: () => void) => void;\n//   onFrame: (cb: (step: IStep, ratio: number) => void) => void;\n//   onRemove: (cb: () => void) => void;\n//   // 屏蔽属性\n//   preventAttr: (key: string) => void;\n//   // 屏蔽属性\n//   preventAttrs: (key: string[]) => void;\n//   // 属性是否合法\n//   validAttr: (key: string) => boolean;\n\n//   runCb: (cb: (a: IAnimate, step: IStep) => void) => IAnimate;\n\n//   // 自定义插值，返回false表示没有匹配上\n//   customInterpolate: (\n//     key: string,\n//     ratio: number,\n//     from: any,\n//     to: any,\n//     target: IAnimateTarget,\n//     ret: Record<string, any>\n//   ) => boolean;\n//   //\n//   play: (customAnimate: ICustomAnimate) => this;\n\n//   // 获取该属性的上一个值\n//   // getLastPropByName: (name: string, step: IStep) => any;\n//   // delay: (duration: number) => IAnimate;\n//   stop: (type?: 'start' | 'end' | Record<string, any>) => void;\n//   /** 打上END标志，下一帧被删除 */\n//   release: () => void;\n//   // 获取持续的时长\n//   getDuration: () => number;\n//   // 获取动画开始时间（注意并不是子动画的startAt）\n//   getStartTime: () => number;\n//   // done: (cb: (_: any) => any) => IAnimate;\n//   // pause: () => IAnimate;\n//   // spec: (spec: AnimateSpecItem[]) => IAnimate;\n//   // start: () => void; // 有start方法，避免动画提前开始（VGrammar需要时间处理数据）\n//   wait: (delay: number) => this;\n\n//   // // 编排\n//   afterAll: (list: IAnimate[]) => this;\n//   after: (animate: IAnimate) => this;\n//   parallel: (animate: IAnimate) => this;\n\n//   // // timislice (getter)\n//   // startTime: number;\n//   // endTime: number;\n//   // startTimes: number[];\n//   // endTimes: number[];\n\n//   // // 高级参数，frame到frameEnd之间可以进行reverse，loop，bounce效果\n//   // frame: () => IAnimate;\n//   // frameEnd: () => IAnimate;\n//   reversed: (r: boolean) => IAnimate;\n//   loop: (n: number) => IAnimate;\n//   bounce: (b: boolean) => IAnimate;\n\n//   nextAnimate?: IAnimate;\n//   prevAnimate?: IAnimate;\n\n//   advance: (delta: number) => void;\n\n//   startAt: (t: number) => IAnimate;\n\n//   // // 语法糖\n//   // create: (duration: number) => IAnimate;\n//   // fadeIn: (duration: number) => IAnimate;\n// }\n\n// export interface ISubAnimate {\n//   getLastStep: () => IStep;\n//   animate: IAnimate;\n//   // 获取该属性的上一个值\n//   getLastPropByName: (name: string, step: IStep) => any;\n// }\n\n// // rect.animate().abc().to({}, 1000).delay(1000).frame().to().delay().to().frameEnd().loop().bounce()\n\n// export interface BaseAnimateConfig {\n//   id?: number | string;\n//   interpolate?: (key: string, ratio: number, from: any, to: any, nextAttributes: any) => boolean;\n//   onStart?: () => void;\n//   onFrame?: (step: IStep, ratio: number) => void;\n//   onEnd?: () => void;\n//   onRemove?: () => void;\n// }\n\n// // VGrammar和 vrender命名不一致，好尴尬\n// export interface MorphingAnimateConfig extends Omit<BaseAnimateConfig, 'interpolate'> {\n//   duration?: number;\n//   easing?: EasingType; // 统一到easing\n//   delay?: number;\n// }\n\n// export interface MultiMorphingAnimateConfig extends MorphingAnimateConfig {\n//   splitPath?: 'clone' | ((graphic: IGraphic, count: number, needAppend?: boolean) => IGraphic[]);\n//   individualDelay?: (index: number, count: number, fromGraphic: IGraphic, toGraphic: IGraphic) => number;\n// }\n\n// export interface ITimeline {\n//   id: number;\n//   animateCount: number;\n//   isGlobal: boolean;\n//   addAnimate: (animate: IAnimate) => void;\n//   removeAnimate: (animate: IAnimate, release?: boolean) => void;\n//   tick: (delta: number) => void;\n//   clear: () => void;\n//   pause: () => void;\n//   resume: () => void;\n// }\n\n// export type ITimelineConstructor = new (...args: any[]) => ITimeline;\n\n// export type ITickerConstructor = new (...args: any[]) => ITicker;\n\n// export interface ITickHandler extends Releaseable {\n//   avaliable: () => boolean;\n//   /**\n//    * 开始执行tick\n//    * @param interval 延时 ms\n//    * @param cb 执行的回调\n//    */\n//   tick: (interval: number, cb: (handler: ITickHandler) => void) => void; // 开始\n//   tickTo?: (t: number, cb: (handler: ITickHandler, params?: { once: boolean }) => void) => void;\n//   getTime: () => number; // 获取时间\n// }\n\n// export interface ITickerHandlerStatic {\n//   Avaliable: () => boolean;\n//   new (): ITickHandler;\n// }\n\n// export interface ITicker extends EventEmitter {\n//   setFPS?: (fps: number) => void;\n//   setInterval?: (interval: number) => void;\n//   getFPS?: () => number;\n//   getInterval?: () => number;\n//   tick: (interval: number) => void;\n//   tickAt?: (time: number) => void;\n//   pause: () => boolean;\n//   resume: () => boolean;\n//   /**\n//    * 开启tick，force为true强制开启，否则如果timeline为空则不开启\n//    */\n//   start: (force?: boolean) => boolean;\n//   stop: () => void;\n//   addTimeline: (timeline: ITimeline) => void;\n//   remTimeline: (timeline: ITimeline) => void;\n//   trySyncTickStatus: () => void;\n//   getTimelines: () => ITimeline[];\n\n//   release: () => void;\n\n//   // 是否自动停止，默认为true\n//   autoStop: boolean;\n// }\n"]}