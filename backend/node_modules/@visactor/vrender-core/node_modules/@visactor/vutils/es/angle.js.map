{"version":3,"sources":["../src/angle.ts"],"names":[],"mappings":"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","file":"angle.js","sourcesContent":["import type { IPointLike } from './data-structure/point';\n/**\n * 处理角度相关的数据计算\n */\n\nimport { tau } from './math';\n\n/**\n * degree -> radian\n * @param degree\n * @returns radian\n */\nexport function degreeToRadian(degree: number) {\n  return degree * (Math.PI / 180);\n}\n\n/**\n * radian -> degree\n * @param radian\n * @returns\n */\nexport function radianToDegree(radian: number) {\n  return (radian * 180) / Math.PI;\n}\n\n/**\n * 对弧度进行格式化\n * @param a 传入的弧度\n * @returns\n */\nexport const clampRadian = (angle: number = 0) => {\n  if (angle < 0) {\n    while (angle < -tau) {\n      angle += tau;\n    }\n  } else if (angle > 0) {\n    while (angle > tau) {\n      angle -= tau;\n    }\n  }\n\n  return angle;\n};\n\n// alias of clampRadian\nexport const clampAngleByRadian = clampRadian;\n\n/**\n * 对角度进行格式化\n * @param a 角度\n * @returns\n */\nexport const clampDegree = (a: number = 0) => {\n  if (a > 360 || a < -360) {\n    return a % 360;\n  }\n\n  return a;\n};\n\n// alias of clampDegree\nexport const clampAngleByDegree = clampDegree;\n\n/**\n * 根据弧度及半径计算极坐标系下的坐标点\n * @param centerX 圆心坐标\n * @param radius 半径\n * @param angleInRadian 弧度\n * @returns 返回笛卡尔坐标点\n */\nexport function polarToCartesian(center: IPointLike, radius: number, angleInRadian: number): { x: number; y: number } {\n  if (!radius) {\n    return { x: center.x, y: center.y };\n  }\n\n  return {\n    x: center.x + radius * Math.cos(angleInRadian),\n    y: center.y + radius * Math.sin(angleInRadian)\n  };\n}\n\n/**\n * 根据笛卡尔坐标系坐标计算极坐标坐标点\n * @param point\n * @param center 极坐标系中心点坐标\n * @param startAngle 极坐标系起始角度\n * @param endAngle 极坐标系结束角度\n * @returns 极坐标系坐标点\n */\nexport function cartesianToPolar(\n  point: IPointLike,\n  center: IPointLike = { x: 0, y: 0 },\n  startAngle = 0,\n  endAngle = 2 * Math.PI\n) {\n  const { x, y } = point;\n  const { x: centerX, y: centerY } = center;\n\n  let dx = x - centerX;\n  let dy = y - centerY;\n  const radius = Math.sqrt(dx * dx + dy * dy);\n\n  if (radius === 0) {\n    return {\n      radius: 0,\n      angle: 0\n    };\n  }\n\n  dx /= radius;\n  dy /= radius;\n\n  let radian = Math.atan2(dy, dx);\n  if (radian < startAngle) {\n    while (radian <= startAngle) {\n      radian += Math.PI * 2;\n    }\n  }\n  if (radian > endAngle) {\n    while (radian >= endAngle) {\n      radian -= Math.PI * 2;\n    }\n  }\n  return {\n    radius,\n    angle: radian\n  };\n}\n\n/**\n * 根据点的笛卡尔坐标获取该点与圆心的连线同正 x 轴方向的夹角\n * @param center 圆心坐标\n * @param point 待求的点坐标\n * @returns 返回夹角对应的弧度值\n */\nexport function getAngleByPoint(center: IPointLike, point: IPointLike): number {\n  return Math.atan2(point.y - center.y, point.x - center.x);\n}\n\n/**\n * 角度标准化处理\n * @param angle 弧度角\n */\nexport function normalizeAngle(angle: number): number {\n  while (angle < 0) {\n    angle += Math.PI * 2;\n  }\n  while (angle >= Math.PI * 2) {\n    angle -= Math.PI * 2;\n  }\n  return angle;\n}\n\n/**\n * 指定开始角度和结束角度，计算这个范围内的边界角度，\n * 即起始角度以及经过的东、南、西、北四个方向的角度\n * 计算这个角度，可以用于计算一个弧度的bounding box 等\n * @param startAngle 起始角度的弧度值\n * @param endAngle    结束角度的弧度值\n * @returns 边界角度数组\n */\nexport function findBoundaryAngles(startAngle: number, endAngle: number) {\n  const deltaAngle = Math.abs(endAngle - startAngle);\n\n  if (deltaAngle >= 2 * Math.PI || 2 * Math.PI - deltaAngle < 1e-6) {\n    return [0, Math.PI / 2, Math.PI, 1.5 * Math.PI];\n  }\n  const min = Math.min(startAngle, endAngle);\n  const normalMin = normalizeAngle(min);\n  const normalMax = normalMin + deltaAngle;\n  const steps = [normalMin, normalMax];\n  let directionAngle = (Math.floor(normalMin / Math.PI) * Math.PI) / 2;\n\n  while (directionAngle < normalMax) {\n    if (directionAngle > normalMin) {\n      steps.push(directionAngle);\n    }\n    directionAngle += Math.PI / 2;\n  }\n\n  return steps;\n}\n/**\n * 计算指定范围内，指定中心的情况下，不超出边界的最大可用半径\n * @param rect 矩形的大小\n * @param center 中心点\n * @param startAngle 起始角度的弧度值\n * @param endAngle 结束角度的弧度值\n * @returns 最大半径\n */\nexport function calculateMaxRadius(\n  rect: { width: number; height: number },\n  center: { x: number; y: number },\n  startAngle: number,\n  endAngle: number\n) {\n  const { x, y } = center;\n  const steps = findBoundaryAngles(startAngle, endAngle);\n  const { width, height } = rect;\n\n  const radiusList: number[] = [];\n\n  steps.forEach(step => {\n    const sin = Math.sin(step);\n    const cos = Math.cos(step);\n\n    if (sin === 1) {\n      radiusList.push(height - y);\n    } else if (sin === -1) {\n      radiusList.push(y);\n    } else if (cos === 1) {\n      radiusList.push(width - x);\n    } else if (cos === -1) {\n      radiusList.push(x);\n    } else {\n      if (sin > 0) {\n        radiusList.push(Math.abs((height - y) / sin));\n      } else {\n        radiusList.push(Math.abs(y / sin));\n      }\n\n      if (cos > 0) {\n        radiusList.push(Math.abs((width - x) / cos));\n      } else {\n        radiusList.push(Math.abs(x / cos));\n      }\n    }\n  });\n\n  return Math.min.apply(null, radiusList);\n}\n\nexport type Quadrant = 1 | 2 | 3 | 4;\n\nexport function computeQuadrant(angle: number): Quadrant {\n  angle = normalizeAngle(angle);\n  if (angle > 0 && angle <= Math.PI / 2) {\n    return 2;\n  } else if (angle > Math.PI / 2 && angle <= Math.PI) {\n    return 3;\n  } else if (angle > Math.PI && angle <= (3 * Math.PI) / 2) {\n    return 4;\n  }\n  return 1;\n}\n"]}