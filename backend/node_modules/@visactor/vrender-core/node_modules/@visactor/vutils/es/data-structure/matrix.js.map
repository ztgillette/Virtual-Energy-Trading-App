{"version":3,"sources":["../src/data-structure/matrix.ts"],"names":[],"mappings":"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","file":"matrix.js","sourcesContent":["import { radianToDegree } from '../angle';\nimport type { vec2 } from '../math';\nimport { cos, sin } from '../math';\nimport type { IPointLike } from './point';\n\nexport interface IMatrixLike {\n  a: number;\n  /**\n   * skew y\n   */\n  b: number;\n  /**\n   * skewx\n   */\n  c: number;\n  /**\n   * scale y\n   */\n  d: number;\n  /**\n   * translate x\n   */\n  e: number;\n  /**\n   * translate y\n   */\n  f: number;\n}\n\n// 不建议用户直接操作matrix\nexport interface IMatrix {\n  /**\n   * scale x\n   */\n  a: number;\n  /**\n   * skew y\n   */\n  b: number;\n  /**\n   * skewx\n   */\n  c: number;\n  /**\n   * scale y\n   */\n  d: number;\n  /**\n   * translate x\n   */\n  e: number;\n  /**\n   * translate y\n   */\n  f: number;\n\n  setValue: (a: number, b: number, c: number, d: number, e: number, f: number) => IMatrix;\n  /**\n   * 获取当前矩阵的逆矩阵\n   */\n  getInverse: () => IMatrix;\n  rotate: (rad: number) => IMatrix;\n  rotateByCenter: (rad: number, cx: number, cy: number) => IMatrix;\n  scale: (sx: number, sy: number) => IMatrix;\n  setScale: (sx: number, sy: number) => IMatrix;\n  transform: (a: number, b: number, c: number, d: number, e: number, f: number) => IMatrix;\n  translate: (x: number, y: number) => IMatrix;\n  transpose: () => IMatrix;\n  equalToMatrix: (m2: IMatrixLike) => boolean;\n  equalTo: (a2: number, b2: number, c2: number, d2: number, e2: number, f2: number) => boolean;\n  /**\n   * 矩阵相乘\n   * @param matrix\n   */\n  multiply: (a2: number, b2: number, c2: number, d2: number, e2: number, f2: number) => IMatrix;\n  /**\n   * 插值计算\n   * @param m2\n   * @param t\n   */\n  interpolate: (m2: IMatrix, t: number) => IMatrix;\n\n  // 将point转到当前矩阵的坐标空间中\n  transformPoint: (source: IPointLike, target: IPointLike) => void;\n\n  reset: () => IMatrix;\n\n  // 是否只有translate\n  onlyTranslate: (scale?: number) => boolean;\n\n  clone: () => IMatrix;\n\n  toTransformAttrs: () => {\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n    skewX: number;\n    skewY: number;\n    rotateDeg: number;\n  };\n}\n\nexport class Matrix implements IMatrix {\n  /**\n   * scale x\n   */\n  a: number;\n  /**\n   * skew y\n   */\n  b: number;\n  /**\n   * skewx\n   */\n  c: number;\n  /**\n   * scale y\n   */\n  d: number;\n  /**\n   * translate x\n   */\n  e: number;\n  /**\n   * translate y\n   */\n  f: number;\n\n  constructor(a: number = 1, b: number = 0, c: number = 0, d: number = 1, e: number = 0, f: number = 0) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.e = e;\n    this.f = f;\n  }\n\n  equalToMatrix(m2: IMatrixLike): boolean {\n    // ef -> ad -> bc\n    return !(\n      this.e !== m2.e ||\n      this.f !== m2.f ||\n      this.a !== m2.a ||\n      this.d !== m2.d ||\n      this.b !== m2.b ||\n      this.c !== m2.c\n    );\n  }\n  equalTo(a: number, b: number, c: number, d: number, e: number, f: number): boolean {\n    // ef -> ad -> bc\n    return !(this.e !== e || this.f !== f || this.a !== a || this.d !== d || this.b !== b || this.c !== c);\n  }\n\n  setValue(a: number, b: number, c: number, d: number, e: number, f: number) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.e = e;\n    this.f = f;\n    return this;\n  }\n\n  reset(): this {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.e = 0;\n    this.f = 0;\n    return this;\n  }\n\n  /**\n   * 获取当前矩阵的逆矩阵\n   */\n  getInverse() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const e = this.e;\n    const f = this.f;\n    const m = new Matrix();\n    const dt = a * d - b * c;\n\n    m.a = d / dt;\n    m.b = -b / dt;\n    m.c = -c / dt;\n    m.d = a / dt;\n    m.e = (c * f - d * e) / dt;\n    m.f = -(a * f - b * e) / dt;\n\n    return m;\n  }\n\n  rotate(rad: number) {\n    const c = Math.cos(rad);\n    const s = Math.sin(rad);\n    const m11 = this.a * c + this.c * s;\n    const m12 = this.b * c + this.d * s;\n    const m21 = this.a * -s + this.c * c;\n    const m22 = this.b * -s + this.d * c;\n    this.a = m11;\n    this.b = m12;\n    this.c = m21;\n    this.d = m22;\n    return this;\n  }\n\n  rotateByCenter(rad: number, cx: number, cy: number) {\n    /** rotate matrix\n     * | cos -sin (1-cos)*cx+sin*cy |\n     * | sin cos  (1-cos)*cy-sin*cx |\n     * | 0   0    1                 |\n     * after multiply\n     *   m13 = (1-cos)*cx+sin*cy;\n     *   m23 = (1-cos)*cy-sin*cx;\n     * | cos*a-sin*b cos*c-sin*d cos*e-sin*f+m13 |\n     * | sin*a+cos*b sin*c+cos*d sin*e+cos*f+m23 |\n     * | 0           0           1               |\n     */\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const rotateM13 = (1 - cos) * cx + sin * cy;\n    const rotateM23 = (1 - cos) * cy - sin * cx;\n    const m11 = cos * this.a - sin * this.b;\n    const m21 = sin * this.a + cos * this.b;\n    const m12 = cos * this.c - sin * this.d;\n    const m22 = sin * this.c + cos * this.d;\n    const m13 = cos * this.e - sin * this.f + rotateM13;\n    const m23 = sin * this.e + cos * this.f + rotateM23;\n    this.a = m11;\n    this.b = m21;\n    this.c = m12;\n    this.d = m22;\n    this.e = m13;\n    this.f = m23;\n    return this;\n  }\n\n  scale(sx: number, sy: number) {\n    this.a *= sx;\n    this.b *= sx;\n    this.c *= sy;\n    this.d *= sy;\n    return this;\n  }\n\n  setScale(sx: number, sy: number) {\n    this.b = (this.b / this.a) * sx;\n    this.c = (this.c / this.d) * sy;\n    this.a = sx;\n    this.d = sy;\n    return this;\n  }\n\n  transform(a: number, b: number, c: number, d: number, e: number, f: number) {\n    this.multiply(a, b, c, d, e, f);\n    return this;\n  }\n\n  translate(x: number, y: number) {\n    this.e += this.a * x + this.c * y;\n    this.f += this.b * x + this.d * y;\n    return this;\n  }\n\n  transpose() {\n    /** transpose matrix\n     * | 0 1 0 |\n     * | 1 0 0 |\n     * | 0 0 1 |\n     * after multiply\n     * | b d f |\n     * | a c e |\n     * | 0 0 1 |\n     */\n    const { a, b, c, d, e, f } = this;\n    this.a = b;\n    this.b = a;\n    this.c = d;\n    this.d = c;\n    this.e = f;\n    this.f = e;\n    return this;\n  }\n\n  /**\n   * 矩阵相乘\n   * @param matrix\n   */\n  multiply(a2: number, b2: number, c2: number, d2: number, e2: number, f2: number) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const e1 = this.e;\n    const f1 = this.f;\n\n    const m11 = a1 * a2 + c1 * b2;\n    const m12 = b1 * a2 + d1 * b2;\n    const m21 = a1 * c2 + c1 * d2;\n    const m22 = b1 * c2 + d1 * d2;\n    const dx = a1 * e2 + c1 * f2 + e1;\n    const dy = b1 * e2 + d1 * f2 + f1;\n\n    this.a = m11;\n    this.b = m12;\n    this.c = m21;\n    this.d = m22;\n    this.e = dx;\n    this.f = dy;\n    return this;\n  }\n\n  /**\n   * 插值计算\n   * @param m2\n   * @param t\n   */\n  interpolate(m2: Matrix, t: number) {\n    const m = new Matrix();\n\n    m.a = this.a + (m2.a - this.a) * t;\n    m.b = this.b + (m2.b - this.b) * t;\n    m.c = this.c + (m2.c - this.c) * t;\n    m.d = this.d + (m2.d - this.d) * t;\n    m.e = this.e + (m2.e - this.e) * t;\n    m.f = this.f + (m2.f - this.f) * t;\n\n    return m;\n  }\n\n  /**\n   * 将point转到当前矩阵的坐标空间中\n   * @param source\n   * @param target\n   */\n  transformPoint(source: IPointLike, target: IPointLike) {\n    const { a, b, c, d, e, f } = this;\n    const dt = a * d - b * c;\n\n    const nextA = d / dt;\n    const nextB = -b / dt;\n    const nextC = -c / dt;\n    const nextD = a / dt;\n    const nextE = (c * f - d * e) / dt;\n    const nextF = -(a * f - b * e) / dt;\n\n    const { x, y } = source;\n    target.x = x * nextA + y * nextC + nextE;\n    target.y = x * nextB + y * nextD + nextF;\n  }\n\n  // 只有translate\n  onlyTranslate(scale: number = 1): boolean {\n    return this.a === scale && this.b === 0 && this.c === 0 && this.d === scale;\n  }\n\n  clone(): Matrix {\n    return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n  }\n\n  toTransformAttrs() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const e = this.e;\n    const f = this.f;\n\n    const delta = a * d - b * c;\n\n    const result = {\n      x: e,\n      y: f,\n      rotateDeg: 0,\n      scaleX: 0,\n      scaleY: 0,\n      skewX: 0,\n      skewY: 0\n    };\n\n    // Apply the QR-like decomposition.\n    if (a !== 0 || b !== 0) {\n      const r = Math.sqrt(a * a + b * b);\n      result.rotateDeg = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);\n      result.scaleX = r;\n      result.scaleY = delta / r;\n      result.skewX = (a * c + b * d) / delta;\n      result.skewY = 0;\n    } else if (c !== 0 || d !== 0) {\n      const s = Math.sqrt(c * c + d * d);\n      result.rotateDeg = Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));\n      result.scaleX = delta / s;\n      result.scaleY = s;\n      result.skewX = 0;\n      result.skewY = (a * c + b * d) / delta;\n    } else {\n      // a = b = c = d = 0\n    }\n\n    result.rotateDeg = radianToDegree(result.rotateDeg);\n\n    return result;\n  }\n}\n\n/**\n * 对matrix进行通常的变换（基于rotateCenter进行旋转的同时进行translate和scale）\n * @param out\n * @param origin\n * @param x\n * @param y\n * @param scaleX\n * @param scaleY\n * @param angle\n * @param rotateCenter\n */\nexport function normalTransform(\n  out: Matrix,\n  origin: Matrix,\n  x: number,\n  y: number,\n  scaleX: number,\n  scaleY: number,\n  angle: number,\n  rotateCenter?: vec2\n) {\n  const oa = origin.a;\n  const ob = origin.b;\n  const oc = origin.c;\n  const od = origin.d;\n  const oe = origin.e;\n  const of = origin.f;\n  const cosTheta = cos(angle);\n  const sinTheta = sin(angle);\n  let rotateCenterX: number;\n  let rotateCenterY: number;\n  if (rotateCenter) {\n    rotateCenterX = rotateCenter[0];\n    rotateCenterY = rotateCenter[1];\n  } else {\n    rotateCenterX = x;\n    rotateCenterY = y;\n  }\n  const offsetX = rotateCenterX - x;\n  const offsetY = rotateCenterY - y;\n\n  const a1 = oa * cosTheta + oc * sinTheta;\n  const b1 = ob * cosTheta + od * sinTheta;\n  const c1 = oc * cosTheta - oa * sinTheta;\n  const d1 = od * cosTheta - ob * sinTheta;\n  out.a = scaleX * a1;\n  out.b = scaleX * b1;\n  out.c = scaleY * c1;\n  out.d = scaleY * d1;\n\n  out.e = oe + oa * rotateCenterX + oc * rotateCenterY - a1 * offsetX - c1 * offsetY;\n  out.f = of + ob * rotateCenterX + od * rotateCenterY - b1 * offsetX - d1 * offsetY;\n}\n"]}