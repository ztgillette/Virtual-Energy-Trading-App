{"version":3,"sources":["../src/picker/global-picker-service.ts"],"names":[],"mappings":"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","file":"global-picker-service.js","sourcesContent":["import type { IMatrix, IPoint, IPointLike } from '@visactor/vutils';\nimport { Matrix, Point } from '@visactor/vutils';\nimport { inject, injectable } from '../common/inversify-lite';\nimport type {\n  IGraphic,\n  IGroup,\n  EnvType,\n  IGlobal,\n  IPickerService,\n  IGraphicPicker,\n  IPickParams,\n  PickResult\n} from '../interface';\nimport { application } from '../application';\n\n// 默认的pick-service，提供基本的最优选中策略，尽量不需要用户自己实现contribution\n// 用户可以写plugin\n@injectable()\nexport class DefaultGlobalPickerService implements IPickerService {\n  type: 'global';\n\n  declare pickerMap: Map<number, IGraphicPicker>;\n  declare global: IGlobal;\n\n  constructor() {\n    this.global = application.global;\n    this.global.hooks.onSetEnv.tap('global-picker-service', (lastEnv, env, global) => {\n      this.configure(global, env);\n    });\n    this.configure(this.global, this.global.env);\n  }\n\n  reInit() {\n    return;\n  }\n\n  configure(global: IGlobal, env: EnvType) {\n    // if (!this.global.env) return;\n    // this.contributions.getContributions().forEach(handlerContribution => {\n    //   handlerContribution.configure(this, this.global);\n    // });\n  }\n\n  // todo: params支持\n  // todo: 性能优化\n  pick(graphics: IGraphic[], point: IPointLike, params?: IPickParams): PickResult {\n    let result: PickResult = {\n      graphic: null,\n      group: null\n    };\n    const parentMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n    let group: IGroup;\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].isContainer) {\n        result = this.pickGroup(graphics[i] as IGroup, point, parentMatrix, params);\n      } else {\n        const data = this.pickItem(graphics[i], point, parentMatrix, params);\n        if (data) {\n          result.graphic = data.graphic;\n          result.params = data.params;\n        }\n      }\n      if (result.graphic) {\n        break;\n      }\n      if (!group) {\n        group = result.group;\n      }\n    }\n    if (!result.graphic) {\n      result.group = group;\n    }\n    // 判断是否有shadow-dom\n    if (result.graphic) {\n      let g = result.graphic;\n      while (g.parent) {\n        g = g.parent;\n      }\n      if (g.shadowHost) {\n        result.params = {\n          shadowTarget: result.graphic\n        };\n        result.graphic = g.shadowHost;\n      }\n    }\n    return result;\n  }\n\n  containsPoint(graphic: IGraphic, point: IPointLike, params?: IPickParams): boolean {\n    return !!this.pickItem(graphic, point, null, params);\n  }\n\n  pickGroup(group: IGroup, point: IPointLike, parentMatrix: IMatrix, params?: IPickParams): PickResult {\n    let result: PickResult = {\n      group: null,\n      graphic: null\n    };\n    if (group.attribute.visibleAll === false) {\n      return result;\n    }\n    // 转换坐标空间\n    const transMatrix = group.transMatrix;\n\n    const newPoint: IPoint = new Point(point.x, point.y);\n    parentMatrix.transformPoint(newPoint, newPoint);\n    const insideGroup = group.AABBBounds.containsPoint(newPoint);\n    // 如果group没有被选中，直接跳过\n    if (!insideGroup) {\n      return result;\n    }\n    // todo: 支持带有path的group的选中\n    const groupPicked = group.attribute.pickable !== false && insideGroup;\n\n    parentMatrix.multiply(transMatrix.a, transMatrix.b, transMatrix.c, transMatrix.d, transMatrix.e, transMatrix.f);\n\n    if (group.attribute.childrenPickable !== false) {\n      group.forEachChildren((graphic: IGraphic) => {\n        if (graphic.isContainer) {\n          result = this.pickGroup(graphic as IGroup, point, parentMatrix, params);\n        } else {\n          const newPoint: IPoint = new Point(point.x, point.y);\n          parentMatrix.transformPoint(newPoint, newPoint);\n          const data = this.pickItem(graphic, newPoint, parentMatrix, params);\n          if (data) {\n            result.graphic = data.graphic;\n            result.params = data.params;\n          }\n        }\n        return !!result.graphic || !!result.group;\n      });\n    }\n\n    if (!result.graphic && !result.group && groupPicked) {\n      result.group = group;\n    }\n\n    return result;\n  }\n\n  // todo: switch统一改为数字map\n  pickItem(\n    graphic: IGraphic,\n    point: IPointLike,\n    parentMatrix: IMatrix | null,\n    params?: IPickParams\n  ): PickResult | null {\n    if (graphic.attribute.pickable === false) {\n      return null;\n    }\n    if (graphic.AABBBounds.containsPoint(point)) {\n      return {\n        graphic: graphic\n      };\n    }\n    return null;\n  }\n}\n"]}