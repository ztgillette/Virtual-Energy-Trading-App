{"version":3,"sources":["../src/core/contributions/window/base-contribution.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mEAA4D;AAC5D,yDAAsD;AAWtD,6CAAoG;AAK7F,IAAe,6BAA6B,GAA5C,MAAe,6BAA6B;IAOjD;QACE,IAAI,CAAC,IAAI,GAAG,qBAAS,CAAC,kBAAkB,EAAE,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,mBAAU,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,eAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAID,QAAQ,CAAC,EAAkB;QACzB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAED,SAAS,CAAC,MAAe,EAAE,MAAe;QACxC,IAAI,MAAM,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,EAAE;YAC5B,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC/B;IACH,CAAC;IACD,OAAO,CAAC,GAAG,MAAW;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAsCD,SAAS,CAAC,IAAkB;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,eAAe,CAAC,EAAqC;QACnD,OAAO;IACT,CAAC;IAED,UAAU,CAAC,UAAoB;QAC7B,OAAO;YACL,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;SACR,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,EAAe;QACxB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC;IACD,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,mBAAmB,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;QAClF,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,mBAAmB;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF,CAAA;AA3FqB,6BAA6B;IADlD,IAAA,2BAAU,GAAE;;GACS,6BAA6B,CA2FlD;AA3FqB,sEAA6B","file":"base-contribution.js","sourcesContent":["import { injectable } from '../../../common/inversify-lite';\nimport { Generator } from '../../../common/generator';\nimport type {\n  ICanvas,\n  IContext2d,\n  IDomRectLike,\n  EnvType,\n  IGlobal,\n  IWindowHandlerContribution,\n  IWindow,\n  IWindowParams\n} from '../../../interface';\nimport { AABBBounds, Matrix, type IBounds, type IBoundsLike, type IMatrix } from '@visactor/vutils';\n\ntype OnchangeCbType = (params?: { x?: number; y?: number; width?: number; height?: number }) => void;\n\n@injectable()\nexport abstract class BaseWindowHandlerContribution implements IWindowHandlerContribution {\n  declare type: EnvType;\n\n  declare _uid: number;\n  protected viewBox: IBounds;\n  protected modelMatrix: IMatrix;\n\n  constructor() {\n    this._uid = Generator.GenAutoIncrementId();\n    this.viewBox = new AABBBounds();\n    this.modelMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n  }\n\n  protected declare _onChangeCb?: OnchangeCbType;\n\n  onChange(cb: OnchangeCbType) {\n    this._onChangeCb = cb;\n  }\n\n  configure(window: IWindow, global: IGlobal) {\n    if (global.env === this.type) {\n      window.setWindowHandler(this);\n    }\n  }\n  release(...params: any) {\n    this.releaseWindow();\n  }\n  abstract createWindow(params: IWindowParams): void;\n  abstract releaseWindow(): void;\n  abstract setDpr(dpr: number): void;\n  abstract resizeWindow(width: number, height: number): void;\n  abstract getContext(): IContext2d;\n  abstract getWH(): { width: number; height: number };\n  abstract getTitle(): string;\n  abstract getXY(): { x: number; y: number };\n  abstract getNativeHandler(): ICanvas | any;\n  abstract getDpr(): number;\n  abstract clearViewBox(color?: string): void;\n  abstract addEventListener<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  abstract addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  abstract removeEventListener<K extends keyof DocumentEventMap>(\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void;\n  abstract removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n  abstract dispatchEvent(event: any): boolean;\n\n  abstract getStyle(): CSSStyleDeclaration | Record<string, any>;\n  abstract setStyle(style: CSSStyleDeclaration | Record<string, any>): void;\n  abstract getBoundingClientRect(): IDomRectLike;\n\n  isVisible(bbox?: IBoundsLike) {\n    return true;\n  }\n\n  onVisibleChange(cb: (currentVisible: boolean) => void) {\n    return;\n  }\n\n  getTopLeft(baseWindow?: boolean): { top: number; left: number } {\n    return {\n      top: 0,\n      left: 0\n    };\n  }\n\n  setViewBox(vb: IBoundsLike) {\n    this.viewBox.setValue(vb.x1, vb.y1, vb.x2, vb.y2);\n  }\n  getViewBox() {\n    return this.viewBox;\n  }\n  setViewBoxTransform(a: number, b: number, c: number, d: number, e: number, f: number) {\n    this.modelMatrix.setValue(a, b, c, d, e, f);\n  }\n  getViewBoxTransform(): IMatrix {\n    return this.modelMatrix;\n  }\n}\n"]}