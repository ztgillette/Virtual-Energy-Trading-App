{"version":3,"sources":["../src/core/contributions/layerHandler/empty-contribution.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mEAAoE;AAcpE,sDAAmD;AAG5C,IAAM,6BAA6B,GAAnC,MAAM,6BAA6B;IAYxC;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,GAAW;QAChB,OAAO;IACT,CAAC;IAED,IAAI,CAAC,KAAa,EAAE,MAAe,EAAE,MAA+B;QAClE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,MAAM,CAAC,IAAI,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,CAAS,EAAE,CAAS;QACzB,OAAO;IACT,CAAC;IACD,UAAU,CAAC,CAAS,EAAE,CAAS;QAC7B,OAAO;IACT,CAAC;IAED,MAAM,CAAC,KAAe,EAAE,MAA+B,EAAE,UAAkC;QACzF,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,kCAAO,UAAU,KAAE,KAAK,EAAE,KAAK,IAAG,CAAC;QACxE,OAAO;IACT,CAAC;IAED,KAAK,CAAC,aAA0C;QAC9C,OAAO;IACT,CAAC;IAED,OAAO,CAAC,WAAoB,EAAE,MAA+B;QAC3D,OAAO;IACT,CAAC;IAED,MAAM,CAAC,MAAe,EAAE,KAAe,EAAE,MAA+C;;QACtF,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QACpC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,gCAC/B,OAAO,IACJ,MAAM,KACT,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAA,MAAM,CAAC,UAAU,mCAAI,MAAM,CAAC,CAAC,CAAC,SAAS,IAC7D,CAAC;QACH,OAAO;IACT,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO;QACL,OAAO;IACT,CAAC;CACF,CAAA;AAtEY,6BAA6B;IADzC,IAAA,2BAAU,GAAE;;GACA,6BAA6B,CAsEzC;AAtEY,sEAA6B","file":"empty-contribution.js","sourcesContent":["import { inject, injectable } from '../../../common/inversify-lite';\nimport type {\n  IGlobal,\n  IDrawToParams,\n  IGroup,\n  ILayer,\n  ILayerHandlerContribution,\n  IWindow,\n  ILayerHandlerInitParams,\n  ILayerHandlerDrawParams,\n  IDrawContext,\n  LayerMode\n} from '../../../interface';\nimport type { IBounds } from '@visactor/vutils';\nimport { application } from '../../../application';\n\n@injectable()\nexport class EmptyLayerHandlerContribution implements ILayerHandlerContribution {\n  declare layer: ILayer;\n  declare canvas: null;\n  declare context: null;\n  declare offscreen: boolean;\n  declare main: boolean;\n  declare window: IWindow;\n  declare type: LayerMode;\n  // 所依赖的主layer handler\n  declare mainHandler: ILayerHandlerContribution;\n  declare global: IGlobal;\n\n  constructor() {\n    this.offscreen = false;\n    this.type = 'virtual';\n    this.global = application.global;\n  }\n\n  setDpr(dpr: number) {\n    return;\n  }\n\n  init(layer: ILayer, window: IWindow, params: ILayerHandlerInitParams): void {\n    this.layer = layer;\n    this.window = window;\n    if (params.main) {\n      throw new Error('virtual layer不能作为main layer');\n    }\n    this.main = false;\n    this.canvas = null;\n    this.context = null;\n  }\n\n  resize(w: number, h: number) {\n    return;\n  }\n  resizeView(w: number, h: number) {\n    return;\n  }\n\n  render(group: IGroup[], params: ILayerHandlerDrawParams, userParams?: Partial<IDrawContext>): void {\n    this.mainHandler.render(group, params, { ...userParams, clear: false });\n    return;\n  }\n\n  merge(layerHandlers: ILayerHandlerContribution[]) {\n    return;\n  }\n\n  prepare(dirtyBounds: IBounds, params: ILayerHandlerDrawParams) {\n    return;\n  }\n\n  drawTo(target: IWindow, group: IGroup[], params: IDrawToParams & ILayerHandlerDrawParams) {\n    const context = target.getContext();\n    params.renderService.render(group, {\n      context,\n      ...params,\n      clear: params.clear ? params.background ?? '#fff' : undefined\n    });\n    return;\n  }\n\n  getContext(): null {\n    return null;\n  }\n\n  release() {\n    return;\n  }\n}\n"]}