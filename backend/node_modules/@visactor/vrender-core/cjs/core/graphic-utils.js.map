{"version":3,"sources":["../src/core/graphic-utils.ts"],"names":[],"mappings":"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","file":"graphic-utils.js","sourcesContent":["import { injectable, inject, named } from '../common/inversify-lite';\nimport type {\n  ICanvas,\n  IContext2d,\n  EnvType,\n  IGlobal,\n  ITextAttribute,\n  IContributionProvider,\n  IGraphic,\n  IGraphicAttribute,\n  IStage,\n  IWindow\n} from '../interface';\nimport type { ITextMeasure, TextOptionsType } from '../interface/text';\nimport { TextMeasureContribution } from './contributions/textMeasure/textMeasure-contribution';\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { ContributionProvider } from '../common/contribution-provider';\nimport { DefaultTextStyle } from '../graphic/config';\nimport type { IMatrix, IPointLike, ITextMeasureOption } from '@visactor/vutils';\nimport { Matrix, TextMeasure } from '@visactor/vutils';\nimport type { IGraphicUtil, ITransformUtil, TransformType } from '../interface/core';\nimport { canvasAllocate } from '../allocator/canvas-allocate';\nimport { application } from '../application';\nimport { container } from '../container';\nimport { VWindow } from './window';\n\n@injectable()\nexport class DefaultGraphicUtil implements IGraphicUtil {\n  get canvas(): ICanvas {\n    this.tryInitCanvas();\n    return this._canvas;\n  }\n  get context(): IContext2d | null {\n    this.tryInitCanvas();\n    return this._context;\n  }\n  _canvas?: ICanvas;\n  _context?: IContext2d | null;\n  _textMeasure: ITextMeasure;\n  configured: boolean;\n  global: IGlobal;\n\n  constructor(\n    @inject(ContributionProvider)\n    @named(TextMeasureContribution)\n    protected readonly contributions: IContributionProvider<ITextMeasure>\n  ) {\n    this.configured = false;\n    this.global = application.global;\n    this.global.hooks.onSetEnv.tap('graphic-util', (lastEnv, env, global) => {\n      this.configured = false;\n      this.configure(global, env);\n    });\n  }\n\n  get textMeasure(): ITextMeasure {\n    if (!this._textMeasure) {\n      this.configure(this.global, this.global.env);\n    }\n    return this._textMeasure;\n  }\n\n  configure(global: IGlobal, env: EnvType) {\n    if (this.configured) {\n      return;\n    }\n    this.contributions.getContributions().forEach(contribution => {\n      contribution.configure(this, env);\n    });\n    this.configured = true;\n  }\n\n  tryInitCanvas() {\n    if (!this._canvas) {\n      const canvas = canvasAllocate.shareCanvas();\n      this._canvas = canvas;\n      this._context = canvas.getContext('2d');\n    }\n  }\n\n  bindTextMeasure(tm: ITextMeasure) {\n    this._textMeasure = tm;\n  }\n\n  measureText(\n    text: string,\n    tc: TextOptionsType,\n    method: 'native' | 'simple' | 'quick' = 'native'\n  ): { width: number; height: number } {\n    this.configure(this.global, this.global.env);\n    const m = this.global.measureTextMethod;\n    this.global.measureTextMethod = method;\n    const data = {\n      width: this._textMeasure.measureTextWidth(text, tc),\n      height: tc.fontSize ?? DefaultTextStyle.fontSize\n    };\n    this.global.measureTextMethod = m;\n    return data;\n  }\n\n  createTextMeasureInstance(\n    textSpec?: Partial<ITextAttribute>,\n    option?: Partial<ITextMeasureOption>,\n    getCanvasForMeasure?: () => any\n  ) {\n    this.configure(this.global, this.global.env);\n    return new TextMeasure<ITextAttribute>(\n      {\n        defaultFontParams: {\n          fontFamily: DefaultTextStyle.fontFamily,\n          fontSize: DefaultTextStyle.fontSize\n        },\n        getCanvasForMeasure: getCanvasForMeasure || (() => this.canvas),\n        getTextBounds: undefined,\n        specialCharSet: '-/: .,@%\\'\"~' + TextMeasure.ALPHABET_CHAR_SET + TextMeasure.ALPHABET_CHAR_SET.toUpperCase(),\n        ...(option ?? {})\n      },\n      textSpec\n    );\n  }\n\n  drawGraphicToCanvas(\n    graphic: IGraphic<Partial<IGraphicAttribute>>,\n    stage: IStage,\n    canvas?: HTMLCanvasElement\n  ): HTMLCanvasElement | null | Promise<HTMLCanvasElement> {\n    if (!stage.defaultLayer) {\n      return null;\n    }\n    const window = container.get<IWindow>(VWindow);\n    const bounds = graphic.AABBBounds;\n    const width = bounds.width();\n    const height = bounds.height();\n    const x1 = -bounds.x1;\n    const y1 = -bounds.y1;\n    window.create({\n      viewBox: { x1, y1, x2: bounds.x2, y2: bounds.y2 },\n      width,\n      height,\n      canvas,\n      dpr: stage.window.dpr,\n      canvasControled: true,\n      offscreen: true,\n      title: ''\n    });\n\n    const disableCheckGraphicWidthOutRange = stage.params.optimize.disableCheckGraphicWidthOutRange;\n    // 关掉dirtyBounds检测\n    stage.params.optimize.disableCheckGraphicWidthOutRange = true;\n    stage.defaultLayer.getNativeHandler().drawTo(window, [graphic as any], {\n      transMatrix: window.getViewBoxTransform(),\n      viewBox: window.getViewBox(),\n      stage,\n      layer: stage.defaultLayer,\n      renderService: stage.renderService,\n      background: 'transparent',\n      clear: true, // 第一个layer需要clear\n      updateBounds: false\n    });\n    stage.params.optimize.disableCheckGraphicWidthOutRange = disableCheckGraphicWidthOutRange;\n\n    const c = window.getNativeHandler();\n    if (c.nativeCanvas) {\n      return c.nativeCanvas;\n    }\n    return null;\n  }\n}\n\nenum TransformMode {\n  transform = 0,\n  matrix = 1\n}\n\nconst _matrix = new Matrix();\n\n@injectable()\nexport class DefaultTransformUtil implements ITransformUtil {\n  private matrix: IMatrix;\n  private originTransform: TransformType;\n\n  private outSourceMatrix: IMatrix;\n  private outTargetMatrix: IMatrix;\n\n  private mode: TransformMode;\n  constructor() {\n    this.matrix = new Matrix();\n  }\n  init(origin: TransformType): this {\n    this.mode = TransformMode.transform;\n    this.originTransform = origin;\n    this.matrix.reset();\n    return this;\n  }\n  fromMatrix(source: IMatrix, target: IMatrix): this {\n    this.mode = TransformMode.matrix;\n    this.outSourceMatrix = source;\n    this.outTargetMatrix = target;\n    return this;\n  }\n\n  // translate: (x: number, y: number) => Transform;\n  // translateTo: (x: number, y: number) => Transform;\n  private scaleMatrix(sx: number, sy: number, center?: IPointLike): this {\n    // if (this.outSourceMatrix !== this.outTargetMatrix) {\n    //   // copy\n    //   const m = this.outSourceMatrix;\n    //   this.outTargetMatrix.setValue(m.a, m.b, m.c, m.d, m.e, m.f);\n    // }\n    const sMatrix = this.outSourceMatrix;\n    _matrix.setValue(sMatrix.a, sMatrix.b, sMatrix.c, sMatrix.d, sMatrix.e, sMatrix.f);\n    this.outTargetMatrix.reset();\n    if (center) {\n      const { x, y } = center;\n      this.outTargetMatrix.translate(x, y);\n      this.outTargetMatrix.scale(sx, sy);\n      this.outTargetMatrix.translate(-x, -y);\n    } else {\n      this.outTargetMatrix.scale(sx, sy);\n    }\n\n    // _matrix.reset();\n    // if (center) {\n    //   const { x, y } = center;\n    //   _matrix.translate(x, y);\n    //   _matrix.scale(sx, sy);\n    //   _matrix.translate(-x, -y);\n    // } else {\n    //   _matrix.scale(sx, sy);\n    // }\n    this.outTargetMatrix.multiply(_matrix.a, _matrix.b, _matrix.c, _matrix.d, _matrix.e, _matrix.f);\n    return this;\n  }\n\n  private rotateMatrix(angle: number, center?: IPointLike): this {\n    const sMatrix = this.outSourceMatrix;\n    _matrix.setValue(sMatrix.a, sMatrix.b, sMatrix.c, sMatrix.d, sMatrix.e, sMatrix.f);\n    this.outTargetMatrix.reset();\n    if (center) {\n      const { x, y } = center;\n      this.outTargetMatrix.translate(x, y);\n      this.outTargetMatrix.rotate(angle);\n      this.outTargetMatrix.translate(-x, -y);\n    } else {\n      this.outTargetMatrix.rotate(angle);\n    }\n\n    this.outTargetMatrix.multiply(_matrix.a, _matrix.b, _matrix.c, _matrix.d, _matrix.e, _matrix.f);\n    return this;\n  }\n  scale(sx: number, sy: number, center?: IPointLike): this {\n    if (this.mode === TransformMode.matrix) {\n      return this.scaleMatrix(sx, sy, center);\n    }\n    return this;\n  }\n  rotate(angle: number, center?: IPointLike): this {\n    if (this.mode === TransformMode.matrix) {\n      return this.rotateMatrix(angle, center);\n    }\n    return this;\n  }\n  private translateMatrix(dx: number, dy: number): this {\n    // if (this.outSourceMatrix !== this.outTargetMatrix) {\n    //   // copy\n    //   const m = this.outSourceMatrix;\n    //   this.outTargetMatrix.setValue(m.a, m.b, m.c, m.d, m.e, m.f);\n    // }\n    const sMatrix = this.outSourceMatrix;\n    _matrix.setValue(sMatrix.a, sMatrix.b, sMatrix.c, sMatrix.d, sMatrix.e, sMatrix.f);\n    this.outTargetMatrix.reset();\n    this.outTargetMatrix.translate(dx, dy);\n\n    this.outTargetMatrix.multiply(_matrix.a, _matrix.b, _matrix.c, _matrix.d, _matrix.e, _matrix.f);\n    return this;\n  }\n  translate(dx: number, dy: number): this {\n    if (this.mode === TransformMode.matrix) {\n      return this.translateMatrix(dx, dy);\n    }\n    return this;\n  }\n  // scaleTo: (sx: number, sy: number, center: IPointLike) => Transform;\n  // rotate: (rx: number, ry: number, center: IPointLike) => Transform;\n  // rotateTo: (rx: number, ry: number, center: IPointLike) => Transform;\n  // 语法糖\n  // interactive: (dx: number, dy: number, dsx: number, dsy: number, drx: number, dry: number) => Transform;\n  // // 扩展padding像素，用于外描边，内描边\n  // extend: (origin: TransformType, padding: number) => Transform;\n  // 将所有的transform生成为一次的transform\n  simplify(target: TransformType): this {\n    if (this.mode === TransformMode.matrix) {\n      return this.simplifyMatrix(target);\n    }\n    return this;\n  }\n  private simplifyMatrix(target: TransformType): this {\n    // let { a, b, c, d, e, f } = this.outTargetMatrix;\n    // if (a === 0 || d === 0) return this;\n    // const { dx=0, dy=0 } = target;\n    // // 不处理dx和dy\n    // e -= dx;\n    // f -= dy;\n    // const tanTheta = b / a;\n    // const angle = Math.atan(tanTheta);\n    // const cosTheta = cos(angle);\n    // const sinTheta = sin(angle);\n    // const sx = cosTheta !== 0 ? (a / cosTheta) : (b / sinTheta);\n    // const sy = sinTheta !== 0 ? (-c / sinTheta) : (d / cosTheta);\n    // const x = e;\n    // const y = f;\n    // target.x = x;\n    // target.y = y;\n    // target.dx = dx;\n    return this;\n  }\n}\n"]}