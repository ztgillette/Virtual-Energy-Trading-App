{"version":3,"sources":["../src/core/light.ts"],"names":[],"mappings":";;;AACA,6CAA4D;AAE5D,kDAAwD;AACxD,wCAAqC;AAErC,MAAa,gBAAgB;IAO3B,YAAY,GAAS,EAAE,KAAa,EAAE,UAAkB,GAAG;QACzD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,yBAAU,CAAC,GAAG,CAAC,KAAK,EAAE,wBAAS,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,MAAM,MAAM,GAAG,IAAA,aAAI,EAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACzE,CAAC;IAED,YAAY,CAAC,MAAY,EAAE,KAAoB;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,MAAM,UAAU,GAAG,IAAA,YAAG,EACpB,IAAA,YAAG,EAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAC5G,IAAI,CAAC,OAAO,EACd,CAAC,CACF,CAAC;QAEF,IAAI,UAAgB,CAAC;QACrB,IAAI,IAAA,iBAAQ,EAAC,KAAK,CAAC,EAAE;YACnB,UAAU,GAAG,yBAAU,CAAC,GAAG,CAAC,KAAK,EAAE,wBAAS,CAAC,MAAM,CAAQ,CAAC;SAC7D;aAAM;YACL,UAAU,GAAG,KAAK,CAAC;SACpB;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC;QAEtC,OAAO,OAAO,eAAe,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,KAC3D,eAAe,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UACvC,KAAK,eAAe,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;IAC1D,CAAC;CACF;AArCD,4CAqCC;AAEM,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,iBAAO,CAAC,cAAc,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;AAC/D,CAAC,CAAC;AAFW,QAAA,wBAAwB,4BAEnC","file":"light.js","sourcesContent":["import type { vec4 } from '@visactor/vutils';\nimport { isString, max, min, sqrt } from '@visactor/vutils';\nimport type { vec3 } from '../interface';\nimport { ColorStore, ColorType } from '../color-string';\nimport { Factory } from '../factory';\n\nexport class DirectionalLight {\n  declare dir: vec3;\n  declare color: string;\n  declare colorRgb: vec4;\n  declare formatedDir: vec3;\n  declare ambient: number;\n\n  constructor(dir: vec3, color: string, ambient: number = 0.8) {\n    this.dir = dir;\n    this.color = color;\n    this.colorRgb = ColorStore.Get(color, ColorType.Color1);\n    this.ambient = ambient;\n    const length = sqrt(dir[0] * dir[0] + dir[1] * dir[1] + dir[2] * dir[2]);\n    this.formatedDir = [dir[0] / length, dir[1] / length, dir[2] / length];\n  }\n\n  computeColor(normal: vec3, color: string | vec3): string {\n    const lightDir = this.formatedDir;\n    const brightness = min(\n      max((normal[0] * lightDir[0] + normal[1] * lightDir[1] + normal[2] * lightDir[2]) * (1 - this.ambient / 2), 0) +\n        this.ambient,\n      1\n    );\n\n    let colorArray: vec3;\n    if (isString(color)) {\n      colorArray = ColorStore.Get(color, ColorType.Color1) as any;\n    } else {\n      colorArray = color;\n    }\n\n    const lightColorArray = this.colorRgb;\n\n    return `rgb(${lightColorArray[0] * colorArray[0] * brightness}, ${\n      lightColorArray[1] * colorArray[1] * brightness\n    }, ${lightColorArray[2] * colorArray[2] * brightness})`;\n  }\n}\n\nexport const registerDirectionalLight = () => {\n  Factory.registerPlugin('DirectionalLight', DirectionalLight);\n};\n"]}