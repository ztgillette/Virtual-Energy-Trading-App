import type { IGraphicAttribute, IContext2d, IMarkAttribute, IThemeAttribute, IDrawContext, IRenderService, IGraphicRender, IGraphicRenderDrawParams, ITextRenderContribution, IContributionProvider } from '../../../interface';
import type { IText, ITextGraphicAttribute } from '../../../interface/graphic/text';
import { BaseRender } from './base-render';
export declare class DefaultCanvasTextRender extends BaseRender<IText> implements IGraphicRender {
    protected readonly graphicRenderContributions: IContributionProvider<ITextRenderContribution>;
    type: 'text';
    numberType: number;
    constructor(graphicRenderContributions: IContributionProvider<ITextRenderContribution>);
    drawShape(text: IText, context: IContext2d, x: number, y: number, drawContext: IDrawContext, params?: IGraphicRenderDrawParams, fillCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, strokeCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean): void;
    draw(text: IText, renderService: IRenderService, drawContext: IDrawContext, params?: IGraphicRenderDrawParams): void;
    drawUnderLine(underline: number, lineThrough: number, text: IText, anchorX: number, anchorY: number, offsetUnderLineY: number, offsetThroughLineY: number, z: number, textAttribute: Required<ITextGraphicAttribute>, context: IContext2d, multiOption?: {
        width: number;
    }): void;
}
