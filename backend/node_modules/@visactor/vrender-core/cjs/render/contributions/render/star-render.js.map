{"version":3,"sources":["../src/render/contributions/render/star-render.ts"],"names":[],"mappings":"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","file":"star-render.js","sourcesContent":["import { isArray } from '@visactor/vutils';\nimport { inject, injectable, named } from '../../../common/inversify-lite';\nimport { getTheme } from '../../../graphic/theme';\nimport { STAR_NUMBER_TYPE } from '../../../graphic/constants';\nimport type {\n  IGraphicAttribute,\n  IContext2d,\n  IMarkAttribute,\n  IStar,\n  IThemeAttribute,\n  IGraphicRender,\n  IContributionProvider,\n  IDrawContext,\n  IGraphicRenderDrawParams,\n  IRenderService,\n  IStarRenderContribution\n} from '../../../interface';\nimport { StarRenderContribution } from './contributions/constants';\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { ContributionProvider } from '../../../common/contribution-provider';\nimport { BaseRender } from './base-render';\nimport { defaultStarBackgroundRenderContribution, defaultStarTextureRenderContribution } from './contributions';\n\n@injectable()\nexport class DefaultCanvasStarRender extends BaseRender<IStar> implements IGraphicRender {\n  type: 'star';\n  numberType: number = STAR_NUMBER_TYPE;\n\n  constructor(\n    @inject(ContributionProvider)\n    @named(StarRenderContribution)\n    protected readonly starRenderContribitions: IContributionProvider<IStarRenderContribution>\n  ) {\n    super();\n    this.builtinContributions = [defaultStarBackgroundRenderContribution, defaultStarTextureRenderContribution];\n    this.init(starRenderContribitions);\n  }\n\n  drawShape(\n    star: IStar,\n    context: IContext2d,\n    x: number,\n    y: number,\n    drawContext: IDrawContext,\n    params?: IGraphicRenderDrawParams,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    // Get theme attributes\n    const starAttribute = getTheme(star, params?.theme).star;\n    const {\n      x: originX = starAttribute.x,\n      y: originY = starAttribute.y,\n      fillStrokeOrder = starAttribute.fillStrokeOrder\n    } = star.attribute;\n\n    const data = this.valid(star, starAttribute, fillCb, strokeCb);\n    if (!data) {\n      return;\n    }\n    const { fVisible, sVisible, doFill, doStroke } = data;\n\n    // Get cached points for better performance\n    const points = star.getCachedPoints();\n\n    context.beginPath();\n\n    // Draw the star using cached points\n    if (points && points.length) {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          context.moveTo(x + point.x, y + point.y);\n        } else {\n          context.lineTo(x + point.x, y + point.y);\n        }\n      });\n    }\n\n    // Close the path\n    context.closePath();\n\n    // Shadow\n    context.setShadowBlendStyle && context.setShadowBlendStyle(star, star.attribute, starAttribute);\n\n    this.beforeRenderStep(\n      star,\n      context,\n      x,\n      y,\n      doFill,\n      doStroke,\n      fVisible,\n      sVisible,\n      starAttribute,\n      drawContext,\n      fillCb,\n      strokeCb\n    );\n\n    const _runFill = () => {\n      if (doFill) {\n        if (fillCb) {\n          fillCb(context, star.attribute, starAttribute);\n        } else if (fVisible) {\n          // Apply fill\n          context.setCommonStyle(star, star.attribute, originX - x, originY - y, starAttribute);\n          context.fill();\n        }\n      }\n    };\n    const _runStroke = () => {\n      if (doStroke) {\n        if (strokeCb) {\n          strokeCb(context, star.attribute, starAttribute);\n        } else if (sVisible) {\n          // Apply stroke\n          context.setStrokeStyle(star, star.attribute, originX - x, originY - y, starAttribute);\n          context.stroke();\n        }\n      }\n    };\n\n    if (!fillStrokeOrder) {\n      _runFill();\n      _runStroke();\n    } else {\n      _runStroke();\n      _runFill();\n    }\n\n    this.afterRenderStep(\n      star,\n      context,\n      x,\n      y,\n      doFill,\n      doStroke,\n      fVisible,\n      sVisible,\n      starAttribute,\n      drawContext,\n      fillCb,\n      strokeCb\n    );\n  }\n\n  draw(star: IStar, renderService: IRenderService, drawContext: IDrawContext, params?: IGraphicRenderDrawParams) {\n    const starAttribute = getTheme(star, params?.theme).star;\n    this._draw(star, starAttribute, false, drawContext, params);\n  }\n}\n"]}