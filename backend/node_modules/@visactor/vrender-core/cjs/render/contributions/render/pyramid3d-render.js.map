{"version":3,"sources":["../src/render/contributions/render/pyramid3d-render.ts"],"names":[],"mappings":";;;;;;;;;AAAA,mEAA4D;AAC5D,kDAAkD;AAClD,0DAAmE;AAYnE,qDAAgD;AAGzC,IAAM,4BAA4B,GAAlC,MAAM,4BAA6B,SAAQ,6BAAwB;IAAnE;;QACL,SAAI,GAAG,WAAW,CAAC;QACnB,eAAU,GAAW,iCAAqB,CAAC;IA2D7C,CAAC;IAxDC,SAAS,CACP,SAAqB,EACrB,OAAmB,EACnB,CAAS,EACT,CAAS,EACT,WAAyB,EACzB,MAAiC,EACjC,MAIY,EACZ,QAIY;;QAGZ,MAAM,gBAAgB,GAAG,IAAA,gBAAQ,EAAC,SAAS,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAC,CAAC,OAAO,CAAC;QACpE,MAAM,EACJ,IAAI,GAAG,gBAAgB,CAAC,IAAI,EAC5B,MAAM,GAAG,gBAAgB,CAAC,MAAM,EAChC,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,EAC5C,GAAG,SAAS,CAAC,SAAS,CAAC;QAExB,MAAM,CAAC,GAAG,MAAA,IAAI,CAAC,CAAC,mCAAI,CAAC,CAAC;QAEtB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,gBAAgB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QAGD,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE,CAAC;QAE1C,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QAEpC,IAAI,IAAI,KAAK,KAAK,EAAE;YAClB,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAC/E,IAAI,EAAE,GAAG,IAAI,CAAC;YACd,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;gBAC1B,EAAE,GAAG,OAAO,CAAC;aACd;YACD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,CAAC,CAAC;SAC3F;QACD,IAAI,MAAM,KAAK,KAAK,EAAE;YACpB,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAC/E,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACvC;IACH,CAAC;IAED,IAAI,CAAC,SAAqB,EAAE,aAA6B,EAAE,WAAyB;QAClF,MAAM,kBAAkB,GAAG,IAAA,gBAAQ,EAAC,SAAS,CAAC,CAAC,OAAO,CAAC;QACvD,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,kBAAkB,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;IAChE,CAAC;CACF,CAAA;AA7DY,4BAA4B;IADxC,IAAA,2BAAU,GAAE;GACA,4BAA4B,CA6DxC;AA7DY,oEAA4B","file":"pyramid3d-render.js","sourcesContent":["import { injectable } from '../../../common/inversify-lite';\nimport { getTheme } from '../../../graphic/theme';\nimport { PYRAMID3D_NUMBER_TYPE } from '../../../graphic/constants';\nimport type {\n  IGraphicAttribute,\n  IContext2d,\n  IMarkAttribute,\n  IPyramid3d,\n  IThemeAttribute,\n  IGraphicRender,\n  IDrawContext,\n  IGraphicRenderDrawParams,\n  IRenderService\n} from '../../../interface';\nimport { Base3dRender } from './base-3d-render';\n\n@injectable()\nexport class DefaultCanvasPyramid3dRender extends Base3dRender<IPyramid3d> implements IGraphicRender {\n  type = 'pyramid3d';\n  numberType: number = PYRAMID3D_NUMBER_TYPE;\n  declare z: number;\n\n  drawShape(\n    pyramid3d: IPyramid3d,\n    context: IContext2d,\n    x: number,\n    y: number,\n    drawContext: IDrawContext,\n    params?: IGraphicRenderDrawParams,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    // const rectAttribute = graphicService.themeService.getCurrentTheme().rectAttribute;\n    const pyramidAttribute = getTheme(pyramid3d, params?.theme).polygon;\n    const {\n      fill = pyramidAttribute.fill,\n      stroke = pyramidAttribute.stroke,\n      face = [true, true, true, true, true, true]\n    } = pyramid3d.attribute;\n\n    const z = this.z ?? 0;\n\n    const data = this.valid(pyramid3d, pyramidAttribute, fillCb, strokeCb);\n    if (!data) {\n      return;\n    }\n    // const { fVisible, sVisible, doFill, doStroke } = data;\n\n    const { light } = drawContext.stage || {};\n\n    const face3d = pyramid3d.findFace();\n\n    if (fill !== false) {\n      context.setCommonStyle(pyramid3d, pyramid3d.attribute, x, y, pyramidAttribute);\n      let fc = fill;\n      if (typeof fc !== 'string') {\n        fc = 'black';\n      }\n      this.fill(x, y, z, face3d, face, fc, context, light, pyramid3d, pyramidAttribute, fillCb);\n    }\n    if (stroke !== false) {\n      context.setStrokeStyle(pyramid3d, pyramid3d.attribute, x, y, pyramidAttribute);\n      this.stroke(x, y, z, face3d, context);\n    }\n  }\n\n  draw(pyramid3d: IPyramid3d, renderService: IRenderService, drawContext: IDrawContext) {\n    const pyramid3dAttribute = getTheme(pyramid3d).polygon;\n    this._draw(pyramid3d, pyramid3dAttribute, false, drawContext);\n  }\n}\n"]}