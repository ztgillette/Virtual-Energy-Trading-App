{"version":3,"sources":["../src/graphic/builtin-symbol/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { isArray, type IBounds, AABBBounds, isNumber } from '@visactor/vutils';\nimport { renderCommandList } from '../../common/render-command-list';\nimport type { IContext2d, ICustomPath2D, IGraphicAttribute, IPath2D, ISymbolClass } from '../../interface';\n\nconst tempBounds = new AABBBounds();\nexport class CustomSymbolClass implements ISymbolClass {\n  type: string;\n  path: ICustomPath2D;\n  pathStr: string = '';\n  isSvg: boolean;\n  svgCache?: { path: ICustomPath2D; attribute: Partial<IGraphicAttribute> }[];\n\n  constructor(\n    type: string,\n    path: ICustomPath2D | { path: ICustomPath2D; attribute: Partial<IGraphicAttribute> }[],\n    isSvg: boolean = false\n  ) {\n    this.type = type;\n    if (isArray(path)) {\n      this.svgCache = path;\n    } else {\n      this.path = path;\n    }\n    this.isSvg = isSvg;\n  }\n\n  drawOffset(\n    ctx: IContext2d,\n    size: number,\n    x: number,\n    y: number,\n    offset: number,\n    z?: number,\n    cb?: (path: ICustomPath2D, attribute?: Record<string, any>) => void\n  ) {\n    size = this.parseSize(size);\n    if (this.isSvg) {\n      if (!this.svgCache) {\n        return false;\n      }\n      this.svgCache.forEach(item => {\n        ctx.beginPath();\n        renderCommandList(item.path.commandList, ctx, x, y, size, size);\n        cb && cb(item.path, item.attribute);\n      });\n      return false;\n    }\n    renderCommandList(this.path.commandList, ctx, x, y, size + offset, size + offset);\n    return false;\n  }\n\n  draw(\n    ctx: IContext2d,\n    size: number,\n    x: number,\n    y: number,\n    z?: number,\n    cb?: (path: ICustomPath2D, attribute?: Record<string, any>) => void\n  ) {\n    size = this.parseSize(size);\n    return this.drawOffset(ctx, size, x, y, 0, z, cb);\n  }\n\n  protected parseSize(size: number | [number, number]): number {\n    return isNumber(size) ? size : Math.min(size[0], size[1]);\n  }\n  drawWithClipRange(\n    ctx: IPath2D,\n    size: number,\n    x: number,\n    y: number,\n    clipRange: number,\n    z?: number,\n    cb?: (p: ICustomPath2D, a: any) => void\n  ) {\n    size = this.parseSize(size);\n    if (this.isSvg) {\n      if (!this.svgCache) {\n        return false;\n      }\n      this.svgCache.forEach(item => {\n        item.path.drawWithClipRange(ctx, size, x, y, clipRange);\n        cb && cb(item.path, item.attribute);\n      });\n      return false;\n    }\n    this.path.drawWithClipRange(ctx, size, x, y, clipRange);\n    // this.path.drawWithClipRange && this.path.drawWithClipRange(ctx, clipRange);\n    // renderCommandList(this.path.commandList, ctx, x, y, size + offset, size + offset);\n    return false;\n  }\n\n  bounds(size: number, bounds: IBounds) {\n    size = this.parseSize(size);\n    if (this.isSvg) {\n      if (!this.svgCache) {\n        return;\n      }\n      bounds.clear();\n      this.svgCache.forEach(({ path }) => {\n        tempBounds.x1 = path.bounds.x1 * size;\n        tempBounds.y1 = path.bounds.y1 * size;\n        tempBounds.x2 = path.bounds.x2 * size;\n        tempBounds.y2 = path.bounds.y2 * size;\n        bounds.union(tempBounds);\n      });\n      return;\n    }\n    if (!this.path.bounds) {\n      return;\n    }\n    bounds.x1 = this.path.bounds.x1 * size;\n    bounds.y1 = this.path.bounds.y1 * size;\n    bounds.x2 = this.path.bounds.x2 * size;\n    bounds.y2 = this.path.bounds.y2 * size;\n  }\n}\n\n// export function CustomSymbol(): ISymbolClass {\n\n// }\n"]}