{"version":3,"sources":["../src/graphic/tools.ts"],"names":[],"mappings":"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","file":"tools.js","sourcesContent":["import { application } from '../application';\nimport { isXML } from '../common/xml/parser';\nimport type { IGraphic, IGroup, ILayer, IRichTextCharacter, IRichTextImageCharacter, IStage } from '../interface';\nimport { isArray, type IAABBBounds } from '@visactor/vutils';\nimport { XMLParser } from '../common/xml';\n\n// 不触发外部的render\nexport function incrementalAddTo(group: IGroup, graphic: IGraphic) {\n  group.incrementalAppendChild(graphic);\n  // if (group.layer && group.layer.subLayers) {\n  //   // const subLayer = group.layer.subLayers.get(group._uid);\n  // }\n}\n\nexport async function waitForAllSubLayers(stage: IStage) {\n  const promiseList: Promise<any>[] = [];\n  const layers = stage.getChildren() as ILayer[];\n  await new Promise(resolve => {\n    application.global.getRequestAnimationFrame()(() => {\n      resolve(null);\n    });\n  });\n  layers.forEach(l => {\n    if (l.subLayers.size) {\n      l.subLayers.forEach(sl => {\n        if (sl.drawContribution && sl.drawContribution.hooks && sl.drawContribution.rendering) {\n          promiseList.push(\n            new Promise(resolve => {\n              sl.drawContribution!.hooks!.completeDraw.tap('outWait', () => {\n                sl.drawContribution!.hooks!.completeDraw.taps = sl.drawContribution!.hooks!.completeDraw.taps.filter(\n                  i => {\n                    return i.name !== 'outWait';\n                  }\n                );\n                resolve(null);\n              });\n            })\n          );\n        }\n      });\n    }\n  });\n  await Promise.all(promiseList);\n}\n\nexport function boundStroke(bounds: IAABBBounds, halfW: number, miter: boolean, pad = 0) {\n  bounds.expand(halfW + (pad / 2 + (miter ? miterAdjustment(miter, halfW) : 0)));\n  return bounds;\n}\n\nfunction miterAdjustment(miter: boolean, strokeWidth: number) {\n  return miter ? strokeWidth : 0;\n}\n\n// function attachShadow(graphic: Graphic) {\n//   graphic.shadowRoot = createShadowRoot(graphic);\n//   graphic.addUpdateBoundTag();\n//   return graphic.shadowRoot;\n// }\n\n// function detachShadow(graphic: Graphic) {\n//   if (graphic.shadowRoot) {\n//     graphic.addUpdateBoundTag();\n//     graphic.shadowRoot = null;\n//   }\n// }\n\nlet NUMBER_TYPE: number = 0;\nexport function genNumberType() {\n  return NUMBER_TYPE++;\n}\n\nexport enum TextDirection {\n  HORIZONTAL = 0,\n  VERTICAL = 1\n}\nexport function verticalLayout(text: string) {\n  const nextCharacter: { text: string; direction: TextDirection }[] = [];\n  let flag = 0; // 0: 竖排，1: 旋转\n  let currStr = '';\n  for (let i = 0; i < text.length; i++) {\n    if (rotateText(text[i])) {\n      if (flag) {\n        currStr += text[i];\n      } else {\n        flag = 1;\n        currStr = text[i];\n      }\n    } else {\n      if (flag) {\n        nextCharacter.push({\n          text: currStr,\n          direction: TextDirection.VERTICAL\n        });\n        currStr = '';\n        flag = 0;\n      }\n      nextCharacter.push({\n        text: text[i],\n        direction: TextDirection.HORIZONTAL\n      });\n    }\n  }\n\n  if (currStr) {\n    nextCharacter.push({\n      text: currStr,\n      direction: TextDirection.VERTICAL\n    });\n  }\n  return nextCharacter;\n}\n\n// ——, ……, （, )\nconst rotateCharList = ['…', '（', '）', '—', '【', '】', '「', '」', '《', '》'];\nconst rotateCharMap = new Map();\nrotateCharList.forEach(c => rotateCharMap.set(c, true));\nconst noRotateCharList = [''];\nconst noRotateCharMap = new Map();\nnoRotateCharList.forEach(c => noRotateCharMap.set(c, true));\n\nfunction rotateText(c: string) {\n  if (rotateCharMap.has(c)) {\n    return true;\n  }\n  if (noRotateCharMap.has(c)) {\n    return false;\n  }\n  const cp = c.codePointAt(0);\n  let rotate = false;\n  // 默认ascii码就旋转\n  if (cp < 256) {\n    rotate = true;\n  }\n  return rotate;\n}\n\nexport function xul(str: string | string[]): IRichTextCharacter[] {\n  const xmlStr = isArray(str) ? str[0] : str;\n  const config: IRichTextCharacter[] = [];\n  if (!xmlStr) {\n    return config;\n  }\n  const valid = isXML(xmlStr);\n  if (valid === true) {\n    const parser = new XMLParser();\n    const data = parser.parse(xmlStr);\n    data.tc &&\n      Object.keys(data.tc).forEach(k => {\n        if (k === 'text') {\n          config.push(parseRTTextXML(data.tc[k]));\n        } else {\n          config.push(parseRTImageXML(data.tc[k]));\n        }\n      });\n  }\n  return config;\n}\n\nfunction parseRTTextXML(str: string): IRichTextCharacter {\n  const output: IRichTextCharacter = { text: '' };\n  parseCommonXML(str, output);\n  const inlineText = str['#text'];\n  if (inlineText) {\n    output.text = inlineText;\n  }\n\n  return output;\n}\n\nfunction parseCommonXML(str: string, output: IRichTextCharacter) {\n  const attr = (str as any).attribute;\n  if (attr) {\n    const attrList = attr.split(';');\n    attrList.forEach((attrItem: string) => {\n      if (!attrItem) {\n        return;\n      }\n      const kv = attrItem.split(':');\n\n      if (kv.length === 2) {\n        const val = parseFloat(kv[1]);\n        output[kv[0].trim()] = isFinite(val) ? val : kv[1].trim();\n      } else {\n        let val = '';\n        for (let i = 1; i < kv.length; i++) {\n          if (i > 1) {\n            val += ':';\n          }\n          val += kv[i].trim();\n        }\n        output[kv[0].trim()] = val;\n      }\n    });\n  }\n}\n\nfunction parseRTImageXML(str: string): IRichTextCharacter {\n  const output: IRichTextImageCharacter = { image: '', width: 0, height: 0 };\n  parseCommonXML(str, output);\n  const image = output.image as string;\n  if (image) {\n    output.image = (image as any).replaceAll('&quot', '\"').replaceAll('&lt', '<').replaceAll('&gt', '>');\n  }\n  return output;\n}\n"]}