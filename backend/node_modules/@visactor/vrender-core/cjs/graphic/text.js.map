{"version":3,"sources":["../src/graphic/text.ts"],"names":[],"mappings":"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","file":"text.js","sourcesContent":["import type { IAABBBounds, IOBBBounds } from '@visactor/vutils';\nimport { max, isArray, getContextFont, transformBoundsWithMatrix, rotatePoint } from '@visactor/vutils';\nimport { textDrawOffsetX, textLayoutOffsetY } from '../common/text';\nimport { CanvasTextLayout } from '../core/contributions/textMeasure/layout';\nimport { application } from '../application';\nimport type { IText, ITextCache, ITextGraphicAttribute, LayoutItemType, LayoutType } from '../interface';\nimport { Graphic, GRAPHIC_UPDATE_TAG_KEY, NOWORK_ANIMATE_ATTR } from './graphic';\nimport { getTheme } from './theme';\nimport { calculateLineHeight } from '../common/utils';\nimport { TEXT_NUMBER_TYPE } from './constants';\nimport { boundStroke, TextDirection, verticalLayout } from './tools';\n\nconst TEXT_UPDATE_TAG_KEY = [\n  'text',\n  'maxLineWidth',\n  'maxWidth',\n  // 多行文本要用到\n  'textAlign',\n  'textBaseline',\n  'heightLimit',\n  'lineClamp',\n  'fontSize',\n  'fontFamily',\n  'fontWeight',\n  'ellipsis',\n  'lineHeight',\n  'direction',\n  'wordBreak',\n  'heightLimit',\n  'lineClamp',\n  ...GRAPHIC_UPDATE_TAG_KEY\n];\n\nexport class Text extends Graphic<ITextGraphicAttribute> implements IText {\n  type: 'text' = 'text';\n\n  static NOWORK_ANIMATE_ATTR = {\n    ellipsis: 1,\n    wordBreak: 1,\n    direction: 1,\n    textAlign: 1,\n    textBaseline: 1,\n    fontFamily: 1,\n    fontWeight: 1,\n    ...NOWORK_ANIMATE_ATTR\n  };\n\n  cache: ITextCache;\n  _font: string;\n\n  protected declare obbText?: Text;\n\n  /**\n   * 获取font字符串\n   */\n  get font(): string {\n    const textTheme = this.getGraphicTheme();\n    if (!this._font) {\n      this._font = getContextFont(this.attribute, textTheme);\n    }\n    return this._font as string;\n  }\n\n  get clipedText(): string | undefined {\n    const attribute = this.attribute;\n    const textTheme = this.getGraphicTheme();\n    const maxWidth = this.getMaxWidth(textTheme);\n    if (!Number.isFinite(maxWidth)) {\n      return (attribute.text ?? textTheme.text).toString();\n    }\n    this.tryUpdateAABBBounds();\n    return this.cache.clipedText;\n  }\n\n  get clipedWidth(): number | undefined {\n    this.tryUpdateAABBBounds();\n    return this.cache.clipedWidth;\n  }\n\n  /**\n   * 支持单行文本，横排纵排均支持\n   * TODO 支持多行文本\n   */\n  get cliped(): boolean | undefined {\n    const textTheme = this.getGraphicTheme();\n    const attribute = this.attribute;\n    const maxWidth = this.getMaxWidth(textTheme);\n    if (!Number.isFinite(maxWidth)) {\n      return false;\n    }\n    const { text } = this.attribute;\n    this.tryUpdateAABBBounds();\n    if (this.cache?.layoutData?.lines) {\n      let mergedText = '';\n      this.cache.layoutData.lines.forEach(item => {\n        mergedText += item.str;\n      });\n      const originText = Array.isArray(text) ? text.join('') : text;\n\n      return originText !== mergedText;\n    }\n    if (attribute.direction === 'vertical' && this.cache.verticalList && this.cache.verticalList[0]) {\n      return this.cache.verticalList[0].map(item => item.text).join('') !== attribute.text.toString();\n    }\n    if (this.clipedText == null) {\n      return false;\n    }\n    return this.clipedText !== attribute.text.toString();\n  }\n\n  get multilineLayout(): LayoutType | undefined {\n    this.tryUpdateAABBBounds();\n    return this.cache.layoutData;\n  }\n  /**\n   * 是否是多行文本\n   */\n  get isMultiLine(): boolean {\n    return Array.isArray(this.attribute.text) || this.attribute.whiteSpace === 'normal';\n  }\n\n  constructor(params: ITextGraphicAttribute = { text: '', fontSize: 16 }) {\n    super(params);\n    this.numberType = TEXT_NUMBER_TYPE;\n    this.cache = {};\n  }\n\n  /**\n   * 图元属性合法，且文字不为空或者null/undefined\n   * @returns\n   */\n  isValid(): boolean {\n    return super.isValid() && this._isValid();\n  }\n\n  protected _isValid(): boolean {\n    const { text } = this.attribute;\n    if (isArray(text)) {\n      return !(text as any[]).every((t: any) => t == null || t === '');\n    }\n    return text != null && text !== '';\n  }\n\n  getGraphicTheme(): Required<ITextGraphicAttribute> {\n    return getTheme(this).text;\n  }\n\n  protected doUpdateOBBBounds(): IOBBBounds {\n    const graphicTheme = this.getGraphicTheme();\n    this._OBBBounds.clear();\n    const attribute = this.attribute;\n    const { angle = graphicTheme.angle } = attribute;\n    if (!angle) {\n      const b = this.AABBBounds;\n      this._OBBBounds.setValue(b.x1, b.y1, b.x2, b.y2);\n      return this._OBBBounds;\n    }\n    if (!this.obbText) {\n      this.obbText = new Text({});\n    }\n    this.obbText.setAttributes({ ...attribute, angle: 0 });\n    const bounds1 = this.obbText.AABBBounds;\n    const { x, y } = attribute;\n    const boundsCenter = { x: (bounds1.x1 + bounds1.x2) / 2, y: (bounds1.y1 + bounds1.y2) / 2 };\n    const center = rotatePoint(boundsCenter, angle, { x, y });\n    this._OBBBounds.copy(bounds1);\n    this._OBBBounds.translate(center.x - boundsCenter.x, center.y - boundsCenter.y);\n    this._OBBBounds.angle = angle;\n    return this._OBBBounds;\n  }\n\n  protected updateAABBBounds(\n    attribute: ITextGraphicAttribute,\n    textTheme: Required<ITextGraphicAttribute>,\n    aabbBounds: IAABBBounds\n  ) {\n    const { text = textTheme.text } = this.attribute;\n    if (Array.isArray(text)) {\n      this.updateMultilineAABBBounds(text as (number | string)[]);\n    } else {\n      this.updateSingallineAABBBounds(text as number | string);\n    }\n\n    const { tb1 } = application.graphicService.updateTempAABBBounds(aabbBounds);\n\n    const {\n      scaleX = textTheme.scaleX,\n      scaleY = textTheme.scaleY,\n      shadowBlur = textTheme.shadowBlur,\n      strokeBoundsBuffer = textTheme.strokeBoundsBuffer\n    } = attribute;\n    if (shadowBlur) {\n      const shadowBlurHalfWidth = shadowBlur / Math.abs(scaleX + scaleY);\n      boundStroke(tb1, shadowBlurHalfWidth, true, strokeBoundsBuffer);\n      aabbBounds.union(tb1);\n    }\n    // 合并shadowRoot的bounds\n    application.graphicService.combindShadowAABBBounds(aabbBounds, this);\n\n    if (attribute.forceBoundsHeight != null || attribute.forceBoundsWidth != null) {\n      application.graphicService.updateHTMLTextAABBBounds(attribute, textTheme, aabbBounds);\n    }\n\n    this.widthWithoutTransform = aabbBounds.x2 - aabbBounds.x1;\n    this.heightWithoutTransform = aabbBounds.y2 - aabbBounds.y1;\n\n    transformBoundsWithMatrix(aabbBounds, aabbBounds, this.transMatrix);\n    return aabbBounds;\n  }\n\n  /**\n   * 计算单行文字的bounds，可以缓存长度以及截取的文字\n   * @param text\n   */\n  updateSingallineAABBBounds(text: number | string): IAABBBounds {\n    this.updateMultilineAABBBounds([text]);\n    const layoutData = this.cache.layoutData;\n    if (layoutData && layoutData.lines && layoutData.lines.length) {\n      const line = layoutData.lines[0];\n      this.cache.clipedText = line.str;\n      this.cache.clipedWidth = line.width;\n    }\n    return this._AABBBounds;\n  }\n\n  /**\n   * 计算单行文字的bounds，可以缓存长度以及截取的文字\n   * @param text\n   */\n  protected updateMultilineAABBBounds(text: (number | string)[]): IAABBBounds {\n    const textTheme = this.getGraphicTheme();\n    const { direction = textTheme.direction, underlineOffset = textTheme.underlineOffset } = this.attribute;\n\n    const b =\n      direction === 'horizontal'\n        ? this.updateHorizontalMultilineAABBBounds(text)\n        : this.updateVerticalMultilineAABBBounds(text);\n\n    if (direction === 'horizontal') {\n      if (underlineOffset) {\n        this._AABBBounds.add(this._AABBBounds.x1, this._AABBBounds.y2 + underlineOffset);\n      }\n    }\n    return b;\n  }\n\n  guessLineHeightBuf(fontSize: number) {\n    return fontSize ? fontSize * 0.1 : 0;\n  }\n\n  /**\n   * 计算多行文字的bounds，缓存每行文字的布局位置\n   * @param text\n   */\n  updateHorizontalMultilineAABBBounds(text: (number | string)[]): IAABBBounds {\n    const textTheme = this.getGraphicTheme();\n\n    const attribute = this.attribute;\n    const {\n      fontFamily = textTheme.fontFamily,\n      textAlign = textTheme.textAlign,\n      textBaseline = textTheme.textBaseline,\n      fontSize = textTheme.fontSize,\n      fontWeight = textTheme.fontWeight,\n      ellipsis = textTheme.ellipsis,\n      maxLineWidth,\n      stroke = textTheme.stroke,\n      wrap = textTheme.wrap,\n      measureMode = textTheme.measureMode,\n      lineWidth = textTheme.lineWidth,\n      whiteSpace = textTheme.whiteSpace,\n      suffixPosition = textTheme.suffixPosition,\n      ignoreBuf = textTheme.ignoreBuf,\n      keepCenterInLine = textTheme.keepCenterInLine\n    } = attribute;\n\n    const buf = ignoreBuf ? 0 : this.guessLineHeightBuf(fontSize);\n    const lineHeight = this.getLineHeight(attribute, textTheme, buf);\n\n    if (whiteSpace === 'normal' || wrap) {\n      return this.updateWrapAABBBounds(text);\n    }\n    if (!this.shouldUpdateShape() && this.cache?.layoutData) {\n      const bbox = this.cache.layoutData.bbox;\n      this._AABBBounds.set(bbox.xOffset, bbox.yOffset, bbox.xOffset + bbox.width, bbox.yOffset + bbox.height);\n      if (stroke) {\n        this._AABBBounds.expand(lineWidth / 2);\n      }\n      return this._AABBBounds;\n    }\n    const textMeasure = application.graphicUtil.textMeasure;\n    const layoutObj = new CanvasTextLayout(fontFamily, { fontSize, fontWeight, fontFamily, lineHeight }, textMeasure);\n    const layoutData = layoutObj.GetLayoutByLines(\n      text,\n      textAlign,\n      textBaseline as any,\n      lineHeight,\n      ellipsis === true ? (textTheme.ellipsis as string) : ellipsis || undefined,\n      false,\n      {\n        lineWidth: maxLineWidth,\n        suffixPosition,\n        measureMode,\n        keepCenterInLine\n      }\n    );\n    const { bbox } = layoutData;\n    this.cache.layoutData = layoutData;\n    this.clearUpdateShapeTag();\n\n    this._AABBBounds.set(bbox.xOffset, bbox.yOffset, bbox.xOffset + bbox.width, bbox.yOffset + bbox.height);\n\n    if (stroke) {\n      this._AABBBounds.expand(lineWidth / 2);\n    }\n\n    return this._AABBBounds;\n  }\n\n  /**\n   * 计算多行文字的bounds，缓存每行文字的布局位置\n   * 自动折行params.text是数组，因此只重新updateMultilineAABBBounds\n   * @param text\n   */\n  updateWrapAABBBounds(text: (number | string) | (number | string)[]) {\n    const textTheme = this.getGraphicTheme();\n    const {\n      fontFamily = textTheme.fontFamily,\n      textAlign = textTheme.textAlign,\n      textBaseline = textTheme.textBaseline,\n      fontSize = textTheme.fontSize,\n      ellipsis = textTheme.ellipsis,\n      maxLineWidth,\n      stroke = textTheme.stroke,\n      lineWidth = textTheme.lineWidth,\n      wordBreak = textTheme.wordBreak,\n      fontWeight = textTheme.fontWeight,\n      // widthLimit,\n      ignoreBuf = textTheme.ignoreBuf,\n      measureMode = textTheme.measureMode,\n      suffixPosition = textTheme.suffixPosition,\n      heightLimit = 0,\n      lineClamp,\n      keepCenterInLine = textTheme.keepCenterInLine\n    } = this.attribute;\n\n    const buf = ignoreBuf ? 0 : this.guessLineHeightBuf(fontSize);\n    const lineHeight = this.getLineHeight(this.attribute, textTheme, buf);\n\n    if (!this.shouldUpdateShape() && this.cache?.layoutData) {\n      const bbox = this.cache.layoutData.bbox;\n      this._AABBBounds.set(bbox.xOffset, bbox.yOffset, bbox.xOffset + bbox.width, bbox.yOffset + bbox.height);\n      if (stroke) {\n        this._AABBBounds.expand(lineWidth / 2);\n      }\n      return this._AABBBounds;\n    }\n\n    const textMeasure = application.graphicUtil.textMeasure;\n    const textOptions = { fontSize, fontWeight, fontFamily, lineHeight };\n    const layoutObj = new CanvasTextLayout(fontFamily, textOptions, textMeasure as any);\n\n    // layoutObj内逻辑\n    const lines = isArray(text) ? (text.map(l => l.toString()) as string[]) : [text.toString()];\n    const linesLayout: LayoutItemType[] = [];\n    const bboxWH: [number, number] = [0, 0];\n\n    let lineCountLimit = Infinity;\n    if (heightLimit > 0) {\n      lineCountLimit = Math.max(Math.floor(heightLimit / lineHeight), 1);\n    }\n    if (lineClamp) {\n      // 处理行数限制\n      lineCountLimit = Math.min(lineCountLimit, lineClamp);\n    }\n\n    if (typeof maxLineWidth === 'number' && maxLineWidth !== Infinity) {\n      // widthLimit > 0\n      if (maxLineWidth > 0) {\n        for (let i = 0; i < lines.length; i++) {\n          const str = lines[i] as string;\n          let needCut = true;\n\n          // 判断是否超过高度限制\n          if (i === lineCountLimit - 1) {\n            // 当前行为最后一行，如果后面还有行，需要显示省略号\n            const clip = textMeasure.clipTextWithSuffix(\n              str,\n              textOptions,\n              maxLineWidth,\n              ellipsis,\n              false,\n              suffixPosition,\n              i !== lines.length - 1\n            );\n            const matrics = textMeasure.measureTextPixelADscentAndWidth(clip.str, textOptions, measureMode);\n            linesLayout.push({\n              str: clip.str,\n              width: clip.width,\n              ascent: matrics.ascent,\n              descent: matrics.descent,\n              keepCenterInLine\n            });\n            break; // 不处理后续行\n          }\n\n          // 测量截断位置\n          const clip = textMeasure.clipText(\n            str,\n            textOptions,\n            maxLineWidth,\n            wordBreak !== 'break-all',\n            wordBreak === 'keep-all'\n          );\n          if ((str !== '' && clip.str === '') || clip.wordBreaked) {\n            if (ellipsis) {\n              const clipEllipsis = textMeasure.clipTextWithSuffix(\n                str,\n                textOptions,\n                maxLineWidth,\n                ellipsis,\n                false,\n                suffixPosition\n              );\n              clip.str = clipEllipsis.str ?? '';\n              clip.width = clipEllipsis.width ?? 0;\n            } else {\n              // 宽度限制不足一个字符，不显示\n              clip.str = '';\n              clip.width = 0;\n            }\n            needCut = false;\n          }\n          const matrics = textMeasure.measureTextPixelADscentAndWidth(clip.str, textOptions, measureMode);\n          linesLayout.push({\n            str: clip.str,\n            width: clip.width,\n            ascent: matrics.ascent,\n            descent: matrics.descent,\n            keepCenterInLine\n          });\n          let cutLength = clip.str.length;\n          if (clip.wordBreaked && !(str !== '' && clip.str === '')) {\n            needCut = true;\n            cutLength = clip.wordBreaked;\n          }\n          if (clip.str.length === str.length) {\n            // 不需要截断\n          } else if (needCut) {\n            let newStr = str.substring(cutLength);\n            // 截断后，避免开头有空格很尬，去掉\n            if (wordBreak === 'keep-all') {\n              newStr = newStr.replace(/^\\s+/g, '');\n            }\n            lines.splice(i + 1, 0, newStr);\n          }\n        }\n      }\n      // bboxWH[0] = maxLineWidth;\n      let maxWidth = 0;\n      linesLayout.forEach(layout => {\n        maxWidth = Math.max(maxWidth, layout.width);\n      });\n      bboxWH[0] = maxWidth;\n    } else {\n      // 使用所有行中最长的作为lineWidth\n      let lineWidth = 0;\n      let width: number;\n      let text: string;\n      for (let i = 0, len = lines.length; i < len; i++) {\n        // 判断是否超过高度限制\n        if (i === lineCountLimit - 1) {\n          // 当前行为最后一行\n          const clip = textMeasure.clipTextWithSuffix(\n            lines[i],\n            textOptions,\n            maxLineWidth,\n            ellipsis,\n            false,\n            suffixPosition\n          );\n          const matrics = textMeasure.measureTextPixelADscentAndWidth(clip.str, textOptions, measureMode);\n          linesLayout.push({\n            str: clip.str,\n            width: clip.width,\n            ascent: matrics.ascent,\n            descent: matrics.descent,\n            keepCenterInLine\n          });\n          lineWidth = Math.max(lineWidth, clip.width);\n          break; // 不处理后续行\n        }\n\n        text = lines[i] as string;\n        width = textMeasure.measureTextWidth(text, textOptions);\n        lineWidth = Math.max(lineWidth, width);\n        const matrics = textMeasure.measureTextPixelADscentAndWidth(text, textOptions, measureMode);\n        linesLayout.push({ str: text, width, ascent: matrics.ascent, descent: matrics.descent, keepCenterInLine });\n      }\n      bboxWH[0] = lineWidth;\n    }\n    bboxWH[1] = linesLayout.length * lineHeight;\n\n    const bbox = {\n      xOffset: 0,\n      yOffset: 0,\n      width: bboxWH[0],\n      height: bboxWH[1]\n    };\n\n    layoutObj.LayoutBBox(bbox, textAlign, textBaseline as any, linesLayout);\n\n    const layoutData = layoutObj.layoutWithBBox(bbox, linesLayout, textAlign, textBaseline as any, lineHeight);\n\n    this.cache.layoutData = layoutData;\n    this.clearUpdateShapeTag();\n    this._AABBBounds.set(bbox.xOffset, bbox.yOffset, bbox.xOffset + bbox.width, bbox.yOffset + bbox.height);\n\n    if (stroke) {\n      this._AABBBounds.expand(lineWidth / 2);\n    }\n\n    return this._AABBBounds;\n  }\n\n  /**\n   * 计算垂直布局的多行文字的bounds，可以缓存长度以及截取的文字\n   * @param text\n   */\n  updateVerticalMultilineAABBBounds(text: (number | string)[]): IAABBBounds {\n    const textTheme = this.getGraphicTheme();\n    const textMeasure = application.graphicUtil.textMeasure;\n    let width: number;\n    const attribute = this.attribute;\n    const {\n      maxLineWidth = textTheme.maxLineWidth,\n      ellipsis = textTheme.ellipsis,\n      fontFamily = textTheme.fontFamily,\n      fontSize = textTheme.fontSize,\n      fontWeight = textTheme.fontWeight,\n      stroke = textTheme.stroke,\n      lineWidth = textTheme.lineWidth,\n      // wordBreak = textTheme.wordBreak,\n      verticalMode = textTheme.verticalMode,\n      suffixPosition = textTheme.suffixPosition\n    } = attribute;\n\n    const lineHeight = this.getLineHeight(attribute, textTheme, 0);\n\n    let { textAlign = textTheme.textAlign, textBaseline = textTheme.textBaseline } = attribute;\n    if (!verticalMode) {\n      const t = textAlign;\n      textAlign = (Text.baselineMapAlign as any)[textBaseline] ?? 'left';\n      textBaseline = (Text.alignMapBaseline as any)[t] ?? 'top';\n    }\n    width = 0;\n    if (!this.shouldUpdateShape() && this.cache) {\n      this.cache.verticalList.forEach(item => {\n        const w = item.reduce((a, b) => a + b.width, 0);\n        width = max(w, width);\n      });\n      const dx = textDrawOffsetX(textAlign, width);\n      const height = this.cache.verticalList.length * lineHeight;\n      const dy = textLayoutOffsetY(textBaseline, height, fontSize);\n      this._AABBBounds.set(dy, dx, dy + height, dx + width);\n      if (stroke) {\n        this._AABBBounds.expand(lineWidth / 2);\n      }\n      return this._AABBBounds;\n    }\n\n    const verticalLists: { text: string; width?: number; direction: TextDirection }[][] = text.map(str => {\n      return verticalLayout(str.toString());\n    });\n    verticalLists.forEach((verticalData, i) => {\n      if (Number.isFinite(maxLineWidth)) {\n        if (ellipsis) {\n          const strEllipsis = (ellipsis === true ? textTheme.ellipsis : ellipsis) as string;\n          const data = textMeasure.clipTextWithSuffixVertical(\n            verticalData,\n            { fontSize, fontWeight, fontFamily },\n            maxLineWidth,\n            strEllipsis,\n            false,\n            suffixPosition\n          );\n          verticalLists[i] = data.verticalList;\n          width = data.width;\n        } else {\n          const data = textMeasure.clipTextVertical(\n            verticalData,\n            { fontSize, fontWeight, fontFamily },\n            maxLineWidth,\n            false\n          );\n          verticalLists[i] = data.verticalList;\n          width = data.width;\n        }\n        // this.cache.clipedWidth = width;\n        // todo 计算原本的宽度\n      } else {\n        width = 0;\n        verticalData.forEach(t => {\n          const w =\n            t.direction === TextDirection.HORIZONTAL\n              ? fontSize\n              : textMeasure.measureTextWidth(t.text, { fontSize, fontWeight, fontFamily });\n\n          width += w;\n          t.width = w;\n        });\n      }\n    });\n    this.cache.verticalList = verticalLists;\n    this.clearUpdateShapeTag();\n\n    this.cache.verticalList.forEach(item => {\n      const w = item.reduce((a, b) => a + b.width, 0);\n      width = max(w, width);\n    });\n\n    const dx = textDrawOffsetX(textAlign, width);\n    const height = this.cache.verticalList.length * lineHeight;\n    const dy = textLayoutOffsetY(textBaseline, height, fontSize);\n    this._AABBBounds.set(dy, dx, dy + height, dx + width);\n\n    if (stroke) {\n      this._AABBBounds.expand(lineWidth / 2);\n    }\n\n    return this._AABBBounds;\n  }\n\n  // /**\n  //  * 是否是简单文字\n  //  * 单行，横排\n  //  * @returns\n  //  */\n  // protected isSinglelineAndHorizontal(): boolean {\n  //   return !this.isMultiLine && this.attribute.direction !== 'vertical';\n  // }\n\n  protected getMaxWidth(theme: ITextGraphicAttribute): number {\n    // 传入了maxLineWidth就优先使用，否则使用maxWidth\n    const attribute = this.attribute;\n    return attribute.maxLineWidth ?? attribute.maxWidth ?? theme.maxWidth;\n  }\n\n  protected getLineHeight(attribute: ITextGraphicAttribute, textTheme: ITextGraphicAttribute, buf: number) {\n    return (\n      calculateLineHeight(attribute.lineHeight, attribute.fontSize || textTheme.fontSize) ??\n      (attribute.fontSize || textTheme.fontSize) + buf\n    );\n  }\n\n  protected needUpdateTags(keys: string[], k = TEXT_UPDATE_TAG_KEY): boolean {\n    return super.needUpdateTags(keys, k);\n  }\n  protected needUpdateTag(key: string, k = TEXT_UPDATE_TAG_KEY): boolean {\n    return super.needUpdateTag(key, k);\n  }\n\n  protected _interpolate(key: string, ratio: number, lastStepVal: any, nextStepVal: any, nextAttributes: any) {\n    if (key === 'text') {\n      nextAttributes.text = nextStepVal;\n    }\n  }\n\n  clone(): Text {\n    return new Text({ ...this.attribute });\n  }\n\n  getNoWorkAnimateAttr(): Record<string, number> {\n    return Text.NOWORK_ANIMATE_ATTR;\n  }\n\n  /**\n   * 用于垂直布局时align和baseline相互转换\n   * @returns\n   */\n  getBaselineMapAlign(): Record<string, string> {\n    return Text.baselineMapAlign;\n  }\n\n  /**\n   * 用于垂直布局时align和baseline相互转换\n   * @returns\n   */\n  getAlignMapBaseline(): Record<string, string> {\n    return Text.alignMapBaseline;\n  }\n\n  static baselineMapAlign = {\n    top: 'left',\n    bottom: 'right',\n    middle: 'center'\n  };\n\n  static alignMapBaseline = {\n    left: 'top',\n    right: 'bottom',\n    center: 'middle'\n  };\n}\n\nexport function createText(attributes: ITextGraphicAttribute): IText {\n  return new Text(attributes);\n}\n\n// addAttributeToPrototype(DefaultLineStyle, Text, PURE_STYLE_KEY);\n"]}