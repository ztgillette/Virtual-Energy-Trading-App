{"version":3,"sources":["../src/graphic/pyramid3d.ts"],"names":[],"mappings":"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","file":"pyramid3d.js","sourcesContent":["import type { IAABBBounds, IPointLike } from '@visactor/vutils';\nimport { max, PointService } from '@visactor/vutils';\nimport type { GraphicType, IPyramid3d, IPyramid3dGraphicAttribute } from '../interface';\nimport type { IFace3d } from '../interface/graphic/face3d';\nimport { application } from '../application';\nimport { Polygon } from './polygon';\nimport { PYRAMID3D_NUMBER_TYPE } from './constants';\nimport { NOWORK_ANIMATE_ATTR } from './graphic';\n\nexport class Pyramid3d extends Polygon implements IPyramid3d {\n  type: GraphicType = 'pyramid3d';\n  declare attribute: IPyramid3dGraphicAttribute;\n\n  static NOWORK_ANIMATE_ATTR = NOWORK_ANIMATE_ATTR;\n\n  constructor(params: IPyramid3dGraphicAttribute) {\n    super(params);\n    this.numberType = PYRAMID3D_NUMBER_TYPE;\n  }\n\n  protected updateAABBBounds(\n    attribute: IPyramid3dGraphicAttribute,\n    polygonTheme: Required<IPyramid3dGraphicAttribute>,\n    aabbBounds: IAABBBounds\n  ) {\n    const stage = this.stage;\n    if (!stage || !stage.camera) {\n      return aabbBounds;\n    }\n\n    const faces = this.findFace();\n    // const outP = [0, 0, 0];\n    faces.vertices.forEach(v => {\n      const x = v[0];\n      const y = v[1];\n      aabbBounds.add(x, y);\n    });\n    application.graphicService.updateTempAABBBounds(aabbBounds);\n    application.graphicService.transformAABBBounds(attribute, aabbBounds, polygonTheme, false, this);\n    return aabbBounds;\n  }\n\n  findFace(): IFace3d {\n    const { points } = this.attribute;\n    // 找到斜率相同的两条边\n    const kList = points.map((p, i) => {\n      const p1 = i === 3 ? points[0] : points[i + 1];\n      const dx = p.x - p1.x;\n      if (dx === 0) {\n        return 0;\n      }\n      return (p.y - p1.y) / dx;\n    });\n\n    const pointsMap: { p: IPointLike; d: number }[] = points.map(p => ({ p, d: 0 }));\n    let find = false;\n    let maxD = 0;\n    for (let i = 0; i < kList.length - 1; i++) {\n      for (let j = i + 1; j < kList.length; j++) {\n        if (kList[i] === kList[j]) {\n          find = true;\n          const d1 = PointService.distancePP(pointsMap[i].p, pointsMap[i + 1].p);\n          pointsMap[i].d = d1;\n          pointsMap[i + 1].d = d1;\n          maxD = max(maxD, d1);\n          const d2 = PointService.distancePP(pointsMap[j].p, pointsMap[j + 1].p);\n          pointsMap[j].d = d2;\n          pointsMap[j + 1].d = d2;\n          maxD = max(maxD, d2);\n        }\n        if (find) {\n          break;\n        }\n      }\n      if (find) {\n        break;\n      }\n    }\n\n    for (let i = points.length - 1; i >= 0; i--) {\n      const p = points[i];\n      pointsMap.unshift({\n        p,\n        d: 0\n      });\n    }\n\n    for (let i = 0; i < points.length; i++) {\n      const delta = (maxD - pointsMap[i + points.length].d) / 2;\n      pointsMap[i].d += delta;\n      pointsMap[i + points.length].d += delta;\n    }\n\n    const faces: IFace3d = { polygons: [], vertices: [], edges: [] };\n\n    pointsMap.forEach(p => {\n      faces.vertices.push([p.p.x, p.p.y, p.d]);\n    });\n\n    // 上\n    faces.polygons.push({ polygon: [0, 4, 5, 1], normal: [0, -1, 0] });\n    // 下\n    faces.polygons.push({ polygon: [7, 6, 2, 3], normal: [0, 1, 0] });\n    // 左\n    faces.polygons.push({ polygon: [0, 4, 7, 3], normal: [-1, 0, 0] });\n    // 右\n    faces.polygons.push({ polygon: [1, 5, 6, 2], normal: [1, 0, 0] });\n    // 前\n    faces.polygons.push({ polygon: [0, 1, 2, 3], normal: [0, 0, -1] });\n    // 后\n    faces.polygons.push({ polygon: [4, 5, 6, 7], normal: [0, 0, 1] });\n\n    faces.edges = [\n      [0, 1],\n      [1, 2],\n      [2, 3],\n      [3, 0],\n      [4, 5],\n      [5, 6],\n      [6, 7],\n      [7, 4],\n      [0, 4],\n      [3, 7],\n      [1, 5],\n      [2, 6]\n    ];\n\n    return faces;\n  }\n\n  protected _isValid(): boolean {\n    return super._isValid() && this.attribute.points.length === 4;\n  }\n\n  getNoWorkAnimateAttr(): Record<string, number> {\n    return Pyramid3d.NOWORK_ANIMATE_ATTR;\n  }\n}\n\nexport function createPyramid3d(attributes: IPyramid3dGraphicAttribute): IPyramid3d {\n  return new Pyramid3d(attributes);\n}\n"]}