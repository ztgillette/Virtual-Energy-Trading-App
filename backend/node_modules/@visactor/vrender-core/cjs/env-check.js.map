{"version":3,"sources":["../src/env-check.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,IAAI,aAAkC,CAAC;AAMvC,SAAS,gBAAgB;IACvB,IAAI,aAAa,IAAI,IAAI,EAAE;QACzB,OAAO;KACR;IACD,IAAI;QAEF,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAEpC,aAAa,GAAG,CAAC,CAAC,CAChB,MAAM;YACN,CAAC,CAAC,MAAM,CAAC,qBAAqB;YAC9B,CAAC,CAAC,qBAAqB;YACvB,CAAC,CAAC,MAAM,CAAC,gBAAgB;YACzB,GAAG;YACH,CAAC,CAAC,GAAG,CAAC,aAAa;YACnB,CAAC,CAAC,GAAG,CAAC,eAAe,CACtB,CAAC;QACF,IAAI,aAAa,EAAE;YACjB,aAAa,GAAG,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;SAC1C;KACF;IAAC,OAAO,GAAQ,EAAE;QACjB,aAAa,GAAG,KAAK,CAAC;KACvB;AACH,CAAC;AAED,SAAgB,YAAY;IAC1B,gBAAgB,EAAE,CAAC;IACnB,MAAM,GAAG,GAAG,yBAAW,CAAC,MAAM,IAAI,yBAAW,CAAC,MAAM,CAAC,GAAG,CAAC;IACzD,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC;AACjD,CAAC;AAJD,oCAIC;AAED,SAAgB,SAAS;IACvB,gBAAgB,EAAE,CAAC;IACnB,MAAM,GAAG,GAAG,yBAAW,CAAC,MAAM,IAAI,yBAAW,CAAC,MAAM,CAAC,GAAG,CAAC;IACzD,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;AAC/C,CAAC;AAJD,8BAIC;AAED,SAAgB,aAAa;IAC3B,OAAO,YAAY,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;AAC7C,CAAC;AAFD,sCAEC","file":"env-check.js","sourcesContent":["import { application } from './application';\n\nlet _isBrowserEnv: boolean | undefined;\n\n/**\n * 仅能判断是否是浏览器环境和NodeJS环境，其他环境不一定判断出来\n * @returns\n */\nfunction initIsBrowserEnv() {\n  if (_isBrowserEnv != null) {\n    return;\n  }\n  try {\n    // @ts-ignore\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    // TODO 历史逻辑，这里有时候会被拿来判断小程序，所以先用很多类型来进行深入的判定\n    _isBrowserEnv = !!(\n      window &&\n      !!canvas.getBoundingClientRect &&\n      !!requestAnimationFrame &&\n      !!window.devicePixelRatio &&\n      ctx &&\n      !!ctx.isPointInPath &&\n      !!ctx.isPointInStroke\n    );\n    if (_isBrowserEnv) {\n      _isBrowserEnv = !!document.createElement;\n    }\n  } catch (err: any) {\n    _isBrowserEnv = false;\n  }\n}\n\nexport function isBrowserEnv(): boolean {\n  initIsBrowserEnv();\n  const env = application.global && application.global.env;\n  return env ? env === 'browser' : _isBrowserEnv;\n}\n\nexport function isNodeEnv() {\n  initIsBrowserEnv();\n  const env = application.global && application.global.env;\n  return env ? env === 'node' : !_isBrowserEnv;\n}\n\nexport function getCurrentEnv(): 'browser' | 'node' {\n  return isBrowserEnv() ? 'browser' : 'node';\n}\n"]}