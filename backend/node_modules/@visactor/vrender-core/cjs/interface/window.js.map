{"version":3,"sources":["../src/interface/window.ts"],"names":[],"mappings":"","file":"window.js","sourcesContent":["// window为内部对象，属性均为stage传入\n\nimport type { IBounds, IBoundsLike, IMatrix, IPointLike } from '@visactor/vutils';\nimport type { ICanvas } from './canvas';\nimport type { IContext2d } from './context';\nimport type { IDomRectLike, IEventElement, Releaseable } from './common';\nimport type { ISyncHook } from './sync-hook';\nimport type { IContribution } from './contribution';\nimport type { IGlobal } from './global';\n\n// TODO: 参数考虑动态注入，比如CreateWindow是native的专用接口\nexport interface IWindowParams {\n  canvas?: string | HTMLCanvasElement;\n  offscreen?: boolean;\n  width?: number;\n  height?: number;\n  viewBox?: IBoundsLike;\n  x?: number;\n  y?: number;\n  dpr: number;\n  container?: string | HTMLElement;\n  canvasControled: boolean;\n  title: string;\n  CreateWindow?: (w: number, h: number, title: string) => void;\n}\n\nexport interface IWindow\n  extends Releaseable,\n    Omit<IEventElement, 'on' | 'off' | 'once' | 'emit' | 'removeAllListeners'> {\n  hooks: {\n    onChange: ISyncHook<[number, number, number, number]>;\n  };\n  // 窗口的大小\n  width: number;\n  height: number;\n  // // 窗口的位置\n  // x: number;\n  // y: number;\n  // 窗口操作配置\n  resizable: boolean;\n  minHeight: number;\n  minWidth: number;\n  maxHeight: number;\n  maxWidth: number;\n  // 窗口配置\n  title: string;\n  dpr: number;\n  style: CSSStyleDeclaration | Record<string, any>;\n\n  create: (options: IWindowParams) => void;\n  setWindowHandler: (handler: IWindowHandlerContribution) => void;\n  setDpr: (dpr: number) => void;\n  resize: (w: number, h: number) => void;\n  configure: () => void;\n\n  // 获取上下文和canvas，可以是2d也可以是GL\n  getContext: () => IContext2d;\n  getNativeHandler: () => ICanvas;\n  getContainer: () => HTMLElement | any;\n  getImageBuffer: (type?: string) => any;\n\n  clearViewBox: (color?: string) => void;\n  setViewBox: (vb: IBoundsLike) => void;\n  getViewBox: () => IBounds;\n  setViewBoxTransform: (a: number, b: number, c: number, d: number, e: number, f: number) => void;\n  getViewBoxTransform: () => IMatrix;\n  hasSubView: () => boolean;\n  pointTransform: (x: number, y: number) => IPointLike;\n\n  getBoundingClientRect: () => IDomRectLike;\n\n  isVisible: (bbox?: IBoundsLike) => boolean;\n\n  onVisibleChange: (cb: (currentVisible: boolean) => void) => void;\n\n  getTopLeft: (baseWindow?: boolean) => { top: number; left: number };\n\n  setEventListenerTransformer: (transformer: (event: Event) => Event) => void;\n}\n\nexport interface IWindowHandlerContribution\n  extends IContribution<IWindow>,\n    Omit<IEventElement, 'on' | 'off' | 'once' | 'emit' | 'removeAllListeners'> {\n  container?: any;\n\n  configure: (window: IWindow, global: IGlobal) => void;\n  createWindow: (params: IWindowParams) => void;\n  releaseWindow: () => void;\n  resizeWindow: (width: number, height: number) => void;\n  setDpr: (dpr: number) => void;\n  getDpr: () => number;\n  getWH: () => { width: number; height: number };\n  getXY: () => { x: number; y: number };\n  getTitle: () => string;\n\n  // 获取上下文和canvas，可以是2d也可以是GL\n  getContext: () => IContext2d;\n  getNativeHandler: () => ICanvas;\n  getImageBuffer?: (type?: string) => any;\n  release: (...params: any) => void;\n\n  getStyle: () => CSSStyleDeclaration | Record<string, any>;\n  setStyle: (s: CSSStyleDeclaration | Record<string, any>) => void;\n\n  getBoundingClientRect: () => IDomRectLike;\n  clearViewBox: (color?: string) => void;\n  setViewBox: (vb: IBoundsLike) => void;\n  getViewBox: () => IBounds;\n  setViewBoxTransform: (a: number, b: number, c: number, d: number, e: number, f: number) => void;\n  getViewBoxTransform: () => IMatrix;\n  isVisible: (bbox?: IBoundsLike) => boolean;\n\n  onVisibleChange: (cb: (currentVisible: boolean) => void) => void;\n  getTopLeft: (baseWindow?: boolean) => { top: number; left: number };\n}\n"]}