{"version":3,"sources":["../src/interface/theme-service.ts"],"names":[],"mappings":"","file":"theme-service.js","sourcesContent":["// import { ContributionProvider } from '../../common/contribution-provider';\n// import {\n//   ICircleGraphicAttribute,\n//   ILineGraphicAttribute,\n//   IPathGraphicAttribute,\n//   IRectGraphicAttribute,\n//   ISymbolGraphicAttribute,\n//   ITextGraphicAttribute,\n//   IArcGraphicAttribute,\n//   IAreaGraphicAttribute,\n//   IGroupGraphicAttribute,\n//   IPolygonGraphicAttribute\n// } from '../../interface';\n\n// export interface ITheme {\n//   readonly id: string;\n//   circleAttribute: Required<ICircleGraphicAttribute>;\n//   textAttribute: Required<ITextGraphicAttribute>;\n//   symbolAttribute: Required<ISymbolGraphicAttribute>;\n//   lineAttribute: Required<ILineGraphicAttribute>;\n//   areaAttribute: Required<IAreaGraphicAttribute>;\n//   rectAttribute: Required<IRectGraphicAttribute>;\n//   pathAttribute: Required<IPathGraphicAttribute>;\n//   arcAttribute: Required<IArcGraphicAttribute>;\n//   groupAttribute: Required<IGroupGraphicAttribute>;\n//   polygonAttribute: Required<IPolygonGraphicAttribute>;\n\n//   configure: (themeService: IThemeService) => void;\n\n//   activate: () => void;\n//   deactivate: () => void;\n// }\n\n// export const Theme = Symbol.for('Theme');\n\n// export const DEFAULT_THEME_ID = 'DEFAULT_THEME_ID';\n\n// export interface IThemeService {\n//   register: (theme: ITheme) => void;\n//   getThemes: () => ITheme[];\n\n//   getTheme: (themeId: string) => ITheme;\n\n//   setCurrentTheme: (themeId: string) => void;\n\n//   getCurrentTheme: () => ITheme;\n\n//   defaultTheme: ITheme;\n\n//   reset: () => void;\n// }\n\n// export const ThemeServce = Symbol.for('ThemeServce');\n\n// @injectable()\n// export class DefaultThemeService implements IThemeService {\n//   protected themeMap: Record<string, ITheme> = {};\n//   protected activeTheme?: ITheme;\n\n//   constructor(\n//     @inject(ContributionProvider)\n//     @named(Theme)\n//     protected readonly contributions: ContributionProvider<ITheme>\n//   ) {}\n\n//   @postConstruct()\n//   init() {\n//     this.contributions.getContributions().forEach(theme => {\n//       theme.configure(this);\n//     });\n//     this.setCurrentTheme(this.defaultTheme.id);\n//   }\n\n//   register(theme: ITheme) {\n//     this.themeMap[theme.id] = theme;\n//   }\n//   getThemes(): ITheme[] {\n//     return Object.keys(this.themeMap).map(k => this.themeMap[k]);\n//   }\n\n//   getTheme(themeId: string): ITheme {\n//     return this.themeMap[themeId];\n//   }\n\n//   setCurrentTheme(themeId: string): void {\n//     this.activeTheme = this.themeMap[themeId] || this.defaultTheme;\n//   }\n\n//   getCurrentTheme(): ITheme {\n//     return this.activeTheme as ITheme;\n//   }\n\n//   get defaultTheme(): ITheme {\n//     return this.themeMap[DEFAULT_THEME_ID];\n//   }\n\n//   reset(): void {\n//     this.setCurrentTheme(this.defaultTheme.id);\n//   }\n// }\n"]}