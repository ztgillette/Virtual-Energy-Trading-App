{"version":3,"sources":["../src/interface/graphic/richText.ts"],"names":[],"mappings":"","file":"richText.js","sourcesContent":["import type { IColor } from '../color';\nimport type { IContext2d } from '../context';\nimport type { IGraphicAttribute, IGraphic } from '../graphic';\nimport type { IImage, IImageGraphicAttribute } from './image';\nimport type { ITextGraphicAttribute } from './text';\n\nexport type IRichTextEditOptionsType = {\n  placeholder?: string;\n  placeholderColor?: string;\n  placeholderFontSize?: number;\n  placeholderFontFamily?: string;\n  // 是否将placeholder同步到textConfig中\n  syncPlaceholderToTextConfig?: boolean;\n  // 即使是空文本，是否也保持高度\n  keepHeightWhileEmpty?: boolean;\n  // 是否在输入的时候展示包围框，不传默认是false，可以传入颜色\n  boundsStrokeWhenInput?: string;\n  stopPropagation?: boolean;\n};\n\nexport type IRichTextAttribute = {\n  /**\n   * @since 0.22.1\n   * 升级后避免break change，通过开关来控制\n   */\n  upgradeAttrs: {\n    lineHeight: true;\n    multiBreakLine: true;\n  } | null;\n  /**\n   * 富文本的总宽度\n   */\n  width: number;\n  /**\n   * 富文本的总高度\n   */\n  height: number;\n  /**\n   * 是否可编辑\n   */\n  editable: boolean;\n  /**\n   * 测量ascent和descent的模式，预览的时候actual比较合适，而如果需要编辑的话，font比较合适\n   */\n  ascentDescentMode?: 'actual' | 'font';\n  /**\n   * 富文本的编辑配置\n   */\n  editOptions: IRichTextEditOptionsType | null;\n  /**\n   * 文本超长的时候是否显示省略字符串\n   * 1. boolean类型，true 表示将截断后的省略字符串设置为..., false 表示不显示省略字符串\n   * 2. string类型，表示显示省略字符串，并将省略字符串设置为指定的值\n   */\n  ellipsis: boolean | string;\n  /**\n   * 文字换行类型\n   */\n  wordBreak: RichTextWordBreak;\n  /**\n   * 文字垂直方向\n   */\n  verticalDirection: RichTextVerticalDirection;\n  /**\n   * 富文本的最大高度，超过这个高度根据ellipsis的配置展示省略字符串或者直接截断\n   */\n  maxHeight: number;\n  /**\n   * 富文本的最大宽度，超过这个宽度根据ellipsis的配置展示省略字符串或者直接截断\n   */\n  maxWidth: number;\n  /**\n   * 文字对齐方式\n   */\n  textAlign: RichTextGlobalAlignType;\n  /**\n   * 文字基线\n   */\n  textBaseline: RichTextGlobalBaselineType;\n  /**\n   * 富文本的布局方向\n   */\n  layoutDirection: RichTextLayoutDirectionType;\n  /**\n   * 富文本的内容配置\n   */\n  textConfig: IRichTextCharacter[];\n  /**\n   * 不自动换行，仅当用户设置了换行符的时候才换行\n   */\n  disableAutoWrapLine: boolean;\n  /**\n   * 是否强制单行显示\n   */\n  singleLine: boolean;\n};\n\nexport type IRichTextGraphicAttribute = Partial<IGraphicAttribute & ITextGraphicAttribute> &\n  Partial<IRichTextAttribute>;\n\nexport type RichTextWordBreak = 'break-word' | 'break-all';\nexport type RichTextVerticalDirection = 'top' | 'middle' | 'bottom';\nexport type RichTextGlobalAlignType = 'left' | 'right' | 'center';\nexport type RichTextGlobalBaselineType = 'top' | 'middle' | 'bottom';\nexport type RichTextLayoutDirectionType = 'horizontal' | 'vertical';\nexport type RichTextFontStyle = 'normal' | 'italic' | 'oblique';\nexport type RichTextTextDecoration = 'none' | 'underline' | 'line-through';\n// export type RichTextTextAlign = 'left' | 'right' | 'center';\nexport type RichTextScript = 'normal' | 'sub' | 'super';\n\nexport type IRichTextBasicCharacter = {\n  /**\n   * 行高\n   */\n  lineHeight?: number | string;\n  /**\n   * 文字对齐方式\n   * left, right, center\n   */\n  textAlign?: CanvasTextAlign;\n  /**\n   * 文字基线\n   */\n  textBaseline?: CanvasTextBaseline;\n  /**\n   * 文字方向\n   */\n  direction?: RichTextLayoutDirectionType;\n};\n\n/**\n * 富文本段落为文本类型时候的配置\n */\nexport type IRichTextParagraphCharacter = IRichTextBasicCharacter & {\n  /**\n   * 文本内容\n   */\n  text: string | number;\n  /**\n   * 富文本片段的字体大小\n   */\n  fontSize?: number;\n  /**\n   * 富文本片段的字体类型\n   */\n  fontFamily?: string;\n  /**\n   * 富文本片段的文字颜色\n   */\n  fill?: IColor | boolean;\n  /**\n   * 富文本片段的文字描边颜色\n   */\n  stroke?: IColor | boolean;\n  /**\n   * 富文本片段的文字字重\n   */\n  fontWeight?: string;\n  /**\n   * 富文本片段的文字描边宽度\n   */\n  lineWidth?: number;\n  // lineHeight?: number;\n  /**\n   * 富文本片段的文字斜体设置，支持以下属性\n   * normal, italic, oblique\n   */\n  fontStyle?: RichTextFontStyle;\n  /**\n   * 富文本片段的文字中划线设置，支持以下属性\n   * none, underline, line-through\n   */\n  textDecoration?: RichTextTextDecoration;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  script?: RichTextScript; // normal, sub, super\n  /**\n   * 富文本片段的文字下划线设置，是否显示下划线\n   */\n  underline?: boolean;\n  /**\n   * 富文本片段的文字中划线设置，是否显示中划线\n   */\n  lineThrough?: boolean;\n  /**\n   * 富文本片段的透明度\n   */\n  opacity?: number;\n  /**\n   * 富文本片段的文字填充透明度\n   */\n  fillOpacity?: number;\n  /**\n   * 富文本片段的文字描边透明度\n   */\n  strokeOpacity?: number;\n  // 仅支持纯色背景\n  background?: string;\n  // 背景透明度\n  backgroundOpacity?: number;\n  /**\n   * 该character与相邻节点的间距\n   */\n  space?: number;\n  /**\n   * 该character的偏移量，仅在Render时生效，不影响布局效果，常用于动画过程中\n   */\n  dx?: number;\n  /**\n   * 该character的偏移量，仅在Render时生效不影响布局效果，常用于动画过程中\n   */\n  dy?: number;\n  // direction?: RichTextLayoutDirectionType;\n};\n\nexport type IRichTextImageCharacter = IRichTextBasicCharacter & {\n  /**\n   * 设置图片的内容，\n   * 支持三种格式：\n   * 1. 图片的url\n   * 2. 图片的Image对象\n   * 3. 图片的Canvas对象\n   */\n  image: string | HTMLImageElement | HTMLCanvasElement;\n  /**\n   * 图片的宽度\n   */\n  width: number;\n  /**\n   * 图片的高度\n   */\n  height: number;\n\n  // hover相关属性\n  // backgroundShow?: boolean; // 是否显示background\n  /**\n   * 背景的展示模式，支持以下属性\n   * always： 一直显示\n   * hover： 鼠标hover时显示\n   */\n  backgroundShowMode?: 'always' | 'hover';\n  /**\n   * 背景矩形填充颜色\n   */\n  backgroundFill?: boolean | IColor;\n  /**\n   * 背景矩形填充透明度\n   */\n  backgroundFillOpacity?: number;\n  /**\n   * 背景矩形边框颜色\n   */\n  backgroundStroke?: boolean | IColor;\n  /**\n   * 背景矩形边框透明度\n   */\n  backgroundStrokeOpacity?: number;\n  /**\n   * 背景矩形圆角\n   */\n  backgroundRadius?: number;\n  // background size 同时控制了该icon的响应范围\n  /**\n   * 背景矩形的宽度\n   */\n  backgroundWidth?: number;\n  /**\n   * 背景矩形的高度\n   */\n  backgroundHeight?: number;\n\n  /**\n   * 唯一标识符\n   */\n  id?: string;\n\n  // lineHeight?: number;\n  // textAlign?: RichTextTextAlign; // left, right, center\n  // direction?: RichTextLayoutDirectionType;\n  /**\n   * 图片与相邻节点的间距\n   */\n  margin?: number | number[];\n\n  funcType?: string;\n  hoverImage?: string | HTMLImageElement | HTMLCanvasElement;\n};\n/**\n * 富文本的字符类型\n */\nexport type IRichTextCharacter = IRichTextParagraphCharacter | IRichTextImageCharacter;\n\nexport type IRichTextIconGraphicAttribute = IImageGraphicAttribute & {\n  /**\n   * 唯一id\n   */\n  id?: string;\n  /**\n   * 背景的展示模式，支持以下属性\n   * always： 一直显示\n   * hover： 鼠标hover时显示\n   * never： 不显示\n   */\n  backgroundShowMode?: 'always' | 'hover' | 'never';\n  /**\n   * 背景矩形填充颜色\n   */\n  backgroundFill?: boolean | IColor;\n  /**\n   * 背景矩形填充透明度\n   */\n  backgroundFillOpacity?: number;\n  /**\n   * 背景矩形边框颜色\n   */\n  backgroundStroke?: boolean | IColor;\n  /**\n   * 背景矩形边框透明度\n   */\n  backgroundStrokeOpacity?: number;\n  /**\n   * 背景矩形圆角\n   */\n  backgroundRadius?: number;\n  /**\n   * 背景矩形的宽度\n   */\n  backgroundWidth?: number;\n  /**\n   * 背景矩形的高度\n   */\n  backgroundHeight?: number;\n\n  // lineHeight?: number;\n  /**\n   * 文字对齐方式\n   * left, right, center\n   */\n  textAlign?: CanvasTextAlign;\n  /**\n   * 文字基线\n   * top, middle, bottom\n   */\n  textBaseline?: CanvasTextBaseline;\n  /**\n   * 文字方向\n   * horizontal, vertical\n   */\n  direction?: RichTextLayoutDirectionType;\n  /**\n   * 图片与相邻节点的间距\n   */\n  margin?: number | number[];\n\n  // backgroundShow?: boolean;\n};\n\nexport interface IRichTextParagraph {\n  text: string;\n  ascent: number;\n  descent: number;\n  width: number;\n  height: number;\n  lineHeight: number;\n  fontSize: number;\n  length: number;\n  newLine: boolean;\n  character: IRichTextParagraphCharacter;\n  left: number;\n  top: number;\n  direction?: 'horizontal' | 'vertical';\n  widthOrigin?: number;\n  heightOrigin?: number;\n  textBaseline?: CanvasTextBaseline;\n  ellipsis: 'normal' | 'add' | 'replace' | 'hide';\n  ellipsisWidth: number;\n  ellipsisOtherParagraphWidth: number;\n  verticalEllipsis?: boolean;\n  updateWidth: () => void;\n  draw: (ctx: IContext2d, baseline: number, deltaLeft: number, isLineFirst: boolean, textAlign: string) => void;\n  getWidthWithEllips: (direction: string) => number;\n}\n\nexport interface IRichTextLine {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  baseline: number;\n  ascent: number;\n  descent: number;\n  paragraphs: (IRichTextParagraph | IRichTextIcon)[];\n  actualWidth: number;\n  blankWidth: number;\n  textAlign: string;\n  direction: 'horizontal' | 'vertical';\n  directionKey: {\n    width: string;\n    height: string;\n    left: string;\n    x: string;\n    y: string;\n  };\n  draw: (\n    ctx: IContext2d,\n    lastLine: boolean,\n    x: number,\n    y: number,\n    drawEllipsis: boolean | string,\n    drawIcon: (icon: IRichTextIcon, context: IContext2d, x: number, y: number, baseline: number) => void\n  ) => void;\n  getWidthWithEllips: (ellipsis: string) => number;\n}\n\nexport interface IRichTextFrame {\n  left: number;\n  top: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  actualHeight: number;\n  ellipsis: boolean | string;\n  wordBreak: 'break-word' | 'break-all';\n  verticalDirection: 'top' | 'middle' | 'bottom';\n  lines: IRichTextLine[];\n  globalAlign: 'left' | 'center' | 'right' | 'start' | 'end';\n  globalBaseline: 'top' | 'middle' | 'bottom';\n  layoutDirection: 'horizontal' | 'vertical';\n  directionKey: {\n    width: string;\n    height: string;\n    left: string;\n    top: string;\n    bottom: string;\n  };\n  isWidthMax: boolean;\n  isHeightMax: boolean;\n  singleLine: boolean;\n  icons: Map<string, IRichTextIcon>;\n  draw: (\n    ctx: IContext2d,\n    drawIcon: (icon: IRichTextIcon, context: IContext2d, x: number, y: number, baseline: number) => void\n  ) => boolean;\n  getActualSize: () => {\n    width: number;\n    height: number;\n  };\n  getRawActualSize: () => {\n    width: number;\n    height: number;\n  };\n  getActualSizeWidthEllipsis: () => {\n    width: number;\n    height: number;\n  };\n}\n\nexport interface IRichText extends IGraphic<IRichTextGraphicAttribute> {\n  getFrameCache: () => IRichTextFrame;\n  cliped?: boolean;\n}\n\nexport interface IRichTextIcon extends IImage {\n  attribute: IRichTextIconGraphicAttribute;\n  richtextId?: string;\n  globalX?: number;\n  globalY?: number;\n\n  _x: number;\n  _y: number;\n  _hovered: boolean;\n  _marginArray: [number, number, number, number];\n\n  setHoverState: (hovered: boolean) => void;\n}\n"]}