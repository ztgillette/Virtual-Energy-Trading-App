{"version":3,"sources":["../src/interface/graphic/group.ts"],"names":[],"mappings":"","file":"group.js","sourcesContent":["import type { ITheme, IThemeSpec } from './theme';\nimport type { IGraphicAttribute, IGraphic } from '../graphic';\nimport type { INode } from '../node-tree';\nimport type { GraphicAttributeMap } from './creator';\n\nexport type IGroupAttribute = {\n  /**\n   * 路径，用于绘制路径图形或者设置裁剪图形\n   */\n  path: IGraphic[];\n  /**\n   * 宽度\n   */\n  width: number;\n  /**\n   * 高度\n   */\n  height: number;\n  /**\n   * 圆角半径\n   */\n  cornerRadius: number | number[];\n  /**\n   * 圆角类型，\n   * 'round' - 圆弧\n   * 'bevel' - 斜角\n   */\n  cornerType: 'round' | 'bevel';\n  /**\n   * 是否剪裁\n   */\n  clip: boolean;\n  /**\n   * 所有的子节点是否可见\n   */\n  visibleAll: boolean;\n  /**\n   * 布局方式\n   */\n  display?: 'relative' | 'inner-block' | 'flex';\n  /**\n   * flex布局的方向\n   */\n  flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n  /**\n   * flex布局的换行\n   */\n  flexWrap?: 'nowrap' | 'wrap';\n  /**\n   * flex布局中，子元素在主轴上的对齐方式\n   */\n  justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around';\n  /**\n   * flex布局中，子元素在交叉轴上的对齐方式\n   */\n  alignItems?: 'flex-start' | 'flex-end' | 'center';\n  /**\n   * flex布局中，多行内容的垂直对齐方式\n   */\n  alignContent?: 'flex-start' | 'center' | 'space-between' | 'space-around';\n  /**\n   * 基准的透明度，用于控制group下面整体图元的透明度\n   */\n  baseOpacity?: number;\n  /**\n   * 绘制模式\n   * 0 - 直接绘制\n   * 1 - 绘制到新Canvas上，再绘制回来，需要绘制背景，然后绘制group\n   * 2 - 绘制到新Canvas上，再绘制回来，不需要绘制背景，只需要绘制group\n   */\n  drawMode?: 0 | 1 | 2;\n};\n\nexport type IGroupGraphicAttribute = Partial<IGraphicAttribute> & Partial<IGroupAttribute>;\n\nexport interface IGroup extends IGraphic<IGroupGraphicAttribute> {\n  childrenPickable?: boolean; // 子元素是否可以被pick\n\n  theme?: ITheme;\n\n  createTheme: () => void;\n  hideAll: () => void;\n  showAll: () => void;\n\n  setTheme: (t: IThemeSpec) => void;\n\n  incrementalAppendChild: (node: INode, highPerformance?: boolean) => INode | null;\n  incrementalClearChild: () => void;\n\n  createOrUpdateChild: <T extends keyof GraphicAttributeMap>(\n    graphicName: string,\n    attributes: GraphicAttributeMap[T],\n    graphicType: T\n  ) => INode;\n}\n"]}