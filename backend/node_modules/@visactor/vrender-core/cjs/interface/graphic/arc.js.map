{"version":3,"sources":["../src/interface/graphic/arc.ts"],"names":[],"mappings":"","file":"arc.js","sourcesContent":["import type { IGraphicAttribute, IGraphic } from '../graphic';\nimport type { ICustomPath2D } from '../path';\n\n/**\n * 扇区属性\n */\nexport type IArcAttribute = {\n  /**\n   * 内半径\n   */\n  innerRadius: number;\n  /**\n   * 外半径\n   */\n  outerRadius: number;\n  /**\n   * 内边距\n   */\n  innerPadding: number;\n  /**\n   * 外边距\n   */\n  outerPadding: number;\n  /**\n   * 起始角度；\n   * 以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n   * 如果 |endAngle - startAngle| ≥ τ 则会绘制一个完整的扇形或圆环\n   */\n  startAngle: number;\n  /**\n   * 终止角度；\n   * 以弧度的形式指定，0 表示 12 点钟方向并且顺时针方向为正。\n   * 如果 |endAngle - startAngle| ≥ τ 则会绘制一个完整的扇形或圆环\n   */\n  endAngle: number;\n  /**\n   * 用于指定扇形区块的内外圆角半径，支持设置固定数值 或者 相对于扇形区块的半径差(| outerRadius - innerRadius |)的百分比值\n   * 支持分别配置从外到内顺时针方向四个角的圆角半径，百分比值为相对于内外扇形的半径差。\n   * 其中\n   *\n   * cornerRadius: 10：表示内圆角半径和外圆角半径都是 10px。\n   * cornerRadius: '20%'：表示内圆角半径和外圆角半径都是扇形区块半径的 20%。\n   * cornerRadius: [10, 20]：表示为环形图时，外圆角半径是 10px、内圆角半径是 20px。\n   * cornerRadius: ['20%', '50%']：表示为环形图时，外圆角半径是内外圆半径差的 20%、内圆角半径是内外圆半径差的 50%。\n   * cornerRadius: [5, 10, 15, 20]：表示外圆角半径分别为 5px 和 10px，内圆角半径分别为 15px 和 20px。\n   *\n   * 也支持如下形式的配置：\n   * cornerRadius: [5, '10%', '20%', 10]\n   * TODO: 暂不支持\n   */\n  cornerRadius: number | string | Array<number | string>;\n  /**\n   * 间隙角度；间隔角度会转换为一个在两个相邻的弧之间的确定的线性距离，定义为 padRadius * | padAngle |\n   * 这个距离在弧的开始和结束处都是相等的；\n   * 间隔角度通常只应用于环形扇区（即当内半径大于 0）\n   */\n  padAngle: number;\n  /**\n   * 间隙半径\n   */\n  padRadius: number;\n\n  /**\n   * 对应了线段的 lineCap 属性，lineCap 表示的是线段末端如何绘制\n   * cap: true 表示在弧线的起始位置都增加一个角度，角度是 | outerRadius - innerRadius | / outerRadius\n   */\n  cap: boolean | [boolean, boolean];\n  /**\n   * 当cap = true 并且 使用了渐变填充的时候，自动实现conical渐变，也就是环形的渐变\n   */\n  forceShowCap: boolean;\n};\n/**\n * 内部缓存，用于存储一些内部变量\n */\nexport type IArcCache = {\n  /** 解析后的圆角配置 */\n  cornerRadius?: [number, number, number, number];\n  startAngle?: number;\n  endAngle?: number;\n};\n\nexport type IArcGraphicAttribute = Partial<IGraphicAttribute> & Partial<IArcAttribute>;\n\nexport interface IArc extends IGraphic<IArcGraphicAttribute> {\n  cache?: ICustomPath2D;\n\n  getParsedCornerRadius: () => number | number[];\n  getParsedAngle: () => { startAngle: number; endAngle: number; sc?: number; ec?: number };\n  getParsePadAngle: (\n    startAngle: number,\n    endAngle: number\n  ) => {\n    outerStartAngle: number;\n    outerEndAngle: number;\n    innerStartAngle: number;\n    innerEndAngle: number;\n\n    outerDeltaAngle: number;\n    innerDeltaAngle: number;\n  };\n}\n"]}