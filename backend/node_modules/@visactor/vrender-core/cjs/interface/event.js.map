{"version":3,"sources":["../src/interface/event.ts"],"names":[],"mappings":"","file":"event.js","sourcesContent":["import type { INode } from './node-tree';\nimport type { Dict, IBounds } from '@visactor/vutils';\nimport type { Cursor, IGraphicAttribute } from './graphic';\nimport type { IDomRectLike, IEventElement } from './common';\nimport type { ICanvas } from './canvas';\nimport type { IGlobal } from './global';\nimport type { IWindow } from './window';\n\nexport type EventPoint = {\n  x: number;\n  y: number;\n};\n\nexport interface IEventManager {\n  rootTarget: IEventTarget;\n  dispatch: any;\n  cursor: Cursor | string;\n  addEventMapping: (type: string, fn: (e: IFederatedEvent, target: IEventTarget) => void) => void;\n  dispatchEvent: (e: IFederatedEvent, type?: string) => void;\n  mapEvent: (e: IFederatedEvent) => void;\n  propagate: (e: IFederatedEvent, type?: string) => void;\n  propagationPath: (target: IEventTarget) => IEventTarget[];\n  copyWheelData: (from: IFederatedWheelEvent, to: IFederatedWheelEvent) => void;\n  copyPointerData: (from: IFederatedEvent, to: IFederatedEvent) => void;\n  copyMouseData: (from: IFederatedEvent, to: IFederatedEvent) => void;\n  copyData: (from: IFederatedEvent, to: IFederatedEvent) => void;\n}\n\nexport interface IFederatedEvent<N = Event> {\n  bubbles: boolean;\n  cancelBubble: boolean;\n  cancelable: boolean;\n  composed: boolean;\n  currentTarget: IEventTarget | null;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  returnValue: boolean;\n  srcElement: IEventTarget;\n  target: IEventTarget | null;\n  timeStamp: number;\n  type: string;\n  nativeEvent: N;\n  originalEvent: IFederatedEvent<N> | null;\n  propagationStopped: boolean;\n  propagationImmediatelyStopped: boolean;\n  path: IEventTarget[];\n  manager?: IEventManager;\n  detail: any;\n  view: any;\n  layer: EventPoint;\n  get layerX(): number;\n  get layerY(): number;\n  page: EventPoint;\n  get pageX(): number;\n  get pageY(): number;\n  canvas: EventPoint;\n  get x(): number;\n  get y(): number;\n  get canvasX(): number;\n  get canvasY(): number;\n  viewport: EventPoint;\n  get viewX(): number;\n  get viewY(): number;\n  composedPath: () => IEventTarget[];\n  preventDefault: () => void;\n  stopImmediatePropagation: () => void;\n  stopPropagation: () => void;\n  initEvent: () => void;\n  initUIEvent: () => void;\n  clone: () => void;\n  which: number;\n}\n\nexport interface IFederatedMouseEvent extends IFederatedEvent {\n  altKey: boolean;\n  button: number;\n  buttons: number;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  relatedTarget: EventTarget | null;\n  shiftKey: boolean;\n  client: EventPoint;\n  get clientX(): number;\n  get clientY(): number;\n  detail: number;\n  movement: EventPoint;\n  get movementX(): number;\n  get movementY(): number;\n  offset: EventPoint;\n  get offsetX(): number;\n  get offsetY(): number;\n  global: EventPoint;\n  get globalX(): number;\n  get globalY(): number;\n  screen: EventPoint;\n  get screenX(): number;\n  get screenY(): number;\n  getModifierState: (key: string) => boolean;\n  initMouseEvent: (\n    _typeArg: string,\n    _canBubbleArg: boolean,\n    _cancelableArg: boolean,\n    _viewArg: Window,\n    _detailArg: number,\n    _screenXArg: number,\n    _screenYArg: number,\n    _clientXArg: number,\n    _clientYArg: number,\n    _ctrlKeyArg: boolean,\n    _altKeyArg: boolean,\n    _shiftKeyArg: boolean,\n    _metaKeyArg: boolean,\n    _buttonArg: number,\n    _relatedTargetArg: EventTarget\n  ) => void;\n}\n\nexport interface IFederatedWheelEvent extends IFederatedMouseEvent {\n  deltaMode: number;\n  deltaX: number;\n  deltaY: number;\n  deltaZ: number;\n  clone: () => IFederatedWheelEvent;\n}\n\nexport interface IFederatedPointerEvent extends IFederatedMouseEvent {\n  pointerId: number;\n  width: number;\n  height: number;\n  isPrimary: boolean;\n  pointerType: string;\n  pressure: number;\n  tangentialPressure: number;\n  tiltX: number;\n  tiltY: number;\n  twist: number;\n  detail: number;\n  getCoalescedEvents: () => PointerEvent[];\n  getPredictedEvents: () => PointerEvent[];\n  clone: () => IFederatedPointerEvent;\n}\n\n/**\n * 代码参考自 https://github.com/pixijs/pixijs\n * The MIT License\n\n  Copyright (c) 2013-2023 Mathew Groves, Chad Engler\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n */\n\nexport interface IEventTarget extends INode {\n  /** The parent of this event target. */\n  parent: IEventTarget | null;\n\n  /** The children of this event target. */\n  children?: IEventTarget[];\n\n  attribute?: Partial<IGraphicAttribute>;\n\n  emit: (eventName: any, data: Dict<any>) => boolean;\n\n  getCursor: () => string;\n  setCursor: (c?: string) => void;\n}\n\nexport interface IRender {\n  visualCanvas: {\n    getCanvas: () => HTMLElement;\n  };\n  pickEvent: (position: [number, number], children: IEventTarget[], geoPick?: boolean) => IEventTarget | null;\n  [key: string]: any;\n}\n\n// 事件系统扩展接口\nexport interface IEventExtension {\n  /**\n   * bind events\n   */\n  initEvents: () => void;\n  /**\n   * unbind events\n   */\n  removeEvents: () => void;\n  /**\n   * release\n   */\n  release: () => void;\n}\n\nexport type LooseFunction = (...args: any[]) => any;\n\nexport type IElementLike = Omit<IEventElement, 'on' | 'off' | 'once' | 'emit' | 'removeAllListeners'> & {\n  style: CSSStyleDeclaration | Record<string, any>;\n  getNativeHandler?: () => ICanvas;\n  getBoundingClientRect: () => IDomRectLike;\n};\n\nexport type RenderConfig = {\n  /**\n   * 事件绑定的元素\n   */\n  targetElement: IWindow;\n  /**\n   * 环境分辨率\n   */\n  resolution: number;\n  /**\n   * 场景树根节点\n   */\n  rootNode: IEventTarget;\n  global: IGlobal;\n  /** 是否自动阻止事件 */\n  autoPreventDefault?: boolean;\n  /**\n   * 多次点击之间的最大时间，默认为 200 ms\n   * @default 200\n   */\n  clickInterval?: number;\n\n  /**\n   * @since 0.17.15\n   * 是否支持touch事件，不支持就不监听touch事件\n   */\n  supportsTouchEvents?: boolean;\n\n  /**\n   * @since 0.17.15\n   * 是否支持pointer事件，不支持就监听mouse事件\n   */\n  supportsPointerEvents?: boolean;\n};\n\nexport type NativeEvent = MouseEvent | PointerEvent | TouchEvent;\n\nexport type GraphicEventType =\n  | 'pointerdown'\n  | 'pointerup'\n  // 指针抬起与按下的图形不同时触发\n  | 'pointerupoutside'\n  | 'pointertap'\n  | 'pointerover'\n  | 'pointerenter'\n  | 'pointerleave'\n  | 'pointerout'\n  | 'mousedown'\n  | 'mouseup'\n  | 'mouseupoutside'\n  // 右键操作\n  | 'rightdown'\n  | 'rightup'\n  | 'rightupoutside'\n  | 'click'\n  // 双击\n  | 'dblclick'\n  | 'mousemove'\n  | 'mouseover'\n  | 'mouseout'\n  // 不会冒泡\n  | 'mouseenter'\n  // 不会冒泡\n  | 'mouseleave'\n  | 'wheel'\n  | 'tap'\n  | 'touchstart'\n  | 'touchend'\n  | 'touchendoutside'\n  | 'touchmove'\n  | 'touchcancel'\n  // dragNdrop\n  | 'dragstart'\n  | 'drag'\n  | 'dragenter'\n  | 'dragleave'\n  | 'dragover'\n  | 'dragend'\n  | 'drop'\n  // gesture\n  | 'pan'\n  | 'panstart'\n  | 'panend'\n  | 'press'\n  | 'pressup'\n  | 'pressend'\n  | 'pinch'\n  | 'pinchstart'\n  | 'pinchend'\n  | 'swipe';\n"]}