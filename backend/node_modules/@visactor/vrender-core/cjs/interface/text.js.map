{"version":3,"sources":["../src/interface/text.ts"],"names":[],"mappings":"","file":"text.js","sourcesContent":["import type { IContribution } from './contribution';\nimport type { IGraphicUtil } from './core';\nimport type { MeasureModeEnum } from './graphic/text';\n\nexport interface TextOptionsType {\n  fontSize?: number;\n  fontWeight?: string | number;\n  fontFamily?: string;\n  fontStyle?: string;\n  fontVariant?: string;\n  lineHeight?: number;\n  textBaseline?: 'alphabetic' | 'top' | 'middle' | 'bottom';\n  textAlign?: 'left' | 'center' | 'right' | 'start' | 'end';\n}\n\nexport interface ITextMeasure extends IContribution<IGraphicUtil> {\n  measureTextWidth: (text: string, options: TextOptionsType) => number;\n  measureTextPixelHeight: (text: string, options: TextOptionsType) => number;\n  measureTextBoundHieght: (text: string, options: TextOptionsType) => number;\n  measureTextPixelADscentAndWidth: (\n    text: string,\n    options: TextOptionsType,\n    mode: MeasureModeEnum\n  ) => { width: number; ascent: number; descent: number };\n  clipText: (\n    text: string,\n    options: TextOptionsType,\n    width: number,\n    wordBreak: boolean,\n    keepAllBreak?: boolean\n  ) => { str: string; width: number; wordBreaked?: number };\n  clipTextVertical: (\n    verticalList: { text: string; width?: number; direction: number }[],\n    options: TextOptionsType,\n    width: number,\n    wordBreak: boolean\n  ) => { verticalList: { text: string; width?: number; direction: number }[]; width: number };\n  clipTextWithSuffix: (\n    text: string,\n    options: TextOptionsType,\n    width: number,\n    suffix: string | boolean,\n    wordBreak: boolean,\n    position: 'start' | 'end' | 'middle',\n    forceSuffix?: boolean\n  ) => { str: string; width: number };\n  clipTextWithSuffixVertical: (\n    verticalList: { text: string; width?: number; direction: number }[],\n    options: TextOptionsType,\n    width: number,\n    suffix: string,\n    wordBreak: boolean,\n    suffixPosition: 'start' | 'end' | 'middle'\n  ) => { verticalList: { text: string; width?: number; direction: number }[]; width: number };\n  measureText: (text: string, options: TextOptionsType) => { width: number };\n}\n"]}