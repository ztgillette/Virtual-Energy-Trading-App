{"version":3,"sources":["../src/common/segment/curve/base.ts"],"names":[],"mappings":";;;AAGA,MAAsB,KAAK;IAUzB,SAAS,CAAC,SAAsB;QAC9B,IAAI,SAAS,IAAI,IAAI,EAAE;YACrB,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;SACvC;QACD,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC,MAAM,CAAC;SACpB;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CAIF;AAvBD,sBAuBC","file":"base.js","sourcesContent":["import type { IPoint, IPointLike } from '@visactor/vutils';\nimport type { IDirection, ICurve, IPath2D } from '../../../interface';\n\nexport abstract class Curve implements ICurve<IPoint> {\n  type: number;\n  readonly p0: IPoint;\n  defined: boolean;\n\n  protected length: number;\n  abstract getPointAt(t: number): IPointLike;\n  abstract getAngleAt(t: number): number;\n  abstract getYAt(x: number): number;\n  abstract includeX(x: number): boolean;\n  getLength(direction?: IDirection): number {\n    if (direction != null) {\n      return this.calcProjLength(direction);\n    }\n    if (Number.isFinite(this.length)) {\n      return this.length;\n    }\n    this.length = this.calcLength();\n    return this.length;\n  }\n  protected abstract calcLength(): number;\n  protected abstract calcProjLength(direction: IDirection): number;\n  abstract draw(path: IPath2D, x: number, y: number, sx: number, sy: number, percent: number): void;\n}\n"]}