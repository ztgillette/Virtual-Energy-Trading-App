{"version":3,"sources":["../src/common/segment/catmull-rom-close.ts"],"names":[],"mappings":"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","file":"catmull-rom-close.js","sourcesContent":["import { epsilon, type IPointLike } from '@visactor/vutils';\nimport { genLinearSegments } from './linear';\nimport { genCurveSegments, genSegContext } from './common';\nimport type { ICurvedSegment, IGenSegmentParams, ILinearSegment, ISegPath2D } from '../../interface/curve';\nimport { commonGenCatmullRomSegments, point } from './catmull-rom';\n\nexport class CatmullRomClosed implements ICurvedSegment {\n  private _lastDefined1?: boolean;\n  private _lastDefined2?: boolean;\n  declare context: ISegPath2D;\n\n  protected startPoint?: IPointLike;\n  lastPoint0?: IPointLike;\n  lastPoint1?: IPointLike;\n\n  constructor(context: ISegPath2D, alpha: number = 0.5, startPoint?: IPointLike) {\n    this.context = context;\n    this.startPoint = startPoint;\n    this._alpha = alpha;\n  }\n  _alpha: number;\n  _x: number;\n  _y: number;\n  _x0: number;\n  _x1: number;\n  _y0: number;\n  _y1: number;\n  _x2: number;\n  _y2: number;\n  _x3: number;\n  _y3: number;\n  _x4: number;\n  _y4: number;\n  _x5: number;\n  _y5: number;\n  _line: number;\n  _point: number;\n  _l01_a: number;\n  _l12_a: number;\n  _l23_a: number;\n  _l01_2a: number;\n  _l12_2a: number;\n  _l23_2a: number;\n\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._x0 =\n      this._x1 =\n      this._x2 =\n      this._x3 =\n      this._x4 =\n      this._x5 =\n      this._y0 =\n      this._y1 =\n      this._y2 =\n      this._y3 =\n      this._y4 =\n      this._y5 =\n        NaN;\n    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  }\n  lineEnd() {\n    switch (this._point) {\n      case 1: {\n        this.context.moveTo(this._x3, this._y3, this.lastPoint1);\n        this.context.closePath();\n        break;\n      }\n      case 2: {\n        this.context.lineTo(\n          this._x3,\n          this._y3,\n          this._lastDefined1 !== false && this._lastDefined2 !== false,\n          this.lastPoint1\n        );\n        this.context.closePath();\n        break;\n      }\n      case 3: {\n        this.point({ x: this._x3, y: this._y3 });\n        this.point({ x: this._x4, y: this._y4 });\n        this.point({ x: this._x5, y: this._y5 });\n        break;\n      }\n    }\n  }\n  point(p: IPointLike): void {\n    const { x, y } = p;\n\n    if (this._point) {\n      const x23 = this._x2 - x;\n      const y23 = this._y2 - y;\n      this._l23_a = Math.sqrt((this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha)));\n    }\n\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        (this._x3 = x), (this._y3 = y);\n        break;\n      case 1:\n        this._point = 2;\n        this.context.moveTo((this._x4 = x), (this._y4 = y), p);\n        break;\n      case 2:\n        this._point = 3;\n        (this._x5 = x), (this._y5 = y);\n        break;\n      default:\n        point(this as any, x, y, this._lastDefined1 !== false && this._lastDefined2 !== false, p);\n        break;\n    }\n\n    (this._l01_a = this._l12_a), (this._l12_a = this._l23_a);\n    (this._l01_2a = this._l12_2a), (this._l12_2a = this._l23_2a);\n    (this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x);\n    (this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y);\n\n    this._lastDefined1 = this._lastDefined2;\n    this._lastDefined2 = p.defined;\n    this.lastPoint0 = this.lastPoint1;\n    this.lastPoint1 = p;\n  }\n\n  tryUpdateLength(): number {\n    return this.context.tryUpdateLength();\n  }\n}\n\n// export function genCatmullRomClosedTypeSegments(path: ILinearSegment, points: IPointLike[]): void {\n//   return genCurveSegments(path, points, 2);\n// }\n\nexport const genCatmullRomClosedSegments = commonGenCatmullRomSegments('catmullRomClosed', CatmullRomClosed);\n\n// export function genCatmullRomClosedSegments(\n//   points: IPointLike[],\n//   alpha: number,\n//   params: IGenSegmentParams = {}\n// ): ISegPath2D | null {\n//   const { direction, startPoint } = params;\n//   if (points.length < 2 - Number(!!startPoint)) {\n//     return null;\n//   }\n//   if (points.length < 3 - Number(!!startPoint)) {\n//     return genLinearSegments(points, params);\n//   }\n\n//   const segContext = genSegContext('catmullRom', direction, points);\n\n//   const gatmullRom = new CatmullRomClosed(segContext, alpha, startPoint);\n\n//   genCatmullRomClosedTypeSegments(gatmullRom, points);\n\n//   return segContext;\n// }\n"]}