{"version":3,"sources":["../src/common/render-utils.ts"],"names":[],"mappings":";;;AAEA,+DAA2D;AAQ3D,SAAgB,WAAW,CACzB,GAAY,EACZ,KAAqB,EACrB,UAAkB,EAClB,MAOC;IAED,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;QACb,OAAO;KACR;IACD,MAAM,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,GAAG,MAAM,IAAI,EAAE,CAAC;IAG/D,IAAI,UAAU,KAAK,CAAC,EAAE;QACpB,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,EAAE;YACxB,GAAG,CAAC,aAAa,CACf,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EACpB,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EACpB,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EACpB,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EACpB,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EACpB,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EACpB,OAAO,CACR,CAAC;SACH;aAAM;YAEL,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;SACjE;KACF;SAAM;QAEL,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,EAAE;YACxB,MAAM,CAAC,MAAM,CAAC,GAAG,IAAA,0BAAW,EAAC,KAA0B,EAAE,UAAU,CAAC,CAAC;YACrE,GAAG,CAAC,aAAa,CACf,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EACrB,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EACrB,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EACrB,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EACrB,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EACrB,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,EACrB,OAAO,CACR,CAAC;SACH;aAAM;YAEL,MAAM,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACvC,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;SACnD;KACF;AACH,CAAC;AArDD,kCAqDC","file":"render-utils.js","sourcesContent":["import type { IPoint } from '@visactor/vutils';\nimport type { ICubicBezierCurve, ICurve, IPath2D } from '../interface';\nimport { divideCubic } from './segment/curve/cubic-bezier';\n\n/**\n * 绘制某个segment\n * @param ctx\n * @param seg\n * @param t 绘制这个segment的比例，t > 0从start到end，t < 0从end到start\n */\nexport function drawSegItem(\n  ctx: IPath2D,\n  curve: ICurve<IPoint>,\n  endPercent: number,\n  params?: {\n    startLenPercent?: number;\n    endLenPercent?: number;\n    start?: number;\n    offsetX?: number;\n    offsetY?: number;\n    offsetZ?: number;\n  }\n) {\n  if (!curve.p1) {\n    return;\n  }\n  const { offsetX = 0, offsetY = 0, offsetZ = 0 } = params || {};\n\n  // 完全绘制\n  if (endPercent === 1) {\n    if (curve.p2 && curve.p3) {\n      ctx.bezierCurveTo(\n        offsetX + curve.p1.x,\n        offsetY + curve.p1.y,\n        offsetX + curve.p2.x,\n        offsetY + curve.p2.y,\n        offsetX + curve.p3.x,\n        offsetY + curve.p3.y,\n        offsetZ\n      );\n    } else {\n      // linear的线段\n      ctx.lineTo(offsetX + curve.p1.x, offsetY + curve.p1.y, offsetZ);\n    }\n  } else {\n    // 绘制一部分\n    if (curve.p2 && curve.p3) {\n      const [curve1] = divideCubic(curve as ICubicBezierCurve, endPercent);\n      ctx.bezierCurveTo(\n        offsetX + curve1.p1.x,\n        offsetY + curve1.p1.y,\n        offsetX + curve1.p2.x,\n        offsetY + curve1.p2.y,\n        offsetX + curve1.p3.x,\n        offsetY + curve1.p3.y,\n        offsetZ\n      );\n    } else {\n      // linear的线段\n      const p = curve.getPointAt(endPercent);\n      ctx.lineTo(offsetX + p.x, offsetY + p.y, offsetZ);\n    }\n  }\n}\n"]}