{"version":3,"sources":["../src/common/inversify-lite/planning/planner.ts"],"names":[],"mappings":"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","file":"planner.js","sourcesContent":["import { BindingCount } from '../bindings/binding_count';\nimport * as ERROR_MSGS from '../constants/error_msgs';\nimport { BindingTypeEnum, TargetTypeEnum } from '../constants/literal_types';\nimport * as METADATA_KEY from '../constants/metadata_keys';\nimport type { interfaces } from '../interfaces/interfaces';\n// import { isStackOverflowExeption } from '../utils/exceptions';\nimport {\n  // circularDependencyToException,\n  getServiceIdentifierAsString,\n  listMetadataForTarget,\n  listRegisteredBindingsForServiceIdentifier\n} from '../utils/serialization';\nimport { Context } from './context';\nimport { Metadata } from './metadata';\nimport { Plan } from './plan';\nimport { getBaseClassDependencyCount, getDependencies, getFunctionName } from './reflection_utils';\nimport { Request } from './request';\nimport { Target } from './target';\n\nfunction getBindingDictionary(cntnr: interfaces.Container): interfaces.Lookup<interfaces.Binding<unknown>> {\n  return (cntnr as unknown as { _bindingDictionary: interfaces.Lookup<interfaces.Binding<unknown>> })\n    ._bindingDictionary;\n}\n\nfunction _createTarget(\n  isMultiInject: boolean,\n  targetType: interfaces.TargetType,\n  serviceIdentifier: interfaces.ServiceIdentifier,\n  name: string,\n  key?: string | number | symbol,\n  value?: unknown\n): interfaces.Target {\n  const metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n  const injectMetadata = new Metadata(metadataKey, serviceIdentifier);\n  const target = new Target(targetType, name, serviceIdentifier, injectMetadata);\n\n  if (key !== undefined) {\n    const tagMetadata = new Metadata(key, value);\n    target.metadata.push(tagMetadata);\n  }\n\n  return target;\n}\n\nfunction _getActiveBindings(\n  metadataReader: interfaces.MetadataReader,\n  avoidConstraints: boolean,\n  context: interfaces.Context,\n  parentRequest: interfaces.Request | null,\n  target: interfaces.Target\n): interfaces.Binding<unknown>[] {\n  let bindings = getBindings(context.container, target.serviceIdentifier);\n  let activeBindings: interfaces.Binding<unknown>[] = [];\n\n  // automatic binding\n  if (\n    bindings.length === BindingCount.NoBindingsAvailable &&\n    context.container.options.autoBindInjectable &&\n    typeof target.serviceIdentifier === 'function' &&\n    metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata\n  ) {\n    context.container.bind(target.serviceIdentifier).toSelf();\n    bindings = getBindings(context.container, target.serviceIdentifier);\n  }\n\n  // multiple bindings available\n  if (!avoidConstraints) {\n    // apply constraints if available to reduce the number of active bindings\n    activeBindings = bindings.filter(binding => {\n      const request = new Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n\n      return binding.constraint(request);\n    });\n  } else {\n    // simple injection or multi-injection without constraints\n    activeBindings = bindings;\n  }\n\n  // validate active bindings\n  _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n\n  return activeBindings;\n}\n\nfunction _validateActiveBindingCount(\n  serviceIdentifier: interfaces.ServiceIdentifier,\n  bindings: interfaces.Binding<unknown>[],\n  target: interfaces.Target,\n  container: interfaces.Container\n): interfaces.Binding<unknown>[] {\n  switch (bindings.length) {\n    case BindingCount.NoBindingsAvailable:\n      if (target.isOptional()) {\n        return bindings;\n      }\n      const serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\n      let msg = ERROR_MSGS.NOT_REGISTERED;\n      msg += listMetadataForTarget(serviceIdentifierString, target);\n      msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n      throw new Error(msg);\n\n    case BindingCount.OnlyOneBindingAvailable:\n      return bindings;\n    case BindingCount.MultipleBindingsAvailable:\n    default:\n      if (!target.isArray()) {\n        const serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\n        let msg = `${ERROR_MSGS.AMBIGUOUS_MATCH} ${serviceIdentifierString}`;\n        msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n        throw new Error(msg);\n      } else {\n        return bindings;\n      }\n  }\n}\n\nfunction _createSubRequests(\n  metadataReader: interfaces.MetadataReader,\n  avoidConstraints: boolean,\n  serviceIdentifier: interfaces.ServiceIdentifier,\n  context: interfaces.Context,\n  parentRequest: interfaces.Request | null,\n  target: interfaces.Target\n) {\n  let activeBindings: interfaces.Binding<unknown>[];\n  let childRequest: interfaces.Request;\n\n  if (parentRequest === null) {\n    activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\n\n    childRequest = new Request(serviceIdentifier, context, null, activeBindings, target);\n\n    const thePlan = new Plan(context, childRequest);\n    context.addPlan(thePlan);\n  } else {\n    activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\n    childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n  }\n\n  activeBindings.forEach(binding => {\n    let subChildRequest: interfaces.Request | null = null;\n\n    if (target.isArray()) {\n      subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\n    } else {\n      if (binding.cache) {\n        return;\n      }\n      subChildRequest = childRequest;\n    }\n\n    if (binding.type === BindingTypeEnum.Instance && binding.implementationType !== null) {\n      const dependencies = getDependencies(metadataReader, binding.implementationType as NewableFunction);\n\n      if (!context.container.options.skipBaseClassChecks) {\n        // Throw if a derived class does not implement its constructor explicitly\n        // We do this to prevent errors when a base class (parent) has dependencies\n        // and one of the derived classes (children) has no dependencies\n        const baseClassDependencyCount = getBaseClassDependencyCount(\n          metadataReader,\n          binding.implementationType as NewableFunction\n        );\n\n        if (dependencies.length < baseClassDependencyCount) {\n          const error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(\n            getFunctionName(binding.implementationType as NewableFunction)\n          );\n          throw new Error(error);\n        }\n      }\n\n      dependencies.forEach((dependency: interfaces.Target) => {\n        _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n      });\n    }\n  });\n}\n\nfunction getBindings<T>(\n  container: interfaces.Container,\n  serviceIdentifier: interfaces.ServiceIdentifier<T>\n): interfaces.Binding<T>[] {\n  let bindings: interfaces.Binding<T>[] = [];\n  const bindingDictionary = getBindingDictionary(container);\n\n  if (bindingDictionary.hasKey(serviceIdentifier)) {\n    bindings = bindingDictionary.get(serviceIdentifier) as interfaces.Binding<T>[];\n  } else if (container.parent !== null) {\n    // recursively try to get bindings from parent container\n    bindings = getBindings<T>(container.parent, serviceIdentifier);\n  }\n\n  return bindings;\n}\n\nfunction plan(\n  metadataReader: interfaces.MetadataReader,\n  container: interfaces.Container,\n  isMultiInject: boolean,\n  targetType: interfaces.TargetType,\n  serviceIdentifier: interfaces.ServiceIdentifier,\n  key?: string | number | symbol,\n  value?: unknown,\n  avoidConstraints = false\n): interfaces.Context {\n  const context = new Context(container);\n  const target = _createTarget(isMultiInject, targetType, serviceIdentifier, '', key, value);\n  _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\n  return context;\n  // try {\n  //   _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\n  //   return context;\n  // } catch (error) {\n  //   if (isStackOverflowExeption(error)) {\n  //     circularDependencyToException(context.plan.rootRequest);\n  //   }\n  //   throw error;\n  // }\n}\n\nfunction createMockRequest(\n  container: interfaces.Container,\n  serviceIdentifier: interfaces.ServiceIdentifier,\n  key: string | number | symbol,\n  value: unknown\n): interfaces.Request {\n  const target = new Target(TargetTypeEnum.Variable, '', serviceIdentifier, new Metadata(key, value));\n  const context = new Context(container);\n  const request = new Request(serviceIdentifier, context, null, [], target);\n  return request;\n}\n\nexport { plan, createMockRequest, getBindingDictionary };\n"]}