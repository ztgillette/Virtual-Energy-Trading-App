{"version":3,"sources":["../src/common/inversify-lite/planning/request.ts"],"names":[],"mappings":";;;AACA,oCAAiC;AAEjC,MAAM,OAAO;IAUX,YACE,iBAA+C,EAC/C,aAAiC,EACjC,aAAwC,EACxC,QAA6D,EAC7D,MAAyB;QAEzB,IAAI,CAAC,EAAE,GAAG,IAAA,OAAE,GAAE,CAAC;QACf,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAGhE,IAAI,CAAC,YAAY,GAAG,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAChE,CAAC;IAED,eAAe,CACb,iBAA+C,EAC/C,QAAqE,EACrE,MAAyB;QAEzB,MAAM,KAAK,GAAG,IAAI,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAEQ,0BAAO","file":"request.js","sourcesContent":["import type { interfaces } from '../interfaces/interfaces';\nimport { id } from '../utils/id';\n\nclass Request implements interfaces.Request {\n  id: number;\n  serviceIdentifier: interfaces.ServiceIdentifier;\n  parentContext: interfaces.Context;\n  parentRequest: interfaces.Request | null;\n  bindings: interfaces.Binding<unknown>[];\n  childRequests: interfaces.Request[];\n  target: interfaces.Target;\n  requestScope: interfaces.RequestScope | null;\n\n  constructor(\n    serviceIdentifier: interfaces.ServiceIdentifier,\n    parentContext: interfaces.Context,\n    parentRequest: interfaces.Request | null,\n    bindings: interfaces.Binding<any> | interfaces.Binding<any>[],\n    target: interfaces.Target\n  ) {\n    this.id = id();\n    this.serviceIdentifier = serviceIdentifier;\n    this.parentContext = parentContext;\n    this.parentRequest = parentRequest;\n    this.target = target;\n    this.childRequests = [];\n    this.bindings = Array.isArray(bindings) ? bindings : [bindings];\n\n    // Set requestScope if Request is the root request\n    this.requestScope = parentRequest === null ? new Map() : null;\n  }\n\n  addChildRequest(\n    serviceIdentifier: interfaces.ServiceIdentifier,\n    bindings: interfaces.Binding<unknown> | interfaces.Binding<unknown>[],\n    target: interfaces.Target\n  ): interfaces.Request {\n    const child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);\n    this.childRequests.push(child);\n    return child;\n  }\n}\n\nexport { Request };\n"]}