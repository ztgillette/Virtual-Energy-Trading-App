{"version":3,"sources":["../src/common/inversify-lite/resolution/instantiation.ts"],"names":[],"mappings":"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","file":"instantiation.js","sourcesContent":["import { ON_DEACTIVATION_ERROR, POST_CONSTRUCT_ERROR, PRE_DESTROY_ERROR } from '../constants/error_msgs';\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\nimport * as METADATA_KEY from '../constants/metadata_keys';\nimport type { interfaces } from '../interfaces/interfaces';\nimport type { Metadata } from '../planning/metadata';\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\nimport Reflect from '../../Reflect-metadata';\n\ninterface InstanceCreationInstruction {\n  constructorInjections: unknown[];\n  propertyInjections: unknown[];\n  propertyRequests: interfaces.Request[];\n}\n\ninterface ResolvedRequests extends InstanceCreationInstruction {\n  isAsync: boolean;\n}\n\ninterface CreateInstanceWithInjectionArg<T> extends InstanceCreationInstruction {\n  constr: interfaces.Newable<T>;\n}\n\nfunction _resolveRequests(\n  childRequests: interfaces.Request[],\n  resolveRequest: interfaces.ResolveRequestHandler\n): ResolvedRequests {\n  return childRequests.reduce<ResolvedRequests>(\n    (resolvedRequests, childRequest) => {\n      const injection = resolveRequest(childRequest);\n      const targetType = childRequest.target.type;\n      if (targetType === TargetTypeEnum.ConstructorArgument) {\n        resolvedRequests.constructorInjections.push(injection);\n      } else {\n        resolvedRequests.propertyRequests.push(childRequest);\n        resolvedRequests.propertyInjections.push(injection);\n      }\n      if (!resolvedRequests.isAsync) {\n        resolvedRequests.isAsync = isPromiseOrContainsPromise(injection);\n      }\n      return resolvedRequests;\n    },\n    { constructorInjections: [], propertyInjections: [], propertyRequests: [], isAsync: false }\n  );\n}\n\nfunction _createInstance<T>(\n  constr: interfaces.Newable<T>,\n  childRequests: interfaces.Request[],\n  resolveRequest: interfaces.ResolveRequestHandler\n): T | Promise<T> {\n  let result: T | Promise<T>;\n\n  if (childRequests.length > 0) {\n    const resolved = _resolveRequests(childRequests, resolveRequest);\n    const createInstanceWithInjectionsArg: CreateInstanceWithInjectionArg<T> = { ...resolved, constr };\n    if (resolved.isAsync) {\n      result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);\n    } else {\n      result = createInstanceWithInjections(createInstanceWithInjectionsArg);\n    }\n  } else {\n    result = new constr();\n  }\n\n  return result;\n}\n\nfunction createInstanceWithInjections<T>(args: CreateInstanceWithInjectionArg<T>): T {\n  const instance = new args.constr(...args.constructorInjections);\n  args.propertyRequests.forEach((r: interfaces.Request, index: number) => {\n    const property = r.target.identifier;\n    const injection = args.propertyInjections[index];\n    (instance as Record<string | symbol, unknown>)[property] = injection;\n  });\n  return instance;\n}\n\nasync function createInstanceWithInjectionsAsync<T>(args: CreateInstanceWithInjectionArg<T>): Promise<T> {\n  const constructorInjections = await possiblyWaitInjections(args.constructorInjections);\n  const propertyInjections = await possiblyWaitInjections(args.propertyInjections);\n  return createInstanceWithInjections<T>({ ...args, constructorInjections, propertyInjections });\n}\n\nasync function possiblyWaitInjections(possiblePromiseinjections: unknown[]) {\n  const injections: unknown[] = [];\n  for (const injection of possiblePromiseinjections) {\n    if (Array.isArray(injection)) {\n      injections.push(Promise.all(injection));\n    } else {\n      injections.push(injection);\n    }\n  }\n  return Promise.all(injections);\n}\n\nfunction _getInstanceAfterPostConstruct<T>(constr: interfaces.Newable<T>, result: T): T | Promise<T> {\n  const postConstructResult = _postConstruct(constr, result);\n\n  if (isPromise(postConstructResult)) {\n    return postConstructResult.then(() => result);\n  }\n  return result;\n}\n\nfunction _postConstruct<T>(constr: interfaces.Newable<T>, instance: T): void | Promise<void> {\n  if ((Reflect as any).hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\n    const data: Metadata = (Reflect as any).getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\n    return (instance as interfaces.Instance<T>)[data.value as string]?.();\n    // try {\n    //   return (instance as interfaces.Instance<T>)[data.value as string]?.();\n    // } catch (e) {\n    //   if (e instanceof Error) {\n    //     throw new Error(POST_CONSTRUCT_ERROR(constr.name, e.message));\n    //   }\n    // }\n  }\n}\n\nfunction _validateInstanceResolution<T = unknown>(binding: interfaces.Binding<T>, constr: interfaces.Newable<T>): void {\n  if (binding.scope !== BindingScopeEnum.Singleton) {\n    _throwIfHandlingDeactivation(binding, constr);\n  }\n}\n\nfunction _throwIfHandlingDeactivation<T = unknown>(\n  binding: interfaces.Binding<T>,\n  constr: interfaces.Newable<T>\n): void {\n  const scopeErrorMessage = `Class cannot be instantiated in ${\n    binding.scope === BindingScopeEnum.Request ? 'request' : 'transient'\n  } scope.`;\n  if (typeof binding.onDeactivation === 'function') {\n    throw new Error(ON_DEACTIVATION_ERROR(constr.name, scopeErrorMessage));\n  }\n\n  if ((Reflect as any).hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {\n    throw new Error(PRE_DESTROY_ERROR(constr.name, scopeErrorMessage));\n  }\n}\n\nfunction resolveInstance<T>(\n  binding: interfaces.Binding<T>,\n  constr: interfaces.Newable<T>,\n  childRequests: interfaces.Request[],\n  resolveRequest: interfaces.ResolveRequestHandler\n): T | Promise<T> {\n  _validateInstanceResolution(binding, constr);\n\n  const result = _createInstance(constr, childRequests, resolveRequest);\n\n  if (isPromise(result)) {\n    return result.then(resolvedResult => _getInstanceAfterPostConstruct(constr, resolvedResult));\n  }\n  return _getInstanceAfterPostConstruct(constr, result);\n}\n\nexport { resolveInstance };\n"]}