{"version":3,"sources":["../src/common/inversify-lite/utils/binding_utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAA+D;AAC/D,oEAAsD;AACtD,8DAA6D;AAC7D,iDAA6C;AAGtC,MAAM,kBAAkB,GAC7B,CAAC,SAA+B,EAAE,EAAE,CACpC,CAAC,OAAqC,EAAE,EAAE,CAC1C,CAAC,GAAG,KAAqC,EAAE,EAAE,CAC3C,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AAJhD,QAAA,kBAAkB,sBAI8B;AAEtD,MAAM,gBAAgB,GAAG,CAAc,OAA8B,EAAQ,EAAE;IACpF,IAAI,UAAU,GAAY,IAAI,CAAC;IAE/B,QAAQ,OAAO,CAAC,IAAI,EAAE;QACpB,KAAK,+BAAe,CAAC,aAAa,CAAC;QACnC,KAAK,+BAAe,CAAC,QAAQ;YAC3B,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC;YAC3B,MAAM;QACR,KAAK,+BAAe,CAAC,WAAW,CAAC;QACjC,KAAK,+BAAe,CAAC,QAAQ;YAC3B,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAC;YACxC,MAAM;QACR,KAAK,+BAAe,CAAC,YAAY;YAC/B,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC;YAClC,MAAM;QACR,KAAK,+BAAe,CAAC,QAAQ;YAC3B,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC;YAC9B,MAAM;QACR,KAAK,+BAAe,CAAC,OAAO;YAC1B,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC;YAC7B,MAAM;KACT;IACD,IAAI,UAAU,KAAK,IAAI,EAAE;QAGvB,MAAM,yBAAyB,GAAG,IAAA,4CAA4B,EAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC1F,MAAM,IAAI,KAAK,CAAC,GAAG,UAAU,CAAC,oBAAoB,IAAI,yBAAyB,EAAE,CAAC,CAAC;KACpF;AACH,CAAC,CAAC;AA5BW,QAAA,gBAAgB,oBA4B3B;AAEK,MAAM,iBAAiB,GAAG,CAAc,OAA8B,EAA6B,EAAE;IAC1G,QAAQ,OAAO,CAAC,IAAI,EAAE;QACpB,KAAK,+BAAe,CAAC,OAAO;YAC1B,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,WAAW,EAAE,0BAAW,CAAC,OAAO,EAAE,CAAC;QACxE,KAAK,+BAAe,CAAC,QAAQ;YAC3B,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAE,0BAAW,CAAC,QAAQ,EAAE,CAAC;QAC1E,KAAK,+BAAe,CAAC,YAAY;YAC/B,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,YAAY,EAAE,WAAW,EAAE,0BAAW,CAAC,YAAY,EAAE,CAAC;QAClF;YACE,MAAM,IAAI,KAAK,CAAC,2BAA2B,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;KAC9D;AACH,CAAC,CAAC;AAXW,QAAA,iBAAiB,qBAW5B","file":"binding_utils.js","sourcesContent":["import { getServiceIdentifierAsString } from './serialization';\nimport * as ERROR_MSGS from '../constants/error_msgs';\nimport { BindingTypeEnum } from '../constants/literal_types';\nimport { FactoryType } from './factory_type';\nimport type { interfaces } from '../interfaces/interfaces';\n\nexport const multiBindToService =\n  (container: interfaces.Container) =>\n  (service: interfaces.ServiceIdentifier) =>\n  (...types: interfaces.ServiceIdentifier[]) =>\n    types.forEach(t => container.bind(t).toService(service));\n\nexport const ensureFullyBound = <T = unknown>(binding: interfaces.Binding<T>): void => {\n  let boundValue: unknown = null;\n\n  switch (binding.type) {\n    case BindingTypeEnum.ConstantValue:\n    case BindingTypeEnum.Function:\n      boundValue = binding.cache;\n      break;\n    case BindingTypeEnum.Constructor:\n    case BindingTypeEnum.Instance:\n      boundValue = binding.implementationType;\n      break;\n    case BindingTypeEnum.DynamicValue:\n      boundValue = binding.dynamicValue;\n      break;\n    case BindingTypeEnum.Provider:\n      boundValue = binding.provider;\n      break;\n    case BindingTypeEnum.Factory:\n      boundValue = binding.factory;\n      break;\n  }\n  if (boundValue === null) {\n    // The user probably created a binding but didn't finish it\n    // e.g. container.bind<T>('Something'); missing BindingToSyntax\n    const serviceIdentifierAsString = getServiceIdentifierAsString(binding.serviceIdentifier);\n    throw new Error(`${ERROR_MSGS.INVALID_BINDING_TYPE} ${serviceIdentifierAsString}`);\n  }\n};\n\nexport const getFactoryDetails = <T = unknown>(binding: interfaces.Binding<T>): interfaces.FactoryDetails => {\n  switch (binding.type) {\n    case BindingTypeEnum.Factory:\n      return { factory: binding.factory, factoryType: FactoryType.Factory };\n    case BindingTypeEnum.Provider:\n      return { factory: binding.provider, factoryType: FactoryType.Provider };\n    case BindingTypeEnum.DynamicValue:\n      return { factory: binding.dynamicValue, factoryType: FactoryType.DynamicValue };\n    default:\n      throw new Error(`Unexpected factory type ${binding.type}`);\n  }\n};\n"]}