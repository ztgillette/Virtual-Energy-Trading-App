{"version":3,"sources":["../src/common/inversify-lite/utils/serialization.ts"],"names":[],"mappings":"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","file":"serialization.js","sourcesContent":["import * as ERROR_MSGS from '../constants/error_msgs';\nimport type { interfaces } from '../interfaces/interfaces';\n\nfunction getServiceIdentifierAsString(serviceIdentifier: interfaces.ServiceIdentifier): string {\n  if (typeof serviceIdentifier === 'function') {\n    const _serviceIdentifier = serviceIdentifier;\n    return _serviceIdentifier.name;\n  } else if (typeof serviceIdentifier === 'symbol') {\n    return serviceIdentifier.toString();\n  } // string\n  const _serviceIdentifier = serviceIdentifier;\n  return _serviceIdentifier as string;\n}\n\nfunction listRegisteredBindingsForServiceIdentifier(\n  container: interfaces.Container,\n  serviceIdentifier: string,\n  getBindings: <T>(\n    container: interfaces.Container,\n    serviceIdentifier: interfaces.ServiceIdentifier<T>\n  ) => interfaces.Binding<T>[]\n): string {\n  let registeredBindingsList = '';\n  const registeredBindings = getBindings(container, serviceIdentifier);\n\n  if (registeredBindings.length !== 0) {\n    registeredBindingsList = '\\nRegistered bindings:';\n\n    registeredBindings.forEach((binding: interfaces.Binding<unknown>) => {\n      // Use 'Object as name of constant value injections'\n      let name = 'Object';\n\n      // Use function name if available\n      if (binding.implementationType !== null) {\n        name = getFunctionName(binding.implementationType as { name: string | null });\n      }\n\n      registeredBindingsList = `${registeredBindingsList}\\n ${name}`;\n\n      if (binding.constraint.metaData) {\n        registeredBindingsList = `${registeredBindingsList} - ${binding.constraint.metaData}`;\n      }\n    });\n  }\n\n  return registeredBindingsList;\n}\n\nfunction alreadyDependencyChain(request: interfaces.Request, serviceIdentifier: interfaces.ServiceIdentifier): boolean {\n  if (request.parentRequest === null) {\n    return false;\n  } else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {\n    return true;\n  }\n  return alreadyDependencyChain(request.parentRequest, serviceIdentifier);\n}\n\nfunction dependencyChainToString(request: interfaces.Request) {\n  function _createStringArr(req: interfaces.Request, result: string[] = []): string[] {\n    const serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);\n    result.push(serviceIdentifier);\n    if (req.parentRequest !== null) {\n      return _createStringArr(req.parentRequest, result);\n    }\n    return result;\n  }\n\n  const stringArr = _createStringArr(request);\n  return stringArr.reverse().join(' --> ');\n}\n\nfunction circularDependencyToException(request: interfaces.Request) {\n  request.childRequests.forEach(childRequest => {\n    if (alreadyDependencyChain(childRequest, childRequest.serviceIdentifier)) {\n      const services = dependencyChainToString(childRequest);\n      throw new Error(`${ERROR_MSGS.CIRCULAR_DEPENDENCY} ${services}`);\n    } else {\n      circularDependencyToException(childRequest);\n    }\n  });\n}\n\nfunction listMetadataForTarget(serviceIdentifierString: string, target: interfaces.Target): string {\n  if (target.isTagged() || target.isNamed()) {\n    let m = '';\n\n    const namedTag = target.getNamedTag();\n    const otherTags = target.getCustomTags();\n\n    if (namedTag !== null) {\n      m += namedTag.toString() + '\\n';\n    }\n\n    if (otherTags !== null) {\n      otherTags.forEach(tag => {\n        m += tag.toString() + '\\n';\n      });\n    }\n\n    return ` ${serviceIdentifierString}\\n ${serviceIdentifierString} - ${m}`;\n  }\n  return ` ${serviceIdentifierString}`;\n}\n\nfunction getFunctionName(func: { name: string | null }): string {\n  if (func.name) {\n    return func.name;\n  }\n  const name = func.toString();\n  const match = name.match(/^function\\s*([^\\s(]+)/);\n  return match ? (match[1] as string) : `Anonymous function: ${name}`;\n}\n\nfunction getSymbolDescription(symbol: symbol) {\n  return symbol.toString().slice(7, -1);\n}\n\nexport {\n  getFunctionName,\n  getServiceIdentifierAsString,\n  listRegisteredBindingsForServiceIdentifier,\n  listMetadataForTarget,\n  circularDependencyToException,\n  getSymbolDescription\n};\n"]}