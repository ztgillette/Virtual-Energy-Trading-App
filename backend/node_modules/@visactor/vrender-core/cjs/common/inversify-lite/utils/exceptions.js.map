{"version":3,"sources":["../src/common/inversify-lite/utils/exceptions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oEAAsD;AAEtD,SAAgB,uBAAuB,CAAC,KAAc;IACpD,OAAO,KAAK,YAAY,UAAU,IAAK,KAAe,CAAC,OAAO,KAAK,UAAU,CAAC,cAAc,CAAC;AAC/F,CAAC;AAFD,0DAEC;AAEM,MAAM,+BAA+B,GAAG,CAAI,EAAW,EAAE,aAA0B,EAAE,EAAE;IAC5F,OAAO,EAAE,EAAE,CAAC;AASd,CAAC,CAAC;AAVW,QAAA,+BAA+B,mCAU1C","file":"exceptions.js","sourcesContent":["import * as ERROR_MSGS from '../constants/error_msgs';\n\nexport function isStackOverflowExeption(error: unknown): error is RangeError {\n  return error instanceof RangeError || (error as Error).message === ERROR_MSGS.STACK_OVERFLOW;\n}\n\nexport const tryAndThrowErrorIfStackOverflow = <T>(fn: () => T, errorCallback: () => Error) => {\n  return fn();\n  // try {\n  //   return fn();\n  // } catch (error) {\n  //   if (isStackOverflowExeption(error)) {\n  //     error = errorCallback();\n  //   }\n  //   throw error;\n  // }\n};\n"]}