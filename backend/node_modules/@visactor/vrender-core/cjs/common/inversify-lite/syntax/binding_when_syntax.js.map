{"version":3,"sources":["../src/common/inversify-lite/syntax/binding_when_syntax.ts"],"names":[],"mappings":";;;AACA,2DAAsD;AACtD,6DAAuD;AAEvD,MAAM,iBAAiB;IAGrB,YAAY,OAA8B;QACxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAOD,eAAe,CAAC,IAA8B;QAC5C,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAA,oCAAe,EAAC,IAAI,CAAC,CAAC;QACjD,OAAO,IAAI,mCAAe,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;CAiGF;AAEQ,8CAAiB","file":"binding_when_syntax.js","sourcesContent":["import type { interfaces } from '../interfaces/interfaces';\nimport { BindingOnSyntax } from './binding_on_syntax';\nimport { namedConstraint } from './constraint_helpers';\n\nclass BindingWhenSyntax<T> implements interfaces.BindingWhenSyntax<T> {\n  private _binding: interfaces.Binding<T>;\n\n  constructor(binding: interfaces.Binding<T>) {\n    this._binding = binding;\n  }\n\n  // public when(constraint: (request: interfaces.Request) => boolean): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = constraint as interfaces.ConstraintFunction;\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  whenTargetNamed(name: string | number | symbol): interfaces.BindingOnSyntax<T> {\n    this._binding.constraint = namedConstraint(name);\n    return new BindingOnSyntax<T>(this._binding);\n  }\n\n  // public whenTargetIsDefault(): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) => {\n  //     if (request === null) {\n  //       return false;\n  //     }\n\n  //     const targetIsDefault = request.target !== null && !request.target.isNamed() && !request.target.isTagged();\n\n  //     return targetIsDefault;\n  //   };\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenTargetTagged(tag: string | number | symbol, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = taggedConstraint(tag)(value);\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenInjectedInto(parent: NewableFunction | string): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && typeConstraint(parent)(request.parentRequest);\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenParentNamed(name: string | number | symbol): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && namedConstraint(name)(request.parentRequest);\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenParentTagged(tag: string | number | symbol, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && taggedConstraint(tag)(value)(request.parentRequest);\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenAnyAncestorIs(ancestor: NewableFunction | string): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && traverseAncerstors(request, typeConstraint(ancestor));\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenNoAncestorIs(ancestor: NewableFunction | string): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && !traverseAncerstors(request, typeConstraint(ancestor));\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenAnyAncestorNamed(name: string | number | symbol): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && traverseAncerstors(request, namedConstraint(name));\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenNoAncestorNamed(name: string | number | symbol): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && !traverseAncerstors(request, namedConstraint(name));\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenAnyAncestorTagged(tag: string | number | symbol, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && traverseAncerstors(request, taggedConstraint(tag)(value));\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenNoAncestorTagged(tag: string | number | symbol, value: unknown): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && !traverseAncerstors(request, taggedConstraint(tag)(value));\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenAnyAncestorMatches(constraint: (request: interfaces.Request) => boolean): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && traverseAncerstors(request, constraint as interfaces.ConstraintFunction);\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n\n  // public whenNoAncestorMatches(constraint: (request: interfaces.Request) => boolean): interfaces.BindingOnSyntax<T> {\n  //   this._binding.constraint = (request: interfaces.Request | null) =>\n  //     request !== null && !traverseAncerstors(request, constraint as interfaces.ConstraintFunction);\n\n  //   return new BindingOnSyntax<T>(this._binding);\n  // }\n}\n\nexport { BindingWhenSyntax };\n"]}