{"version":3,"sources":["../src/common/inversify-lite/syntax/binding_in_syntax.ts"],"names":[],"mappings":";;;AAAA,8DAA8D;AAE9D,qEAA+D;AAE/D,MAAM,eAAe;IAGnB,YAAY,OAA8B;QACxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,gCAAgB,CAAC,OAAO,CAAC;QAC/C,OAAO,IAAI,4CAAmB,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,gCAAgB,CAAC,SAAS,CAAC;QACjD,OAAO,IAAI,4CAAmB,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,gCAAgB,CAAC,SAAS,CAAC;QACjD,OAAO,IAAI,4CAAmB,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;CACF;AAEQ,0CAAe","file":"binding_in_syntax.js","sourcesContent":["import { BindingScopeEnum } from '../constants/literal_types';\nimport type { interfaces } from '../interfaces/interfaces';\nimport { BindingWhenOnSyntax } from './binding_when_on_syntax';\n\nclass BindingInSyntax<T> implements interfaces.BindingInSyntax<T> {\n  private _binding: interfaces.Binding<T>;\n\n  constructor(binding: interfaces.Binding<T>) {\n    this._binding = binding;\n  }\n\n  inRequestScope(): interfaces.BindingWhenOnSyntax<T> {\n    this._binding.scope = BindingScopeEnum.Request;\n    return new BindingWhenOnSyntax<T>(this._binding);\n  }\n\n  inSingletonScope(): interfaces.BindingWhenOnSyntax<T> {\n    this._binding.scope = BindingScopeEnum.Singleton;\n    return new BindingWhenOnSyntax<T>(this._binding);\n  }\n\n  inTransientScope(): interfaces.BindingWhenOnSyntax<T> {\n    this._binding.scope = BindingScopeEnum.Transient;\n    return new BindingWhenOnSyntax<T>(this._binding);\n  }\n}\n\nexport { BindingInSyntax };\n"]}