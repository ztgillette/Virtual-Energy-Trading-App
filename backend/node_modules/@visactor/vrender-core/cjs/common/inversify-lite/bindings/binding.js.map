{"version":3,"sources":["../src/common/inversify-lite/bindings/binding.ts"],"names":[],"mappings":";;;AAAA,8DAA+E;AAE/E,oCAAiC;AAEjC,MAAM,OAAO;IA0CX,YAAY,iBAA2D,EAAE,KAA8B;QACrG,IAAI,CAAC,EAAE,GAAG,IAAA,OAAE,GAAE,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,+BAAe,CAAC,OAAO,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,CAAC,OAAkC,EAAE,EAAE,CAAC,IAAI,CAAC;QAC/D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,KAAK;QACH,MAAM,KAAK,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,KAAK,gCAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;QACtF,KAAK,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACnD,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC3C,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAEQ,0BAAO","file":"binding.js","sourcesContent":["import { BindingScopeEnum, BindingTypeEnum } from '../constants/literal_types';\nimport type { interfaces } from '../interfaces/interfaces';\nimport { id } from '../utils/id';\n\nclass Binding<TActivated> implements interfaces.Binding<TActivated> {\n  id: number;\n  moduleId!: interfaces.ContainerModuleBase['id'];\n\n  // Determines weather the bindings has been already activated\n  // The activation action takes place when an instance is resolved\n  // If the scope is singleton it only happens once\n  activated: boolean;\n\n  // A runtime identifier because at runtime we don't have interfaces\n  serviceIdentifier: interfaces.ServiceIdentifier<TActivated>;\n\n  // constructor from binding to or toConstructor\n  implementationType: interfaces.Newable<TActivated> | TActivated | null;\n\n  // Cache used to allow singleton scope and BindingType.ConstantValue bindings\n  cache: TActivated | Promise<TActivated> | null;\n\n  // Cache used to allow BindingType.DynamicValue bindings\n  dynamicValue: interfaces.DynamicValue<TActivated> | null;\n\n  // The scope mode to be used\n  scope: interfaces.BindingScope;\n\n  // The kind of binding\n  type: interfaces.BindingType;\n\n  // A factory method used in BindingType.Factory bindings\n  factory: interfaces.FactoryCreator<unknown> | null;\n\n  // An async factory method used in BindingType.Provider bindings\n  provider: interfaces.ProviderCreator<unknown> | null;\n\n  // A constraint used to limit the contexts in which this binding is applicable\n  constraint: interfaces.ConstraintFunction;\n\n  // On activation handler (invoked just before an instance is added to cache and injected)\n  onActivation: interfaces.BindingActivation<TActivated> | null;\n\n  // On deactivation handler (invoked just before an instance is unbinded and removed from container)\n  onDeactivation: interfaces.BindingDeactivation<TActivated> | null;\n\n  constructor(serviceIdentifier: interfaces.ServiceIdentifier<TActivated>, scope: interfaces.BindingScope) {\n    this.id = id();\n    this.activated = false;\n    this.serviceIdentifier = serviceIdentifier;\n    this.scope = scope;\n    this.type = BindingTypeEnum.Invalid;\n    this.constraint = (request: interfaces.Request | null) => true;\n    this.implementationType = null;\n    this.cache = null;\n    this.factory = null;\n    this.provider = null;\n    this.onActivation = null;\n    this.onDeactivation = null;\n    this.dynamicValue = null;\n  }\n\n  clone(): interfaces.Binding<TActivated> {\n    const clone = new Binding(this.serviceIdentifier, this.scope);\n    clone.activated = clone.scope === BindingScopeEnum.Singleton ? this.activated : false;\n    clone.implementationType = this.implementationType;\n    clone.dynamicValue = this.dynamicValue;\n    clone.scope = this.scope;\n    clone.type = this.type;\n    clone.factory = this.factory;\n    clone.provider = this.provider;\n    clone.constraint = this.constraint;\n    clone.onActivation = this.onActivation;\n    clone.onDeactivation = this.onDeactivation;\n    clone.cache = this.cache;\n    return clone;\n  }\n}\n\nexport { Binding };\n"]}