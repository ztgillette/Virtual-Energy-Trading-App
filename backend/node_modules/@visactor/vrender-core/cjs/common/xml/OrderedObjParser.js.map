{"version":3,"sources":["../src/common/xml/OrderedObjParser.ts"],"names":[],"mappings":"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","file":"OrderedObjParser.js","sourcesContent":["// 参考fast-xml-parser\n// https://github.com/NaturalIntelligence/fast-xml-parser\n/**\n * MIT License\n\nCopyright (c) 2017 Amit Kumar Gupta\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n */\nimport type { X2jOptions } from './type';\nimport { getAllMatches } from './utils';\n\nclass XmlNode {\n  declare tagname: string;\n  declare child: any[];\n\n  constructor(tagname: string) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[':@'] = {}; //attributes map\n  }\n  add(key: string, val: string) {\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if (key === '__proto__') {\n      key = '#__proto__';\n    }\n    this.child.push({ [key]: val });\n  }\n  addChild(node: XmlNode) {\n    if (node.tagname === '__proto__') {\n      node.tagname = '#__proto__';\n    }\n    if (node[':@'] && Object.keys(node[':@']).length > 0) {\n      this.child.push({ [node.tagname]: node.child, [':@']: node[':@'] });\n    } else {\n      this.child.push({ [node.tagname]: node.child });\n    }\n  }\n}\n\nfunction findClosingIndex(xmlData: string, str: string, i: number, errMsg: string) {\n  const closingIndex = xmlData.indexOf(str, i);\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData\n * @param {number} i starting index\n * @returns\n */\nfunction tagExpWithClosingIndex(xmlData: string, i: number, closingChar = '>') {\n  let attrBoundary;\n  let tagExp = '';\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n      if (ch === attrBoundary) {\n        attrBoundary = '';\n      } //reset\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if (closingChar[1]) {\n        if (xmlData[index + 1] === closingChar[1]) {\n          return {\n            data: tagExp,\n            index: index\n          };\n        }\n      } else {\n        return {\n          data: tagExp,\n          index: index\n        };\n      }\n    } else if (ch === '\\t') {\n      ch = ' ';\n    }\n    tagExp += ch;\n  }\n}\n\nfunction readTagExp(xmlData: string, i: number, removeNSPrefix: boolean, closingChar = '>') {\n  const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);\n  if (!result) {\n    return;\n  }\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if (separatorIndex !== -1) {\n    //separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  const rawTagName = tagName;\n  if (removeNSPrefix) {\n    const colonIndex = tagName.indexOf(':');\n    if (colonIndex !== -1) {\n      tagName = tagName.substr(colonIndex + 1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName\n  };\n}\n\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nexport class OrderedObjParser {\n  declare options: Partial<X2jOptions>;\n  declare currentNode: XmlNode | null;\n  declare tagsNodeStack: XmlNode[];\n  declare docTypeEntities: Record<string, any>;\n\n  constructor(options: Partial<X2jOptions>) {\n    this.currentNode = null;\n    this.options = options;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n  }\n\n  protected addChild(currentNode: XmlNode, childNode: XmlNode, jPath: string) {\n    const result = childNode.tagname;\n    if (typeof result === 'string') {\n      childNode.tagname = result;\n      currentNode.addChild(childNode);\n    } else {\n      currentNode.addChild(childNode);\n    }\n  }\n\n  protected buildAttributesMap(attrStr: string, jPath: string, tagName: string) {\n    const attrs = {};\n    if (!attrStr) {\n      return;\n    }\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const attrName = matches[i][1];\n      const oldVal = matches[i][4];\n      const aName = attrName;\n      if (attrName) {\n        if (oldVal !== undefined) {\n          attrs[aName] = isNaN(oldVal) ? oldVal : Number(oldVal);\n        } else {\n          attrs[aName] = true;\n        }\n      }\n    }\n    return attrs;\n  }\n\n  parseXml(xmlData: string) {\n    // 判断xml的合法性\n    xmlData = xmlData.replace(/\\r\\n?/g, '\\n');\n    const xmlObj = new XmlNode('!xml');\n    let currentNode = xmlObj;\n    let textData = '';\n    let jPath = '';\n    for (let i = 0; i < xmlData.length; i++) {\n      const ch = xmlData[i];\n      if (ch === '<') {\n        if (xmlData[i + 1] === '/') {\n          const closeIndex = findClosingIndex(xmlData, '>', i, 'Closing Tag is not closed.');\n          const propIndex = jPath.lastIndexOf('.');\n          jPath = jPath.substring(0, propIndex);\n          currentNode = this.tagsNodeStack.pop();\n          if (currentNode && currentNode.child && textData) {\n            currentNode.child[currentNode.child.length - 1][':@'] &&\n              (currentNode.child[currentNode.child.length - 1][':@'].text = textData);\n          }\n          textData = '';\n          i = closeIndex;\n        } else if (xmlData[i + 1] === '?') {\n          const tagData = readTagExp(xmlData, i, false, '?>');\n          i = tagData.closeIndex + 1;\n        } else if (xmlData.substr(i + 1, 3) === '!--') {\n          const endIndex = findClosingIndex(xmlData, '-->', i + 4, 'Comment is not closed.');\n          i = endIndex;\n        } else {\n          const result = readTagExp(xmlData, i, false);\n          let tagName = result.tagName;\n          let tagExp = result.tagExp;\n          const attrExpPresent = result.attrExpPresent;\n          const closeIndex = result.closeIndex;\n          if (tagName !== xmlObj.tagname) {\n            jPath += jPath ? '.' + tagName : tagName;\n          }\n          if (tagExp.length > 0 && tagExp.lastIndexOf('/') === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === '/') {\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            const childNode = new XmlNode(tagName);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[':@'] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath);\n            jPath = jPath.substr(0, jPath.lastIndexOf('.'));\n          } else {\n            const childNode = new XmlNode(tagName);\n            this.tagsNodeStack.push(currentNode);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[':@'] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath);\n            currentNode = childNode;\n          }\n          textData = '';\n          i = closeIndex;\n        }\n      } else {\n        textData += xmlData[i];\n      }\n    }\n    return xmlObj.child;\n  }\n}\n"]}