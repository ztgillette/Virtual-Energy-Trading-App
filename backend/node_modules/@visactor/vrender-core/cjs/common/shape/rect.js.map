{"version":3,"sources":["../src/common/shape/rect.ts"],"names":[],"mappings":"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","file":"rect.js","sourcesContent":["import type { vec2, vec4 } from '@visactor/vutils';\nimport { isNumber, arrayEqual, pi, abs } from '@visactor/vutils';\nimport type { IContext2d, ICustomPath2D } from '../../interface';\n\nconst halfPi = pi / 2;\n\ntype IEdgeCb = (x1: number, y1: number, x2: number, y2: number) => void;\nexport function createRectPath(\n  path: ICustomPath2D | IContext2d,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  rectCornerRadius: number | number[],\n  // @since 0.22.0\n  roundCorner: boolean = true,\n  edgeCb?: IEdgeCb[]\n) {\n  // TODO 避免breakChange，旧版本的roundCorner位置是edgeCb\n  if (Array.isArray(roundCorner)) {\n    edgeCb = roundCorner;\n    roundCorner = true;\n  }\n  if (width < 0) {\n    x += width;\n    width = -width;\n  }\n  if (height < 0) {\n    y += height;\n    height = -height;\n  }\n  // 匹配cornerRadius\n  let cornerRadius: vec4;\n  if (isNumber(rectCornerRadius, true)) {\n    rectCornerRadius = abs(rectCornerRadius);\n    cornerRadius = [\n      <number>rectCornerRadius,\n      <number>rectCornerRadius,\n      <number>rectCornerRadius,\n      <number>rectCornerRadius\n    ];\n  } else if (Array.isArray(rectCornerRadius)) {\n    const cornerRadiusArr: number[] = rectCornerRadius as number[];\n    let cr0;\n    let cr1;\n    let cr2;\n    let cr3;\n    switch (cornerRadiusArr.length) {\n      case 0:\n        cornerRadius = [0, 0, 0, 0];\n        break;\n      case 1:\n        cr0 = abs(cornerRadiusArr[0]);\n        cornerRadius = [cr0, cr0, cr0, cr0];\n        break;\n      case 2:\n      case 3:\n        cr0 = abs(cornerRadiusArr[0]);\n        cr1 = abs(cornerRadiusArr[1]);\n        cornerRadius = [cr0, cr1, cr0, cr1];\n        break;\n      default:\n        cornerRadius = cornerRadiusArr as [number, number, number, number];\n        cornerRadius[0] = abs(cornerRadius[0]);\n        cornerRadius[1] = abs(cornerRadius[1]);\n        cornerRadius[2] = abs(cornerRadius[2]);\n        cornerRadius[3] = abs(cornerRadius[3]);\n        break;\n    }\n  } else {\n    cornerRadius = [0, 0, 0, 0];\n  }\n\n  // 当宽度小于0 或者 cornerRadius 极小时，不绘制 cornerRadius\n  if (width < 0 || cornerRadius[0] + cornerRadius[1] + cornerRadius[2] + cornerRadius[3] < 1e-12) {\n    return path.rect(x, y, width, height);\n  }\n\n  const [leftTop, rightTop, rightBottom, leftBottom]: [vec2, vec2, vec2, vec2] = [\n    [x, y],\n    [x + width, y],\n    [x + width, y + height],\n    [x, y + height]\n  ];\n  //\n  // *(leftTopPoint1)******************(rightTopPoint1)\n  // (leftTopPoint2)                  (rightTopPoint2)\n  // *                                *\n  // *                                *\n  // (leftBottomPoint2)               (rightBottomPoint2)\n  // *(leftBottomPoint1)***************(rightBottomPoint1)\n  //\n  const maxCornerRadius = Math.min(width / 2, height / 2);\n  const _cornerRadius: vec4 = [\n    Math.min(maxCornerRadius, cornerRadius[0]),\n    Math.min(maxCornerRadius, cornerRadius[1]),\n    Math.min(maxCornerRadius, cornerRadius[2]),\n    Math.min(maxCornerRadius, cornerRadius[3])\n  ];\n  const leftTopPoint1: vec2 = [leftTop[0] + _cornerRadius[0], leftTop[1]];\n  const leftTopPoint2: vec2 = [leftTop[0], leftTop[1] + _cornerRadius[0]];\n  const rightTopPoint1: vec2 = [rightTop[0] - _cornerRadius[1], rightTop[1]];\n  const rightTopPoint2: vec2 = [rightTop[0], rightTop[1] + _cornerRadius[1]];\n  const rightBottomPoint1: vec2 = [rightBottom[0] - _cornerRadius[2], rightBottom[1]];\n  const rightBottomPoint2: vec2 = [rightBottom[0], rightBottom[1] - _cornerRadius[2]];\n  const leftBottomPoint1: vec2 = [leftBottom[0] + _cornerRadius[3], leftBottom[1]];\n  const leftBottomPoint2: vec2 = [leftBottom[0], leftBottom[1] - _cornerRadius[3]];\n\n  path.moveTo(leftTopPoint1[0], leftTopPoint1[1]);\n\n  if (!roundCorner) {\n    // 上边\n    edgeCb && edgeCb[0]\n      ? edgeCb[0](leftTopPoint1[0], leftTopPoint1[1], rightTopPoint1[0], rightTopPoint1[1])\n      : path.lineTo(rightTopPoint1[0], rightTopPoint1[1]);\n    // 右边\n    edgeCb && edgeCb[1]\n      ? edgeCb[1](rightTopPoint1[0], rightTopPoint1[1], rightBottomPoint1[0], rightBottomPoint1[1])\n      : path.lineTo(rightBottomPoint1[0], rightBottomPoint1[1]);\n    // 下边\n    edgeCb && edgeCb[2]\n      ? edgeCb[2](rightBottomPoint1[0], rightBottomPoint1[1], leftBottomPoint1[0], leftBottomPoint1[1])\n      : path.lineTo(leftBottomPoint1[0], leftBottomPoint1[1]);\n\n    // 左边\n    edgeCb && edgeCb[2]\n      ? edgeCb[2](leftBottomPoint1[0], leftBottomPoint1[1], leftTopPoint1[0], leftTopPoint1[1])\n      : path.lineTo(leftTopPoint1[0], leftTopPoint1[1]);\n  } else {\n    // 上边\n    edgeCb && edgeCb[0]\n      ? edgeCb[0](leftTopPoint1[0], leftTopPoint1[1], rightTopPoint1[0], rightTopPoint1[1])\n      : path.lineTo(rightTopPoint1[0], rightTopPoint1[1]);\n    if (!arrayEqual(rightTopPoint1, rightTopPoint2)) {\n      // arc from rightTopPoint1 to rightTopPoint2\n      edgeCb && edgeCb[0] && path.moveTo(rightTopPoint1[0], rightTopPoint1[1]);\n      const centerX = rightTopPoint1[0];\n      const centerY = rightTopPoint1[1] + _cornerRadius[1];\n      path.arc(\n        centerX,\n        centerY,\n        _cornerRadius[1],\n        -halfPi,\n        0,\n        // Math.atan2(rightTopPoint1[1] - centerY, rightTopPoint1[0] - centerX),\n        // Math.atan2(rightTopPoint2[1] - centerY, rightTopPoint2[0] - centerX),\n        false\n      );\n      // path.arcTo(rightTop[0], rightTop[1], rightTopPoint2[0], rightTopPoint2[1], _cornerRadius[1]);\n    }\n\n    // 右边\n    edgeCb && edgeCb[1]\n      ? edgeCb[1](rightTopPoint2[0], rightTopPoint2[1], rightBottomPoint2[0], rightBottomPoint2[1])\n      : path.lineTo(rightBottomPoint2[0], rightBottomPoint2[1]);\n    if (!arrayEqual(rightBottomPoint1, rightBottomPoint2)) {\n      // arc from rightBottomPoint2 to rightTopPoint1\n      const centerX = rightBottomPoint2[0] - _cornerRadius[2];\n      const centerY = rightBottomPoint2[1];\n      edgeCb && edgeCb[1] && path.moveTo(rightBottomPoint2[0], rightBottomPoint2[1]);\n      path.arc(\n        centerX,\n        centerY,\n        _cornerRadius[2],\n        0,\n        halfPi,\n        // Math.atan2(rightBottomPoint2[1] - centerY, rightBottomPoint2[0] - centerX),\n        // Math.atan2(rightBottomPoint1[1] - centerY, rightBottomPoint1[0] - centerX),\n        false\n      );\n      // path.arcTo(rightBottom[0], rightBottom[1], rightBottomPoint1[0], rightBottomPoint1[1], _cornerRadius[2]);\n    }\n\n    edgeCb && edgeCb[2]\n      ? edgeCb[2](rightBottomPoint1[0], rightBottomPoint1[1], leftBottomPoint1[0], leftBottomPoint1[1])\n      : path.lineTo(leftBottomPoint1[0], leftBottomPoint1[1]);\n    if (!arrayEqual(leftBottomPoint1, leftBottomPoint2)) {\n      // arc from leftBottomPoint1 to leftBottomPoint2\n      const centerX = leftBottomPoint1[0];\n      const centerY = leftBottomPoint1[1] - _cornerRadius[3];\n      edgeCb && edgeCb[2] && path.moveTo(leftBottomPoint1[0], leftBottomPoint1[1]);\n      path.arc(\n        centerX,\n        centerY,\n        _cornerRadius[3],\n        halfPi,\n        pi,\n        // Math.atan2(leftBottomPoint1[1] - centerY, leftBottomPoint1[0] - centerX),\n        // Math.atan2(leftBottomPoint2[1] - centerY, leftBottomPoint2[0] - centerX),\n        false\n      );\n      // path.arcTo(leftBottom[0], leftBottom[1], leftBottomPoint2[0], leftBottomPoint2[1], _cornerRadius[3]);\n    }\n\n    edgeCb && edgeCb[3]\n      ? edgeCb[3](leftBottomPoint2[0], leftBottomPoint2[1], leftTopPoint2[0], leftTopPoint2[1])\n      : path.lineTo(leftTopPoint2[0], leftTopPoint2[1]);\n    if (!arrayEqual(leftTopPoint1, leftTopPoint2)) {\n      const centerX = leftTopPoint1[0];\n      const centerY = leftTopPoint1[1] + _cornerRadius[0];\n      edgeCb && edgeCb[3] && path.moveTo(leftTopPoint2[0], leftTopPoint2[1]);\n      path.arc(\n        centerX,\n        centerY,\n        _cornerRadius[0],\n        pi,\n        pi + halfPi,\n        // Math.atan2(leftTopPoint2[1] - centerY, leftTopPoint2[0] - centerX),\n        // Math.atan2(leftTopPoint1[1] - centerY, leftTopPoint1[0] - centerX) + Math.PI * 2,\n        false\n      );\n      // path.arcTo(leftTop[0], leftTop[1], leftTopPoint1[0], leftTopPoint1[1], _cornerRadius[0]);\n    }\n  }\n  !edgeCb && path.closePath();\n  return path;\n}\n"]}