{"version":3,"sources":["../src/common/inversify/annotation/inject_base.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAwC;AACxC,oDAA0C;AAC1C,8EAA6C;AAE7C,SAAS,uBAAuB,CAC9B,WAAmB,EACnB,gBAAiC,EACjC,GAAoB,EACpB,QAAkB;IAElB,MAAM,SAAS,GAAe,CAAC,QAAQ,CAAC,CAAC;IAEzC,IAAI,0BAA0B,GAAoD,EAAE,CAAC;IAErF,IAAK,0BAAe,CAAC,cAAc,CAAC,WAAW,EAAE,gBAAgB,CAAC,EAAE;QAClE,0BAA0B,GAAI,0BAAe,CAAC,WAAW,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;KAC1F;IAED,IAAI,uBAAuB,GAA2B,0BAA0B,CAAC,GAAa,CAAC,CAAC;IAEhG,IAAI,uBAAuB,KAAK,SAAS,EAAE;QACzC,uBAAuB,GAAG,EAAE,CAAC;KAC9B;IAGD,uBAAuB,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;IAC3C,0BAA0B,CAAC,GAAG,CAAC,GAAG,uBAAuB,CAAC;IACzD,0BAAe,CAAC,cAAc,CAAC,WAAW,EAAE,0BAA0B,EAAE,gBAAgB,CAAC,CAAC;AAC7F,CAAC;AAED,SAAS,YAAY,CACnB,gBAAiC,EACjC,aAA0C,EAC1C,cAAsB,EACtB,QAAkB;IAElB,uBAAuB,CAAC,sBAAM,EAAE,gBAAuC,EAAE,cAAc,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;AAChH,CAAC;AAED,SAAgB,qBAAqB,CAAC,QAAkB;IACtD,OAAO,CAAI,MAAuB,EAAE,SAA2B,EAAE,yBAAkC,EAAE,EAAE;QACrG,YAAY,CAAC,MAAM,EAAE,SAAS,EAAE,yBAAyB,EAAE,QAAQ,CAAC,CAAC;IACvE,CAAC,CAAC;AACJ,CAAC;AAJD,sDAIC;AAaD,SAAgB,UAAU,CAAC,WAAmB;IAC5C,OAAO,CAAc,iBAAsB,EAAE,EAAE;QAC7C,OAAO,CAAC,MAA0B,EAAE,SAA2B,EAAE,yBAAkC,EAAE,EAAE;YACrG,OAAO,qBAAqB,CAAC,IAAI,oBAAQ,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC,CACxE,MAAM,EACN,SAAS,EACT,yBAAyB,CAC1B,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAVD,gCAUC","file":"inject_base.js","sourcesContent":["import { Metadata } from '../meta-data';\nimport { TAGGED } from '../metadata_keys';\nimport Reflect from '../../Reflect-metadata';\n\nfunction _tagParameterOrProperty(\n  metadataKey: string,\n  annotationTarget: NewableFunction,\n  key: string | symbol,\n  metadata: Metadata\n) {\n  const metadatas: Metadata[] = [metadata];\n\n  let paramsOrPropertiesMetadata: Record<string | symbol, Metadata[] | undefined> = {};\n  // read metadata if available\n  if ((Reflect as any).hasOwnMetadata(metadataKey, annotationTarget)) {\n    paramsOrPropertiesMetadata = (Reflect as any).getMetadata(metadataKey, annotationTarget);\n  }\n\n  let paramOrPropertyMetadata: Metadata[] | undefined = paramsOrPropertiesMetadata[key as string];\n\n  if (paramOrPropertyMetadata === undefined) {\n    paramOrPropertyMetadata = [];\n  }\n\n  // set metadata\n  paramOrPropertyMetadata.push(...metadatas);\n  paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;\n  (Reflect as any).defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);\n}\n\nfunction tagParameter(\n  annotationTarget: DecoratorTarget,\n  parameterName: string | symbol | undefined,\n  parameterIndex: number,\n  metadata: Metadata\n) {\n  _tagParameterOrProperty(TAGGED, annotationTarget as ConstructorFunction, parameterIndex.toString(), metadata);\n}\n\nexport function createTaggedDecorator(metadata: Metadata) {\n  return <T>(target: DecoratorTarget, targetKey?: string | symbol, indexOrPropertyDescriptor?: number) => {\n    tagParameter(target, targetKey, indexOrPropertyDescriptor, metadata);\n  };\n}\n\ntype Prototype<T> = {\n  [Property in keyof T]: T[Property] extends NewableFunction ? T[Property] : T[Property] | undefined;\n} & { constructor: NewableFunction };\n\ninterface ConstructorFunction<T = Record<string, unknown>> {\n  new (...args: unknown[]): T;\n  prototype: Prototype<T>;\n}\n\nexport type DecoratorTarget<T = unknown> = ConstructorFunction<T> | Prototype<T>;\n\nexport function injectBase(metadataKey: string) {\n  return <T = unknown>(serviceIdentifier: any) => {\n    return (target: DecoratorTarget<T>, targetKey?: string | symbol, indexOrPropertyDescriptor?: number) => {\n      return createTaggedDecorator(new Metadata(metadataKey, serviceIdentifier))(\n        target,\n        targetKey,\n        indexOrPropertyDescriptor\n      );\n    };\n  };\n}\n"]}