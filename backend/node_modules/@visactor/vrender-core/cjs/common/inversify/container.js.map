{"version":3,"sources":["../src/common/inversify/container.ts"],"names":[],"mappings":"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","file":"container.js","sourcesContent":["import { Generator } from '../generator';\nimport { Binding } from './binding';\nimport type { interfaces } from './interfaces';\nimport { BindingScopeEnum, BindingTypeEnum } from './literal_types';\nimport { Metadata } from './meta-data';\nimport { INJECT_TAG, MULTI_INJECT_TAG, NAMED_TAG } from './metadata_keys';\nimport { MetadataReader } from './metadata_reader';\nimport { BindingToSyntax } from './syntax/binding_to_syntax';\n\ninterface IChildRequest {\n  injectIdentifier: any;\n  metadata: interfaces.Metadata<unknown>[];\n  bindings: Binding<unknown>[];\n}\n\ninterface GetArgs<T> {\n  avoidConstraints: boolean;\n  isMultiInject: boolean;\n  serviceIdentifier: interfaces.ServiceIdentifier<T>;\n  key: string | symbol;\n  value: any;\n}\n\nexport class Container {\n  id: number;\n  readonly options: interfaces.ContainerOptions;\n  private _bindingDictionary: Map<any, Binding<unknown>[]>;\n  private _metadataReader: interfaces.MetadataReader;\n\n  constructor(containerOptions?: interfaces.ContainerOptions) {\n    const options = containerOptions || {};\n    options.defaultScope = options.defaultScope || BindingScopeEnum.Transient;\n    // console.log(this);\n    this.options = options;\n    this.id = Generator.GenAutoIncrementId();\n    this._bindingDictionary = new Map();\n    this._metadataReader = new MetadataReader();\n  }\n\n  load(module: interfaces.ContainerModule) {\n    const getHelpers = this._getContainerModuleHelpersFactory();\n\n    const containerModuleHelpers = getHelpers(module.id);\n\n    module.registry(\n      containerModuleHelpers.bindFunction as interfaces.Bind,\n      containerModuleHelpers.unbindFunction,\n      containerModuleHelpers.isboundFunction,\n      containerModuleHelpers.rebindFunction as interfaces.Rebind\n    );\n  }\n\n  get<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>): T {\n    const getArgs = this._getNotAllArgs(serviceIdentifier, false);\n\n    return this._get<T>(getArgs) as T;\n  }\n\n  getAll<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>): T[] {\n    const getArgs = this._getAllArgs(serviceIdentifier);\n\n    return this._get<T>(getArgs) as T[];\n  }\n\n  getTagged<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>, key: string | number | symbol, value: unknown): T {\n    const getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\n\n    return this._get<T>(getArgs) as T;\n  }\n\n  getNamed<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>, named: string | number | symbol): T {\n    return this.getTagged<T>(serviceIdentifier, NAMED_TAG, named);\n  }\n\n  isBound(serviceIdentifier: interfaces.ServiceIdentifier<unknown>): boolean {\n    return this._bindingDictionary.has(serviceIdentifier);\n  }\n\n  // Registers a type binding\n  bind<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>): interfaces.BindingToSyntax<T> {\n    const scope = this.options.defaultScope;\n    const binding = new Binding<T>(serviceIdentifier, scope);\n    const list = this._bindingDictionary.get(serviceIdentifier) || [];\n    list.push(binding);\n    this._bindingDictionary.set(serviceIdentifier, list);\n    return new BindingToSyntax<T>(binding);\n  }\n\n  unbind(serviceIdentifier: interfaces.ServiceIdentifier): void {\n    this._bindingDictionary.delete(serviceIdentifier);\n  }\n\n  rebind<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>): interfaces.BindingToSyntax<T> {\n    this.unbind(serviceIdentifier);\n    return this.bind(serviceIdentifier);\n  }\n\n  private _getContainerModuleHelpersFactory() {\n    const setModuleId = (\n      bindingToSyntax: interfaces.BindingToSyntax<unknown>,\n      moduleId: interfaces.ContainerModuleBase['id']\n    ) => {\n      // TODO: Implement an internal type `_BindingToSyntax<T>` wherein this member\n      // can be public. Let `BindingToSyntax<T>` be the presentational type that\n      // depends on it, and does not expose this member as public.\n      (\n        bindingToSyntax as unknown as { _binding: { moduleId: interfaces.ContainerModuleBase['id'] } }\n      )._binding.moduleId = moduleId;\n    };\n\n    const getBindFunction =\n      <T>(moduleId: interfaces.ContainerModuleBase['id']) =>\n      (serviceIdentifier: interfaces.ServiceIdentifier) => {\n        const bindingToSyntax = this.bind(serviceIdentifier);\n        setModuleId(bindingToSyntax, moduleId);\n        return bindingToSyntax as BindingToSyntax<T>;\n      };\n\n    const getUnbindFunction = () => (serviceIdentifier: interfaces.ServiceIdentifier) => {\n      return this.unbind(serviceIdentifier);\n    };\n\n    const getUnbindAsyncFunction = () => (serviceIdentifier: interfaces.ServiceIdentifier) => {\n      return null as any;\n      // return this.unbindAsync(serviceIdentifier);\n    };\n\n    const getIsboundFunction = () => (serviceIdentifier: interfaces.ServiceIdentifier) => {\n      return this.isBound(serviceIdentifier);\n    };\n\n    const getRebindFunction =\n      <T = unknown>(moduleId: interfaces.ContainerModuleBase['id']) =>\n      (serviceIdentifier: interfaces.ServiceIdentifier) => {\n        const bindingToSyntax = this.rebind(serviceIdentifier);\n        setModuleId(bindingToSyntax, moduleId);\n        return bindingToSyntax as BindingToSyntax<T>;\n      };\n    return (mId: interfaces.ContainerModuleBase['id']) => ({\n      bindFunction: getBindFunction(mId),\n      isboundFunction: getIsboundFunction(),\n      rebindFunction: getRebindFunction(mId),\n      unbindFunction: getUnbindFunction(),\n      unbindAsyncFunction: getUnbindAsyncFunction()\n    });\n  }\n\n  private _getNotAllArgs<T>(\n    serviceIdentifier: interfaces.ServiceIdentifier<T>,\n    isMultiInject: boolean,\n    key?: string | number | symbol | undefined,\n    value?: unknown\n  ): any {\n    return {\n      avoidConstraints: false,\n      isMultiInject,\n      serviceIdentifier,\n      key,\n      value\n    };\n  }\n\n  private _getAllArgs<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>): any {\n    return {\n      avoidConstraints: true,\n      isMultiInject: true,\n      serviceIdentifier\n    };\n  }\n\n  private _get<T>(getArgs: GetArgs<T>): T | T[] {\n    const result: T[] = [];\n    const bindings = this._bindingDictionary.get(getArgs.serviceIdentifier).filter(b => {\n      return b.constraint(getArgs as any);\n    }) as Binding<T>[];\n    bindings.forEach(binding => {\n      result.push(this._resolveFromBinding<T>(binding));\n    });\n\n    return !getArgs.isMultiInject && result.length === 1 ? result[0] : result;\n  }\n\n  private _getChildRequest(binding: Binding<unknown>) {\n    const constr = binding.implementationType;\n    const { userGeneratedMetadata } = this._metadataReader.getConstructorMetadata(constr as any);\n    const keys = Object.keys(userGeneratedMetadata);\n    const arr = [];\n    for (let i = 0; i < keys.length; i++) {\n      const constructorArgsMetadata = userGeneratedMetadata[i];\n      const targetMetadataMap = {};\n      constructorArgsMetadata.forEach(md => {\n        targetMetadataMap[md.key] = md.value;\n      });\n      const metadata = {\n        inject: targetMetadataMap[INJECT_TAG],\n        multiInject: targetMetadataMap[MULTI_INJECT_TAG]\n      };\n      const injectIdentifier = metadata.inject || metadata.multiInject;\n      const target = {\n        serviceIdentifier: injectIdentifier,\n        constructorArgsMetadata\n      };\n      const bindings = (this._bindingDictionary.get(injectIdentifier) || []).filter(b => {\n        return b.constraint(target as any);\n      });\n      if (bindings.length) {\n        const request = {\n          injectIdentifier,\n          metadata: constructorArgsMetadata,\n          bindings: bindings\n        };\n\n        arr.push(request);\n      }\n    }\n\n    return arr;\n  }\n\n  private _resolveFromBinding<T>(binding: Binding<T>): T {\n    const result = this._getResolvedFromBinding<T>(binding);\n\n    this._saveToScope(binding, result);\n\n    return result;\n  }\n\n  private _getResolvedFromBinding<T>(binding: Binding<T>) {\n    let result: T;\n    switch (binding.type) {\n      case BindingTypeEnum.ConstantValue:\n      case BindingTypeEnum.Function:\n        result = binding.cache as T;\n        break;\n      case BindingTypeEnum.Instance:\n        result = this._resolveInstance<T>(binding, binding.implementationType as interfaces.Newable<T>);\n        break;\n      default:\n        result = binding.dynamicValue({ container: this } as any);\n    }\n\n    return result;\n  }\n\n  private _resolveInstance<T>(binding: Binding<T>, constr: interfaces.Newable<T>): T {\n    if (binding.activated) {\n      return binding.cache;\n    }\n\n    const childRequests = this._getChildRequest(binding);\n    return this._createInstance(constr, childRequests);\n  }\n\n  private _createInstance<T>(constr: interfaces.Newable<T>, childRequests: IChildRequest[]) {\n    if (childRequests.length) {\n      const resolved = this._resolveRequests(childRequests);\n      const obj = new constr(...resolved);\n      return obj;\n    }\n    const obj = new constr();\n    return obj;\n  }\n\n  private _resolveRequests(childRequests: IChildRequest[]): any[] {\n    return childRequests.map(request => {\n      return request.bindings.length > 1\n        ? request.bindings.map(binding => this._resolveFromBinding(binding))\n        : this._resolveFromBinding(request.bindings[0]);\n    });\n  }\n\n  private _saveToScope(binding: Binding<unknown>, result: any) {\n    if (binding.scope === BindingScopeEnum.Singleton) {\n      binding.cache = result;\n      binding.activated = true;\n    }\n  }\n}\n"]}