{"version":3,"sources":["../src/common/Reflect-metadata.ts"],"names":[],"mappings":"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","file":"Reflect-metadata.js","sourcesContent":["// @ts-nocheck\n/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nexport default (function (Reflect) {\n  // Metadata Proposal\n  // https://rbuckton.github.io/reflect-metadata/\n  (function (factory) {\n    const exporter = makeExporter(Reflect);\n    factory(exporter);\n    function makeExporter(target, previous) {\n      return function (key, value) {\n        if (typeof target[key] !== 'function') {\n          Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n        }\n        if (previous) {\n          previous(key, value);\n        }\n      };\n    }\n  })(function (exporter) {\n    const hasOwn = Object.prototype.hasOwnProperty;\n    // feature test for Symbol support\n    const supportsSymbol = typeof Symbol === 'function';\n    const toPrimitiveSymbol =\n      supportsSymbol && typeof Symbol.toPrimitive !== 'undefined' ? Symbol.toPrimitive : '@@toPrimitive';\n    const iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== 'undefined' ? Symbol.iterator : '@@iterator';\n    const supportsCreate = typeof Object.create === 'function'; // feature test for Object.create support\n    const supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n    const downLevel = !supportsCreate && !supportsProto;\n    const HashMap = {\n      // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n      create: supportsCreate\n        ? function () {\n            return MakeDictionary(Object.create(null));\n          }\n        : supportsProto\n        ? function () {\n            return MakeDictionary({ __proto__: null });\n          }\n        : function () {\n            return MakeDictionary({});\n          },\n      has: downLevel\n        ? function (map, key) {\n            return hasOwn.call(map, key);\n          }\n        : function (map, key) {\n            return key in map;\n          },\n      get: downLevel\n        ? function (map, key) {\n            return hasOwn.call(map, key) ? map[key] : undefined;\n          }\n        : function (map, key) {\n            return map[key];\n          }\n    };\n    // Load global or shim versions of Map, Set, and WeakMap\n    const functionPrototype = Object.getPrototypeOf(Function);\n    const usePolyfill =\n      typeof process === 'object' && process.env && process.env.REFLECT_METADATA_USE_MAP_POLYFILL === 'true';\n    const _Map = Map;\n    const _Set = Set;\n    const _WeakMap = WeakMap;\n    // [[Metadata]] internal slot\n    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n    const Metadata = new _WeakMap();\n    /**\n     * Applies a set of decorators to a property of a target object.\n     * @param decorators An array of decorators.\n     * @param target The target object.\n     * @param propertyKey (Optional) The property key to decorate.\n     * @param attributes (Optional) The property descriptor for the target key.\n     * @remarks Decorators are applied in reverse order.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     Example = Reflect.decorate(decoratorsArray, Example);\n     *\n     *     // property (on constructor)\n     *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     Object.defineProperty(Example, \"staticMethod\",\n     *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n     *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n     *\n     *     // method (on prototype)\n     *     Object.defineProperty(Example.prototype, \"method\",\n     *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n     *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n     *\n     */\n    // function decorate(decorators, target, propertyKey, attributes) {\n    //   if (!IsUndefined(propertyKey)) {\n    //     if (!IsArray(decorators)) throw new TypeError();\n    //     if (!IsObject(target)) throw new TypeError();\n    //     if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();\n    //     if (IsNull(attributes)) attributes = undefined;\n    //     propertyKey = ToPropertyKey(propertyKey);\n    //     return DecorateProperty(decorators, target, propertyKey, attributes);\n    //   } else {\n    //     if (!IsArray(decorators)) throw new TypeError();\n    //     if (!IsConstructor(target)) throw new TypeError();\n    //     return DecorateConstructor(decorators, target);\n    //   }\n    // }\n    // exporter('decorate', decorate);\n    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n    /**\n     * A default metadata decorator factory that can be used on a class, class member, or parameter.\n     * @param metadataKey The key for the metadata entry.\n     * @param metadataValue The value for the metadata entry.\n     * @returns A decorator function.\n     * @remarks\n     * If `metadataKey` is already defined for the target and target key, the\n     * metadataValue for that key will be overwritten.\n     * @example\n     *\n     *     // constructor\n     *     @Reflect.metadata(key, value)\n     *     class Example {\n     *     }\n     *\n     *     // property (on constructor, TypeScript only)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         static staticProperty;\n     *     }\n     *\n     *     // property (on prototype, TypeScript only)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         property;\n     *     }\n     *\n     *     // method (on constructor)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         static staticMethod() { }\n     *     }\n     *\n     *     // method (on prototype)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         method() { }\n     *     }\n     *\n     */\n    // function metadata(metadataKey, metadataValue) {\n    //   function decorator(target, propertyKey) {\n    //     if (!IsObject(target)) throw new TypeError();\n    //     if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();\n    //     OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n    //   }\n    //   return decorator;\n    // }\n    // exporter('metadata', metadata);\n    /**\n     * Define a unique metadata entry on the target.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param metadataValue A value that contains attached metadata.\n     * @param target The target object on which to define metadata.\n     * @param propertyKey (Optional) The property key for the target.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n     *\n     *     // property (on constructor)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n     *\n     *     // decorator factory as metadata-producing annotation.\n     *     function MyAnnotation(options): Decorator {\n     *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n     *     }\n     *\n     */\n    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n      if (!IsObject(target)) {\n        throw new TypeError();\n      }\n      // if (!IsUndefined(propertyKey)) {\n      //   propertyKey = ToPropertyKey(propertyKey);\n      // }\n      return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n    }\n    exporter('defineMetadata', defineMetadata);\n    /**\n     * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n    function hasMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) {\n        throw new TypeError();\n      }\n      if (!IsUndefined(propertyKey)) {\n        propertyKey = ToPropertyKey(propertyKey);\n      }\n      return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n    }\n    exporter('hasMetadata', hasMetadata);\n    /**\n     * Gets a value indicating whether the target object has the provided metadata key defined.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n    function hasOwnMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) {\n        throw new TypeError();\n      }\n      if (!IsUndefined(propertyKey)) {\n        propertyKey = ToPropertyKey(propertyKey);\n      }\n      return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n    }\n    exporter('hasOwnMetadata', hasOwnMetadata);\n    /**\n     * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n    function getMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) {\n        throw new TypeError();\n      }\n      if (!IsUndefined(propertyKey)) {\n        propertyKey = ToPropertyKey(propertyKey);\n      }\n      return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n    }\n    exporter('getMetadata', getMetadata);\n    /**\n     * Gets the metadata value for the provided metadata key on the target object.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n    // function getOwnMetadata(metadataKey, target, propertyKey) {\n    //   if (!IsObject(target)) throw new TypeError();\n    //   if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n    //   return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n    // }\n    // exporter('getOwnMetadata', getOwnMetadata);\n    /**\n     * Gets the metadata keys defined on the target object or its prototype chain.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns An array of unique metadata keys.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getMetadataKeys(Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n     *\n     */\n    // function getMetadataKeys(target, propertyKey) {\n    //   if (!IsObject(target)) throw new TypeError();\n    //   if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n    //   return OrdinaryMetadataKeys(target, propertyKey);\n    // }\n    // exporter('getMetadataKeys', getMetadataKeys);\n    /**\n     * Gets the unique metadata keys defined on the target object.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns An array of unique metadata keys.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getOwnMetadataKeys(Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n     *\n     */\n    // function getOwnMetadataKeys(target, propertyKey) {\n    //   if (!IsObject(target)) throw new TypeError();\n    //   if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n    //   return OrdinaryOwnMetadataKeys(target, propertyKey);\n    // }\n    // exporter('getOwnMetadataKeys', getOwnMetadataKeys);\n    /**\n     * Deletes the metadata entry from the target object with the provided key.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n    // function deleteMetadata(metadataKey, target, propertyKey) {\n    //   if (!IsObject(target)) throw new TypeError();\n    //   if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n    //   var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n    //   if (IsUndefined(metadataMap)) return false;\n    //   if (!metadataMap.delete(metadataKey)) return false;\n    //   if (metadataMap.size > 0) return true;\n    //   var targetMetadata = Metadata.get(target);\n    //   targetMetadata.delete(propertyKey);\n    //   if (targetMetadata.size > 0) return true;\n    //   Metadata.delete(target);\n    //   return true;\n    // }\n    // exporter('deleteMetadata', deleteMetadata);\n    // function DecorateConstructor(decorators, target) {\n    //   for (var i = decorators.length - 1; i >= 0; --i) {\n    //     var decorator = decorators[i];\n    //     var decorated = decorator(target);\n    //     if (!IsUndefined(decorated) && !IsNull(decorated)) {\n    //       if (!IsConstructor(decorated)) throw new TypeError();\n    //       target = decorated;\n    //     }\n    //   }\n    //   return target;\n    // }\n    // function DecorateProperty(decorators, target, propertyKey, descriptor) {\n    //   for (var i = decorators.length - 1; i >= 0; --i) {\n    //     var decorator = decorators[i];\n    //     var decorated = decorator(target, propertyKey, descriptor);\n    //     if (!IsUndefined(decorated) && !IsNull(decorated)) {\n    //       if (!IsObject(decorated)) throw new TypeError();\n    //       descriptor = decorated;\n    //     }\n    //   }\n    //   return descriptor;\n    // }\n    function GetOrCreateMetadataMap(O, P, Create) {\n      // console.count('GetOrCreateMetadataMap');\n      let targetMetadata = Metadata.get(O);\n      if (IsUndefined(targetMetadata)) {\n        if (!Create) {\n          return undefined;\n        }\n        targetMetadata = new _Map();\n        Metadata.set(O, targetMetadata);\n      }\n      let metadataMap = targetMetadata.get(P);\n      if (IsUndefined(metadataMap)) {\n        if (!Create) {\n          return undefined;\n        }\n        metadataMap = new _Map();\n        targetMetadata.set(P, metadataMap);\n      }\n      return metadataMap;\n    }\n    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\n      const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n      if (hasOwn) {\n        return true;\n      }\n      const parent = OrdinaryGetPrototypeOf(O);\n      if (!IsNull(parent)) {\n        return OrdinaryHasMetadata(MetadataKey, parent, P);\n      }\n      return false;\n    }\n    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n      const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n      if (IsUndefined(metadataMap)) {\n        return false;\n      }\n      return ToBoolean(metadataMap.has(MetadataKey));\n    }\n    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\n      const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n      if (hasOwn) {\n        return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n      }\n      const parent = OrdinaryGetPrototypeOf(O);\n      if (!IsNull(parent)) {\n        return OrdinaryGetMetadata(MetadataKey, parent, P);\n      }\n      return undefined;\n    }\n    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n      const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n      if (IsUndefined(metadataMap)) {\n        return undefined;\n      }\n      return metadataMap.get(MetadataKey);\n    }\n    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n      const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n      metadataMap.set(MetadataKey, MetadataValue);\n    }\n    // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n    // function OrdinaryMetadataKeys(O, P) {\n    //   var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n    //   var parent = OrdinaryGetPrototypeOf(O);\n    //   if (parent === null) return ownKeys;\n    //   var parentKeys = OrdinaryMetadataKeys(parent, P);\n    //   if (parentKeys.length <= 0) return ownKeys;\n    //   if (ownKeys.length <= 0) return parentKeys;\n    //   var set = new _Set();\n    //   var keys = [];\n    //   for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n    //     var key = ownKeys_1[_i];\n    //     var hasKey = set.has(key);\n    //     if (!hasKey) {\n    //       set.add(key);\n    //       keys.push(key);\n    //     }\n    //   }\n    //   for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n    //     var key = parentKeys_1[_a];\n    //     var hasKey = set.has(key);\n    //     if (!hasKey) {\n    //       set.add(key);\n    //       keys.push(key);\n    //     }\n    //   }\n    //   return keys;\n    // }\n    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n    // function OrdinaryOwnMetadataKeys(O, P) {\n    //   var keys = [];\n    //   var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n    //   if (IsUndefined(metadataMap)) return keys;\n    //   var keysObj = metadataMap.keys();\n    //   var iterator = GetIterator(keysObj);\n    //   var k = 0;\n    //   while (true) {\n    //     var next = IteratorStep(iterator);\n    //     if (!next) {\n    //       keys.length = k;\n    //       return keys;\n    //     }\n    //     var nextValue = IteratorValue(next);\n    //     try {\n    //       keys[k] = nextValue;\n    //     } catch (e) {\n    //       try {\n    //         IteratorClose(iterator);\n    //       } finally {\n    //         throw e;\n    //       }\n    //     }\n    //     k++;\n    //   }\n    // }\n    // 6 ECMAScript Data Typ0es and Values\n    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n    function Type(x) {\n      if (x === null) {\n        return 1 /* Null */;\n      }\n      switch (typeof x) {\n        case 'undefined':\n          return 0 /* Undefined */;\n        case 'boolean':\n          return 2 /* Boolean */;\n        case 'string':\n          return 3 /* String */;\n        case 'symbol':\n          return 4 /* Symbol */;\n        case 'number':\n          return 5 /* Number */;\n        case 'object':\n          return x === null ? 1 /* Null */ : 6 /* Object */;\n        default:\n          return 6 /* Object */;\n      }\n    }\n    // 6.1.1 The Undefined Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n    function IsUndefined(x) {\n      return x === undefined;\n    }\n    // 6.1.2 The Null Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n    function IsNull(x) {\n      return x === null;\n    }\n    // 6.1.5 The Symbol Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n    function IsSymbol(x) {\n      return typeof x === 'symbol';\n    }\n    // 6.1.7 The Object Type\n    // https://tc39.github.io/ecma262/#sec-object-type\n    function IsObject(x) {\n      return typeof x === 'object' ? x !== null : typeof x === 'function';\n    }\n    // 7.1 Type Conversion\n    // https://tc39.github.io/ecma262/#sec-type-conversion\n    // 7.1.1 ToPrimitive(input [, PreferredType])\n    // https://tc39.github.io/ecma262/#sec-toprimitive\n    function ToPrimitive(input, PreferredType) {\n      switch (Type(input)) {\n        case 0 /* Undefined */:\n          return input;\n        case 1 /* Null */:\n          return input;\n        case 2 /* Boolean */:\n          return input;\n        case 3 /* String */:\n          return input;\n        case 4 /* Symbol */:\n          return input;\n        case 5 /* Number */:\n          return input;\n      }\n      const hint =\n        PreferredType === 3 /* String */ ? 'string' : PreferredType === 5 /* Number */ ? 'number' : 'default';\n      const exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n      if (exoticToPrim !== undefined) {\n        const result = exoticToPrim.call(input, hint);\n        if (IsObject(result)) {\n          throw new TypeError();\n        }\n        return result;\n      }\n      return OrdinaryToPrimitive(input, hint === 'default' ? 'number' : hint);\n    }\n    // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n    function OrdinaryToPrimitive(O, hint) {\n      if (hint === 'string') {\n        const toString_1 = O.toString;\n        if (IsCallable(toString_1)) {\n          const result = toString_1.call(O);\n          if (!IsObject(result)) {\n            return result;\n          }\n        }\n        const valueOf = O.valueOf;\n        if (IsCallable(valueOf)) {\n          const result = valueOf.call(O);\n          if (!IsObject(result)) {\n            return result;\n          }\n        }\n      } else {\n        const valueOf = O.valueOf;\n        if (IsCallable(valueOf)) {\n          const result = valueOf.call(O);\n          if (!IsObject(result)) {\n            return result;\n          }\n        }\n        const toString_2 = O.toString;\n        if (IsCallable(toString_2)) {\n          const result = toString_2.call(O);\n          if (!IsObject(result)) {\n            return result;\n          }\n        }\n      }\n      throw new TypeError();\n    }\n    // 7.1.2 ToBoolean(argument)\n    // https://tc39.github.io/ecma262/2016/#sec-toboolean\n    function ToBoolean(argument) {\n      return !!argument;\n    }\n    // 7.1.12 ToString(argument)\n    // https://tc39.github.io/ecma262/#sec-tostring\n    function ToString(argument) {\n      return '' + argument;\n    }\n    // 7.1.14 ToPropertyKey(argument)\n    // https://tc39.github.io/ecma262/#sec-topropertykey\n    function ToPropertyKey(argument) {\n      const key = ToPrimitive(argument, 3 /* String */);\n      if (IsSymbol(key)) {\n        return key;\n      }\n      return ToString(key);\n    }\n    // 7.2 Testing and Comparison Operations\n    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n    // 7.2.2 IsArray(argument)\n    // https://tc39.github.io/ecma262/#sec-isarray\n    // function IsArray(argument) {\n    //   return Array.isArray\n    //     ? Array.isArray(argument)\n    //     : argument instanceof Object\n    //     ? argument instanceof Array\n    //     : Object.prototype.toString.call(argument) === '[object Array]';\n    // }\n    // 7.2.3 IsCallable(argument)\n    // https://tc39.github.io/ecma262/#sec-iscallable\n    function IsCallable(argument) {\n      // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n      return typeof argument === 'function';\n    }\n    // 7.2.4 IsConstructor(argument)\n    // https://tc39.github.io/ecma262/#sec-isconstructor\n    // function IsConstructor(argument) {\n    //   // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n    //   return typeof argument === 'function';\n    // }\n    // 7.2.7 IsPropertyKey(argument)\n    // https://tc39.github.io/ecma262/#sec-ispropertykey\n    // function IsPropertyKey(argument) {\n    //   switch (Type(argument)) {\n    //     case 3 /* String */:\n    //       return true;\n    //     case 4 /* Symbol */:\n    //       return true;\n    //     default:\n    //       return false;\n    //   }\n    // }\n    // 7.3 Operations on Objects\n    // https://tc39.github.io/ecma262/#sec-operations-on-objects\n    // 7.3.9 GetMethod(V, P)\n    // https://tc39.github.io/ecma262/#sec-getmethod\n    function GetMethod(V, P) {\n      const func = V[P];\n      if (func === undefined || func === null) {\n        return undefined;\n      }\n      if (!IsCallable(func)) {\n        throw new TypeError();\n      }\n      return func;\n    }\n    // 7.4 Operations on Iterator Objects\n    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n    // function GetIterator(obj) {\n    //   var method = GetMethod(obj, iteratorSymbol);\n    //   if (!IsCallable(method)) throw new TypeError(); // from Call\n    //   var iterator = method.call(obj);\n    //   if (!IsObject(iterator)) throw new TypeError();\n    //   return iterator;\n    // }\n    // // 7.4.4 IteratorValue(iterResult)\n    // // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n    // function IteratorValue(iterResult) {\n    //   return iterResult.value;\n    // }\n    // // 7.4.5 IteratorStep(iterator)\n    // // https://tc39.github.io/ecma262/#sec-iteratorstep\n    // function IteratorStep(iterator) {\n    //   var result = iterator.next();\n    //   return result.done ? false : result;\n    // }\n    // // 7.4.6 IteratorClose(iterator, completion)\n    // // https://tc39.github.io/ecma262/#sec-iteratorclose\n    // function IteratorClose(iterator) {\n    //   var f = iterator['return'];\n    //   if (f) f.call(iterator);\n    // }\n    // 9.1 Ordinary Object Internal Methods and Internal Slots\n    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n    // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n    function OrdinaryGetPrototypeOf(O) {\n      const proto = Object.getPrototypeOf(O);\n      if (typeof O !== 'function' || O === functionPrototype) {\n        return proto;\n      }\n      // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n      // Try to determine the superclass constructor. Compatible implementations\n      // must either set __proto__ on a subclass constructor to the superclass constructor,\n      // or ensure each class has a valid `constructor` property on its prototype that\n      // points back to the constructor.\n      // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n      // This is the case when in ES6 or when using __proto__ in a compatible browser.\n      if (proto !== functionPrototype) {\n        return proto;\n      }\n      // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n      const prototype = O.prototype;\n      const prototypeProto = prototype && Object.getPrototypeOf(prototype);\n      if (prototypeProto == null || prototypeProto === Object.prototype) {\n        return proto;\n      }\n      // If the constructor was not a function, then we cannot determine the heritage.\n      const constructor = prototypeProto.constructor;\n      if (typeof constructor !== 'function') {\n        return proto;\n      }\n      // If we have some kind of self-reference, then we cannot determine the heritage.\n      if (constructor === O) {\n        return proto;\n      }\n      // we have a pretty good guess at the heritage.\n      return constructor;\n    }\n    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n    function MakeDictionary(obj) {\n      obj.__ = undefined;\n      delete obj.__;\n      return obj;\n    }\n  });\n\n  return Reflect;\n})({});\n"]}