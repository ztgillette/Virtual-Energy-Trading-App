{"version":3,"sources":["../src/color-string/interpolate.ts"],"names":[],"mappings":"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","file":"interpolate.js","sourcesContent":["import { ColorStore, ColorType } from './store';\nimport type { IGradientColor, ILinearGradient, IRadialGradient, IConicalGradient } from '../interface';\nimport { isArray, isNumber } from '@visactor/vutils';\n\nfunction colorArrayToString(\n  color: string | IGradientColor | [number, number, number, number],\n  alphaChannel: boolean = false\n) {\n  if (Array.isArray(color) && isNumber(color[0])) {\n    return alphaChannel\n      ? `rgb(${Math.round(color[0])},${Math.round(color[1])},${Math.round(color[2])},${color[3].toFixed(2)})`\n      : `rgb(${Math.round(color[0])},${Math.round(color[1])},${Math.round(color[2])})`;\n  }\n  return color;\n}\n\nexport function interpolateColor(\n  from: [number, number, number, number] | [string, string, string, string] | string | IGradientColor,\n  to: [number, number, number, number] | [string, string, string, string] | string | IGradientColor,\n  ratio: number,\n  alphaChannel: boolean,\n  cb?: (fromArray: [number, number, number, number], toArray: [number, number, number, number]) => void\n): false | string | IGradientColor | string[] {\n  if ((Array.isArray(from) && !isNumber(from[0])) || (Array.isArray(to) && !isNumber(to[0]))) {\n    // 待性能优化\n    const out: string[] = new Array(4).fill(0).map((_, index) => {\n      return _interpolateColor(\n        isArray(from) ? ((from[index] ?? from[0]) as string) : from,\n        isArray(to) ? ((to[index] ?? to[0]) as string) : to,\n        ratio,\n        alphaChannel\n      ) as string;\n    });\n    return out;\n    // cb && cb(from!, to!);\n  }\n  return _interpolateColor(from as any, to as any, ratio, alphaChannel, cb);\n}\n\nexport function _interpolateColor(\n  from: [number, number, number, number] | string | IGradientColor,\n  to: [number, number, number, number] | string | IGradientColor,\n  ratio: number,\n  alphaChannel: boolean,\n  cb?: (fromArray: [number, number, number, number], toArray: [number, number, number, number]) => void\n): false | string | IGradientColor | string[] {\n  if (!(from && to)) {\n    return (from && colorArrayToString(from)) || (to && colorArrayToString(to)) || (false as any);\n  }\n  let fromArray: [number, number, number, number];\n  let toArray: [number, number, number, number];\n  let fromGradient: boolean = false;\n  let toGradient: boolean = false;\n  if (Array.isArray(from)) {\n    fromArray = from as [number, number, number, number];\n  } else if (typeof from === 'string') {\n    fromArray = ColorStore.Get(from, ColorType.Color255);\n  } else {\n    fromGradient = true;\n  }\n  if (Array.isArray(to)) {\n    toArray = to as [number, number, number, number];\n  } else if (typeof to === 'string') {\n    toArray = ColorStore.Get(to, ColorType.Color255);\n  } else {\n    toGradient = true;\n  }\n  if (fromGradient !== toGradient) {\n    // 纯色到渐变色，那就将纯色转成渐变色\n    const gradient: IGradientColor = (fromGradient ? from : to) as IGradientColor;\n    const pure = (fromGradient ? to : from) as string | [number, number, number, number];\n    const gradientFromPure: IGradientColor = {\n      ...gradient,\n      stops: gradient.stops.map(v => ({ ...v, color: colorArrayToString(pure) as string }))\n    };\n    return fromGradient\n      ? interpolateColor(gradient, gradientFromPure, ratio, alphaChannel, cb)\n      : interpolateColor(gradientFromPure, gradient, ratio, alphaChannel, cb);\n  }\n\n  if (fromGradient) {\n    if ((from as IGradientColor).gradient === (to as IGradientColor).gradient) {\n      const fc: IGradientColor = from as IGradientColor;\n      const tc: IGradientColor = to as IGradientColor;\n      // 渐变色插值，只支持相同数量stopColor的插值，并且认为当前的stopColor数量是和from、to相同\n      const fromStops = fc.stops;\n      const toStops = tc.stops;\n      if (fromStops.length !== toStops.length) {\n        return false;\n      }\n      if (fc.gradient === 'linear') {\n        return interpolateGradientLinearColor(fc, tc as ILinearGradient, ratio);\n      } else if (fc.gradient === 'radial') {\n        return interpolateGradientRadialColor(fc, tc as IRadialGradient, ratio);\n      } else if (fc.gradient === 'conical') {\n        return interpolateGradientConicalColor(fc, tc as IConicalGradient, ratio);\n      }\n    }\n    return false;\n  }\n  cb && cb(fromArray!, toArray!);\n  const result = interpolatePureColorArray(fromArray!, toArray!, ratio);\n  return colorArrayToString(result, alphaChannel) as any;\n}\n\nexport function interpolateGradientLinearColor(\n  fc: ILinearGradient,\n  tc: ILinearGradient,\n  ratio: number\n): false | ILinearGradient {\n  const fStops = fc.stops;\n  const tStops = tc.stops;\n  const color: ILinearGradient = {\n    gradient: 'linear',\n    x0: fc.x0 + (tc.x0 - fc.x0) * ratio,\n    x1: fc.x1 + (tc.x1 - fc.x1) * ratio,\n    y0: fc.y0 + (tc.y0 - fc.y0) * ratio,\n    y1: fc.y1 + (tc.y1 - fc.y1) * ratio,\n    stops: new Array(fStops.length).fill(0).map((_, i) => {\n      return {\n        color: colorStringInterpolationToStr(fStops[i].color, tStops[i].color, ratio),\n        offset: fStops[i].offset + (tStops[i].offset - fStops[i].offset) * ratio\n      };\n    })\n  };\n  return color;\n}\n\nexport function interpolateGradientRadialColor(\n  fc: IRadialGradient,\n  tc: IRadialGradient,\n  ratio: number\n): false | IRadialGradient {\n  const fStops = fc.stops;\n  const tStops = tc.stops;\n  const color: IRadialGradient = {\n    gradient: 'radial',\n    x0: fc.x0 + (tc.x0 - fc.x0) * ratio,\n    x1: fc.x1 + (tc.x1 - fc.x1) * ratio,\n    y0: fc.y0 + (tc.y0 - fc.y0) * ratio,\n    y1: fc.y1 + (tc.y1 - fc.y1) * ratio,\n    r0: fc.r0 + (tc.r0 - fc.r0) * ratio,\n    r1: fc.r1 + (tc.r1 - fc.r1) * ratio,\n    stops: new Array(fStops.length).fill(0).map((_, i) => {\n      return {\n        color: colorStringInterpolationToStr(fStops[i].color, tStops[i].color, ratio),\n        offset: fStops[i].offset + (tStops[i].offset - fStops[i].offset) * ratio\n      };\n    })\n  };\n  return color;\n}\n\nexport function interpolateGradientConicalColor(\n  fc: IConicalGradient,\n  tc: IConicalGradient,\n  ratio: number\n): false | IConicalGradient {\n  const fStops = fc.stops;\n  const tStops = tc.stops;\n  const color: IConicalGradient = {\n    gradient: 'conical',\n    startAngle: fc.startAngle + (tc.startAngle - fc.startAngle) * ratio,\n    endAngle: fc.endAngle + (tc.endAngle - fc.endAngle) * ratio,\n    x: fc.x + (tc.x - fc.x) * ratio,\n    y: fc.y + (tc.y - fc.y) * ratio,\n    stops: new Array(fStops.length).fill(0).map((_, i) => {\n      return {\n        color: colorStringInterpolationToStr(fStops[i].color, tStops[i].color, ratio),\n        offset: fStops[i].offset + (tStops[i].offset - fStops[i].offset) * ratio\n      };\n    })\n  };\n  return color;\n}\n\nexport function interpolatePureColorArray(\n  from: [number, number, number, number],\n  to: [number, number, number, number],\n  ratio: number\n): [number, number, number, number] {\n  return [\n    from[0] + (to[0] - from[0]) * ratio,\n    from[1] + (to[1] - from[1]) * ratio,\n    from[2] + (to[2] - from[2]) * ratio,\n    from[3] + (to[3] - from[3]) * ratio\n  ];\n}\nexport function interpolatePureColorArrayToStr(\n  from: [number, number, number, number],\n  to: [number, number, number, number],\n  ratio: number\n): string {\n  // eslint-disable-next-line max-len\n  return `rgba(${from[0] + (to[0] - from[0]) * ratio},${from[1] + (to[1] - from[1]) * ratio},${\n    from[2] + (to[2] - from[2]) * ratio\n  },${from[3] + (to[3] - from[3]) * ratio})`;\n}\n\nconst _fromColorRGB: [number, number, number, number] = [0, 0, 0, 0];\nconst _toColorRGB: [number, number, number, number] = [0, 0, 0, 0];\nexport function colorStringInterpolationToStr(fromColor: string, toColor: string, ratio: number): string {\n  ColorStore.Get(fromColor, ColorType.Color255, _fromColorRGB);\n  ColorStore.Get(toColor, ColorType.Color255, _toColorRGB);\n  return `rgba(${Math.round(_fromColorRGB[0] + (_toColorRGB[0] - _fromColorRGB[0]) * ratio)},${Math.round(\n    _fromColorRGB[1] + (_toColorRGB[1] - _fromColorRGB[1]) * ratio\n  )},${Math.round(_fromColorRGB[2] + (_toColorRGB[2] - _fromColorRGB[2]) * ratio)},${\n    _fromColorRGB[3] + (_toColorRGB[3] - _fromColorRGB[3]) * ratio\n  })`;\n}\n"]}