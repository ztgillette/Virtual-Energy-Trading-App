{"version":3,"sources":["../src/canvas/empty-context.ts"],"names":[],"mappings":"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","file":"empty-context.js","sourcesContent":["import type { IMatrix } from '@visactor/vutils';\nimport { Matrix } from '@visactor/vutils';\nimport { injectable } from '../common/inversify-lite';\nimport type {\n  ICanvas,\n  ICommonStyleParams,\n  IContext2d,\n  ISetCommonStyleParams,\n  ISetStrokeStyleParams,\n  IStrokeStyleParams,\n  IConicalGradientData,\n  ITextStyleParams\n} from '../interface';\nimport { contain, containStroke } from './util';\nimport { CustomPath2D } from '../common/custom-path2d';\nimport { getScaledStroke } from '../common/canvas-utils';\nimport { matrixAllocate } from '../allocator/matrix-allocate';\n/**\n * 部分源码参考konva\n * MIT License\n\n  Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)\n  Modified work Copyright (C) 2014 - present by Anton Lavrenov (Konva)\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\n\n// https://github.com/konvajs/konva/blob/master/src/Context.ts\nconst initMatrix = new Matrix(1, 0, 0, 1, 0, 0);\nconst globalPoint = { x: 0, y: 0 };\n\n@injectable()\nexport class EmptyContext2d implements IContext2d {\n  declare path: CustomPath2D;\n  declare canvas: null;\n  declare stack: Matrix[];\n  protected declare matrix: Matrix;\n  protected declare applyedMatrix?: Matrix; // 被应用的matrix\n  // 属性代理\n  declare fillStyle: string | CanvasGradient | CanvasPattern;\n  /**\n   * @deprecated font方法不建议使用，请使用setTextStyle\n   */\n  declare font: string;\n  declare globalAlpha: number;\n  declare lineCap: string;\n  declare lineDashOffset: number;\n  declare lineJoin: string;\n  declare lineWidth: number;\n  declare miterLimit: number;\n  declare shadowBlur: number;\n  declare shadowColor: string;\n  declare shadowOffsetX: number;\n  declare shadowOffsetY: number;\n  declare strokeStyle: string | CanvasGradient | CanvasPattern;\n  declare textAlign: string;\n  declare textBaseline: string;\n  declare dpr: number;\n  declare _clearMatrix: IMatrix;\n\n  get nativeContext(): any {\n    return this.path;\n  }\n\n  constructor(canvas: any, dpr: number) {\n    this.matrix = new Matrix(1, 0, 0, 1, 0, 0);\n    this.stack = [];\n    this.dpr = dpr;\n    this.applyedMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n    this.path = new CustomPath2D();\n    this._clearMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n  }\n\n  getCanvas(): ICanvas {\n    throw new Error('不支持getCanvas');\n  }\n\n  getContext() {\n    throw new Error('不支持getContext');\n  }\n  /**\n   * 设置当前ctx 的transform信息\n   */\n  setTransformForCurrent(force: boolean = false) {\n    // 只作简单判断\n    if (!force && this.applyedMatrix.equalToMatrix(this.matrix)) {\n      return;\n    }\n\n    this.applyedMatrix = this.cloneMatrix(this.matrix);\n    return;\n  }\n  /**\n   * 获取当前矩阵信息\n   */\n  get currentMatrix() {\n    return this.matrix;\n  }\n\n  cloneMatrix(m: Matrix) {\n    return matrixAllocate.allocateByObj(m);\n  }\n\n  /**\n   * 清空画布\n   */\n  clear() {\n    this.save();\n    this.resetTransform();\n    this.restore();\n  }\n\n  reset() {\n    this.matrix.setValue(1, 0, 0, 1, 0, 0);\n    this.applyedMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n    this.stack.length = 0;\n  }\n\n  restore() {\n    if (this.stack.length > 0) {\n      matrixAllocate.free(this.matrix);\n      this.matrix = this.stack.pop() as Matrix;\n      this.setTransformForCurrent();\n    }\n  }\n  highPerformanceRestore() {\n    if (this.stack.length > 0) {\n      matrixAllocate.free(this.matrix);\n      this.matrix = this.stack.pop() as Matrix;\n    }\n  }\n\n  /**\n   *\n   * @param angle 弧度数\n   */\n  rotate(rad: number, setTransform: boolean = true) {\n    this.matrix.rotate(rad);\n    setTransform && this.setTransformForCurrent();\n  }\n\n  save() {\n    const matrix = this.cloneMatrix(this.matrix);\n    this.stack.push(matrix);\n  }\n  highPerformanceSave() {\n    const matrix = this.cloneMatrix(this.matrix);\n    this.stack.push(matrix);\n  }\n\n  /**\n   * 基于当前matrix再次scale\n   * @param sx\n   * @param sy\n   * @param setTransform 是否设置transform到context中\n   */\n  scale(sx: number, sy: number, setTransform: boolean = true) {\n    this.matrix.scale(sx, sy);\n    setTransform && this.setTransformForCurrent();\n  }\n  setScale(sx: number, sy: number, setTransform: boolean = true): void {\n    this.matrix.setScale(sx, sy);\n    setTransform && this.setTransformForCurrent();\n  }\n  /**\n   * 基于某个点进行缩放\n   * @param sx\n   * @param sy\n   * @param px\n   * @param py\n   */\n  scalePoint(sx: number, sy: number, px: number, py: number, setTransform: boolean = true) {\n    this.translate(px, py, false);\n    this.scale(sx, sy, false);\n    this.translate(-px, -py, false);\n    setTransform && this.setTransformForCurrent();\n  }\n  /**\n   *\n   * @param a\n   * @param b\n   * @param c\n   * @param d\n   * @param e\n   * @param f\n   * @param setTransform\n   */\n  setTransform(\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e: number,\n    f: number,\n    setTransform: boolean = true,\n    dpr: number = this.dpr\n  ) {\n    this.matrix.setValue(dpr * a, dpr * b, dpr * c, dpr * d, dpr * e, dpr * f);\n    setTransform && this.setTransformForCurrent();\n  }\n\n  setTransformFromMatrix(matrix: Matrix, setTransform: boolean = true, dpr: number = this.dpr) {\n    this.matrix.setValue(\n      matrix.a * dpr,\n      matrix.b * dpr,\n      matrix.c * dpr,\n      matrix.d * dpr,\n      matrix.e * dpr,\n      matrix.f * dpr\n    );\n    setTransform && this.setTransformForCurrent();\n  }\n\n  resetTransform(setTransform: boolean = true, dpr: number = this.dpr) {\n    this.setTransform(dpr, 0, 0, dpr, 0, 0);\n    setTransform && this.setTransformForCurrent();\n  }\n\n  // transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n  transform(a: number, b: number, c: number, d: number, e: number, f: number, setTransform: boolean = true) {\n    this.matrix.multiply(a, b, c, d, e, f);\n    setTransform && this.setTransformForCurrent();\n  }\n  transformFromMatrix(matrix: Matrix, setTransform?: boolean): void {\n    this.matrix.multiply(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n    setTransform && this.setTransformForCurrent();\n  }\n\n  translate(x: number, y: number, setTransform: boolean = true) {\n    this.matrix.translate(x, y);\n    setTransform && this.setTransformForCurrent();\n  }\n  /**\n   * 旋转角度，自动转换为弧度\n   * @param deg 角度数\n   */\n  rotateDegrees(deg: number, setTransform: boolean = true) {\n    const rad = (deg * Math.PI) / 180;\n    this.rotate(rad, setTransform);\n  }\n\n  /**\n   * 绕点旋转\n   * @param rad 弧度\n   * @param x 旋转中心点x\n   * @param y 旋转中心点y\n   */\n  rotateAbout(rad: number, x: number, y: number, setTransform: boolean = true) {\n    this.translate(x, y, false);\n    this.rotate(rad, false);\n    this.translate(-x, -y, false);\n    setTransform && this.setTransformForCurrent();\n  }\n\n  /**\n   * 绕点旋转\n   * @param deg 旋转角度\n   * @param x 旋转中心点x\n   * @param y 旋转中心点y\n   */\n  rotateDegreesAbout(deg: number, x: number, y: number, setTransform: boolean = true) {\n    this.translate(x, y, false);\n    this.rotateDegrees(deg, false);\n    this.translate(-x, -y, false);\n    setTransform && this.setTransformForCurrent();\n  }\n\n  // /**\n  //  * 全局坐标 -> 当前矩阵的局部坐标\n  //  * @param x x\n  //  * @param y y\n  //  */\n  // transformPoint(x: number, y: number): Point {\n  //   const inverseMatrix = this.matrix.getInverse();\n  //   // dpr\n  //   x = x * this.dpr;\n  //   y = y * this.dpr;\n  //   return new Point(\n  //     x * inverseMatrix.a + y * inverseMatrix.c + inverseMatrix.e,\n  //     x * inverseMatrix.b + y * inverseMatrix.d + inverseMatrix.f\n  //   );\n  // }\n\n  // /**\n  //  * 坐标转换\n  //  * @param x x\n  //  * @param y y\n  //  */\n  // transformPoint2(x: number, y: number): Point {\n  //   const inverseMatrix = this.matrix;\n  //   return new Point(\n  //     x * inverseMatrix.a + y * inverseMatrix.c + inverseMatrix.e,\n  //     x * inverseMatrix.b + y * inverseMatrix.d + inverseMatrix.f\n  //   );\n  // }\n\n  // transformPoint3(x: number, y: number, matrix: Matrix): Point {\n  //   // dpr\n  //   x = x * this.dpr;\n  //   y = y * this.dpr;\n  //   return new Point(x * matrix.a + y * matrix.c + matrix.e, x * matrix.b + y * matrix.d + matrix.f);\n  // }\n\n  //////// 代理方法\n  // isPointInStroke ,drawFocusIfNeeded 方法没有代理，如有需要再添加\n\n  beginPath() {\n    this.path.clear();\n  }\n\n  clip(fillRule?: CanvasFillRule): void;\n  clip(path: Path2D, fillRule?: CanvasFillRule): void;\n  clip(path?: Path2D | CanvasFillRule, fillRule?: CanvasFillRule) {\n    return;\n  }\n\n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean) {\n    this.path.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n  arcTo(x1: number, y1: number, x2: number, y2: number, radiusX: number) {\n    this.path.arcTo(x1, y1, x2, y2, radiusX);\n  }\n\n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number) {\n    this.path.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  }\n\n  closePath() {\n    this.path.closePath();\n  }\n\n  ellipse(\n    x: number,\n    y: number,\n    radiusX: number,\n    radiusY: number,\n    rotation: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean\n  ) {\n    return;\n  }\n  lineTo(x: number, y: number) {\n    this.path.lineTo(x, y);\n  }\n\n  moveTo(x: number, y: number) {\n    this.path.moveTo(x, y);\n  }\n\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number) {\n    this.path.quadraticCurveTo(cpx, cpy, x, y);\n  }\n\n  rect(x: number, y: number, w: number, h: number) {\n    this.path.rect(x, y, w, h);\n  }\n\n  createImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData {\n    return null;\n  }\n\n  createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient {\n    throw new Error('不支持createLinearGradient');\n  }\n\n  createPattern(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, repetition: string): CanvasPattern {\n    throw new Error('不支持createPattern');\n  }\n\n  createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient {\n    throw new Error('不支持createRadialGradient');\n  }\n\n  createConicGradient(x: number, y: number, startAngle: number, endAngle: number): IConicalGradientData {\n    return null;\n  }\n\n  // createConicGradient(x: number, y: number, startAngle: number, endAngle: number): IConicalGradient | null {\n  //   // let edit = false;\n  //   // let pattern: CanvasPattern | null;\n  //   // // eslint-disable-next-line @typescript-eslint/no-this-alias\n  //   // const ctx = this;\n  //   // const obj: IConicalGradient = {\n  //   //   stops: [],\n  //   //   addColorStop(offset: number, color: string) {\n  //   //     this.stops.push([offset, color]);\n  //   //     edit = true;\n  //   //   },\n  //   //   GetPattern(minW: number, minH: number, deltaAngle?: number): CanvasPattern | null {\n  //   //     if (edit) {\n  //   //       if (!deltaAngle) deltaAngle = endAngle - startAngle;\n  //   //       pattern = createConicalGradient(ctx, this.stops, x, y, deltaAngle, startAngle, endAngle, minW, minH);\n  //   //       edit = false;\n  //   //     }\n  //   //     return pattern;\n  //   //   }\n  //   // };\n  //   // return obj;\n  // }\n\n  // fill(fillRule?: CanvasFillRule): void;\n  // fill(path?: Path2D, fillRule?: CanvasFillRule): void;\n  fill(path?: Path2D, fillRule?: CanvasFillRule) {\n    return;\n  }\n\n  fillRect(x: number, y: number, width: number, height: number) {\n    this.path.rect(x, y, width, height);\n  }\n\n  clearRect(x: number, y: number, w: number, h: number) {\n    return;\n  }\n\n  fillText(text: string, x: number, y: number) {\n    return;\n  }\n\n  getImageData(sx: number, sy: number, sw: number, sh: number): ImageData {\n    return null;\n  }\n\n  getLineDash(): number[] {\n    return [];\n  }\n\n  isPointInPath(x: number, y: number) {\n    this.matrix.transformPoint({ x, y }, globalPoint);\n    return contain(this.path.commandList, globalPoint.x, globalPoint.y);\n  }\n\n  isPointInStroke(x: number, y: number) {\n    if (!this.lineWidth) {\n      return false;\n    }\n    this.matrix.transformPoint({ x, y }, globalPoint);\n    const lineWidth = getScaledStroke(this, this.lineWidth, this.dpr);\n    return containStroke(this.path.commandList, lineWidth, globalPoint.x, globalPoint.y);\n  }\n\n  measureText(text: string): { width: number } {\n    throw new Error('不支持measureText');\n  }\n\n  putImageData(imagedata: ImageData, dx: number, dy: number) {\n    throw new Error('不支持measureText');\n  }\n\n  setLineDash(segments: number[]) {\n    return;\n  }\n\n  stroke(path?: Path2D) {\n    return;\n  }\n\n  strokeRect(x: number, y: number, width: number, height: number) {\n    this.path.rect(x, y, width, height);\n  }\n\n  strokeText(text: string, x: number, y: number) {\n    return;\n  }\n\n  drawImage(\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap,\n    dstX: number,\n    dstY: number\n  ): void;\n  drawImage(\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap,\n    dstX: number,\n    dstY: number,\n    dstW: number,\n    dstH: number\n  ): void;\n  drawImage(\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap,\n    srcX: number,\n    srcY: number,\n    srcW: number,\n    srcH: number,\n    dstX: number,\n    dstY: number,\n    dstW: number,\n    dstH: number\n  ): void;\n\n  drawImage() {\n    return;\n  }\n\n  setCommonStyle(\n    params: ISetCommonStyleParams,\n    attribute: ICommonStyleParams,\n    offsetX: number,\n    offsetY: number,\n    defaultParams?: ICommonStyleParams | Partial<ICommonStyleParams>[]\n  ) {\n    return;\n  }\n\n  _setCommonStyle(params: ISetCommonStyleParams, offsetX: number, offsetY: number, defaultParams?: ICommonStyleParams) {\n    return;\n  }\n\n  setStrokeStyle(\n    params: ISetStrokeStyleParams,\n    attribute: IStrokeStyleParams,\n    offsetX: number,\n    offsetY: number,\n    defaultParams?: IStrokeStyleParams | IStrokeStyleParams[]\n  ) {\n    return;\n  }\n  _setStrokeStyle(params: ISetStrokeStyleParams, offsetX: number, offsetY: number, defaultParams?: IStrokeStyleParams) {\n    return;\n  }\n  setTextStyleWithoutAlignBaseline(params: Partial<ITextStyleParams>, defaultParams?: ITextStyleParams) {\n    return;\n  }\n  setTextStyle(params: Partial<ITextStyleParams>, defaultParams?: ITextStyleParams) {\n    return;\n  }\n\n  draw() {\n    return;\n  }\n\n  clearMatrix(setTransform: boolean = true, dpr: number = this.dpr) {\n    this.setTransformFromMatrix(initMatrix, setTransform, dpr);\n  }\n\n  setClearMatrix(a: number, b: number, c: number, d: number, e: number, f: number) {\n    this._clearMatrix.setValue(a, b, c, d, e, f);\n  }\n\n  onlyTranslate(dpr: number = this.dpr): boolean {\n    return this.matrix.a === dpr && this.matrix.b === 0 && this.matrix.c === 0 && this.matrix.d === dpr;\n  }\n\n  release(...params: any): void {\n    this.stack.forEach(m => matrixAllocate.free(m));\n    this.stack.length = 0;\n    return;\n  }\n}\n"]}