import type { IPointLike, vec2 } from '@visactor/vutils';
import type { CommandType, IContext2d } from '../interface';
import type { CanvasConfigType, ICanvas } from '../interface';
export declare function wrapCanvas(params: CanvasConfigType): ICanvas;
export declare function wrapContext(canvas: ICanvas, dpr: number): IContext2d;
export declare function vec2Equals(d1: vec2, d2: vec2): boolean;
export declare function isNumber(data: any): boolean;
export declare function quadraticAt(p0: number, p1: number, p2: number, t: number): number;
export declare function cubicAt(p0: number, p1: number, p2: number, p3: number, t: number): number;
export declare function quadraticRootAt(p0: number, p1: number, p2: number, val: number, roots: number[]): number;
export declare function quadraticExtremum(p0: number, p1: number, p2: number): number;
export declare function quadraticProjectPoint(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x: number, y: number, out: [number, number] | null): number;
export declare function cubicProjectPoint(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x: number, y: number, out: [number, number] | null): number;
export declare function normalizeRadian(angle: number): number;
export declare function containQuadStroke(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, lineWidth: number, x: number, y: number): boolean;
export declare function containCubicStroke(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, lineWidth: number, x: number, y: number): boolean;
export declare function containArcStroke(cx: number, cy: number, r: number, startAngle: number, endAngle: number, anticlockwise: boolean, lineWidth: number, x: number, y: number): boolean;
export declare function containLineStroke(x0: number, y0: number, x1: number, y1: number, lineWidth: number, x: number, y: number): boolean;
export declare function transformPoint(pos: IPointLike, ctx: IContext2d, out?: IPointLike): IPointLike;
export declare function cubicRootAt(p0: number, p1: number, p2: number, p3: number, val: number, roots: number[]): number;
export declare function cubicExtrema(p0: number, p1: number, p2: number, p3: number, extrema: number[]): number;
export declare function contain(commands: CommandType[], x: number, y: number): boolean;
export declare function containStroke(commands: CommandType[], lineWidth: number, x: number, y: number): boolean;
