{"version":3,"sources":["../src/utils/object.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAO7E,MAAM,CAAC,MAAM,WAAW,GAAG,CAAU,IAAgB,EAAE,UAAsB,EAAW,EAAE;IACxF,IAAI,IAAI,KAAK,UAAU,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IACD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;QAC9C,OAAO,KAAK,CAAC;KACd;IACD,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;QACxC,OAAO,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;KACzF;IACD,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC1C,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACtF;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAI,MAAS,EAAE,IAA4B,EAAE,KAAU,EAAK,EAAE;IACvF,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;QACf,OAAO,MAAM,CAAC;KACf;IACD,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;QACd,OAAO,MAAM,CAAC;KACf;IACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACpB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;QACtB,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YAC/B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SAClB;aAAM;YACL,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SAClB;KACF;IACD,OAAO,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAI,MAAW,EAAE,IAA4B,EAAE,YAAgB,EAAK,EAAE;IAC/F,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;QACf,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,GAAG,CAAC,MAAM,EAAE,IAAgB,EAAE,YAAY,CAAM,CAAC;AAC1D,CAAC,CAAC","file":"object.js","sourcesContent":["import { get, isArray, isFunction, isNil, isObject } from '@visactor/vutils';\n\n/**\n * 判断一个 spec 是否包含另一个 spec 片段\n * @param spec 原始 spec\n * @param searchSpec 要匹配的 spec 片段\n */\nexport const includeSpec = <T = any>(spec: Partial<T>, searchSpec: Partial<T>): boolean => {\n  if (spec === searchSpec) {\n    return true;\n  }\n  if (isFunction(spec) || isFunction(searchSpec)) {\n    return false;\n  }\n  if (isArray(spec) && isArray(searchSpec)) {\n    return searchSpec.every(searchItem => spec.some(item => includeSpec(item, searchItem)));\n  }\n  if (isObject(spec) && isObject(searchSpec)) {\n    return Object.keys(searchSpec).every(key => includeSpec(spec[key], searchSpec[key]));\n  }\n  return false;\n};\n\nexport const setProperty = <T>(target: T, path: Array<string | number>, value: any): T => {\n  if (isNil(path)) {\n    return target;\n  }\n  const key = path[0];\n  if (isNil(key)) {\n    return target;\n  }\n  if (path.length === 1) {\n    target[key] = value;\n    return target;\n  }\n  if (isNil(target[key])) {\n    if (typeof path[1] === 'number') {\n      target[key] = [];\n    } else {\n      target[key] = {};\n    }\n  }\n  return setProperty(target[key], path.slice(1), value);\n};\n\nexport const getProperty = <T>(target: any, path: Array<string | number>, defaultValue?: T): T => {\n  if (isNil(path)) {\n    return undefined;\n  }\n  return get(target, path as string[], defaultValue) as T;\n};\n"]}