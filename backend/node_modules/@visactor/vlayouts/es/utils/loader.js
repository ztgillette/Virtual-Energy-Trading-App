import { isBase64, isValidUrl } from "@visactor/vutils";

export function loadImage(url, createImage) {
    return url && (isValidUrl(url) || isBase64(url) || url.startsWith("<svg")) ? new Promise(((resolve, reject) => {
        var _a;
        const imageMark = createImage({
            image: url
        }), imgData = null === (_a = imageMark.resources) || void 0 === _a ? void 0 : _a.get(url);
        imgData && "success" === imgData.state && imgData.data ? resolve(imgData.data) : (imageMark.successCallback = () => {
            var _a;
            if (imageMark) {
                const imgData = null === (_a = imageMark.resources) || void 0 === _a ? void 0 : _a.get(url);
                imgData && "success" === imgData.state && imgData.data ? resolve(imgData.data) : reject(new Error("image load failed: " + url));
            } else reject(new Error("image load failed: " + url));
        }, imageMark.failCallback = () => {
            reject(new Error("image load failed: " + url));
        });
    })) : null;
}

export function loadImages(urls, createImage) {
    return Promise.allSettled(urls.map((url => loadImage(url, createImage))));
}
//# sourceMappingURL=loader.js.map