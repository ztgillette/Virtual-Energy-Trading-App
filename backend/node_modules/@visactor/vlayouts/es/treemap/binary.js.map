{"version":3,"sources":["../src/treemap/binary.ts"],"names":[],"mappings":"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","file":"binary.js","sourcesContent":["/* Adapted from d3-hierarchy by Mike Bostock\n * https://observablehq.com/collection/@d3/d3-hierarchy\n * Licensed under the ISC\n\n * url: https://github.com/d3/d3-hierarchy/blob/main/src/treemap/binary.js\n * License: https://github.com/d3/d3-hierarchy/blob/main/LICENSE\n * @license\n */\n\nimport type { TreemapNodeElement } from './interface';\n\nexport default function (parent: TreemapNodeElement, x0: number, y0: number, x1: number, y1: number) {\n  const nodes = parent.children;\n  const n = nodes.length;\n  let sum = 0;\n  const sums = new Array(n + 1);\n  sums[0] = 0;\n\n  for (let i = 0; i < n; ++i) {\n    sum += nodes[i].value;\n    sums[i + 1] = sum;\n  }\n\n  const partition = (i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) => {\n    if (i >= j - 1) {\n      const node = nodes[i];\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      return;\n    }\n\n    const valueOffset = sums[i];\n    const valueTarget = value / 2 + valueOffset;\n    let k = i + 1;\n    let hi = j - 1;\n\n    while (k < hi) {\n      const mid = (k + hi) >>> 1;\n      if (sums[mid] < valueTarget) {\n        k = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) {\n      --k;\n    }\n\n    const valueLeft = sums[k] - valueOffset;\n    const valueRight = value - valueLeft;\n\n    if (x1 - x0 > y1 - y0) {\n      const xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      const yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  };\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n}\n"]}