{"version":3,"sources":["../src/treemap/format.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,KAA2B,EAC3B,SAAc,EAAE,EAChB,OAGC,EACD,EAAE;IACF,MAAM,WAAW,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,CAAC,CAAC;IAE3C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClD,MAAM,CAAC,IAAI,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE,IAAqB,CAAC,CAAC;YACjF,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,WAAW,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,QAAQ,EAAE;oBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;iBACpB;qBAAM;oBACL,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;iBAC9C;aACF;SACF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","file":"format.js","sourcesContent":["import type { TreemapNodeElement } from './interface';\n\nexport const flattenNodes = <T = TreemapNodeElement>(\n  nodes: TreemapNodeElement[],\n  output: T[] = [],\n  options?: {\n    maxDepth?: number;\n    callback?: (node: TreemapNodeElement) => T;\n  }\n) => {\n  const hasMaxDepth = options?.maxDepth >= 0;\n\n  nodes.forEach(node => {\n    if (!hasMaxDepth || node.depth <= options.maxDepth) {\n      output.push(options?.callback ? options.callback(node) : (node as unknown as T));\n      if (node.children) {\n        if (hasMaxDepth && node.depth === options.maxDepth) {\n          node.children = null;\n          node.isLeaf = true;\n        } else {\n          flattenNodes(node.children, output, options);\n        }\n      }\n    }\n  });\n\n  return output;\n};\n"]}