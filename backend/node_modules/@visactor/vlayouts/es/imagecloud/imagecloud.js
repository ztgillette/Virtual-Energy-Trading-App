import { Logger, isFunction, isNil } from "@visactor/vutils";

import { SpiralLayout } from "./layout/spiral";

import { GridLayout } from "./layout/grid/grid";

import { StackLayout } from "./layout/stack";

export const transform = (options, upstreamData, parameters) => {
    var _a, _b;
    const size = isFunction(options.size) ? options.size() : options.size;
    if (options.size = size, !size || isNil(size[0]) || isNil(size[1]) || size[0] <= 0 || size[1] <= 0) {
        return Logger.getInstance().info("Wordcloud size dimensions must be greater than 0"), 
        [];
    }
    if (options.size = [ Math.ceil(size[0]), Math.ceil(size[1]) ], options.image || Logger.getInstance().error("Imagecloud: image source must be specified."), 
    options.onBeforeLayout && options.onBeforeLayout(), !upstreamData || 0 === upstreamData.length) return [];
    let layoutConstructor;
    switch (null !== (_b = null === (_a = options.layoutConfig) || void 0 === _a ? void 0 : _a.layoutMode) && void 0 !== _b ? _b : "spiral") {
      case "grid":
        layoutConstructor = GridLayout;
        break;

      case "stack":
        layoutConstructor = StackLayout;
        break;

      default:
        layoutConstructor = SpiralLayout;
    }
    const layout = new layoutConstructor(options);
    return layout.layout(upstreamData), layout.unfinished() ? {
        progressive: layout
    } : layout.output();
};
//# sourceMappingURL=imagecloud.js.map