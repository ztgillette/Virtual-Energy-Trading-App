{"version":3,"sources":["../src/imagecloud/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type {\n  CreateImageFunction,\n  GeometricMaskShape,\n  ICreateCanvas,\n  SegmentationOutputType as SegmentationOutputTypeBase,\n  TextShapeMask\n} from '../interface/wordcloud';\nimport type { TagItemAttribute } from '../wordcloud/interface';\nimport type { FieldOption } from '../wordcloud/wordcloud';\n\nexport interface ImageCloudSegmentationOutputType extends SegmentationOutputTypeBase {\n  transparentMaskCanvas?: HTMLCanvasElement;\n}\n\nexport type ImageCollageType = ImageInput & {\n  valid: boolean;\n  aspectRatio: number;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  weight: number;\n  opacity: number;\n  padding: number;\n  frequency: number; // 记录图片出现频率，图片可能重复出现\n  distance: number;\n  datum: any;\n  clipConfig?: { shape: string };\n  _widthWithPadding: number;\n  _heightWithPadding: number;\n  _left: number;\n  _top: number;\n  _leftWithoutPadding: number;\n  _topWithoutPadding: number;\n} & { [key: string]: any };\n\nexport type GridLayoutCellType = {\n  centerX: number;\n  centerY: number;\n  x: number;\n  y: number;\n  row: number;\n  col: number;\n  distance: number;\n  isEdge?: boolean;\n  intersectPixels?: number;\n  image?: ImageCollageType;\n};\n\nexport type GridLayoutContext = {\n  cellType: 'rect' | 'circle' | 'hexagonal' | string;\n  // rect 相关\n  cellWidth: number;\n  cellHeight: number;\n  // circle 相关\n  cellRadius?: number;\n  // hexagonal 相关\n  cellHexPoints?: { x: number; y: number }[];\n  cellHexSideLength?: number;\n\n  cellInfo: GridLayoutCellType[];\n  cellCount: number;\n  cellPixelCount: number;\n  clipPath: string;\n  eachPixel: (...args: any) => void;\n};\n\n/** 对外的配置接口定义 */\n\nexport type ImageConfig = {\n  imageSize?: number;\n  imageSizeRange?: [number, number];\n  padding?: number;\n};\n\nexport type ImageInput = {\n  url: string;\n  weight?: number;\n};\n\nexport type AsType = {\n  visible?: string;\n  x?: string;\n  y?: string;\n  width?: string;\n  height?: string;\n  opacity?: string;\n  angle?: string;\n  clipPath?: string;\n  zIndex?: string;\n  datum?: any;\n  distance?: string;\n};\n\nexport type LayoutConfigType = SpiralLayoutConfig | GridLayoutConfig | StackLayoutConfig;\n\n/** 螺旋线布局 */\nexport type SpiralLayoutConfig = {\n  layoutMode: 'spiral';\n  /** 螺旋线种类\n   * @default 'archimedean'\n   */\n  spiralType?: 'archimedean' | 'rectangular';\n\n  /**\n   * 图片填充迭代次数\n   * @default 4\n   * */\n  fillingTimes?: number;\n  /** 填充图片的最小尺寸 */\n  minFillingImageSize?: number;\n};\n\n/**\n * 网格布局\n * 网格布局下，每个网格单元的大小是固定的，图片的权重不再会影响图片的大小，仅会影响图片的位置。\n */\nexport type GridLayoutConfig = {\n  layoutMode: 'grid';\n  /** 网格单元形状 */\n  cellType?: 'rect' | 'circle' | 'hexagonal';\n  /**\n   * 矩形网格单元的宽高比\n   * @description 当 cellType 为 'rect' 时，该值有效\n   * @default 1\n   * */\n  rectAspectRatio?: number;\n  /**\n   * 图片的布局方式\n   * - 'default': 图片填满网格单元，尽可能排列成遮罩的形状\n   * - 'masked': 图片填满网格单元，并应用遮罩\n   * - 'edge': 图片延着遮罩边缘布局\n   * @default 'default'\n   */\n  placement?: 'default' | 'masked' | 'edge';\n};\n\n/**\n * 堆叠布局\n * 堆叠布局下，图片之间可以发生重叠。\n */\nexport type StackLayoutConfig = {\n  layoutMode: 'stack';\n  /**\n   * 图片的布局方式\n   * - 'default': 图片填满网格单元，尽可能排列成遮罩的形状\n   * - 'masked': 图片填满网格单元，并应用遮罩\n   * - 'edge': 图片延着遮罩边缘布局\n   * @default 'default'\n   */\n  placement?: 'default' | 'masked' | 'edge';\n  /**\n   * 最大旋转角度\n   * @default 1.22173 - 默认值为角度 70 度，转换为弧度：\n   *      70 * (Math.PI / 180) ≈ 1.22173\n   * */\n  maxAngle?: number;\n};\n\nexport type ImageCloudOptions = {\n  size: [number, number] | (() => [number, number]);\n  image: FieldOption | TagItemAttribute<string> | string;\n\n  weight?: FieldOption | TagItemAttribute<number> | number;\n\n  imageConfig?: ImageConfig;\n  mask?: string | TextShapeMask | GeometricMaskShape;\n  maskConfig?: {\n    removeWhiteBorder?: boolean;\n    /**\n     * 二值化阈值。\n     * 默认情况下，透明或白色的像素会被认为是背景进行剔除。\n     * @default undefined\n     */\n    threshold?: number;\n    /**\n     * 反转图像\n     * @default false\n     */\n    invert?: boolean;\n    /**\n     * 边缘模糊半径\n     * @default 0\n     */\n    edgeBlur?: number;\n  };\n\n  layoutConfig?: LayoutConfigType;\n\n  ratio?: number;\n\n  as?: AsType;\n\n  onUpdateMaskCanvas?: (inputCanvas?: HTMLCanvasElement, maskCanvas?: HTMLCanvasElement) => void;\n  onLayoutEnd?: (images: ImageCollageType[]) => void;\n  onBeforeLayout?: () => void;\n  createCanvas: ICreateCanvas;\n  createImage: CreateImageFunction;\n};\n"]}