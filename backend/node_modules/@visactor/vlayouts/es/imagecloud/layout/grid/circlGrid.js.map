{"version":3,"sources":["../src/imagecloud/layout/grid/circlGrid.ts"],"names":[],"mappings":"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","file":"circlGrid.js","sourcesContent":["import type { GridLayoutCellType, ImageCloudOptions } from '../../interface';\n\nexport function circleGridLayout(options: ImageCloudOptions) {\n  const { imageConfig = {}, size, ratio = 0.1, layoutConfig = {} } = options;\n  const { padding = 0, imageSize = 0 } = imageConfig;\n  const [width, height] = size as [number, number];\n  const center = { x: width / 2, y: height / 2 };\n  let circleRadius = 0;\n  if (imageSize) {\n    circleRadius = imageSize / 2;\n  } else {\n    circleRadius = (Math.min(width, height) * ratio) / 2;\n  }\n  if (circleRadius - padding <= 0) {\n    circleRadius = padding + 1;\n  }\n\n  const circleDiameter = circleRadius * 2; // 圆的直径\n\n  // 六边形排列偏移量\n  const rowHeight = (Math.sqrt(3) / 2) * circleDiameter + padding; // 行间距\n\n  const cellInfo: GridLayoutCellType[] = [];\n  let index = 0;\n  // 绘制六边形排列的圆\n  for (let r = 0; r * rowHeight - circleRadius < height; r++) {\n    const y = r * rowHeight; // 当前行的Y坐标\n    const offsetX = r % 2 === 0 ? 0 : circleRadius; // 奇偶行错位\n    for (let c = -1; c * (circleDiameter + padding) + offsetX - circleRadius < width; c++) {\n      const x = c * (circleDiameter + padding) + offsetX + circleRadius; // 当前圆的X坐标\n      // 将cell信息存储到数组中\n      cellInfo[index++] = {\n        centerX: x,\n        centerY: y,\n        x: x - circleRadius,\n        y: y - circleRadius,\n        row: r,\n        col: c,\n        // 计算与中心点的距离\n        distance: Math.sqrt(Math.pow(x - center.x, 2) + Math.pow(y - center.y, 2))\n      };\n    }\n  }\n  let cellPixelCount = 0;\n  const rSquared = circleRadius * circleRadius;\n  for (let r = 0; r < circleDiameter; r++) {\n    for (let c = 0; c < circleDiameter; c++) {\n      const dx = r - circleRadius;\n      const dy = c - circleRadius;\n      if (dx * dx + dy * dy <= rSquared) {\n        cellPixelCount++;\n      }\n    }\n  }\n  const context = Object.assign({}, layoutConfig, {\n    cellWidth: circleDiameter,\n    cellHeight: circleDiameter,\n    cellInfo,\n    cellCount: cellInfo.length,\n    cellType: 'circle',\n    cellPixelCount,\n    eachPixel: (cell: GridLayoutCellType, callback: (...args: any) => void) => {\n      const { x, y } = cell;\n      for (let r = 0; r < circleDiameter; r++) {\n        for (let c = 0; c < circleDiameter; c++) {\n          if (r + x < 0 || r + x > width || c + y > height || c + y < 0) {\n            continue;\n          }\n          const dx = r - circleRadius;\n          const dy = c - circleRadius;\n          if (dx * dx + dy * dy <= rSquared) {\n            callback((~~y + r) * width + (~~x + c));\n          }\n        }\n      }\n    },\n    clipPath: `M 1 0 A 1 1 0 1 0 -1 0 A 1 1 0 1 0 1 0 Z`\n  });\n  return { context, imageLength: circleDiameter };\n}\n"]}