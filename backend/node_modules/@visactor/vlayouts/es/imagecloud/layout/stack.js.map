{"version":3,"sources":["../src/imagecloud/layout/stack.ts"],"names":[],"mappings":"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","file":"stack.js","sourcesContent":["import type { GridLayoutCellType, GridLayoutContext, ImageCollageType, StackLayoutConfig } from '../interface';\nimport { Layout } from './basic';\nimport { rectGridLayout } from './grid/rectGrid';\n\nexport class StackLayout extends Layout {\n  private layoutContext: GridLayoutContext;\n\n  preProcess() {\n    const images = super.preProcess();\n    const { imageConfig = {}, ratio = 0.1 } = this.options;\n    const cellLayoutMethod = rectGridLayout;\n    this.layoutContext = cellLayoutMethod(\n      Object.assign({}, this.options, { imageConfig: { imageSize: null } })\n    ).context;\n\n    // 根据 distance 排序，距离越小，越靠近画布中心，优先布局\n    this.layoutContext.cellInfo.sort((cellA, cellB) => cellA.distance - cellB.distance);\n    return this.calculateImageSize(images, imageConfig, ratio);\n  }\n\n  doLayout(images: ImageCollageType[]) {\n    const { segmentationOutput } = this;\n\n    const { cellWidth, cellHeight, cellInfo, cellCount, eachPixel, cellPixelCount } = this.layoutContext;\n    if (images.length === 0 || cellCount === 0 || cellWidth === 0 || cellHeight === 0 || cellInfo.length === 0) {\n      this.isLayoutFinished = true;\n      return;\n    }\n\n    const { layoutConfig = {} } = this.options;\n    const size = this.options.size as [number, number];\n    const { placement = 'default', maxAngle = 45 * (Math.PI / 180) } = layoutConfig as StackLayoutConfig;\n\n    if (placement === 'edge' || placement === 'default') {\n      const { segmentation } = segmentationOutput;\n      const { labels } = segmentation;\n\n      cellInfo.forEach(cell => {\n        let intersectPixelCount = 0;\n        eachPixel(cell, (index: number) => {\n          if (labels[index]) {\n            intersectPixelCount++;\n          }\n        });\n        cell.intersectPixels = intersectPixelCount;\n      });\n    }\n\n    const imageCount = images.length;\n    const maxDistance = Math.sqrt(Math.pow(size[0], 2) + Math.pow(size[1], 2));\n    const imageVisible = (cell: GridLayoutCellType) => {\n      const { intersectPixels } = cell;\n      if (placement === 'default') {\n        return intersectPixels > cellPixelCount * 0.5;\n      } else if (placement === 'edge') {\n        return intersectPixels > cellPixelCount * 0.1 && intersectPixels < cellPixelCount;\n      }\n      return true;\n    };\n\n    // 先将所有图片布局一遍\n    for (let i = 0; i < imageCount; i++) {\n      const image = images[i];\n      const cell = cellInfo[i];\n      if (cell) {\n        image.x = cell.centerX - image.width / 2;\n        image.y = cell.centerY - image.height / 2;\n        image.visible = imageVisible(cell);\n        image.cell = `${cell.row}_${cell.col}`;\n        image.angle = Math.random() * (2 * maxAngle) - maxAngle;\n        image.anchor = [image.x + image.width / 2, image.y + image.height / 2];\n        image.zIndex = maxDistance - cell.distance;\n        image.distance = cell.distance;\n        image.frequency = 1;\n        cell.image = image;\n      }\n    }\n\n    // TODO: dataIndexKey\n    const key = Object.keys(images[0]).find(k => k.includes('VGRAMMAR'));\n    if (imageCount < cellCount) {\n      // 图片数量小于cell数量，创建重复图片用于填充剩余 cell\n      for (let i = imageCount; i < cellCount; i++) {\n        const image = images[i - imageCount];\n        const cell = cellInfo[i];\n        if (cell) {\n          const repeatImage = Object.assign({}, image);\n          repeatImage.x = cell.centerX - repeatImage.width / 2;\n          repeatImage.y = cell.centerY - repeatImage.height / 2;\n          repeatImage.anchor = [repeatImage.x + repeatImage.width / 2, repeatImage.y + repeatImage.height / 2];\n          repeatImage.angle = Math.random() * (2 * maxAngle) - maxAngle;\n          repeatImage.frequency += 1;\n          repeatImage[key] = `${repeatImage[key]}_${repeatImage.frequency}`;\n          repeatImage.visible = imageVisible(cell);\n          repeatImage.cell = `${cell.row}_${cell.col}`;\n          repeatImage.distance = cell.distance;\n          repeatImage.zIndex = maxDistance - cell.distance;\n          cell.image = repeatImage;\n          images.push(repeatImage);\n        }\n      }\n    }\n    return images.filter(img => img.visible);\n  }\n}\n"]}