{"version":3,"sources":["../src/venn/utils/layout/layout.ts"],"names":[],"mappings":"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","file":"layout.js","sourcesContent":["/* Adapted from venn.js by Ben Frederickson\n * https://github.com/benfred/venn.js\n * Licensed under the MIT\n\n * url: https://github.com/benfred/venn.js/blob/master/src/layout.js\n * License: https://github.com/benfred/venn.js/blob/master/LICENSE\n * @license\n */\n\nimport type { VennCircleName, IVennArea, IVennCircle, IVennParams, VennAreaName } from '../interface';\nimport { greedyLayout } from './greedy-layout';\nimport { lossFunction } from './loss';\nimport { constrainedMDSLayout } from './constrained-mds-layout';\nimport { nelderMead } from '@visactor/vutils';\n\n/** given a list of set objects, and their corresponding overlaps.\nupdates the (x, y, radius) attribute on each set such that their positions\nroughly correspond to the desired overlaps */\nexport function venn(areas: IVennArea[], parameters?: IVennParams) {\n  parameters = parameters || {};\n  parameters.maxIterations = parameters.maxIterations || 500;\n  const initialLayout = parameters.initialLayout || bestInitialLayout;\n  const loss = parameters.lossFunction || lossFunction;\n\n  // add in missing pairwise areas as having 0 size\n  areas = addMissingAreas(areas);\n\n  // initial layout is done greedily\n  const circles = initialLayout(areas, parameters);\n\n  // transform x/y coordinates to a vector to optimize\n  const initial: number[] = [];\n  const setIds: VennCircleName[] = [];\n  for (const setId in circles) {\n    if (circles.hasOwnProperty(setId)) {\n      initial.push(circles[setId].x);\n      initial.push(circles[setId].y);\n      setIds.push(setId);\n    }\n  }\n\n  // optimize initial layout from our loss function\n  const solution = nelderMead(\n    function (values: number[]) {\n      const current = {};\n      for (let i = 0; i < setIds.length; ++i) {\n        const setId = setIds[i];\n        (current as any)[setId] = {\n          x: values[2 * i],\n          y: values[2 * i + 1],\n          radius: circles[setId].radius\n          // size : circles[setId].size\n        };\n      }\n      return loss(current, areas);\n    },\n    initial,\n    parameters\n  );\n\n  // transform solution vector back to x/y points\n  const positions = solution.x;\n  for (let i = 0; i < setIds.length; ++i) {\n    const setId = setIds[i];\n    circles[setId].x = positions[2 * i];\n    circles[setId].y = positions[2 * i + 1];\n  }\n\n  return circles;\n}\n\n/** Missing pair-wise intersection area data can cause problems:\n treating as an unknown means that sets will be laid out overlapping,\n which isn't what people expect. To reflect that we want disjoint sets\n here, set the overlap to 0 for all missing pairwise set intersections */\nfunction addMissingAreas(areas: IVennArea[]) {\n  areas = areas.slice();\n\n  // two circle intersections that aren't defined\n  const ids: VennCircleName[] = [];\n  const pairs: Record<VennAreaName, true> = {};\n  for (let i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length === 1) {\n      ids.push(area.sets[0]);\n    } else if (area.sets.length === 2) {\n      const a = area.sets[0];\n      const b = area.sets[1];\n      pairs[[a, b].toString()] = true;\n      pairs[[b, a].toString()] = true;\n    }\n  }\n  ids.sort(function (a, b) {\n    return +(a > b);\n  });\n\n  for (let i = 0; i < ids.length; ++i) {\n    const a = ids[i];\n    for (let j = i + 1; j < ids.length; ++j) {\n      const b = ids[j];\n      if (!([a, b].toString() in pairs)) {\n        areas.push({ sets: [a, b], size: 0 });\n      }\n    }\n  }\n  return areas;\n}\n\n/// takes the best working variant of either constrained MDS or greedy\nexport function bestInitialLayout(areas: IVennArea[], params: IVennParams): Record<VennCircleName, IVennCircle> {\n  let initial = greedyLayout(areas, params);\n  const loss = params.lossFunction || lossFunction;\n\n  // greedyLayout is sufficient for all 2/3 circle cases. try out\n  // constrained MDS for higher order problems, take its output\n  // if it outperforms. (greedy is aesthetically better on 2/3 circles\n  // since it axis aligns)\n  if (areas.length >= 8) {\n    const constrained = constrainedMDSLayout(areas, params);\n    const constrainedLoss = loss(constrained, areas);\n    const greedyLoss = loss(initial, areas);\n\n    if (constrainedLoss + 1e-8 < greedyLoss) {\n      initial = constrained;\n    }\n  }\n  return initial;\n}\n"]}