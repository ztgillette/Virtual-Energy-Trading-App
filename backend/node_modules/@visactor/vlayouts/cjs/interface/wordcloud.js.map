{"version":3,"sources":["../src/interface/wordcloud.ts"],"names":[],"mappings":"","file":"wordcloud.js","sourcesContent":["/**\n * text mask of wordcloud\n */\nexport interface TextShapeMask {\n  type: 'text';\n  text: string;\n  hollow?: boolean;\n  backgroundColor?: string;\n  fill?: string;\n  fontFamily?: string;\n  fontWeight?: string | number;\n  fontStyle?: string;\n  fontVariant: string;\n}\n\n/**\n * text mask of wordcloud\n */\nexport interface GeometricMaskShape {\n  type: 'geometric';\n  shape: string;\n  hollow?: boolean;\n  backgroundColor?: string;\n  fill?: string;\n}\n\nexport type CanvasMaskShape = TextShapeMask | GeometricMaskShape;\n\nexport type ICreateCanvas = (options: {\n  width?: number;\n  // 像素高\n  height?: number;\n  dpr?: number;\n}) => {\n  width: number;\n  height: number;\n\n  setAttribute: (key: string, val: string) => void;\n  getContext: (contextId: string, params?: { willReadFrequently?: boolean }) => any;\n};\n\nexport type SegmentationInputType = {\n  shapeUrl: string | TextShapeMask | GeometricMaskShape;\n  size: [number, number];\n  ratio: number;\n  blur?: number;\n  maskCanvas?: HTMLCanvasElement;\n  tempCanvas?: HTMLCanvasElement | any;\n  boardSize: [number, number];\n  random: boolean;\n  randomGenerator?: any;\n  isEmptyPixel?: (imageData: ImageData, i: number, j: number) => boolean;\n};\n\nexport type segmentationType = {\n  regions: any;\n  labels: number[];\n  labelNumber: number;\n};\nexport type ShapeBoundsType = {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n  width: number;\n  height: number;\n};\n\nexport interface SegmentationOutputType extends SegmentationInputType {\n  segmentation: segmentationType;\n  shapeBounds: ShapeBoundsType;\n  shapeMaxR: number;\n  shapeRatio: number;\n  shapeCenter: number[];\n  shapeArea: number;\n}\n\nexport type CreateImageFunction = (params: { image: string }) => any;\n"]}