{"version":3,"sources":["../src/venn/utils/layout/constrained-mds-layout.ts"],"names":[],"mappings":"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","file":"constrained-mds-layout.js","sourcesContent":["/* Adapted from venn.js by Ben Frederickson\n * https://github.com/benfred/venn.js\n * Licensed under the MIT\n\n * url: https://github.com/benfred/venn.js/blob/master/src/layout.js\n * License: https://github.com/benfred/venn.js/blob/master/LICENSE\n * @license\n */\n\nimport { conjugateGradient, norm2, scale, seedRandom, zeros } from '@visactor/vutils';\nimport type { VennCircleName, IVennArea, IVennCircle, IVennParams } from '../interface';\nimport { getDistanceMatrices } from './common';\n\n/// use the constrained MDS variant to generate an initial layout\nexport function constrainedMDSLayout(areas: IVennArea[], params: IVennParams): Record<VennCircleName, IVennCircle> {\n  params = params || {};\n  const restarts = params.restarts || 10;\n\n  // bidirectionally map sets to a rowid  (so we can create a matrix)\n  const sets = [];\n  const setIds = {};\n  let i;\n  for (i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length === 1) {\n      (setIds as any)[area.sets[0]] = sets.length;\n      sets.push(area);\n    }\n  }\n\n  const matrices = getDistanceMatrices(areas, sets, setIds);\n  let distances = matrices.distances;\n  const constraints = matrices.constraints;\n\n  // keep distances bounded, things get messed up otherwise.\n  // TODO: proper preconditioner?\n  const norm = norm2(distances.map(norm2)) / distances.length;\n  distances = distances.map((row: number[]) => {\n    return row.map(value => {\n      return value / norm;\n    });\n  });\n\n  const obj = function (x: number[], fxPrime: number[]) {\n    return constrainedMDSGradient(x, fxPrime, distances, constraints);\n  };\n\n  let best;\n  let current;\n  for (i = 0; i < restarts; ++i) {\n    const initial = zeros(distances.length * 2).map((entry: any, i: number) => seedRandom(i));\n\n    current = conjugateGradient(obj, initial, params);\n    if (!best || current.fx < best.fx) {\n      best = current;\n    }\n  }\n  const positions = best.x;\n\n  // translate rows back to (x,y,radius) coordinates\n  const circles = {};\n  for (i = 0; i < sets.length; ++i) {\n    const set = sets[i];\n    (circles as any)[set.sets[0]] = {\n      x: positions[2 * i] * norm,\n      y: positions[2 * i + 1] * norm,\n      radius: Math.sqrt(set.size / Math.PI)\n    };\n  }\n\n  if (params.history) {\n    for (i = 0; i < params.history.length; ++i) {\n      (scale as any)(params.history[i].x, norm);\n    }\n  }\n  return circles;\n}\n\n/// computes the gradient and loss simulatenously for our constrained MDS optimizer\nfunction constrainedMDSGradient(x: number[], fxPrime: number[], distances: number[][], constraints: number[][]) {\n  let loss = 0;\n  let i;\n  for (i = 0; i < fxPrime.length; ++i) {\n    fxPrime[i] = 0;\n  }\n\n  for (i = 0; i < distances.length; ++i) {\n    const xi = x[2 * i];\n    const yi = x[2 * i + 1];\n    for (let j = i + 1; j < distances.length; ++j) {\n      const xj = x[2 * j];\n      const yj = x[2 * j + 1];\n      const dij = distances[i][j];\n      const constraint = constraints[i][j];\n\n      const squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi);\n      const distance = Math.sqrt(squaredDistance);\n      const delta = squaredDistance - dij * dij;\n\n      if ((constraint > 0 && distance <= dij) || (constraint < 0 && distance >= dij)) {\n        continue;\n      }\n\n      loss += 2 * delta * delta;\n\n      fxPrime[2 * i] += 4 * delta * (xi - xj);\n      fxPrime[2 * i + 1] += 4 * delta * (yi - yj);\n\n      fxPrime[2 * j] += 4 * delta * (xj - xi);\n      fxPrime[2 * j + 1] += 4 * delta * (yj - yi);\n    }\n  }\n  return loss;\n}\n"]}