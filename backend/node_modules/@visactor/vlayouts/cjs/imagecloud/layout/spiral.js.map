{"version":3,"sources":["../src/imagecloud/layout/spiral.ts"],"names":[],"mappings":"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","file":"spiral.js","sourcesContent":["/* eslint-disable max-depth */\nimport type { ImageCollageType, ImageCloudSegmentationOutputType, SpiralLayoutConfig } from '../interface';\nimport { minInArray } from '@visactor/vutils';\nimport { setSize } from '../util';\nimport { Layout } from './basic';\nimport { spirals } from '../../utils/spirals';\nexport class SpiralLayout extends Layout {\n  preProcess() {\n    const images = super.preProcess();\n    const { imageConfig = {}, ratio = 0.45 } = this.options;\n    return this.calculateImageSize(images, imageConfig, ratio);\n  }\n\n  private tryPlaceImage(\n    image: ImageCollageType,\n    size: [number, number],\n    spiralType: string,\n    segmentationOutput: ImageCloudSegmentationOutputType,\n    fixedImages: ImageCollageType[],\n    dt: number = 1\n  ) {\n    const [width, height] = size;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const maxR = Math.sqrt(centerX ** 2 + centerY ** 2);\n    const spiral = spirals[spiralType](size);\n    let t = -dt;\n    let dx;\n    let dy;\n\n    const { segmentation } = segmentationOutput;\n    const { labels } = segmentation;\n\n    while (([dx, dy] = spiral((t += dt)))) {\n      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxR) {\n        break;\n      }\n      dx -= image.width / 2;\n      dy -= image.height / 2;\n      image.visible = true;\n      image.x = ~~(centerX + dx);\n      image.y = ~~(centerY + dy);\n      image._left = image.x + image.padding;\n      image._top = image.y + image.padding;\n      image._leftWithoutPadding = image.x;\n      image._topWithoutPadding = image.y;\n\n      if (fit(image, fixedImages)) {\n        const { x, y, width: imageWidth, height: imageHeight } = image;\n        let intersect = false;\n        for (let r = 0; r < imageWidth; r++) {\n          for (let c = 0; c < imageHeight && y + r <= height; c++) {\n            if (x + c > width) {\n              continue;\n            }\n            const token = !!labels[(y + r) * width + (x + c)];\n            if (!token) {\n              intersect = true;\n              break;\n            }\n          }\n          if (intersect) {\n            break;\n          }\n        }\n        if (!intersect) {\n          // 检查四个顶点\n          const corners = [\n            { x: image.x, y: image.y },\n            { x: image.x + image.width, y: image.y },\n            { x: image.x, y: image.y + image.height },\n            { x: image.x + image.width, y: image.y + image.height }\n          ];\n          let allCornersInShape = true;\n          for (const corner of corners) {\n            if (!labels[corner.y * width + corner.x]) {\n              allCornersInShape = false;\n              break;\n            }\n          }\n          if (!allCornersInShape) {\n            continue;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  doLayout(images: ImageCollageType[]) {\n    const { segmentationOutput } = this;\n    const { layoutConfig = {} as SpiralLayoutConfig } = this.options;\n    const size = this.options.size as [number, number];\n    const {\n      spiralType = 'archimedean',\n      fillingTimes = 4,\n      minFillingImageSize = 10\n    } = layoutConfig as SpiralLayoutConfig;\n\n    const fixedImages = [];\n    const key = Object.keys(images[0]).find(k => k.includes('VGRAMMAR'));\n\n    // 放置主要图片\n    for (const image of images) {\n      image._widthWithPadding = image.width + image.padding * 2;\n      image._heightWithPadding = image.height + image.padding * 2;\n      image.frequency = 1;\n\n      if (this.tryPlaceImage(image, size, spiralType, segmentationOutput, fixedImages)) {\n        fixedImages.push(image);\n      }\n    }\n\n    // 填充小图片\n    const fillingSizeFactor = 0.5;\n    const fillingSizeDelta = 1;\n    const minImageWidth = minInArray(fixedImages, (a, b) => a.width - b.width).width;\n    const minImageHeight = minInArray(fixedImages, (a, b) => a.height - b.height).height;\n    const fixedFillingImages = [];\n\n    for (let i = 0; i < fillingTimes; i++) {\n      const minWidth = minImageWidth * fillingSizeFactor - fillingSizeDelta * i;\n      const minHeight = minImageHeight * fillingSizeFactor - fillingSizeDelta * i;\n\n      for (const image of images) {\n        const fillingImage = Object.assign({}, image, { visible: true });\n        const imageSize = Math.max(minFillingImageSize, fillingImage.aspectRatio > 1 ? minWidth : minHeight);\n        setSize(fillingImage, imageSize);\n        fillingImage._widthWithPadding = fillingImage.width + fillingImage.padding * 2;\n        fillingImage._heightWithPadding = fillingImage.height + fillingImage.padding * 2;\n\n        if (\n          this.tryPlaceImage(\n            fillingImage,\n            size,\n            spiralType,\n            segmentationOutput,\n            [...fixedFillingImages, ...fixedImages],\n            0.5\n          )\n        ) {\n          image._tempFrequency = (image._tempFrequency ?? image.frequency) + 1;\n          fillingImage.frequency = image._tempFrequency;\n          fillingImage.distance = Math.sqrt(\n            Math.pow(fillingImage.x - size[0] / 2, 2) + Math.pow(fillingImage.y - size[1] / 2, 2)\n          );\n          fillingImage[key] = `${fillingImage[key]}_${fillingImage.frequency}`;\n          fixedFillingImages.push(fillingImage);\n        }\n      }\n    }\n    return [...fixedImages, ...fixedFillingImages].filter(image => image.visible);\n  }\n}\n\nfunction fit(image: ImageCollageType, fixedImages: ImageCollageType[]) {\n  for (let i = 0; i < fixedImages.length; i++) {\n    if (isOverlap(image, fixedImages[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// 判断矩形是否重叠\nfunction isOverlap(a: ImageCollageType, b: ImageCollageType) {\n  if (\n    a._leftWithoutPadding + a._widthWithPadding < b._leftWithoutPadding ||\n    a._topWithoutPadding + a._heightWithPadding < b._topWithoutPadding ||\n    a._leftWithoutPadding > b._leftWithoutPadding + b._widthWithPadding ||\n    a._topWithoutPadding > b._topWithoutPadding + b._heightWithPadding\n  ) {\n    return false;\n  }\n  return true;\n}\n"]}