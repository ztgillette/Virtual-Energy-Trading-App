"use strict";

function rectGridLayout(options) {
    const {imageConfig: imageConfig = {}, size: size, ratio: ratio = .1, layoutConfig: layoutConfig = {}} = options, {padding: padding = 0, imageSize: imageSize} = imageConfig, [width, height] = size;
    let shortSideLength;
    shortSideLength = imageSize || Math.min(width, height) * ratio - 2 * padding, shortSideLength < 0 && (shortSideLength = 1);
    const {rectAspectRatio: rectAspectRatio = 1} = layoutConfig;
    let cellWidth, cellHeight;
    rectAspectRatio > 1 ? (cellWidth = shortSideLength, cellHeight = shortSideLength / rectAspectRatio) : (cellHeight = shortSideLength, 
    cellWidth = shortSideLength * rectAspectRatio);
    const rows = Math.ceil(height / (cellHeight + padding)), cols = Math.ceil(width / (cellWidth + padding)), center_x = width / 2, center_y = height / 2, cellInfo = new Array(cols * rows);
    for (let r = 0; r < rows; r++) for (let c = 0; c < cols; c++) {
        const cellCenterX = c * (cellWidth + padding) + cellWidth / 2, cellCenterY = r * (cellHeight + padding) + cellHeight / 2;
        cellInfo[r * cols + c] = {
            centerX: cellCenterX,
            centerY: cellCenterY,
            x: cellCenterX - cellWidth / 2,
            y: cellCenterY - cellHeight / 2,
            row: r,
            col: c,
            distance: Math.sqrt(Math.pow(cellCenterX - center_x, 2) + Math.pow(cellCenterY - center_y, 2))
        };
    }
    return {
        context: Object.assign({}, layoutConfig, {
            cellWidth: cellWidth,
            cellHeight: cellHeight,
            cellInfo: cellInfo,
            cellCount: cellInfo.length,
            cellType: "rect",
            cellPixelCount: cellWidth * cellHeight,
            eachPixel: (cell, callback) => {
                const {x: x, y: y} = cell;
                for (let r = 0; r < cellWidth; r++) for (let c = 0; c < cellHeight && y + r <= height; c++) x + c > width || callback((~~y + r) * width + (~~x + c));
            },
            clipPath: `M${-cellWidth / 2} ${-cellHeight / 2} L${cellWidth / 2} ${-cellHeight / 2} L${cellWidth / 2} ${cellHeight / 2} L${-cellWidth / 2} ${cellHeight / 2} Z`
        }),
        imageLength: shortSideLength
    };
}

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.rectGridLayout = void 0, exports.rectGridLayout = rectGridLayout;
//# sourceMappingURL=rectGrid.js.map
