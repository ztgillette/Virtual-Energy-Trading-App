{"version":3,"sources":["../src/imagecloud/layout/grid/grid.ts"],"names":[],"mappings":"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","file":"grid.js","sourcesContent":["import type {\n  GridLayoutCellType,\n  GridLayoutConfig,\n  GridLayoutContext,\n  ImageCloudOptions,\n  ImageCollageType\n} from '../../interface';\nimport { setSizeByShortSide } from '../../util';\nimport { Layout } from '../basic';\nimport { rectGridLayout } from './rectGrid';\nimport { circleGridLayout } from './circlGrid';\nimport { hexagonalGridLayout } from './hexagonalGrid';\nimport { pickWithout } from '@visactor/vutils';\n\nconst cellLayout: Record<string, (options: ImageCloudOptions) => { context: GridLayoutContext; imageLength: number }> =\n  {\n    rect: rectGridLayout,\n    circle: circleGridLayout,\n    hexagonal: hexagonalGridLayout\n  };\n\nexport class GridLayout extends Layout {\n  private layoutContext: GridLayoutContext;\n\n  preProcess() {\n    const images = super.preProcess();\n    const { layoutConfig = {} } = this.options;\n    const { cellType = 'rect' } = layoutConfig as GridLayoutConfig;\n\n    const cellLayoutMethod = cellLayout[cellType] ?? cellLayout.rect;\n    const layoutResult = cellLayoutMethod(this.options);\n    const { context, imageLength: shortSideLength } = layoutResult;\n\n    images.forEach(img => setSizeByShortSide(img, shortSideLength));\n    // 根据 distance 排序，距离越小，越靠近画布中心，优先布局\n    context.cellInfo.sort((cellA, cellB) => cellA.distance - cellB.distance);\n\n    this.layoutContext = context;\n    return images;\n  }\n\n  doLayout(images: ImageCollageType[]) {\n    const { cellWidth, cellHeight, cellInfo, cellCount, clipPath, eachPixel, cellPixelCount } = this.layoutContext;\n    if (images.length === 0 || cellCount === 0 || cellWidth === 0 || cellHeight === 0 || cellInfo.length === 0) {\n      this.isLayoutFinished = true;\n      return;\n    }\n\n    const { segmentationOutput } = this;\n    const { layoutConfig = {} } = this.options;\n    const { placement = 'default' } = layoutConfig as GridLayoutConfig;\n\n    if (placement === 'edge' || placement === 'default') {\n      const { segmentation } = segmentationOutput;\n      const { labels } = segmentation;\n\n      cellInfo.forEach(cell => {\n        let intersectPixelCount = 0;\n        eachPixel(cell, (index: number) => {\n          if (labels[index]) {\n            intersectPixelCount++;\n          }\n        });\n        cell.intersectPixels = intersectPixelCount;\n      });\n    }\n\n    const imageCount = images.length;\n    const imageVisible = (cell: GridLayoutCellType) => {\n      const { intersectPixels } = cell;\n      if (placement === 'default') {\n        return intersectPixels >= cellPixelCount * 0.45;\n      } else if (placement === 'edge') {\n        return intersectPixels > cellPixelCount * 0.1 && intersectPixels < cellPixelCount;\n      }\n      return true;\n    };\n    // 先将所有图片布局一遍\n    for (let i = 0; i < imageCount; i++) {\n      const image = images[i];\n      const cell = cellInfo[i];\n      if (cell) {\n        image.x = cell.centerX - image.width / 2;\n        image.y = cell.centerY - image.height / 2;\n        image.clipConfig = { shape: clipPath };\n        image.frequency = 1;\n        image.visible = imageVisible(cell);\n        image.cell = pickWithout(cell, ['image']);\n        image.distance = cell.distance;\n        cell.image = image;\n      }\n    }\n\n    // TODO: dataIndexKey\n    const key = Object.keys(images[0]).find(k => k.includes('VGRAMMAR'));\n    if (imageCount < cellCount) {\n      // 图片数量小于cell数量，创建重复图片用于填充剩余 cell\n      for (let i = imageCount; i < cellCount; i++) {\n        const image = images[i - imageCount];\n        const cell = cellInfo[i];\n        if (cell) {\n          const repeatImage = Object.assign({}, image);\n          repeatImage.x = cell.centerX - repeatImage.width / 2;\n          repeatImage.y = cell.centerY - repeatImage.height / 2;\n          repeatImage.frequency += 1;\n          repeatImage[key] = `${repeatImage[key]}_${repeatImage.frequency}`;\n          repeatImage.visible = imageVisible(cell);\n          repeatImage.distance = cell.distance;\n          repeatImage.cell = pickWithout(cell, ['image']);\n          cell.image = repeatImage;\n          images.push(repeatImage);\n        }\n      }\n    }\n\n    return images.filter(img => img.visible);\n  }\n}\n"]}