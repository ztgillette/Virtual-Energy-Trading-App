{"version":3,"sources":["../src/imagecloud/layout/grid/rectGrid.ts"],"names":[],"mappings":"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","file":"rectGrid.js","sourcesContent":["import type { GridLayoutCellType, GridLayoutConfig, ImageCloudOptions } from '../../interface';\n\nexport function rectGridLayout(options: ImageCloudOptions) {\n  const { imageConfig = {}, size, ratio = 0.1, layoutConfig = {} } = options;\n  const { padding = 0, imageSize } = imageConfig;\n  const [width, height] = size as [number, number];\n  let shortSideLength;\n  if (imageSize) {\n    shortSideLength = imageSize;\n  } else {\n    shortSideLength = Math.min(width, height) * ratio - padding * 2;\n  }\n  if (shortSideLength < 0) {\n    shortSideLength = 1;\n  }\n\n  const { rectAspectRatio = 1 } = layoutConfig as GridLayoutConfig;\n\n  let cellWidth: number;\n  let cellHeight: number;\n  if (rectAspectRatio > 1) {\n    cellWidth = shortSideLength;\n    cellHeight = shortSideLength / rectAspectRatio;\n  } else {\n    cellHeight = shortSideLength;\n    cellWidth = shortSideLength * rectAspectRatio;\n  }\n  const rows = Math.ceil(height / (cellHeight + padding));\n  const cols = Math.ceil(width / (cellWidth + padding));\n  const cellCounts = cols * rows;\n  const center = { x: width / 2, y: height / 2 };\n  const cellInfo = new Array<GridLayoutCellType>(cellCounts);\n  // 初始化 cell 信息\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      // 计算cell的中心点坐标\n      const cellCenterX = c * (cellWidth + padding) + cellWidth / 2;\n      const cellCenterY = r * (cellHeight + padding) + cellHeight / 2;\n\n      // 将cell信息存储到数组中\n      cellInfo[r * cols + c] = {\n        centerX: cellCenterX,\n        centerY: cellCenterY,\n        x: cellCenterX - cellWidth / 2,\n        y: cellCenterY - cellHeight / 2,\n        row: r,\n        col: c,\n        // 计算与中心点的距离\n        distance: Math.sqrt(Math.pow(cellCenterX - center.x, 2) + Math.pow(cellCenterY - center.y, 2))\n      };\n    }\n  }\n  const context = Object.assign({}, layoutConfig, {\n    cellWidth,\n    cellHeight,\n    cellInfo,\n    cellCount: cellInfo.length,\n    cellType: 'rect',\n    cellPixelCount: cellWidth * cellHeight,\n    eachPixel: (cell: GridLayoutCellType, callback: (...args: any) => void) => {\n      const { x, y } = cell;\n      for (let r = 0; r < cellWidth; r++) {\n        for (let c = 0; c < cellHeight && y + r <= height; c++) {\n          if (x + c > width) {\n            continue;\n          }\n          callback((~~y + r) * width + (~~x + c));\n        }\n      }\n    },\n    // 以矩形(0,0)为中心，cellWidth * cellHeight 的矩形\n    clipPath: `M${-cellWidth / 2} ${-cellHeight / 2} L${cellWidth / 2} ${-cellHeight / 2} L${cellWidth / 2} ${\n      cellHeight / 2\n    } L${-cellWidth / 2} ${cellHeight / 2} Z`\n  });\n\n  return { context, imageLength: shortSideLength };\n}\n"]}