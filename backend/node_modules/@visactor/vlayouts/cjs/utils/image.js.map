{"version":3,"sources":["../src/utils/image.ts"],"names":[],"mappings":";;;AAAA,qCAAmE;AAGnE,6CAA4E;AAErE,MAAM,oBAAoB,GAAG,CAClC,eAAwB,EACxB,OAGC,EACD,YAA4B,EAC5B,EAAE;IACF,MAAM,EAAE,SAAS,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;IAEpD,IAAI,CAAC,eAAe,IAAI,eAAe,KAAK,MAAM,EAAE;QAClD,OAAO,CAAC,SAAoB,EAAE,CAAS,EAAE,CAAS,EAAE,EAAE;YACpD,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;YAE9B,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;gBACnD,OAAO,CAAC,MAAM,CAAC;aAChB;YAED,MAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;gBACvC,OAAO,CAAC,MAAM,CAAC;aAChB;YAGD,IAAI,IAAA,sBAAa,EAAC,SAAS,CAAC,EAAE;gBAC5B,MAAM,SAAS,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;gBAChD,OAAO,MAAM,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC;aACjE;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;KACH;IAKD,MAAM,IAAI,GAAG,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IAElG,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC;IACjC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACnD,OAAO,CAAC,SAAoB,EAAE,CAAS,EAAE,CAAS,EAAE,EAAE;QACpD,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;QAE9B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC5B,OAAO,MAAM;gBACX,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;gBACxD,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,oBAAoB,wBAoD/B;AAEK,MAAM,kBAAkB,GAAG,CAChC,KAAyC,EACzC,KAAa,EACb,MAAc,EACd,WAA+B,EAC/B,SAAkB,KAAK,EACvB,YAA4B,EAC5B,EAAE;IACF,IAAI,EAAE,eAAe,GAAG,MAAM,EAAE,GAAG,KAAK,CAAC;IACzC,IAAI,EAAE,IAAI,EAAE,eAAe,GAAG,MAAM,EAAE,GAAG,KAAK,CAAC;IAE/C,IAAI,MAAM,EAAE;QACV,CAAC,eAAe,EAAE,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;KACzE;IAED,MAAM,UAAU,GACd,WAAW;QACX,YAAY,CAAC;YACX,KAAK;YACL,MAAM;YACN,GAAG,EAAE,CAAC;SACP,CAAC,CAAC;IACL,MAAM,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9E,IAAI,WAAW,EAAE;QACf,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC;QACpC,MAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC;QACtC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACnD,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,KAAK,IAAI,CAAC;QACvC,WAAW,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC;QACzC,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;QAC1B,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;KAC7B;IACD,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC;IACxC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IAEhE,IAAK,KAAuB,CAAC,IAAI,KAAK,MAAM,EAAE;QAC5C,YAAY,CAAC,KAAsB,EAAE,eAAe,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;KACzG;SAAM,IAAK,KAA4B,CAAC,IAAI,KAAK,WAAW,EAAE;QAC7D,iBAAiB,CAAC,KAA2B,EAAE,eAAe,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;KACnH;IAED,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AA1CW,QAAA,kBAAkB,sBA0C7B;AAEF,MAAM,YAAY,GAAG,CACnB,KAAoB,EACpB,SAAiB,EACjB,KAAa,EACb,MAAc,EACd,GAA6B,EAC7B,EAAE;IACF,MAAM,EACJ,UAAU,GAAG,YAAY,EACzB,UAAU,GAAG,QAAQ,EACrB,SAAS,GAAG,QAAQ,EACpB,WAAW,GAAG,QAAQ,EACtB,IAAI,EACJ,MAAM,EACP,GAAG,KAAK,CAAC;IAEV,IAAI,YAAY,GAAG,EAAE,CAAC;IAEtB,GAAG,CAAC,IAAI,GAAG,GAAG,SAAS,IAAI,WAAW,IAAI,UAAU,IAAI,YAAY,MAAM,UAAU,EAAE,CAAC;IAEvF,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;IACzB,GAAG,CAAC,YAAY,GAAG,QAAQ,CAAC;IAC5B,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;IAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE1C,MAAM,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,MAAM,WAAW,GACf,IAAA,gBAAO,EAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,IAAA,gBAAO,EAAC,WAAW,CAAC,qBAAqB,CAAC;QACvF,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,sBAAsB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACjH,CAAC,CAAC,CAAC,CAAC;IACR,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;IAEpF,IAAI,MAAM,EAAE;QACV,GAAG,CAAC,wBAAwB,GAAG,KAAK,CAAC;KACtC;IACD,IAAI,SAAS,GAAG,KAAK,EAAE;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,SAAS,EAAE,MAAM,GAAG,YAAY,CAAC,CAAC;QACjE,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1C,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACzB;SAAM;QACL,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;QAC9D,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE9C,GAAG,CAAC,IAAI,GAAG,GAAG,SAAS,IAAI,WAAW,IAAI,UAAU,IAAI,YAAY,MAAM,UAAU,EAAE,CAAC;QACvF,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACnE;AACH,CAAC,CAAC;AAEK,MAAM,cAAc,GAAG,CAAC,MAAkB,EAAE,MAAc,EAAE,aAAqB,CAAC,EAAE,KAAa,EAAE,EAAE;IAC1G,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;IACpC,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACnD,OAAO,IAAA,yBAAgB,EAAC,MAAM,EAAE,MAAM,EAAE,UAAU,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AALW,QAAA,cAAc,kBAKzB;AAEK,MAAM,sBAAsB,GAAG,CAAC,MAAkB,EAAE,MAAc,EAAE,aAAqB,CAAC,EAAE,KAAa,EAAE,EAAE;IAClH,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;IACpC,MAAM,IAAI,GAAG,IAAA,yBAAgB,EAAC,UAAU,CAAC,CAAC;IAE1C,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACnD,MAAM,KAAK,GAAG,UAAU,GAAG,KAAK,GAAG,KAAK,CAAC;QACzC,MAAM,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,GAAG,GAAG,IAAA,yBAAgB,EAAC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC/C,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAVW,QAAA,sBAAsB,0BAUjC;AAEK,MAAM,kBAAkB,GAAG,CAAC,GAA6B,EAAE,MAAoB,EAAE,EAAE;IACxF,GAAG,CAAC,SAAS,EAAE,CAAC;IAChB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAa,EAAE,KAAa,EAAE,EAAE;QAC9C,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;IACH,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,SAAS,EAAE,CAAC;IAChB,GAAG,CAAC,IAAI,EAAE,CAAC;AACb,CAAC,CAAC;AAZW,QAAA,kBAAkB,sBAY7B;AAEK,MAAM,YAAY,GAAG,CAAC,GAA6B,EAAE,MAAoB,EAAE,EAAE;IAClF,GAAG,CAAC,SAAS,EAAE,CAAC;IAChB,IAAI,IAAgB,CAAC;IACrB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAa,EAAE,KAAa,EAAE,EAAE;QAC9C,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;aAAM;YACL,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACvD;QACD,IAAI,GAAG,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,SAAS,EAAE,CAAC;IAChB,GAAG,CAAC,IAAI,EAAE,CAAC;AACb,CAAC,CAAC;AAdW,QAAA,YAAY,gBAcvB;AAEF,MAAM,iBAAiB,GAAG,CACxB,KAAyB,EACzB,SAAiB,EACjB,KAAa,EACb,MAAc,EACd,GAA6B,EAC7B,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IACzB,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,8BAAqB,EAAC,KAAK,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;IAElF,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;IAE1B,IAAI,MAAM,EAAE;QACV,GAAG,CAAC,wBAAwB,GAAG,KAAK,CAAC;KACtC;IACD,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACrB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAErB,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;QAC9B,IAAA,oBAAY,EAAC,GAAG,EAAE,IAAA,8BAAsB,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;KAChF;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;QACnC,GAAG,CAAC,SAAS,EAAE,CAAC;QAChB,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACjD,GAAG,CAAC,IAAI,EAAE,CAAC;KACZ;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;QACpC,IAAA,0BAAkB,EAAC,GAAG,EAAE,IAAA,sBAAc,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACvF;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;QACnC,IAAA,0BAAkB,EAAC,GAAG,EAAE,IAAA,sBAAc,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACvF;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;QACrC,IAAA,0BAAkB,EAAC,GAAG,EAAE,IAAA,sBAAc,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACtF;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,UAAU,IAAI,KAAK,CAAC,KAAK,KAAK,iBAAiB,EAAE;QAC1E,IAAA,0BAAkB,EAAC,GAAG,EAAE,IAAA,sBAAc,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACvF;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,iBAAiB,EAAE;QAC5C,IAAA,0BAAkB,EAAC,GAAG,EAAE,IAAA,sBAAc,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KAC5E;SAAM,IAAI,KAAK,CAAC,KAAK,KAAK,MAAM,EAAE;QACjC,MAAM,YAAY,GAAG,IAAA,sBAAc,EAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAClF,MAAM,WAAW,GAAG,IAAA,sBAAc,EAChC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAChB,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EACvC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,EAC1B,CAAC,CACF,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7B;QACD,IAAA,0BAAkB,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;KACjC;SAAM;QACL,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;KACnC;AACH,CAAC,CAAC;AAWF,SAAgB,YAAY,CAAC,iBAAwC;IACnE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,iBAAiB,CAAC;IAC/C,MAAM,GAAG,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IACtE,MAAM,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IAE9E,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEpD,IAAI,QAAQ,GAAG,CAAC,CAAC;IAEjB,MAAM,MAAM,GAAG;QACb,CAAC,CAAC,EAAE,CAAC,CAAC;QACN,CAAC,CAAC,EAAE,CAAC,CAAC;QACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACR,CAAC;IAEF,IAAI,KAAK,GAAG,EAAE,CAAC;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAEhC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,iBAAiB,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;gBACpF,SAAS;aACV;YAED,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;YAEnC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAGnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1B,IAAI,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,GAAG,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAG7C,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;oBACvD,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;oBAGvD,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE;wBAC7F,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC;wBACvC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;qBACxB;iBACF;aACF;YAGD,QAAQ,EAAE,CAAC;YAEX,KAAK,GAAG,EAAE,CAAC;SACZ;KACF;IAQD,MAAM,UAAU,GAAa,EAAE,CAAC;IAChC,MAAM,KAAK,GAAa,EAAE,CAAC;IAC3B,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,MAAM,IAAI,GAAa,EAAE,CAAC;IAC1B,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,MAAM,WAAW,GAAG;QAClB,EAAE,EAAE,QAAQ;QACZ,EAAE,EAAE,CAAC,QAAQ;QACb,EAAE,EAAE,QAAQ;QACZ,EAAE,EAAE,CAAC,QAAQ;QACb,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;KACV,CAAC;IACF,MAAM,cAAc,GAAuB,EAAE,CAAC;IAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAChC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACtC,IAAI,KAAK,KAAK,CAAC,EAAE;gBACf,SAAS;aACV;YAGD,IAAI,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;gBACzB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE5B,UAAU,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBAC5C,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE/B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;oBACrB,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;iBAC/D;gBACD,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC3B,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBACzB;gBACD,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC3B,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBACzB;gBACD,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC3B,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBACzB;gBACD,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC3B,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBACzB;gBAGD,IAAI,CAAC,GAAG,WAAW,CAAC,EAAE,EAAE;oBACtB,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;iBACpB;gBACD,IAAI,CAAC,GAAG,WAAW,CAAC,EAAE,EAAE;oBACtB,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;iBACpB;gBACD,IAAI,CAAC,GAAG,WAAW,CAAC,EAAE,EAAE;oBACtB,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;iBACpB;gBACD,IAAI,CAAC,GAAG,WAAW,CAAC,EAAE,EAAE;oBACtB,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;iBACpB;aACF;YAGD,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SACxC;KACF;IAGD,MAAM,aAAa,GAAG,EAAE,CAAC;IAGzB,KAAK,MAAM,KAAK,IAAI,UAAU,EAAE;QAC9B,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAEnC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzF,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzF,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxB,aAAa,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;QAEhC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QAElD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CACtB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAC5C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAC5C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAC5C,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAC7C,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;KAC/C;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC;QACtD,KAAK,EAAE,GAAG,GAAG,CAAC;QACd,QAAQ,EAAE,UAAU,CAAC,GAAG,CAAC;QACzB,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC;QAChB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC;QACpB,QAAQ,EAAE,SAAS,CAAC,GAAG,CAAC;QACxB,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;QACf,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC;KACnB,CAAC,CAAC,CAAC;IAGJ,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;IACxD,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;IAEzD,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IACzF,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAEzF,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAC1B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAChE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAChE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAChE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CACjE,CAAC;IACF,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC;IAC1D,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,IAAK,KAAa,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE3F,MAAM,YAAY,GAAG;QACnB,OAAO;QACP,MAAM;QACN,WAAW,EAAE,QAAQ,GAAG,CAAC;KAC1B,CAAC;IAEF,IAAI,iBAAiB,CAAC,IAAI,EAAE;QAC1B,MAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC;QAEpC,MAAM,aAAa,GAAG,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAEnE,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAE5F,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,KAAa,EAAE,EAAE;YAEhD,IAAI,KAAK,KAAK,CAAC,EAAE;gBACf,MAAM,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE;QACtC,YAAY;QACZ,WAAW;QACX,SAAS;QACT,UAAU;QACV,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACnB,SAAS;KACV,CAAC,CAAC;IAOH,SAAS,eAAe,CAAC,CAAS,EAAE,CAAS;QAE3C,MAAM,MAAM,GAAG;YACb,CAAC,CAAC,EAAE,CAAC,CAAC;YACN,CAAC,CAAC,EAAE,CAAC,CAAC;YACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACR,CAAC;QAGF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YAChE,OAAO,IAAI,CAAC;SACb;QAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,IAAI,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAG3B,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACvD,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAEvD,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AAlPD,oCAkPC;AAGD,SAAS,wBAAwB,CAAC,IAAY,EAAE,KAAa;IAC3D,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/C,MAAM,MAAM,GAAG,IAAI,CAAC;IACpB,IAAI,GAAG,GAAG,CAAC,CAAC;IAEZ,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;QAClC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACvB,GAAG,IAAI,CAAC,CAAC;KACV;IAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;KAClB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAGD,SAAS,YAAY,CAAC,MAAgB,EAAE,KAAa,EAAE,MAAc,EAAE,IAAY;IACjF,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC;IACvB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IAGjC,MAAM,MAAM,GAAG,wBAAwB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAGrD,MAAM,IAAI,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAGhD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC9B,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;gBACrD,GAAG,IAAI,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aACpD;YACD,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;SAC3B;KACF;IAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;gBACtD,GAAG,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aAClD;YAED,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;SACvD;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAQD,SAAS,WAAW,CAClB,MAAgB,EAChB,cAAkC,EAClC,KAAa,EACb,MAAc,EACd,SAAS,GAAG,CAAC;IAEb,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEhD,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,cAAc,EAAE;QAEnC,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAG1B,IAAI,SAAS,GAAG,CAAC,EAAE;YAEjB,KAAK,IAAI,EAAE,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,EAAE,IAAI,SAAS,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE;gBACvD,KAAK,IAAI,EAAE,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,EAAE,IAAI,SAAS,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE;oBAEvD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC9C,IAAI,QAAQ,GAAG,SAAS,EAAE;wBACxB,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;wBAClB,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;wBAGlB,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,MAAM,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,KAAK,EAAE;4BAEnD,MAAM,CAAC,EAAE,GAAG,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;yBAC7B;qBACF;iBACF;aACF;SACF;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAKD,SAAgB,YAAY,CAC1B,KAAU,EACV,MAA+B,EAC/B,YAAqE;IAErE,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC3B,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC7B,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;IAClE,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACjD,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC3B,MAAM,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACtE,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;IAC9B,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;IAE5B,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAE,CAAS,EAAE,EAAE;QAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;YAC9B,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,EAAE;QACxD,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,OAAO,GAAG,GAAG,MAAM,IAAI,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;QAC3C,EAAE,GAAG,CAAC;KACP;IACD,OAAO,MAAM,GAAG,CAAC,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE;QACtD,EAAE,MAAM,CAAC;KACV;IACD,OAAO,IAAI,GAAG,KAAK,IAAI,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE;QACrD,EAAE,IAAI,CAAC;KACR;IACD,OAAO,KAAK,GAAG,CAAC,GAAG,IAAI,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE;QAC9D,EAAE,KAAK,CAAC;KACT;IAED,MAAM,OAAO,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,GAAG,IAAI,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC;IACxE,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC7B,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAC/B,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACjD,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAEhC,OAAO,MAAM,CAAC;AAChB,CAAC;AAvDD,oCAuDC;AAMD,SAAgB,mBAAmB,CAAC,KAAU,EAAE,IAAsB;IACpE,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC1B,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAC5B,IAAI,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE;QAC5B,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;KAC1B;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;IAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;IAE7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACnC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAEpC,OAAO;QACL,CAAC;QACD,CAAC;QACD,KAAK,EAAE,QAAQ;QACf,MAAM,EAAE,SAAS;QACjB,KAAK;KACN,CAAC;AACJ,CAAC;AArBD,kDAqBC","file":"image.js","sourcesContent":["import { getMaxRadiusAndCenter, getShapeFunction } from './shapes';\nimport type { GeometricMaskShape, ICreateCanvas, SegmentationInputType, TextShapeMask } from '../interface/wordcloud';\nimport type { IPointLike } from '@visactor/vutils';\nimport { isValid, isValidNumber, polarToCartesian } from '@visactor/vutils';\n\nexport const generateIsEmptyPixel = (\n  backgroundColor?: string,\n  options?: {\n    threshold?: number;\n    invert?: boolean;\n  },\n  createCanvas?: ICreateCanvas\n) => {\n  const { threshold, invert = false } = options ?? {};\n\n  if (!backgroundColor || backgroundColor === '#fff') {\n    return (imageData: ImageData, y: number, x: number) => {\n      const width = imageData.width;\n      // 透明\n      if (imageData.data[y * width * 4 + x * 4 + 3] === 0) {\n        return !invert;\n      }\n      // 白色\n      const r = imageData.data[y * width * 4 + x * 4 + 0];\n      const g = imageData.data[y * width * 4 + x * 4 + 1];\n      const b = imageData.data[y * width * 4 + x * 4 + 2];\n      if (r === 255 && g === 255 && b === 255) {\n        return !invert;\n      }\n\n      // 其他颜色\n      if (isValidNumber(threshold)) {\n        const grayValue = 0.3 * r + 0.59 * g + 0.11 * b;\n        return invert ? grayValue <= threshold : grayValue >= threshold;\n      }\n\n      return false;\n    };\n  }\n\n  /* Determine bgPixel by creating\n      another canvas and fill the specified background color. */\n  // eslint-disable-next-line no-undef\n  const bctx = createCanvas({ width: 1, height: 1 }).getContext('2d', { willReadFrequently: true });\n\n  bctx.fillStyle = backgroundColor;\n  bctx.fillRect(0, 0, 1, 1);\n  const bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n  return (imageData: ImageData, y: number, x: number) => {\n    const width = imageData.width;\n\n    return [0, 1, 2, 3].every(i => {\n      return invert\n        ? imageData.data[(y * width + x) * 4 + i] !== bgPixel[i]\n        : imageData.data[(y * width + x) * 4 + i] === bgPixel[i];\n    });\n  };\n};\n\nexport const generateMaskCanvas = (\n  shape: TextShapeMask | GeometricMaskShape,\n  width: number,\n  height: number,\n  cacheCanvas?: HTMLCanvasElement,\n  invert: boolean = false,\n  createCanvas?: ICreateCanvas\n) => {\n  let { backgroundColor = '#fff' } = shape;\n  let { fill: foregroundColor = '#000' } = shape;\n\n  if (invert) {\n    [backgroundColor, foregroundColor] = [foregroundColor, backgroundColor];\n  }\n\n  const maskCanvas =\n    cacheCanvas ||\n    createCanvas({\n      width,\n      height,\n      dpr: 1\n    });\n  const tempContext = maskCanvas.getContext('2d', { willReadFrequently: true });\n  if (cacheCanvas) {\n    const prevWidth = cacheCanvas.width;\n    const prevHeight = cacheCanvas.height;\n    tempContext.clearRect(0, 0, prevWidth, prevHeight);\n    cacheCanvas.style.width = `${width}px`;\n    cacheCanvas.style.height = `${height}px`;\n    cacheCanvas.width = width;\n    cacheCanvas.height = height;\n  }\n  tempContext.fillStyle = backgroundColor;\n  tempContext.fillRect(0, 0, maskCanvas.width, maskCanvas.height);\n\n  if ((shape as TextShapeMask).type === 'text') {\n    drawTextMask(shape as TextShapeMask, foregroundColor, maskCanvas.width, maskCanvas.height, tempContext);\n  } else if ((shape as GeometricMaskShape).type === 'geometric') {\n    drawGeometricMask(shape as GeometricMaskShape, foregroundColor, maskCanvas.width, maskCanvas.height, tempContext);\n  }\n\n  return maskCanvas;\n};\n\nconst drawTextMask = (\n  shape: TextShapeMask,\n  fillColor: string,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  const {\n    fontFamily = 'sans-serif',\n    fontWeight = 'normal',\n    fontStyle = 'normal',\n    fontVariant = 'normal',\n    text,\n    hollow\n  } = shape;\n\n  let baseFontSize = 12;\n\n  ctx.font = `${fontStyle} ${fontVariant} ${fontWeight} ${baseFontSize}px ${fontFamily}`;\n\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillStyle = fillColor;\n  const textMetrics = ctx.measureText(text);\n  /** 斜体计算字体宽度存在不准的情况，暂时通过方法来解决 */\n  const scale = fontStyle !== 'normal' ? 1.1 : 1;\n  const actualWidth =\n    isValid(textMetrics.actualBoundingBoxRight) && isValid(textMetrics.actualBoundingBoxLeft)\n      ? Math.ceil(scale * (Math.abs(textMetrics.actualBoundingBoxRight) + Math.abs(textMetrics.actualBoundingBoxLeft)))\n      : 0;\n  const textWidth = Math.max(Math.ceil(textMetrics.width), actualWidth, baseFontSize);\n\n  if (hollow) {\n    ctx.globalCompositeOperation = 'xor';\n  }\n  if (textWidth > width) {\n    const scale = Math.min(width / textWidth, height / baseFontSize);\n    ctx.fillText(text, width / 2, height / 2);\n    ctx.scale(scale, scale);\n  } else {\n    baseFontSize = Math.floor((baseFontSize * width) / textWidth);\n    baseFontSize = Math.min(baseFontSize, height);\n\n    ctx.font = `${fontStyle} ${fontVariant} ${fontWeight} ${baseFontSize}px ${fontFamily}`;\n    ctx.fillText(text, Math.floor(width / 2), Math.floor(height / 2));\n  }\n};\n\nexport const generatePoints = (center: IPointLike, radius: number, startAngle: number = 0, count: number) => {\n  const angle = (2 * Math.PI) / count;\n  return new Array(count).fill(0).map((entry, index) => {\n    return polarToCartesian(center, radius, startAngle + index * angle);\n  });\n};\n\nexport const generateCardioidPoints = (center: IPointLike, radius: number, startAngle: number = 0, count: number) => {\n  const angle = (2 * Math.PI) / count;\n  const func = getShapeFunction('cardioid');\n\n  return new Array(count).fill(0).map((entry, index) => {\n    const theta = startAngle + index * angle;\n    const r = radius * func(theta);\n    const res = polarToCartesian(center, r, theta);\n    return res;\n  });\n};\n\nexport const drawRegularPolygon = (ctx: CanvasRenderingContext2D, points: IPointLike[]) => {\n  ctx.beginPath();\n  points.forEach((p: IPointLike, index: number) => {\n    if (index === 0) {\n      ctx.moveTo(p.x, p.y);\n    } else {\n      ctx.lineTo(p.x, p.y);\n    }\n  });\n\n  ctx.closePath();\n  ctx.fill();\n};\n\nexport const drawCardioid = (ctx: CanvasRenderingContext2D, points: IPointLike[]) => {\n  ctx.beginPath();\n  let prev: IPointLike;\n  points.forEach((p: IPointLike, index: number) => {\n    if (index === 0) {\n      ctx.moveTo(p.x, p.y);\n    } else {\n      ctx.bezierCurveTo(p.x, p.y, prev.x, prev.y, p.x, p.y);\n    }\n    prev = p;\n  });\n\n  ctx.closePath();\n  ctx.fill();\n};\n\nconst drawGeometricMask = (\n  shape: GeometricMaskShape,\n  fillColor: string,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  const { hollow } = shape;\n  const { center, maxRadius } = getMaxRadiusAndCenter(shape.shape, [width, height]);\n\n  ctx.fillStyle = fillColor;\n\n  if (hollow) {\n    ctx.globalCompositeOperation = 'xor';\n  }\n  const cx = center[0];\n  const cy = center[1];\n\n  if (shape.shape === 'cardioid') {\n    drawCardioid(ctx, generateCardioidPoints({ x: cx, y: cy }, maxRadius, 0, 100));\n  } else if (shape.shape === 'circle') {\n    ctx.beginPath();\n    ctx.arc(cx, cy, maxRadius, 0, 2 * Math.PI, true);\n    ctx.fill();\n  } else if (shape.shape === 'diamond') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 2, 4));\n  } else if (shape.shape === 'square') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 4, 4));\n  } else if (shape.shape === 'pentagon') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, Math.PI / 2, 5));\n  } else if (shape.shape === 'triangle' || shape.shape === 'triangleUpright') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 2, 3));\n  } else if (shape.shape === 'triangleForward') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, 0, 3));\n  } else if (shape.shape === 'star') {\n    const outterPoints = generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 2, 5);\n    const innerPoints = generatePoints(\n      { x: cx, y: cy },\n      maxRadius / (2 * Math.cos(Math.PI / 5)),\n      -Math.PI / 2 + Math.PI / 5,\n      5\n    );\n    const points = [];\n    for (let i = 0; i < 5; i++) {\n      points.push(outterPoints[i]);\n      points.push(innerPoints[i]);\n    }\n    drawRegularPolygon(ctx, points);\n  } else {\n    ctx.fillRect(0, 0, width, height);\n  }\n};\n\ninterface LabelMap {\n  [key: number]: any;\n}\n\n/**\n * 求图像连通区域的个数、面积、边界、中心点\n * @param {*} shape 图像 base64\n * @param {*} size 画布大小\n */\nexport function segmentation(segmentationInput: SegmentationInputType) {\n  const { size, maskCanvas } = segmentationInput;\n  const ctx = maskCanvas.getContext('2d', { willReadFrequently: true });\n  const imageData = ctx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);\n  // 保存分组标签，0 是背景(像素为白色或透明度为 0)，>1 的分组\n  const labels = new Array(size[0] * size[1]).fill(0);\n  // 当前的种子标签\n  let curLabel = 1;\n  // 四连通位置偏移\n  const offset = [\n    [0, 1],\n    [1, 0],\n    [-1, 0],\n    [0, -1]\n  ];\n  // 当前连通域中的单位域队列\n  let queue = [];\n  // 注意此处，i 为行数即 y，j为x，下同\n  for (let i = 0; i < size[1]; i++) {\n    for (let j = 0; j < size[0]; j++) {\n      // 当前单位域已被标记或者属于背景区域, 则跳过\n      if (labels[i * size[0] + j] !== 0 || segmentationInput.isEmptyPixel(imageData, i, j)) {\n        continue;\n      }\n\n      labels[i * size[0] + j] = curLabel;\n      // 加入当前域队列\n      queue.push([i, j]);\n\n      // 遍历当前域队列\n      for (let k = 0; k < queue.length; k++) {\n        // 四连通范围内检查未标记的前景单位域\n        for (let m = 0; m < 4; m++) {\n          let row: number = queue[k][0] + offset[m][0];\n          let col: number = queue[k][1] + offset[m][1];\n\n          // 防止坐标溢出图像边界\n          row = row < 0 ? 0 : row >= size[1] ? size[1] - 1 : row;\n          col = col < 0 ? 0 : col >= size[0] ? size[0] - 1 : col;\n\n          // 邻近单位域未标记并且属于前景区域, 标记并加入队列\n          if (labels[row * size[0] + col] === 0 && !segmentationInput.isEmptyPixel(imageData, row, col)) {\n            labels[row * size[0] + col] = curLabel;\n            queue.push([row, col]);\n          }\n        }\n      }\n\n      // 一个完整连通域查找完毕，标签更新\n      curLabel++;\n      // 清空队列\n      queue = [];\n    }\n  }\n\n  /**\n   * 使用一次扫描线算法，识别出连通域的边界、面积、最大的边界点以求的最大半径\n   * 边界：二值图像发生突变的地方\n   * 面积：连通域中的像素个数\n   * ratio: 连通区域的大致宽高比\n   */\n  const boundaries: LabelMap = {};\n  const areas: LabelMap = {};\n  const centers: LabelMap = {};\n  const maxPoints: LabelMap = {};\n  const maxR: LabelMap = {};\n  const ratios: LabelMap = {};\n  // 存储形状的范围\n  const shapeBounds = {\n    x1: Infinity,\n    x2: -Infinity,\n    y1: Infinity,\n    y2: -Infinity,\n    width: 0,\n    height: 0\n  };\n  const boundaryPixels: [number, number][] = [];\n\n  for (let i = 0; i < size[1]; i++) {\n    for (let j = 0; j < size[0]; j++) {\n      const label = labels[i * size[0] + j];\n      if (label === 0) {\n        continue;\n      }\n\n      // 当前像素为边界\n      if (isBoundaryPixel(i, j)) {\n        boundaryPixels.push([i, j]);\n\n        boundaries[label] = boundaries[label] || [];\n        boundaries[label].push([j, i]);\n\n        if (!maxPoints[label]) {\n          maxPoints[label] = [Infinity, -Infinity, Infinity, -Infinity];\n        }\n        if (i < maxPoints[label][0]) {\n          maxPoints[label][0] = i;\n        }\n        if (i > maxPoints[label][1]) {\n          maxPoints[label][1] = i;\n        }\n        if (j < maxPoints[label][2]) {\n          maxPoints[label][2] = j;\n        }\n        if (j > maxPoints[label][3]) {\n          maxPoints[label][3] = j;\n        }\n\n        // 更新 bounds\n        if (j < shapeBounds.x1) {\n          shapeBounds.x1 = j;\n        }\n        if (j > shapeBounds.x2) {\n          shapeBounds.x2 = j;\n        }\n        if (i < shapeBounds.y1) {\n          shapeBounds.y1 = i;\n        }\n        if (i > shapeBounds.y2) {\n          shapeBounds.y2 = i;\n        }\n      }\n\n      // 计算面积\n      areas[label] = (areas[label] || 0) + 1;\n    }\n  }\n\n  // 用于计算整个 shape 的中心点\n  const allBoundaries = [];\n\n  // 计算中心点\n  for (const label in boundaries) {\n    const boundary = boundaries[label];\n    // 计算多边形重心\n    const x = ~~(boundary.reduce((acc: any, cur: any) => acc + cur[0], 0) / boundary.length);\n    const y = ~~(boundary.reduce((acc: any, cur: any) => acc + cur[1], 0) / boundary.length);\n    centers[label] = [x, y];\n    allBoundaries.push(...boundary);\n\n    const [yMin, yMax, xMin, xMax] = maxPoints[label];\n\n    maxR[label] = ~~Math.max(\n      Math.sqrt((x - xMin) ** 2 + (y - yMin) ** 2),\n      Math.sqrt((x - xMax) ** 2 + (y - yMax) ** 2),\n      Math.sqrt((x - xMin) ** 2 + (y - yMax) ** 2),\n      Math.sqrt((x - xMax) ** 2 + (y - yMin) ** 2)\n    );\n\n    ratios[label] = (xMax - xMin) / (yMax - yMin);\n  }\n\n  const regions = Object.keys(centers).map((key: any) => ({\n    label: key - 1,\n    boundary: boundaries[key],\n    area: areas[key],\n    center: centers[key],\n    maxPoint: maxPoints[key],\n    maxR: maxR[key],\n    ratio: ratios[key]\n  }));\n\n  // 计算整个 shape 的一些属性\n  shapeBounds.width = shapeBounds.x2 - shapeBounds.x1 + 1;\n  shapeBounds.height = shapeBounds.y2 - shapeBounds.y1 + 1;\n\n  const x = ~~(allBoundaries.reduce((acc, cur) => acc + cur[0], 0) / allBoundaries.length);\n  const y = ~~(allBoundaries.reduce((acc, cur) => acc + cur[1], 0) / allBoundaries.length);\n\n  const shapeMaxR = ~~Math.max(\n    Math.sqrt((x - shapeBounds.x1) ** 2 + (y - shapeBounds.y1) ** 2),\n    Math.sqrt((x - shapeBounds.x2) ** 2 + (y - shapeBounds.y2) ** 2),\n    Math.sqrt((x - shapeBounds.x1) ** 2 + (y - shapeBounds.y2) ** 2),\n    Math.sqrt((x - shapeBounds.x2) ** 2 + (y - shapeBounds.y1) ** 2)\n  );\n  const shapeRatio = shapeBounds.width / shapeBounds.height;\n  const shapeArea = Object.keys(areas).reduce((acc, key) => (acc += (areas as any)[key]), 0);\n  // 输出到 config 上\n  const segmentation = {\n    regions,\n    labels,\n    labelNumber: curLabel - 1\n  };\n\n  if (segmentationInput.blur) {\n    const blur = segmentationInput.blur;\n    // 对原图进行高斯模糊\n    const blurredLabels = gaussianBlur(labels, size[0], size[1], blur);\n    // 绘制边缘，边缘粗细为 blur 大小\n    const edgeMask = drawContour(labels, boundaryPixels, size[0], size[1], Math.ceil(blur / 2));\n    // 从 edgeMask 上选择模糊的像素，合并到 blurred_labels 中\n    edgeMask.forEach((value: number, index: number) => {\n      // 是边缘像素\n      if (value === 1) {\n        labels[index] = blurredLabels[index];\n      }\n    });\n  }\n\n  return Object.assign(segmentationInput, {\n    segmentation,\n    shapeBounds,\n    shapeMaxR,\n    shapeRatio,\n    shapeCenter: [x, y],\n    shapeArea\n  });\n\n  /**\n   * 用四联通去判断是否是边缘像素\n   * @param {*} i\n   * @param {*} j\n   */\n  function isBoundaryPixel(i: number, j: number) {\n    // 四连通位置偏移\n    const offset = [\n      [0, 1],\n      [1, 0],\n      [-1, 0],\n      [0, -1]\n    ];\n\n    // 当 i,j 非背景，且是画布边缘时，则为 boundary\n    if (i === 0 || j === 0 || i === size[1] - 1 || j === size[0] - 1) {\n      return true;\n    }\n\n    // 其他情况用四连通去判断\n    for (let k = 0; k < 4; k++) {\n      let row = i + offset[k][0];\n      let col = j + offset[k][1];\n\n      // 防止坐标溢出图像边界\n      row = row < 0 ? 0 : row >= size[1] ? size[1] - 1 : row;\n      col = col < 0 ? 0 : col >= size[0] ? size[0] - 1 : col;\n\n      if (labels[row * size[0] + col] === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n// 添加辅助函数：生成一维高斯核\nfunction generateGaussianKernel1D(size: number, sigma: number) {\n  const kernel = new Array(size * 2 + 1).fill(0);\n  const center = size;\n  let sum = 0;\n\n  for (let x = -size; x <= size; x++) {\n    const g = Math.exp(-(x * x) / (2 * sigma * sigma));\n    kernel[x + center] = g;\n    sum += g;\n  }\n\n  // 归一化\n  for (let i = 0; i < kernel.length; i++) {\n    kernel[i] /= sum;\n  }\n\n  return kernel;\n}\n\n// 高斯模糊实现\nfunction gaussianBlur(labels: number[], width: number, height: number, blur: number) {\n  const sigma = blur / 3;\n  const size = Math.ceil(blur / 2);\n\n  // 生成一维高斯核\n  const kernel = generateGaussianKernel1D(size, sigma);\n\n  // 创建临时数组存储中间结果\n  const temp = new Array(labels.length).fill(0);\n  const result = new Array(labels.length).fill(0);\n\n  // 水平方向模糊\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let sum = 0;\n      for (let i = -size; i <= size; i++) {\n        const curX = Math.min(Math.max(x + i, 0), width - 1);\n        sum += labels[y * width + curX] * kernel[i + size];\n      }\n      temp[y * width + x] = sum;\n    }\n  }\n\n  // 垂直方向模糊\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      let sum = 0;\n      for (let i = -size; i <= size; i++) {\n        const curY = Math.min(Math.max(y + i, 0), height - 1);\n        sum += temp[curY * width + x] * kernel[i + size];\n      }\n      // 保持值在 0-1 之间，不需要取整\n      result[y * width + x] = Math.max(0, Math.min(1, sum));\n    }\n  }\n\n  return result;\n}\n\n/**\n * 绘制轮廓函数，类似 OpenCV 中的 drawContours\n * @param labels 标签数组\n * @param thickness 轮廓粗细\n * @returns 轮廓掩码数组\n */\nfunction drawContour(\n  labels: number[],\n  boundaryPixels: [number, number][],\n  width: number,\n  height: number,\n  thickness = 1\n) {\n  const result = new Array(labels.length).fill(0);\n  // 根据 thickness 参数绘制轮廓\n  for (const [i, j] of boundaryPixels) {\n    // 将边界像素标记为 1\n    result[i * width + j] = 1;\n\n    // 如果 thickness > 1，则扩展轮廓\n    if (thickness > 1) {\n      // 在边界像素周围创建一个方形区域\n      for (let di = -thickness + 1; di <= thickness - 1; di++) {\n        for (let dj = -thickness + 1; dj <= thickness - 1; dj++) {\n          // 计算距离，只保留在指定厚度内的像素\n          const distance = Math.sqrt(di * di + dj * dj);\n          if (distance < thickness) {\n            const ni = i + di;\n            const nj = j + dj;\n\n            // 检查是否越界\n            if (ni >= 0 && ni < height && nj >= 0 && nj < width) {\n              // 只在非背景区域绘制轮廓\n              result[ni * width + nj] = 1;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * 移除图像中的白边\n */\nexport function removeBorder(\n  image: any,\n  canvas: HTMLCanvasElement | any,\n  isEmptyPixel: (imageData: ImageData, i: number, j: number) => boolean\n) {\n  canvas.width = image.width;\n  canvas.height = image.height;\n  const ctx = canvas.getContext('2d', { willReadFrequently: true });\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(image, 0, 0);\n  const width = canvas.width;\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  let top = 0;\n  let bottom = imageData.height;\n  let left = 0;\n  let right = imageData.width;\n\n  const rowBlank = (width: number, y: number) => {\n    for (let x = 0; x < width; ++x) {\n      if (!isEmptyPixel(imageData, y, x)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const columnBlank = (x: number, y0: number, y1: number) => {\n    for (let y = y0; y < y1; ++y) {\n      if (!isEmptyPixel(imageData, y, x)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  while (top < bottom && rowBlank(width, top)) {\n    ++top;\n  }\n  while (bottom - 1 > top && rowBlank(width, bottom - 1)) {\n    --bottom;\n  }\n  while (left < right && columnBlank(left, top, bottom)) {\n    ++left;\n  }\n  while (right - 1 > left && columnBlank(right - 1, top, bottom)) {\n    --right;\n  }\n\n  const trimmed = ctx.getImageData(left, top, right - left, bottom - top);\n  canvas.width = trimmed.width;\n  canvas.height = trimmed.height;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.putImageData(trimmed, 0, 0);\n\n  return canvas;\n}\n\n/**\n * 调整图像大小和位置，将图像按照长边缩放到适应画布大小，并且居中\n * 此处让图片占满画布，padding 不是这个 transform 需要考虑的\n */\nexport function scaleAndMiddleShape(image: any, size: [number, number]) {\n  const width = image.width;\n  const height = image.height;\n  let scale = size[0] / width;\n  if (height * scale > size[1]) {\n    scale = size[1] / height;\n  }\n\n  const newWidth = Math.floor(scale * width);\n  const newHeight = Math.floor(scale * height);\n  // 图片绘制时的坐标\n  const x = (size[0] - newWidth) / 2;\n  const y = (size[1] - newHeight) / 2;\n\n  return {\n    x,\n    y,\n    width: newWidth,\n    height: newHeight,\n    scale\n  };\n}\n"]}