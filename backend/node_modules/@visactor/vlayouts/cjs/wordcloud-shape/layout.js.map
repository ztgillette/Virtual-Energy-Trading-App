{"version":3,"sources":["../src/wordcloud-shape/layout.ts"],"names":[],"mappings":"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","file":"layout.js","sourcesContent":["import type {\n  CloudWordType,\n  LayoutConfigType,\n  SegmentationOutputType,\n  WordCloudShapeOptions,\n  wordsConfigType\n} from './interface';\nimport { calTextLength, colorListEqual, functor } from './util';\nimport cloud from './cloud-shape-layout';\nimport type { SegmentationInputType } from '../interface/wordcloud';\nimport {\n  generateIsEmptyPixel,\n  generateMaskCanvas,\n  removeBorder,\n  scaleAndMiddleShape,\n  segmentation\n} from '../utils/image';\nimport { loadImage } from '../utils/loader';\nimport { degreeToRadian, fakeRandom, isFunction, isString, maxInArray, simpleField, toNumber } from '@visactor/vutils';\nimport type { FieldOption } from '../wordcloud/wordcloud';\nimport { LinearScale, OrdinalScale, SqrtScale } from '@visactor/vscale';\n\nconst OUTPUT = {\n  x: 'x',\n  y: 'y',\n  fontFamily: 'fontFamily',\n  fontSize: 'fontSize',\n  fontStyle: 'fontStyle',\n  fontWeight: 'fontWeight',\n  angle: 'angle',\n  opacity: 'opacity',\n  visible: 'visible',\n  isFillingWord: 'isFillingWord',\n  color: 'color'\n};\n\nexport class Layout {\n  options: WordCloudShapeOptions;\n\n  data: any[];\n\n  private isImageFinished?: boolean;\n  private isLayoutFinished?: boolean;\n  private progressiveResult?: any[] = [];\n  private segmentationInput?: SegmentationInputType;\n\n  constructor(options: WordCloudShapeOptions) {\n    this.options = options;\n  }\n\n  layout(data: any[]) {\n    this.data = data;\n\n    const options = this.options;\n\n    /** step1: 根据shapeUrl, 计算segmentation */\n    const segmentationInput: SegmentationInputType = {\n      shapeUrl: options.shape,\n      size: options.size,\n      ratio: options.ratio || 0.8,\n      tempCanvas: undefined,\n      boardSize: [0, 0],\n      random: false,\n      randomGenerator: undefined\n    };\n\n    // 全局共用的临时画板，此处需要对小程序的 canvas 进行兼容\n    const tempCanvas = this.options.createCanvas({ width: options.size[0], height: options.size[1] });\n    const tempCtx = tempCanvas.getContext('2d', { willReadFrequently: true });\n    tempCtx.textAlign = 'center';\n    tempCtx.textBaseline = 'middle';\n    segmentationInput.tempCanvas = tempCanvas;\n\n    // board 的宽必须为 32 的倍数\n    const boardW = ((options.size[0] + 31) >> 5) << 5;\n    segmentationInput.boardSize = [boardW, options.size[1]];\n\n    // 用于随机的随机数生成器\n    if (segmentationInput.random) {\n      segmentationInput.randomGenerator = Math.random;\n    } else {\n      segmentationInput.randomGenerator = fakeRandom();\n    }\n    this.segmentationInput = segmentationInput;\n    if (isString(segmentationInput.shapeUrl)) {\n      segmentationInput.isEmptyPixel = generateIsEmptyPixel(undefined, undefined, this.options.createCanvas);\n      const imagePromise = loadImage(segmentationInput.shapeUrl, this.options.createImage);\n\n      if (imagePromise) {\n        this.isImageFinished = false;\n        this.isLayoutFinished = false;\n        imagePromise\n          .then(shapeImage => {\n            this.isImageFinished = true;\n            const maskCanvas = this.options.createCanvas({\n              width: options.size[0],\n              height: options.size[1],\n              dpr: 1\n            }) as unknown as HTMLCanvasElement;\n            segmentationInput.maskCanvas = maskCanvas;\n            const ctx = maskCanvas.getContext('2d');\n            if (options.removeWhiteBorder) {\n              removeBorder(shapeImage, maskCanvas, segmentationInput.isEmptyPixel);\n            }\n            const shapeConfig = scaleAndMiddleShape(shapeImage, options.size);\n            ctx.clearRect(0, 0, options.size[0], options.size[1]);\n            ctx.drawImage(shapeImage as any, shapeConfig.x, shapeConfig.y, shapeConfig.width, shapeConfig.height);\n\n            if (this.options.onUpdateMaskCanvas) {\n              this.options.onUpdateMaskCanvas(segmentationInput.maskCanvas);\n            }\n          })\n          .catch(error => {\n            this.isImageFinished = true;\n          });\n      } else {\n        this.isImageFinished = true;\n        this.isLayoutFinished = true;\n      }\n    } else if (\n      segmentationInput.shapeUrl &&\n      (segmentationInput.shapeUrl.type === 'text' || segmentationInput.shapeUrl.type === 'geometric')\n    ) {\n      segmentationInput.isEmptyPixel = generateIsEmptyPixel(\n        segmentationInput.shapeUrl.backgroundColor,\n        undefined,\n        this.options.createCanvas\n      );\n      const maskCanvas = generateMaskCanvas(\n        segmentationInput.shapeUrl,\n        options.size[0],\n        options.size[1],\n        undefined,\n        false,\n        this.options.createCanvas\n      ) as HTMLCanvasElement;\n      segmentationInput.maskCanvas = maskCanvas;\n\n      if (this.options.onUpdateMaskCanvas) {\n        this.options.onUpdateMaskCanvas(maskCanvas);\n      }\n      this.doLayout();\n      this.isImageFinished = true;\n      this.isLayoutFinished = true;\n    }\n  }\n  canAnimate() {\n    return true;\n  }\n\n  unfinished(): boolean {\n    return !this.isLayoutFinished;\n  }\n\n  output(): any[] {\n    return this.progressiveResult;\n  }\n\n  progressiveRun() {\n    if (!this.isImageFinished || this.isLayoutFinished) {\n      return;\n    }\n\n    if (this.segmentationInput.maskCanvas) {\n      this.doLayout();\n    }\n\n    this.isLayoutFinished = true;\n  }\n\n  progressiveOutput(): any[] {\n    return this.progressiveResult;\n  }\n\n  doLayout() {\n    const segmentationInput = this.segmentationInput;\n    // 对用户输入的图形进行预处理\n    const segmentationOutput: SegmentationOutputType = segmentation(segmentationInput);\n\n    if (!segmentationOutput.segmentation.regions.length) {\n      return;\n    }\n\n    const options = this.options;\n    const data = this.data;\n\n    /** step2: 收集 wordsConfig, 并计算fontSizeScale */\n    const colorMode = options.colorMode || 'ordinal';\n    const wordsConfig: wordsConfigType = {\n      getText: simpleField(options.text as any),\n      getFontSize: simpleField(options.fontSize),\n      fontSizeRange: options.fontSizeRange,\n\n      // color 相关\n      colorMode: colorMode,\n      getColor: options.colorField ? simpleField(options.colorField) : simpleField(options.text),\n      getFillingColor: simpleField(options.fillingColorField),\n      // 根据不同的 colorMode 赋值不同的默认值\n      colorList:\n        options.colorList ||\n        (colorMode === 'ordinal' ? ['#2E62F1'] : ['#537EF5', '#2E62F1', '#2358D8', '#184FBF', '#0C45A6', '#013B8E']),\n      getColorHex: simpleField(options.colorHexField),\n\n      // 字体相关\n      getFontFamily: simpleField(options.fontFamily || 'sans-serif'),\n      rotateList: options.rotateList || [0],\n      getPadding: simpleField(options.padding || 1),\n      getFontStyle: simpleField(options.fontStyle || 'normal'),\n      getFontWeight: simpleField(options.fontWeight || 'normal'),\n      // fontField: options.fontFamily,\n      // fontWeightField: options.fontWeight,\n      // fontStyleField: options.fontStyle,\n      getFontOpacity: options.fontOpacity ? simpleField(options.fontOpacity) : () => 1\n    };\n\n    initFontSizeScale(data, wordsConfig, segmentationOutput);\n\n    /** step3: 收集 layoutConfig, 初始化colorScale */\n    const layoutConfig: LayoutConfigType = {\n      // font style 相关\n      size: options.size,\n      ratio: options.ratio || 0.8,\n\n      // layout 相关\n      shapeUrl: options.shape,\n      random: typeof options.random === 'undefined' ? true : options.random,\n      textLayoutTimes: options.textLayoutTimes ?? 3,\n      removeWhiteBorder: options.removeWhiteBorder,\n      layoutMode: options.layoutMode ?? 'default',\n      fontSizeShrinkFactor: options.fontSizeShrinkFactor ?? 0.8,\n      stepFactor: options.stepFactor ?? 1,\n      importantWordCount: options.importantWordCount ?? 10,\n      globalShinkLimit: options.globalShinkLimit || 0.2,\n      // textLengthLimit: 10,\n      fontSizeEnlargeFactor: options.fontSizeEnlargeFactor ?? 1.5,\n\n      // fill 相关\n      fillingRatio: options.fillingRatio ?? 0.7,\n      fillingTimes: options.fillingTimes ?? 4,\n      // fillingXRatioStep: options.fillingXRatioStep || 0,\n      // fillingYRatioStep: options.fillingYRatioStep || 0,\n      // fillingRatioStep: 步长占长宽的比例，优先级高于fillingStep\n      fillingXStep: options.fillingXRatioStep\n        ? Math.max(Math.floor(options.size[0] * options.fillingXRatioStep), 1)\n        : options.fillingXStep ?? 4,\n      fillingYStep: options.fillingYRatioStep\n        ? Math.max(Math.floor(options.size[1] * options.fillingYRatioStep), 1)\n        : options.fillingYStep ?? 4,\n      fillingInitialFontSize: options.fillingInitialFontSize,\n      fillingDeltaFontSize: options.fillingDeltaFontSize,\n      fillingInitialOpacity: options.fillingInitialOpacity ?? 0.8,\n      fillingDeltaOpacity: options.fillingDeltaOpacity ?? 0.05,\n\n      // fill font style 相关\n      getFillingFontFamily: simpleField(options.fillingFontFamily || 'sans-serif'),\n      getFillingFontStyle: simpleField(options.fillingFontStyle || 'normal'),\n      getFillingFontWeight: simpleField(options.fillingFontWeight || 'normal'),\n      getFillingPadding: simpleField(options.fillingPadding ?? 0.4),\n      fillingRotateList: options.fillingRotateList ?? [0, 90],\n      fillingDeltaFontSizeFactor: options.fillingDeltaFontSizeFactor ?? 0.2,\n\n      // fill color 相关\n      fillingColorList: options.fillingColorList || ['#537EF5'],\n\n      // 经过计算，补充的内容\n      sameColorList: false,\n\n      minInitFontSize: options.minInitFontSize ?? 10,\n      minFontSize: options.minFontSize ?? 4,\n      minFillFontSize: options.minFillFontSize ?? 2\n    };\n    // 核心词与填充词colorList和colorField不一致时，会给填充词设置独立scale\n    const sameColorList = colorListEqual(wordsConfig.colorList, layoutConfig.fillingColorList);\n    layoutConfig.sameColorList = sameColorList;\n    initColorScale(data, wordsConfig, layoutConfig, options);\n\n    /** step4: 初始化填充次fontSize */\n    initFillingWordsFontSize(data, wordsConfig, layoutConfig, segmentationOutput);\n\n    // 过滤掉上游 source 中的填充词，上游数据相关，待去除 @chensiji\n    // data = data.filter((d) => !d.isFillingWord || d.isFillingWord !== true)\n\n    /** step5: 初始化words信息，并执行layout算法 */\n    // 初始化单词信息, 用个代码块避免变量污染外面的变量环境\n    const {\n      getText,\n      getFontFamily,\n      getFontStyle,\n      getFontWeight,\n      getPadding,\n      getColor,\n      getFillingColor,\n      getColorHex,\n      fontSizeScale,\n      colorScale,\n      fillingColorScale,\n      getFontOpacity,\n      rotateList\n    } = wordsConfig;\n\n    const words: CloudWordType[] = data.map(datum => {\n      return {\n        x: 0,\n        y: 0,\n        weight: 0,\n        text: getText(datum),\n        // text: addEllipsis(text(word), config.textLengthLimit),\n        fontFamily: getFontFamily(datum),\n        fontWeight: getFontWeight(datum),\n        fontStyle: getFontStyle(datum),\n        rotate: rotateList[~~(segmentationInput.randomGenerator() * rotateList.length)],\n        fontSize: Math.max(layoutConfig.minInitFontSize, ~~fontSizeScale(datum)),\n        opacity: getFontOpacity(datum),\n        padding: getPadding(datum),\n        color: (getColorHex && getColorHex(datum)) || (colorScale && colorScale(getColor(datum))) || 'black',\n        fillingColor:\n          getFillingColor && (options.colorField?.field !== options.fillingColorField?.field || !sameColorList)\n            ? (getColorHex && getColorHex(datum)) ||\n              (fillingColorScale && fillingColorScale(getFillingColor(datum))) ||\n              'black'\n            : undefined,\n        datum: datum,\n        visible: true,\n        hasPlaced: false\n        // 上游数据相关，待去除 @chensiji\n        // isInAdd: add.indexOf(word) !== -1,\n      };\n    });\n\n    // 计算所有单词的权重 weight，用于后续的布局\n    const wordsMaxFontSize = maxInArray(words.map(word => word.fontSize));\n    words.forEach(word => (word.weight = word.fontSize / wordsMaxFontSize));\n    words.sort((a, b) => b.weight - a.weight);\n\n    // 进行布局\n    const { fillingWords, successedWords, failedWords } = cloud(words, layoutConfig, segmentationOutput);\n    const textKey = (options.text as FieldOption)?.field ?? 'textKey'; // 记录用户是用什么 key 存储 text 信息\n    const dataIndexKey = options.dataIndexKey ?? 'defaultDataIndexKey';\n    /** step5: 将单词信息转换为输出 */\n    const as = options.as ? { ...OUTPUT, ...options.as } : OUTPUT;\n    let w;\n    let t;\n    const modKeywords = [];\n    for (let i = 0; i < words.length; ++i) {\n      w = words[i];\n      t = w.datum;\n      t[as.x] = w.x;\n      t[as.y] = w.y;\n      t[as.fontFamily] = w.fontFamily;\n      t[as.fontSize] = w.fontSize;\n      t[as.fontStyle] = w.fontStyle;\n      t[as.fontWeight] = w.fontWeight;\n      t[as.angle] = degreeToRadian(w.rotate);\n      t[as.opacity] = w.opacity;\n      t[as.visible] = w.visible;\n      t[as.isFillingWord] = false;\n      t[as.color] = w.color;\n      t[dataIndexKey] = `${w.text}_${i}_keyword`;\n\n      modKeywords.push(t);\n    }\n\n    const fillingWordsData: any[] = [];\n    fillingWords.forEach((word, index) => {\n      const t = { ...word.datum };\n      t[as.x] = word.x;\n      t[as.y] = word.y;\n      t[as.fontFamily] = word.fontFamily;\n      t[as.fontSize] = word.fontSize;\n      t[as.fontStyle] = word.fontStyle;\n      t[as.fontWeight] = word.fontWeight;\n      t[as.angle] = degreeToRadian(word.rotate);\n      t[as.opacity] = word.opacity;\n      t[as.visible] = word.visible;\n      t[as.isFillingWord] = true;\n      t[as.color] = !getFillingColor\n        ? layoutConfig.fillingColorList[~~(segmentationInput.randomGenerator() * layoutConfig.fillingColorList.length)]\n        : options.colorField?.field !== options.fillingColorField?.field || !sameColorList\n        ? word.fillingColor\n        : word.color;\n      t[textKey] = word.text;\n\n      // 保证绘制时，mark的唯一性\n      t[dataIndexKey] = `${word.text}_${index}_fillingWords`;\n\n      // updateid(t)\n      fillingWordsData.push(t);\n    });\n\n    // 抛出事件\n    if (this.options.onLayoutFinished) {\n      this.options.onLayoutFinished({ successedWords, failedWords });\n    }\n    // 最后将核心词和填充词合并返回\n    this.progressiveResult = modKeywords.concat(fillingWordsData);\n  }\n\n  release() {\n    this.segmentationInput = null;\n    this.data = null;\n    this.progressiveResult = null;\n    this.options = null;\n  }\n}\n\n/**\n * 根据用户输入的参数初始化 colorScale\n */\nconst initColorScale = (data: any[], wordsConfig: wordsConfigType, layoutConfig: LayoutConfigType, options: any) => {\n  const { colorMode, getColor, getFillingColor } = wordsConfig;\n  const { sameColorList } = layoutConfig;\n  let colorScale;\n  let colorList = wordsConfig.colorList;\n  let fillingColorScale;\n  let fillingColorList = layoutConfig.fillingColorList;\n  if (colorMode === 'ordinal') {\n    // 序数着色模式下\n    const uniqueColorField = data.map(word => getColor(word));\n    colorScale = (datum: any) => {\n      return new OrdinalScale().domain(uniqueColorField).range(colorList).scale(datum);\n    };\n\n    if (getFillingColor && (options.colorField?.field !== options.fillingColorField?.field || !sameColorList)) {\n      const uniquefillingColorField = data.map(datum => getFillingColor(datum));\n      fillingColorScale = (datum: any) => {\n        return new OrdinalScale().domain(uniquefillingColorField).range(fillingColorList).scale(datum);\n      };\n    }\n  } else {\n    // 如果用户只输入了一个 color，无法构成 colorRange，则进行兜底\n    if (colorList.length === 1) {\n      colorList = [colorList[0], colorList[0]];\n    }\n    // 线性着色模式下\n    const valueScale = new LinearScale().domain(extent(getColor, data)).range(colorList);\n\n    colorScale = (i: any) => {\n      return valueScale.scale(i);\n    };\n\n    if (getFillingColor && (options.colorField?.field !== options.fillingColorField?.field || !sameColorList)) {\n      // 线性着色模式下\n      // 如果用户只输入了一个 color，无法构成 colorRange，则进行兜底\n      if (fillingColorList.length === 1) {\n        fillingColorList = [fillingColorList[0], fillingColorList[0]];\n      }\n      const fillingValueScale = new LinearScale().domain(extent(getFillingColor, data)).range(fillingColorList);\n\n      fillingColorScale = (i: any) => {\n        return fillingValueScale.scale(i);\n      };\n    }\n  }\n  Object.assign(wordsConfig, { colorScale, fillingColorScale });\n};\n\n/**\n * 根据用户输入参数初始化 fontSizeScale\n */\nconst initFontSizeScale = (data: any[], wordsConfig: wordsConfigType, segmentationOutput: SegmentationOutputType) => {\n  let { fontSizeRange: range } = wordsConfig;\n  const { getFontSize, getText } = wordsConfig;\n  // const { shapeArea, ratio } = segmentationOutput\n\n  /*\n   * 为避免考虑超长词将字号范围计算的非常小，并且超长词同时无法正确布局的情况\n   * 需要在计算字号范围时排除超长词，超长词确定标准：\n   * textLength * 12 > sqrt(shapeArea)\n   * （字号为12px时，该词长度大于预期长宽的两倍，经验参数）\n   * 超长词不参与字号的自适应计算，但是任然会参与布局\n   * 如果用户遇到边界情况需要布局超长词，需要手动指定fontSizeRange\n   */\n  // const shapeSizeLimitTextLength = Math.ceil(Math.sqrt(shapeArea) / 12);\n\n  // 生成 fontSize 的 scale\n  let fontSizeScale;\n  if (!getFontSize) {\n    // 如果用户没有提供 fontSize 映射的 field, 自动计算 一个固定的 fontSize\n    /**\n     * 单词 字长*(fontSize)**2 与真实的单词面积的大概比例为 b\n     * 目的为 求 x，从而得到最适合的 fontSizeRange\n     * 更详细的算法解析看文档\n     */\n    const words = data.map(word => ({\n      text: getText(word)\n    }));\n    // const wordArea =\n    //   b *\n    //   words.reduce((acc, word) => {\n    //     const textLength = calTextLength(word.text)\n    //     return textLength < shapeSizeLimitTextLength ? acc + textLength : acc\n    //   }, 0)\n    // const x0 = Math.sqrt(ratio * (shapeArea / wordArea))\n\n    const x = getInitialFontSize(words, segmentationOutput, false);\n\n    // fontSize = x\n    // 有了 fontSize 后求解 fontSizeScale\n    fontSizeScale = functor(x);\n    // console.log('自动计算的 fontSize', fontSize)\n  } else if (getFontSize && range) {\n    // fontSize 和 range 都提供了\n    const sizeScale = new SqrtScale().domain(extent(getFontSize, data)).range(range);\n    fontSizeScale = (datum: any) => {\n      return sizeScale.scale(getFontSize(datum));\n    };\n  } else if (getFontSize && isFunction(getFontSize) && !range) {\n    // 提供了 fontSize 的取值的 key，没提供 range，自动计算 range\n    /**\n     * 定义 fontSizeRange 为 [ax, x]\n     * 期望单词占图形面积的比例为 ratio\n     * 单词 字长*(权重映射后的fontSize)**2 与真实的单词面积的大概比例为 b\n     * 目的为 求 x，从而得到最适合的 fontSizeRange\n     * 更详细的算法解析看文档\n     */\n    const a = 0.5;\n    const [min, max] = extent(getFontSize, data);\n    const words = data.map(datum => ({\n      text: getText(datum),\n      value: getFontSize(datum),\n      // weight: (fontSize(word) - min) / (max - min),\n      weight: max === min ? 1 : (getFontSize(datum) - min) / (max - min)\n    }));\n    // const wordArea =\n    //   b *\n    //   words.reduce((acc, word) => {\n    //     const textLength = calTextLength(word.text)\n    //     if (textLength > shapeSizeLimitTextLength) return acc;\n    //     return acc + textLength * (a + (1 - a) * word.weight) ** 2\n    //   }, 0)\n    // const x0 = Math.sqrt(ratio * (shapeArea / wordArea))\n\n    const x = getInitialFontSize(words, segmentationOutput, true);\n\n    range = [~~(a * x), ~~x];\n    // 有了 range 后求解 fontSizeScale\n    const sizeScale = new SqrtScale().domain(extent(getFontSize, data)).range(range);\n    fontSizeScale = (datum: any) => {\n      return sizeScale.scale(getFontSize(datum)); // 最小核心词初始字号10px\n    };\n    // console.log('自动计算的 range', range)\n  }\n\n  // 将相关配置更新到 wordsConfig 上\n  Object.assign(wordsConfig, { getFontSize, fontSizeRange: range, fontSizeScale });\n};\n\nconst getInitialFontSize = (words: any[], segmentationOutput: SegmentationOutputType, weight: boolean) => {\n  /**\n   * 定义 fontSizeRange 为 [ax, x]\n   * 期望单词占图形面积的比例为 ratio\n   * 单词 字长*(权重映射后的fontSize)**2 与真实的单词面积的大概比例为 b\n   * 目的为 求 x，从而得到最适合的 fontSizeRange\n   * 更详细的算法解析看文档\n   */\n\n  const a = 0.5;\n  const b = 1.7;\n  const shapeArea = segmentationOutput.shapeArea;\n  const ratio = segmentationOutput.ratio;\n  const regions = segmentationOutput.segmentation.regions;\n\n  /*\n   * 为避免考虑超长词将字号范围计算的非常小，并且超长词同时无法正确布局的情况\n   * 需要在计算字号范围时排除超长词，超长词确定标准：\n   * textLength * 12 > sqrt(shapeArea)\n   * （字号为12px时，该词长度大于预期长宽的两倍，经验参数）\n   * 超长词不参与字号的自适应计算，但是任然会参与布局\n   * 如果用户遇到边界情况需要布局超长词，需要手动指定fontSizeRange\n   */\n  const shapeSizeLimitTextLength = Math.ceil(Math.sqrt(shapeArea) / 12);\n\n  const wordArea =\n    // b *\n    words.reduce((acc, word) => {\n      // 旧版 VGrammar 逻辑\n      // const textLength = calTextLength(word.text, segmentationOutput.textLengthLimit)\n      const textLength = calTextLength(word.text);\n      return textLength < shapeSizeLimitTextLength\n        ? acc + textLength * (weight ? (a + (1 - a) * word.weight) ** 2 : 1)\n        : acc;\n    }, 0);\n  if (wordArea === 0) {\n    // 只有一个超长词，以12px字号开始初始布局\n    return 12;\n  }\n\n  let x = 20;\n  if (regions.length === 1) {\n    // 单一区域\n    x = Math.sqrt(ratio * (shapeArea / (wordArea * b)));\n  } else {\n    const xArr = [];\n    for (let i = 0; i < regions.length; i++) {\n      const regionArea = regions[i].area;\n      const regionAspect = regions[i].ratio;\n      const regionRatio = regionArea / shapeArea;\n      if (regionRatio < 0.1) {\n        continue;\n      }\n      // 考虑区域长宽比对文字面积的影响(2.7 - regionAspect)，经验参数\n      const regionWordArea = regionRatio * (wordArea * (regionAspect < 1 ? 2.7 - regionAspect : b));\n      const x = Math.sqrt(ratio * (regionArea / regionWordArea));\n\n      xArr.push(x);\n    }\n\n    if (xArr.length) {\n      x = Math.min(...xArr);\n    } else {\n      // 特殊情况当做单一区域处理\n      x = Math.sqrt(ratio * (shapeArea / (wordArea * b)));\n    }\n  }\n  return x;\n};\n\n/**\n * 自动计算 fillingWords 相关的 fontSize\n */\nfunction initFillingWordsFontSize(\n  data: any[],\n  wordsConfig: wordsConfigType,\n  layoutConfig: LayoutConfigType,\n  segmentationOutput: SegmentationOutputType\n) {\n  const { getText } = wordsConfig;\n  let { fillingInitialFontSize, fillingDeltaFontSize } = layoutConfig;\n  const { fillingRatio } = layoutConfig;\n  /*\n   * 为避免考虑超长词将字号范围计算的非常小，并且超长词同时无法正确布局的情况\n   * 需要在计算字号范围时排除超长词，超长词确定标准：\n   * textLength * 4 > sqrt(shapeArea)\n   * （字号为4px时，该词长度大于预期长宽的两倍，经验参数）\n   * 超长词不参与字号的自适应计算，但是任然会参与布局\n   * 如果用户遇到边界情况需要布局超长词，需要手动指定fontSizeRange\n   */\n  const shapeSizeLimitTextLength = Math.ceil(Math.sqrt(segmentationOutput.shapeArea) / 4);\n\n  // 两个值中有一个每天写则自动计算\n  if (!fillingInitialFontSize || !fillingDeltaFontSize) {\n    /**\n     * 自动计算的依据是 填充面积应该与 单词平均长度 * fontSize**2 成一个固定比例 a\n     */\n\n    const a = fillingRatio / 100;\n\n    const averageLength =\n      data.reduce((acc, word) => {\n        const length = calTextLength(getText(word));\n        if (length > shapeSizeLimitTextLength) {\n          return acc;\n        }\n        return acc + length;\n      }, 0) / data.length;\n    let fontSize;\n    if (averageLength === 0) {\n      // 只有一个超长词，以8px字号开始初始布局\n      fontSize = 8;\n    } else {\n      const area = segmentationOutput.shapeArea * 0.2;\n      fontSize = Math.sqrt(a * (area / averageLength));\n    }\n\n    fillingInitialFontSize = ~~fontSize;\n    fillingDeltaFontSize = fontSize * layoutConfig.fillingDeltaFontSizeFactor;\n\n    Object.assign(layoutConfig, {\n      fillingInitialFontSize,\n      fillingDeltaFontSize\n    });\n    // console.log('自动计算的 filling', [\n    //   fillingInitialFontSize,\n    //   fillingDeltaFontSize,\n    // ])\n  }\n}\n\nconst extent = (field: any, data: any[]) => {\n  let min = +Infinity;\n  let max = -Infinity;\n  const n = data.length;\n  let v: any;\n\n  for (let i = 0; i < n; ++i) {\n    // 字符串类型转换\n    v = toNumber(field(data[i]));\n    if (v < min) {\n      min = v;\n    }\n    if (v > max) {\n      max = v;\n    }\n  }\n\n  // 如果单条数据，匹配最大字号\n  if (data.length === 1 && min === max) {\n    min -= 10000;\n  }\n\n  return [min, max];\n};\n"]}