{"version":3,"sources":["../src/tree/cluster.ts"],"names":[],"mappings":"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","file":"cluster.js","sourcesContent":["/* Adapted from d3-hierarchy by Mike Bostock\n * https://observablehq.com/collection/@d3/d3-hierarchy\n * Licensed under the ISC\n\n * url: https://github.com/d3/d3-hierarchy/blob/main/src/cluster.js\n * License: https://github.com/d3/d3-hierarchy/blob/main/LICENSE\n * @license\n */\n\nimport { isNumber } from '@visactor/vutils';\nimport { eachAfter } from '../utils/hierarchy';\nimport type { TreeNodeElement } from './interface';\n\nfunction defaultSeparation(a: TreeNodeElement, b: TreeNodeElement) {\n  return a.parentKey === b.parentKey ? 1 : 2;\n}\n\nfunction meanX(children: TreeNodeElement[]) {\n  return (\n    children.reduce((x, c) => {\n      return x + c.x;\n    }, 0) / children.length\n  );\n}\n\nfunction maxY(children: TreeNodeElement[]) {\n  return (\n    1 +\n    children.reduce((y, c) => {\n      return Math.max(y, c.y);\n    }, 0)\n  );\n}\n\nfunction leafLeft(node: TreeNodeElement) {\n  let children = node.children;\n  while (children) {\n    node = children[0];\n    children = node.children;\n  }\n  return node;\n}\n\nfunction leafRight(node: TreeNodeElement) {\n  let children = node.children;\n  while (children) {\n    node = children[children.length - 1];\n    children = node.children;\n  }\n  return node;\n}\n\nexport function clusterTree(\n  root: TreeNodeElement,\n  viewBox?: { x0: number; y0: number; width: number; height: number },\n  minNodeGap?: number,\n  linkWidth?: number | number[],\n  separation: (a: TreeNodeElement, b: TreeNodeElement) => number = defaultSeparation\n) {\n  let previousNode: TreeNodeElement;\n  let x = 0;\n\n  // First walk, computing the initial x & y values.\n  eachAfter([root], node => {\n    const children = node.children;\n    if (children) {\n      node.x = meanX(children);\n      node.y = maxY(children);\n    } else {\n      node.x = previousNode ? (x += separation(node, previousNode)) : 0;\n      node.y = 0;\n      previousNode = node;\n    }\n  });\n\n  if (isNumber(minNodeGap) && isNumber(linkWidth)) {\n    // Second walk, normalizing x & y to the desired size.\n    eachAfter([root], node => {\n      node.x = viewBox.x0 + (node.x - root.x) * minNodeGap;\n      node.y = viewBox.y0 + (root.y - node.y) * linkWidth;\n    });\n  } else {\n    const left = leafLeft(root);\n    const right = leafRight(root);\n    const x0 = left.x - separation(left, right) / 2;\n    const x1 = right.x + separation(right, left) / 2;\n    const kx = isNumber(minNodeGap) ? minNodeGap : viewBox.width / (x1 - x0);\n\n    eachAfter([root], node => {\n      node.x = viewBox.x0 + (node.x - x0) * kx;\n      node.y = viewBox.y0 + (1 - (root.y ? node.y / root.y : 1)) * viewBox.height;\n    });\n  }\n\n  return root;\n}\n"]}