{"version":3,"sources":["../src/tree/layout.ts"],"names":[],"mappings":"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","file":"layout.js","sourcesContent":["import { eachBefore, calculateNodeValue } from '../utils/hierarchy';\nimport type { TreeOptions, TreeNodeElement } from './interface';\nimport { clusterTree } from './cluster';\nimport { tidyTree } from './tree';\nimport type { HierarchicalData, HierarchicalDatum } from '../interface/common';\nimport { array, field, isFunction, polarToCartesian } from '@visactor/vutils';\n\nexport class TreeLayout {\n  private options: TreeOptions;\n\n  private _getNodeKey?: (datum: HierarchicalDatum) => string;\n\n  private _maxDepth: number;\n\n  static defaultOpionts: Partial<TreeOptions> = {\n    direction: 'horizontal',\n    alignType: 'depth',\n    layoutType: 'orthogonal'\n  };\n\n  constructor(options?: TreeOptions) {\n    this.options = Object.assign({}, TreeLayout.defaultOpionts, options);\n\n    const keyOption = options?.nodeKey;\n    const keyFunc = isFunction(keyOption) ? keyOption : keyOption ? field(keyOption as string) : null;\n\n    this._getNodeKey = keyFunc;\n    this._maxDepth = -1;\n  }\n\n  layout(\n    data: HierarchicalDatum | HierarchicalData,\n    config: { x0: number; x1: number; y0: number; y1: number } | { width: number; height: number }\n  ) {\n    const formattedData = array(data) as HierarchicalData;\n    if (!formattedData.length) {\n      return [];\n    }\n\n    const viewBox =\n      'width' in config\n        ? { x0: 0, x1: config.width, y0: 0, y1: config.height, width: config.width, height: config.height }\n        : {\n            x0: Math.min(config.x0, config.x1),\n            x1: Math.max(config.x0, config.x1),\n            y0: Math.min(config.y0, config.y1),\n            y1: Math.max(config.y0, config.y1),\n            width: Math.abs(config.x1 - config.x0),\n            height: Math.abs(config.y1 - config.y0)\n          };\n    const nodes: TreeNodeElement[] = [];\n    const res = calculateNodeValue<HierarchicalDatum, TreeNodeElement>(\n      formattedData,\n      nodes,\n      0,\n      -1,\n      null,\n      this._getNodeKey\n    );\n    this._maxDepth = res.maxDepth;\n\n    const isVertical = ['vertical', 'TB', 'BT'].includes(this.options.direction);\n    const vb =\n      this.options.layoutType === 'radial'\n        ? {\n            x0: 0,\n            y0: 0,\n            x1: Math.PI * 2,\n            y1: Math.min(viewBox.width, viewBox.height) / 2,\n            width: Math.PI * 2,\n            height: Math.min(viewBox.width, viewBox.height) / 2\n          }\n        : isVertical\n        ? viewBox\n        : {\n            x0: viewBox.y0,\n            y0: viewBox.x0,\n            x1: viewBox.y1,\n            y1: viewBox.x1,\n            width: viewBox.height,\n            height: viewBox.width\n          };\n\n    if (this.options.alignType === 'leaf') {\n      clusterTree(nodes[0], vb, this.options.minNodeGap, this.options.linkWidth);\n    } else {\n      tidyTree(nodes[0], vb, this.options.minNodeGap, this.options.linkWidth);\n    }\n\n    if (this.options.layoutType === 'radial') {\n      const center = {\n        x: (viewBox.x0 + viewBox.x1) / 2,\n        y: (viewBox.y0 + viewBox.y1) / 2\n      };\n\n      eachBefore(nodes, node => {\n        const angle = node.x;\n        const radius = node.y;\n        const res = polarToCartesian(center, radius, angle);\n\n        node.x = res.x;\n        node.y = res.y;\n        node.maxDepth = this._maxDepth;\n      });\n    } else {\n      if (['BT', 'RL'].includes(this.options.direction)) {\n        eachBefore(nodes, node => {\n          node.y = vb.y0 + vb.y1 - node.y;\n          node.maxDepth = this._maxDepth;\n        });\n      } else {\n        eachBefore(nodes, node => {\n          node.maxDepth = this._maxDepth;\n        });\n      }\n\n      if (!isVertical) {\n        eachBefore(nodes, node => {\n          [node.x, node.y] = [node.y, node.x];\n        });\n      }\n    }\n\n    return nodes;\n  }\n}\n"]}