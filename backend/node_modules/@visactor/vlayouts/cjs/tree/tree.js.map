{"version":3,"sources":["../src/tree/tree.ts"],"names":[],"mappings":"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","file":"tree.js","sourcesContent":["/* Adapted from d3-hierarchy by Mike Bostock\n * https://observablehq.com/collection/@d3/d3-hierarchy\n * Licensed under the ISC\n\n * url: https://github.com/d3/d3-hierarchy/blob/main/src/tree.js\n * License: https://github.com/d3/d3-hierarchy/blob/main/LICENSE\n * @license\n */\n\nimport { isArray, isNumber } from '@visactor/vutils';\nimport { eachAfter, eachBefore } from '../utils/hierarchy';\nimport type { TreeNodeElement } from './interface';\n\ninterface TreeNode {\n  _: TreeNodeElement;\n  parent?: TreeNode;\n  children?: TreeNode[];\n  /**\n   * default ancestor\n   */\n  A?: TreeNode;\n  /** ancestor */\n  a?: TreeNode;\n  /** prelim */\n  z: number;\n  /** mod */\n  m: number;\n  /** change */\n  c: number;\n  /** shift */\n  s: number;\n  /** thread */\n  t?: TreeNode;\n  // index\n  i: number;\n}\n\nfunction defaultSeparation(a: TreeNodeElement, b: TreeNodeElement) {\n  return a.parentKey === b.parentKey ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v: TreeNode) {\n  const children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v: TreeNode) {\n  const children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm: TreeNode, wp: TreeNode, shift: number) {\n  const change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v: TreeNode) {\n  let shift = 0;\n  let change = 0;\n  const children = v.children;\n  let i = children.length;\n  let w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim: TreeNode, v: TreeNode, ancestor: TreeNode) {\n  const vimAncestor = vim.a ?? vim;\n\n  return vimAncestor.parent === v.parent ? vimAncestor : ancestor;\n}\n\nfunction createTreeNode(node: TreeNodeElement, i: number): TreeNode {\n  return {\n    _: node,\n    i,\n    parent: null,\n    A: null,\n    a: null,\n    z: 0,\n    m: 0,\n    c: 0,\n    s: 0,\n    t: null\n  };\n}\n\nfunction treeRoot(root: TreeNodeElement) {\n  const tree = createTreeNode(root, 0);\n  const nodes: TreeNode[] = [tree];\n  let child;\n  let children;\n  let i;\n  let n;\n\n  let node = nodes.pop();\n  while (node) {\n    children = node._.children;\n    if (children) {\n      n = children.length;\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        child = createTreeNode(children[i], i);\n        node.children[i] = child;\n        nodes.push(child);\n        child.parent = node;\n      }\n    }\n    node = nodes.pop();\n  }\n\n  tree.parent = createTreeNode(null, 0);\n  tree.parent.children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport function tidyTree(\n  root: TreeNodeElement,\n  viewBox?: { x0: number; y0: number; width: number; height: number },\n  minNodeGap?: number,\n  linkWidth?: number | number[],\n  separation: (a: TreeNodeElement, b: TreeNodeElement) => number = defaultSeparation\n) {\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  const firstWalk = (v: TreeNode) => {\n    const children = v.children;\n    const siblings = v.parent.children;\n    const w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      const midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  };\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  const secondWalk = (v: TreeNode) => {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  };\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  const apportion = (v: TreeNode, w: TreeNode, ancestor: TreeNode) => {\n    if (w) {\n      let vip = v;\n      let vop = v;\n      let vim = w;\n      let vom = vip.parent.children[0];\n      let sip = vip.m;\n      let sop = vop.m;\n      let sim = vim.m;\n      let som = vom.m;\n      let shift;\n      vim = nextRight(vim);\n      vip = nextLeft(vip);\n\n      while (vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n\n        vim = nextRight(vim);\n        vip = nextLeft(vip);\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  };\n\n  const t = treeRoot(root);\n\n  // Compute the layout using Buchheim et al.’s algorithm.\n  eachAfter([t], firstWalk);\n  t.parent.m = -t.z;\n  eachBefore([t], secondWalk);\n\n  let getY: (node: TreeNodeElement) => number;\n\n  if (isNumber(linkWidth)) {\n    getY = (node: TreeNodeElement) => {\n      return node.depth * linkWidth;\n    };\n  } else if (isArray(linkWidth) && linkWidth.length) {\n    const sumed = linkWidth.reduce((res, entry, index) => {\n      res[index] = index === 0 ? entry : res[index - 1] + entry;\n\n      return res;\n    }, []);\n    getY = (node: TreeNodeElement) => {\n      return sumed[node.depth] ?? sumed[sumed.length - 1];\n    };\n  }\n\n  // If a fixed node size is specified, scale x and y.\n  if (isNumber(minNodeGap) && getY) {\n    const setSizeOfNode = (node: TreeNodeElement) => {\n      node.x = viewBox.x0 + viewBox.width / 2 + node.x * minNodeGap;\n      node.y = viewBox.y0 + getY(node);\n    };\n    eachBefore([root], setSizeOfNode);\n  } else {\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    let left = root;\n    let right = root;\n    let bottom = root;\n\n    eachBefore([root], node => {\n      if (node.x < left.x) {\n        left = node;\n      }\n      if (node.x > right.x) {\n        right = node;\n      }\n      if (node.depth > bottom.depth) {\n        bottom = node;\n      }\n    });\n    const s = left === right ? 1 : separation(left, right) / 2;\n    const tx = s - left.x;\n    const kx = isNumber(minNodeGap) ? minNodeGap : viewBox.width / (right.x + s + tx);\n    const ky = viewBox.height / (bottom.depth || 1);\n\n    eachBefore([root], node => {\n      node.x = viewBox.x0 + (node.x + tx) * kx;\n      node.y = viewBox.y0 + (getY ? getY(node) : node.depth * ky);\n    });\n  }\n\n  return root;\n}\n"]}