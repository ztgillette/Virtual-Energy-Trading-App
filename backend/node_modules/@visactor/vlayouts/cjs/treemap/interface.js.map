{"version":3,"sources":["../src/treemap/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { HierarchicalDatum, HierarchicalNodeElement, ViewBoxOptions } from '../interface/common';\n\nexport interface TreemapOptions {\n  /**\n   * The gap width between two nodes which has the same depth, two kinds of value are supported\n   * 1. number: set the gapWidth for nodes of every depth\n   * 2. number[]: number[i] means the gapWidth for node which depth = i;\n   */\n  gapWidth?: number | number[];\n  /**\n   * The padding width, two kinds of value are supported\n   * 1. number: set the padding for nodes of every depth\n   * 2. number[]: number[i] means the padding for node which depth = i;\n   */\n  padding?: number | number[];\n  /**\n   * the width / height ratio\n   */\n  aspectRatio?: number;\n  /**\n   * The padding for non-leaf node, we can use this space to display a label\n   * This pading will only works when the node has enough space\n   */\n  labelPadding?: number | number[];\n  /**\n   * The position of label for non-leaf node\n   */\n  labelPosition?: 'top' | 'bottom' | 'left' | 'right';\n  /**\n   * the type of algorithm\n   */\n  splitType?: 'binary' | 'dice' | 'slice' | 'sliceDice' | 'squarify';\n  /** parse the key of node */\n  nodeKey?: string | number | ((datum: TreemapDatum) => string | number);\n  /**\n   *  the max depth to be showed, when the node has depth > maxDepth, the node won't be calculated\n   */\n  maxDepth?: number;\n  /**\n   * when the area (this unit is px * px) of the node is smaller then this value, this node will be hide\n   */\n  minVisibleArea?: number | number[];\n  /**\n   * when the area (this unit is px * px) of the node is smaller then this value, this children of this node will be hide\n   */\n  minChildrenVisibleArea?: number | number[];\n  /**\n   * when the width or height of the node is smaller then this value, this node will be hide\n   */\n  minChildrenVisibleSize?: number | number[];\n  /**\n   * specify treemap node value field, defaults to `value`\n   */\n  valueField?: string;\n}\n\nexport type TreemapTramsformOptions = TreemapOptions & ViewBoxOptions & { flatten?: boolean };\n\nexport type TreemapData = HierarchicalDatum[];\n\nexport type TreemapDatum = HierarchicalDatum;\n\n/**\n * The node element after treemap layout\n */\nexport interface TreemapNodeElement extends Omit<HierarchicalNodeElement<TreemapDatum>, 'children'> {\n  x0?: number;\n  y0?: number;\n  x1?: number;\n  y1?: number;\n  width?: number;\n  height?: number;\n  labelRect?: { x0?: number; x1?: number; y0?: number; y1?: number };\n\n  children?: TreemapNodeElement[];\n}\n"]}