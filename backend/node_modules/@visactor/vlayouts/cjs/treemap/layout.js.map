{"version":3,"sources":["../src/treemap/layout.ts"],"names":[],"mappings":"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","file":"layout.js","sourcesContent":["import type { TreemapOptions, TreemapDatum, TreemapNodeElement, TreemapData } from './interface';\nimport binary from './binary';\nimport dice from './dice';\nimport slice from './slice';\nimport sliceDice from './sliceDice';\nimport { generateSquarify } from './squarify';\nimport { calculateNodeValue } from '../utils/hierarchy';\nimport { field, isArray, isFunction, isNumber } from '@visactor/vutils';\n\nconst algorithms = { binary, dice, slice, sliceDice };\n\nexport class TreemapLayout {\n  private options: TreemapOptions;\n\n  private _splitNode: (parent: TreemapNodeElement, x0: number, y0: number, x1: number, y1: number) => void;\n\n  private _getNodeKey?: (datum: TreemapDatum) => string;\n\n  private _maxDepth: number;\n\n  static defaultOpionts: Partial<TreemapOptions> = {\n    aspectRatio: (1 + Math.sqrt(5)) / 2,\n    gapWidth: 0,\n    labelPadding: 0,\n    labelPosition: 'top',\n    splitType: 'binary',\n    minVisibleArea: 10\n  };\n  constructor(options?: TreemapOptions) {\n    this.options = Object.assign({}, TreemapLayout.defaultOpionts, options);\n\n    const keyOption = this.options.nodeKey;\n    const keyFunc = isFunction(keyOption) ? keyOption : keyOption ? field(keyOption as string) : null;\n\n    this._getNodeKey = keyFunc;\n    this._splitNode =\n      this.options.splitType === 'squarify'\n        ? generateSquarify(this.options.aspectRatio)\n        : algorithms[this.options.splitType] ?? algorithms.binary;\n    this._maxDepth = -1;\n  }\n\n  private _filterByArea = (node: TreemapNodeElement, ratio: number) => {\n    const minArea = this._getMinAreaByDepth(node.depth);\n\n    if (minArea > 0 && node.value * ratio < minArea) {\n      return false;\n    } else if (node.children?.length) {\n      const newChildren = node.children.filter(child => {\n        return this._filterByArea(child, ratio);\n      });\n\n      if (!newChildren.length) {\n        node.isLeaf = true;\n        node.children = null;\n      } else if (newChildren.length !== node.children.length) {\n        node.children = newChildren;\n      }\n    }\n\n    return true;\n  };\n\n  layout(\n    data: TreemapData,\n    config: { x0: number; x1: number; y0: number; y1: number } | { width: number; height: number }\n  ) {\n    if (!data || !data.length) {\n      return [];\n    }\n    const viewBox =\n      'width' in config\n        ? { x0: 0, x1: config.width, y0: 0, y1: config.height, width: config.width, height: config.height }\n        : {\n            x0: Math.min(config.x0, config.x1),\n            x1: Math.max(config.x0, config.x1),\n            y0: Math.min(config.y0, config.y1),\n            y1: Math.max(config.y0, config.y1),\n            width: Math.abs(config.x1 - config.x0),\n            height: Math.abs(config.y1 - config.y0)\n          };\n\n    const nodes: TreemapNodeElement[] = [];\n    const res = calculateNodeValue<TreemapDatum, TreemapNodeElement>(\n      data,\n      nodes,\n      0,\n      -1,\n      null,\n      this._getNodeKey,\n      this.options.valueField\n    );\n    this._maxDepth = res.maxDepth;\n\n    if (res.sum <= 0) {\n      return [];\n    }\n\n    const root: TreemapNodeElement = {\n      flattenIndex: -1,\n      maxDepth: -1,\n      key: '-1',\n      depth: -1,\n      index: -1,\n      value: res.sum,\n      datum: null,\n      x0: viewBox.x0,\n      x1: viewBox.x1,\n      y0: viewBox.y0,\n      y1: viewBox.y1,\n      children: nodes\n    };\n    const areaRatio = (viewBox.width * viewBox.height) / res.sum;\n    this._filterByArea(root, areaRatio);\n\n    this._layout(root);\n\n    return root.children ?? [];\n  }\n\n  private _getMinAreaByDepth = (depth: number) => {\n    if (depth < 0) {\n      return 0;\n    }\n\n    return (\n      (isArray(this.options.minVisibleArea) ? this.options.minVisibleArea[depth] : this.options.minVisibleArea) ?? 0\n    );\n  };\n\n  private _getGapWidthByDepth = (depth: number) => {\n    if (depth < 0) {\n      return 0;\n    }\n\n    return (isArray(this.options.gapWidth) ? this.options.gapWidth[depth] : this.options.gapWidth) ?? 0;\n  };\n\n  private _getPaddingByDepth = (depth: number) => {\n    if (depth < 0) {\n      return 0;\n    }\n\n    return (isArray(this.options.padding) ? this.options.padding[depth] : this.options.padding) ?? 0;\n  };\n\n  private _getLabelPaddingByDepth = (depth: number) => {\n    if (depth < 0) {\n      return 0;\n    }\n\n    return (isArray(this.options.labelPadding) ? this.options.labelPadding[depth] : this.options.labelPadding) ?? 0;\n  };\n\n  private _filterChildren(node: TreemapNodeElement) {\n    const maxDepth = this.options.maxDepth;\n    if (isNumber(maxDepth) && maxDepth >= 0 && node.depth >= maxDepth) {\n      return false;\n    }\n\n    const minChildrenVisibleArea = this.options.minChildrenVisibleArea;\n    if (\n      isNumber(minChildrenVisibleArea) &&\n      Math.abs((node.x1 - node.x0) * (node.y1 - node.y0)) < minChildrenVisibleArea\n    ) {\n      return false;\n    }\n\n    const minChildrenVisibleSize = this.options.minChildrenVisibleSize;\n    if (\n      isNumber(minChildrenVisibleSize) &&\n      (Math.abs(node.x1 - node.x0) < minChildrenVisibleSize || Math.abs(node.y1 - node.y0) < minChildrenVisibleSize)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private _layout(parent: TreemapNodeElement) {\n    if (!this._filterChildren(parent)) {\n      parent.children = null;\n      parent.isLeaf = true;\n    }\n\n    this._layoutNode(parent);\n\n    if (parent.children?.length) {\n      parent.children.forEach(child => {\n        if (child?.children?.length) {\n          this._layout(child);\n        } else {\n          this._layoutNode(child);\n        }\n      });\n    }\n  }\n\n  private _layoutNode = (parent: TreemapNodeElement) => {\n    const gapWidth = this._getGapWidthByDepth(parent.depth);\n    let x0 = parent.x0;\n    let y0 = parent.y0;\n    let x1 = parent.x1;\n    let y1 = parent.y1;\n\n    parent.maxDepth = this._maxDepth;\n\n    if (gapWidth > 0) {\n      x0 += gapWidth / 2;\n      x1 -= gapWidth / 2;\n      y0 += gapWidth / 2;\n      y1 -= gapWidth / 2;\n\n      if (x0 > x1) {\n        x0 = (x0 + x1) / 2;\n        x1 = x0;\n      }\n\n      if (y0 > y1) {\n        y0 = (y0 + y1) / 2;\n        y1 = y0;\n      }\n\n      parent.x0 = x0;\n      parent.x1 = x1;\n      parent.y0 = y0;\n      parent.y1 = y1;\n    }\n\n    if (parent.children) {\n      const labelPadding = this._getLabelPaddingByDepth(parent.depth);\n      const padding = this._getPaddingByDepth(parent.depth);\n\n      if (padding > 0) {\n        if (padding < Math.min(x1 - x0, y1 - y0) / 2) {\n          // has enough space for padding\n          y0 += padding;\n          y1 -= padding;\n          x0 += padding;\n          x1 -= padding;\n        }\n      }\n\n      if (labelPadding > 0) {\n        if (this.options.labelPosition === 'top' && y0 + labelPadding < y1) {\n          parent.labelRect = { x0: x0, y0: y0, x1, y1: y0 + labelPadding };\n          y0 += labelPadding;\n        } else if (this.options.labelPosition === 'bottom' && y1 - labelPadding > y0) {\n          parent.labelRect = { x0: x0, y0: y1 - labelPadding, x1, y1: y1 };\n          y1 -= labelPadding;\n        } else if (this.options.labelPosition === 'left' && x0 + labelPadding < x1) {\n          parent.labelRect = { x0: x0, y0: y0, x1: x0 + labelPadding, y1 };\n          x0 += labelPadding;\n        } else if (this.options.labelPosition === 'right' && x1 - labelPadding > x0) {\n          parent.labelRect = { x0: x1 - labelPadding, y0: y0, x1: x1, y1 };\n          x1 -= labelPadding;\n        }\n      }\n\n      const childGapWidth = this._getGapWidthByDepth(parent.depth + 1);\n\n      if (childGapWidth > 0) {\n        x0 -= childGapWidth / 2;\n        x1 += childGapWidth / 2;\n        y0 -= childGapWidth / 2;\n        y1 += childGapWidth / 2;\n      }\n\n      this._splitNode(parent, x0, y0, x1, y1);\n    }\n  };\n}\n"]}