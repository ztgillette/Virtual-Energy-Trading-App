{"version":3,"sources":["../src/treemap/squarify.ts"],"names":[],"mappings":"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","file":"squarify.js","sourcesContent":["/* Adapted from d3-hierarchy by Mike Bostock\n * https://observablehq.com/collection/@d3/d3-hierarchy\n * Licensed under the ISC\n\n * url: https://github.com/d3/d3-hierarchy/blob/main/src/treemap/squarify.js\n * License: https://github.com/d3/d3-hierarchy/blob/main/LICENSE\n * @license\n */\n\nimport type { TreemapNodeElement } from './interface';\nimport treemapDice from './dice';\nimport treemapSlice from './slice';\n\nexport function squarifyRatio(\n  ratio: number,\n  parent: TreemapNodeElement,\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number\n) {\n  const rows = [];\n  const nodes = parent.children;\n  let row;\n  let nodeValue;\n  let i0 = 0;\n  let i1 = 0;\n  const n = nodes.length;\n  let dx;\n  let dy;\n  let value = parent.value;\n  let sumValue;\n  let minValue;\n  let maxValue;\n  let newRatio;\n  let minRatio;\n  let alpha;\n  let beta;\n\n  while (i0 < n) {\n    dx = x1 - x0;\n    dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do {\n      sumValue = nodes[i1++].value;\n    } while (!sumValue && i1 < n);\n\n    minValue = sumValue;\n    maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      nodeValue = nodes[i1].value;\n      sumValue += nodeValue;\n\n      if (nodeValue < minValue) {\n        minValue = nodeValue;\n      }\n      if (nodeValue > maxValue) {\n        maxValue = nodeValue;\n      }\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    row = Object.assign({}, parent, { value: sumValue, children: nodes.slice(i0, i1) });\n    rows.push(row);\n    if (dx < dy) {\n      treemapDice(row, x0, y0, x1, value ? (y0 += (dy * sumValue) / value) : y1);\n    } else {\n      treemapSlice(row, x0, y0, value ? (x0 += (dx * sumValue) / value) : x1, y1);\n    }\n    value -= sumValue;\n    i0 = i1;\n  }\n\n  return rows;\n}\n\nexport const generateSquarify = (ratio: number) => {\n  return (parent: TreemapNodeElement, x0: number, y0: number, x1: number, y1: number) => {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  };\n};\n"]}