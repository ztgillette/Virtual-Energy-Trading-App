{"version":3,"sources":["../src/sankey/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["export interface SankeyOptions {\n  /**\n   * divide the value of node to link when link not specify value\n   */\n  divideNodeValueToLink?: boolean;\n  /**\n   * The layout direction of chart\n   */\n  direction?: 'horizontal' | 'vertical';\n  /**\n   * 是否开启反向坐标轴。\n   * @default false\n   * @since 0.14.1\n   */\n  inverse?: boolean;\n  /**\n   * the align type of y position of nodes is differnt layer when the direction is `hotizontal`\n   * the align type of x position of nodes is differnt layer when the direction is `hotizontal`\n   * the option `parent` is added since 0.14.17\n   */\n  crossNodeAlign?: 'start' | 'end' | 'middle' | 'parent';\n  /**\n   * The align type of all the nodes\n   */\n  nodeAlign?: 'left' | 'right' | 'center' | 'justify' | 'start' | 'end';\n  /**\n   * The gap size between two nodes in the same layer\n   */\n  nodeGap?: number | ((node: SankeyNodeElement) => number);\n  /**\n   * the position of gap\n   */\n  gapPosition?: 'start' | 'end' | 'middle';\n  /**\n   * The width of each node, three kinds of value are supported\n   * 1. percent string, eg: { nodeWidth: '12%' }\n   * 2. simple number by the unit of 'px', eg: { nodeWidth: 20 }\n   * 3. function, specify the nodeWidth by cutomized calculation\n   */\n  nodeWidth?: string | number | ((node?: SankeyNodeElement, nodes?: SankeyNodeElement[]) => number);\n  /**\n   * set equal node height of nodes\n   * @since 0.13.0\n   */\n  equalNodeHeight?: boolean;\n  /**\n   * set the height of node\n   * @since 0.13.0\n   */\n  nodeHeight?: number | ((node: SankeyNodeElement) => number);\n  /**\n   * set the height of link\n   * @since 0.13.0\n   */\n  linkHeight?: number | ((link: SankeyLinkElement, sourceNode: SankeyNodeElement, sourceNodeHeight: number) => number);\n  /**\n   * The width of link, the unit is px\n   */\n  linkWidth?:\n    | number\n    | ((\n        link: SankeyLinkElement,\n        viewBox: { x0: number; x1: number; y0: number; y1: number; width: number; height: number }\n      ) => number);\n  /**\n   * The minimal width of link + node\n   */\n  minStepWidth?: number;\n  /**\n   * The minimal size of node when data is not zero or null\n   * This configuration can be used to avoid too thin node to be seen when data is too small\n   * It's recommended to be smaller than 5px\n   */\n  minNodeHeight?: number;\n  /**\n   * the maximal size of node when data is not zero or null\n   * this configuration can be used to avoid too large node to be seen when data is too big\n   * @since 0.14.17\n   */\n  maxNodeHeight?: number;\n  /**\n   * The minimal size of link when data is not zero or null\n   * This configuration can be used to avoid too thin link to be seen when data is too small\n   * It's recommended to be smaller than 5px\n   * This option should be smaller than `minNodeHeight` when both options are specified\n   */\n  minLinkHeight?: number;\n  /**\n   * the maximal size of link when data is not zero or null\n   * @since 0.14.17\n   */\n  maxLinkHeight?: number;\n  /** the iteration count of layout */\n  iterations?: number;\n  /** parse the key of node, the defaultValue */\n  nodeKey?: string | number | ((datum: SankeyNodeDatum) => string | number);\n  /** sort link by this function */\n  linkSortBy?: (a: SankeyLinkElement, b: SankeyLinkElement) => number;\n  /** sort node by this function */\n  nodeSortBy?: (a: SankeyNodeElement, b: SankeyNodeElement) => number;\n  /** specify the layer of node by customizedly */\n  setNodeLayer?: (datum: SankeyNodeDatum) => number;\n\n  dropIsolatedNode?: boolean;\n  /**\n   * set the layout type of link\n   * @since 0.13.0\n   */\n  linkOverlap?: 'start' | 'center' | 'end';\n}\n\nexport interface SankeyLinkDatum {\n  source: string | number;\n  target: string | number;\n  value?: number;\n}\n\nexport interface SankeyNodeDatum {\n  value?: number;\n}\n\nexport interface HierarchyNodeDatum {\n  value?: number;\n  children?: HierarchyNodeDatum[];\n}\n\nexport type SankeyData =\n  | {\n      nodes?: SankeyNodeDatum[];\n      links: SankeyLinkDatum[];\n    }\n  | {\n      nodes: HierarchyNodeDatum[];\n    };\n\n/**\n * The node element after sankey layout\n */\nexport interface SankeyNodeElement {\n  key: string | number;\n  index: number;\n  /** the depth of node, from source to target */\n  depth: number;\n\n  /** the depth of node, from target to source */\n  endDepth?: number;\n  /** the final layer index after layout */\n  layer?: number;\n  isLastLayer?: boolean;\n  value: number;\n  datum: SankeyNodeDatum;\n  sourceLinks: SankeyLinkElement[];\n  targetLinks: SankeyLinkElement[];\n  x0?: number;\n  y0?: number;\n  x1?: number;\n  y1?: number;\n}\n/**\n * the link element after sankey layout\n */\nexport interface SankeyLinkElement {\n  key?: string;\n  vertical?: boolean;\n  index: number;\n  source: string | number;\n  target: string | number;\n  value: number;\n  datum: SankeyLinkDatum | SankeyLinkDatum[];\n  thickness?: number;\n  sourceRect?: { x0: number; x1: number; y0: number; y1: number };\n  targetRect?: { x0: number; x1: number; y0: number; y1: number };\n  /** this will only be generate in hierarchy node data*/\n  parents?: (string | number)[];\n  y0?: number;\n  y1?: number;\n  x0?: number;\n  x1?: number;\n}\n\nexport type SankeyLayoutResult = {\n  nodes: SankeyNodeElement[];\n  links: SankeyLinkElement[];\n  columns: SankeyNodeElement[][];\n}[];\n"]}