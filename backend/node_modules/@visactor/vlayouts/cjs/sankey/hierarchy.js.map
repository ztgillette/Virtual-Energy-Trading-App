{"version":3,"sources":["../src/sankey/hierarchy.ts"],"names":[],"mappings":"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","file":"hierarchy.js","sourcesContent":["import { isNil, pickWithout, toValidNumber } from '@visactor/vutils';\n\nimport type { HierarchyNodeDatum, SankeyLinkDatum, SankeyLinkElement, SankeyNodeElement } from './interface';\n\nexport const calculateNodeValue = (subTree: HierarchyNodeDatum[]) => {\n  let sum = 0;\n  subTree.forEach((node, index) => {\n    if (isNil(node.value)) {\n      if (node.children?.length) {\n        node.value = calculateNodeValue(node.children);\n      } else {\n        node.value = 0;\n      }\n    }\n\n    sum += Math.abs(node.value);\n  });\n\n  return sum;\n};\n\nexport function makeHierarchicNodes(\n  originalNodes: HierarchyNodeDatum[],\n  nodeKeyFunc: (node: HierarchyNodeDatum) => string,\n  nodes: SankeyNodeElement[] = [],\n  nodeMap: Record<string | number, SankeyNodeElement> = {},\n  originalLinks?: (SankeyLinkDatum & { parents?: SankeyNodeElement[] })[]\n) {\n  calculateNodeValue(originalNodes);\n\n  const doSubTree = (subTree: HierarchyNodeDatum[], depth: number, parents?: SankeyNodeElement[]) => {\n    subTree.forEach((node, index) => {\n      const nodeKey = nodeKeyFunc\n        ? nodeKeyFunc(node)\n        : parents\n        ? `${parents[parents.length - 1].key}-${index}`\n        : `${depth}-${index}`;\n      const nodeValue: number = (isNil(node.value) ? 0 : toValidNumber(node.value)) as number;\n\n      if (nodeMap[nodeKey]) {\n        nodeMap[nodeKey].value = undefined;\n      } else {\n        const nodeElement: SankeyNodeElement = {\n          depth,\n          datum: node,\n          index: index,\n          key: nodeKey,\n          value: nodeValue,\n          sourceLinks: [] as SankeyLinkElement[],\n          targetLinks: [] as SankeyLinkElement[]\n        };\n\n        nodeMap[nodeKey] = nodeElement;\n        nodes.push(nodeElement);\n      }\n      if (parents && originalLinks) {\n        originalLinks.push({\n          source: parents[parents.length - 1].key,\n          target: nodeKey,\n          value: nodeValue,\n          parents\n        });\n      }\n\n      if (node.children && node.children.length) {\n        doSubTree(node.children, depth + 1, parents ? parents.concat([nodeMap[nodeKey]]) : [nodeMap[nodeKey]]);\n      }\n    });\n  };\n\n  doSubTree(originalNodes, 0, null);\n  return nodes;\n}\n\nexport function computeHierarchicNodeLinks(\n  originalNodes: HierarchyNodeDatum[],\n  nodeKeyFunc: (node: HierarchyNodeDatum) => string\n) {\n  const nodes: SankeyNodeElement[] = [];\n  const links: SankeyLinkElement[] = [];\n  const nodeMap: Record<string | number, SankeyNodeElement> = {};\n  const linkMap: Record<string | number, SankeyLinkElement> = {};\n  const originalLinks: (SankeyLinkDatum & { parents?: SankeyNodeElement[] })[] = [];\n\n  makeHierarchicNodes(originalNodes, nodeKeyFunc, nodes, nodeMap, originalLinks);\n\n  originalLinks.forEach((link, index) => {\n    const key = `${link.source}-${link.target}`;\n    const linkDatum = pickWithout(link, ['parents']);\n\n    (linkDatum as any).parents = link.parents.map(node => {\n      return pickWithout(node, ['sourceLinks', 'targetLinks']);\n    });\n\n    if (linkMap[key]) {\n      linkMap[key].value += toValidNumber(link.value);\n\n      (linkMap[key].datum as SankeyLinkDatum[]).push(linkDatum as SankeyLinkDatum);\n\n      return;\n    }\n    const linkElement = {\n      index,\n      key: `${link.source}-${link.target}`,\n      source: link.source,\n      target: link.target,\n      datum: [linkDatum] as any,\n      value: link.value,\n      parents: link.parents.map(parent => parent.key)\n    };\n\n    links.push(linkElement);\n    nodeMap[link.source].sourceLinks.push(linkElement);\n    nodeMap[link.target].targetLinks.push(linkElement);\n    linkMap[key] = linkElement;\n  });\n\n  return { nodes, links, nodeMap };\n}\n\nexport function computeNodeValues(nodes: SankeyNodeElement[]) {\n  for (let i = 0, len = nodes.length; i < len; i++) {\n    const node = nodes[i];\n\n    node.value = Math.max(\n      isNil(node.value) ? 0 : toValidNumber(node.value),\n      node.sourceLinks.reduce((sum, link: SankeyLinkElement) => {\n        return sum + (toValidNumber(link.value) ?? 0);\n      }, 0),\n      node.targetLinks.reduce((sum, link: SankeyLinkElement) => {\n        return sum + (toValidNumber(link.value) ?? 0);\n      }, 0)\n    );\n  }\n}\n"]}