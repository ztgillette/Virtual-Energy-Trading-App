{"version":3,"sources":["../src/sankey/format.ts"],"names":[],"mappings":"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","file":"format.js","sourcesContent":["import type { IPointLike } from '@visactor/vutils';\nimport { isNil } from '@visactor/vutils';\nimport type { SankeyNodeElement, SankeyLinkElement } from './interface';\n\nexport const formatNodeRect = (\n  nodes: SankeyNodeElement[]\n): { x: number; y: number; width: number; height: number }[] => {\n  return nodes.map(node => {\n    return Object.assign({}, node, {\n      x: node.x0,\n      y: node.y0,\n      width: node.x1 - node.x0,\n      height: node.y1 - node.y0\n    });\n  });\n};\n\nexport const formatLinkPolygon = (links: SankeyLinkElement[]): ({ points: IPointLike[] } & SankeyLinkElement)[] => {\n  const isVertical = !isNil(links?.[0]?.vertical);\n\n  if (isVertical) {\n    return links.map(link => {\n      const half = link.thickness / 2;\n      const points: IPointLike[] = [\n        {\n          x: link.x0 - half,\n          y: link.y0\n        },\n        {\n          x: link.x1 - half,\n          y: link.y1\n        },\n        {\n          x: link.x1 + half,\n          y: link.y1\n        },\n        {\n          x: link.x0 + half,\n          y: link.y0\n        }\n      ];\n\n      return Object.assign({}, link, { points: points });\n    });\n  }\n\n  return links.map(link => {\n    const half = link.thickness / 2;\n    const points: IPointLike[] = [\n      {\n        x: link.x0,\n        y: link.y0 - half\n      },\n      {\n        x: link.x1,\n        y: link.y1 - half\n      },\n      {\n        x: link.x1,\n        y: link.y1 + half\n      },\n      {\n        x: link.x0,\n        y: link.y0 + half\n      }\n    ];\n\n    return Object.assign({}, link, { points: points });\n  });\n};\n\nexport const formatLinkPath = (\n  links: SankeyLinkElement[],\n  round: boolean = true\n): ({ path: string } & SankeyLinkElement)[] => {\n  const isVertical = !isNil(links?.[0]?.vertical);\n\n  if (isVertical) {\n    return links.map(link => {\n      const half = link.thickness / 2;\n      let y0 = link.y0;\n      let y1 = link.y1;\n      let midY = (y0 + y1) / 2;\n      let x00 = link.x0 - half;\n      let x01 = link.x0 + half;\n      let x10 = link.x1 - half;\n      let x11 = link.x1 + half;\n\n      if (round) {\n        y0 = Math.round(y0);\n        y1 = Math.round(y1);\n        midY = Math.round(midY);\n        x00 = Math.round(x00);\n        x01 = Math.round(x01);\n        x10 = Math.round(x10);\n        x11 = Math.round(x11);\n      }\n\n      return Object.assign({}, link, {\n        path: `\n            M${x00},${y0}\n            C${x00},${midY},${x10},${midY},${x10},${y1}\n            L${x11},${y1}\n            C${x11},${midY},${x01},${midY},${x01},${y0}\n            Z\n            `\n      });\n    });\n  }\n\n  return links.map(link => {\n    const half = link.thickness / 2;\n    let x0 = link.x0;\n    let x1 = link.x1;\n    let midX = (x0 + x1) / 2;\n    let y00 = link.y0 - half;\n    let y01 = link.y0 + half;\n    let y10 = link.y1 - half;\n    let y11 = link.y1 + half;\n\n    if (round) {\n      x0 = Math.round(x0);\n      x1 = Math.round(x1);\n      midX = Math.round(midX);\n      y00 = Math.round(y00);\n      y01 = Math.round(y01);\n      y10 = Math.round(y10);\n      y11 = Math.round(y11);\n    }\n\n    return Object.assign({}, link, {\n      path: `\n          M${x0},${y00}\n          C${midX},${y00},${midX},${y10},${x1},${y10}\n          L${x1},${y11}\n          C${midX},${y11},${midX},${y01},${x0},${y01}\n          Z`\n    });\n  });\n};\n\nexport const getBoundsOfNodes = (nodes: SankeyNodeElement[]) => {\n  let x0: number = Infinity;\n  let x1: number = -Infinity;\n  let y0: number = Infinity;\n  let y1: number = -Infinity;\n\n  nodes.forEach(node => {\n    x0 = Math.min(node.x0, x0);\n    x1 = Math.max(node.x1, x1);\n    y0 = Math.min(node.y0, y0);\n    y1 = Math.max(node.y1, y1);\n  });\n\n  return {\n    x0,\n    x1,\n    y0,\n    y1,\n    width: x1 - x0,\n    height: y1 - y0\n  };\n};\n\nconst isNodeVertical = (node: SankeyNodeElement) => {\n  if (node.sourceLinks && node.sourceLinks.length) {\n    return !isNil(node.sourceLinks[0].x0);\n  }\n\n  if (node.targetLinks && node.targetLinks.length) {\n    return !isNil(node.targetLinks[0].x0);\n  }\n\n  return false;\n};\n\nexport const getAlignStartTexts = (nodes: SankeyNodeElement[], offset: number = 0) => {\n  const isVertical = isNodeVertical(nodes[0]);\n\n  if (isVertical) {\n    return nodes.map((node: SankeyNodeElement) => {\n      return {\n        y: node.y1,\n        x: (node.x0 + node.x1) / 2,\n        datum: node.datum,\n        key: node.key\n      };\n    });\n  }\n\n  return nodes.map((node: SankeyNodeElement) => {\n    return {\n      x: node.x1,\n      y: (node.y0 + node.y1) / 2,\n      datum: node.datum,\n      key: node.key\n    };\n  });\n};\n\nexport const getAlignEndTexts = (nodes: SankeyNodeElement[], offset: number = 0) => {\n  const isVertical = isNodeVertical(nodes[0]);\n\n  if (isVertical) {\n    return nodes.map((node: SankeyNodeElement) => {\n      return {\n        y: node.y1 - offset,\n        x: (node.x0 + node.x1) / 2,\n        datum: node.datum,\n        key: node.key\n      };\n    });\n  }\n\n  return nodes.map((node: SankeyNodeElement) => {\n    return {\n      x: node.x0 - offset,\n      y: (node.y0 + node.y1) / 2,\n      datum: node.datum,\n      key: node.key\n    };\n  });\n};\n"]}