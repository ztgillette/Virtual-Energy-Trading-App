{"version":3,"sources":["../src/charts/candlestick/candlestick.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,+BAA+B,EAAE,MAAM,2BAA2B,CAAC;AAE5E,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AACjE,OAAO,EACL,SAAS,EACT,OAAO,EACP,4BAA4B,EAC5B,iCAAiC,EACjC,uBAAuB,EACvB,sBAAsB,EACtB,yBAAyB,EACzB,uBAAuB,EACvB,yBAAyB,EAC1B,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AACpF,MAAM,OAAO,gBAA0E,SAAQ,SAAY;IAI/F,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,yBAAyB,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,yBAAyB,CAAC;IACvE,CAAC;;AAPe,qBAAI,GAAW,sBAAsB,CAAC;AACtC,2BAAU,GAAW,uBAAuB,CAAC;AAC7C,uCAAsB,GAAG,+BAA+B,CAAC;AAQ3E,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,uBAAuB,EAAE,CAAC;IAC1B,sBAAsB,EAAE,CAAC;IACzB,yBAAyB,EAAE,CAAC;IAC5B,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACjE,CAAC,CAAC","file":"candlestick.js","sourcesContent":["import { CandlestickChartSpecTransformer } from './candlestick-transformer';\nimport { ICandlestickChartSpec } from './interface';\nimport { registerCandlestickSeries } from './series/candlestick';\nimport {\n  BaseChart,\n  Factory,\n  registerMarkTooltipProcessor,\n  registerDimensionTooltipProcessor,\n  registerDimensionEvents,\n  registerDimensionHover,\n  getCartesianDimensionInfo,\n  getDimensionInfoByValue,\n  getCartesianCrosshairRect\n} from '@visactor/vchart';\nimport { CANDLESTICK_CHART_TYPE, CANDLESTICK_SERIES_TYPE } from './series/constant';\nexport class CandlestickChart<T extends ICandlestickChartSpec = ICandlestickChartSpec> extends BaseChart<T> {\n  static readonly type: string = CANDLESTICK_CHART_TYPE;\n  static readonly seriesType: string = CANDLESTICK_SERIES_TYPE;\n  static readonly transformerConstructor = CandlestickChartSpecTransformer; // CandlestickChartSpecTransformer;\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\n\nexport const registerCandlestickChart = () => {\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  registerCandlestickSeries();\n  Factory.registerChart(CandlestickChart.type, CandlestickChart);\n};\n"]}