{"version":3,"sources":["../src/charts/pictogram/series/svg-source.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,6BAA6B,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACvE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAGlE,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAoB,CAAC;AAExD,IAAI,UAA0B,CAAC;AAE/B,SAAS,cAAc;IACrB,IAAI,UAAU,EAAE;QACd,OAAO;KACR;IACD,UAAU,GAAG,IAAI,OAAO,EAAE,CAAC;IAC3B,6BAA6B,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,GAAW,EAAE,MAAwB;IACrE,IAAI,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACzB,IAAI,CAAC,sBAAsB,GAAG,wCAAwC,CAAC,CAAC;KACzE;IACD,cAAc,EAAE,CAAC;IACjB,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAW,CAAC,CAAC;IAC3C,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE;QACrB,IAAI,EAAE,KAAK;KACZ,CAAC,CAAC;IAEH,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,GAAW;IAC7C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC1B,IAAI,CAAC,gBAAgB,GAAG,oBAAoB,CAAC,CAAC;QAC9C,OAAO;KACR;IACD,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,IAAY;IACvC,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,cAAc;IAC5B,YAAY,CAAC,KAAK,EAAE,CAAC;IACrB,UAAU,GAAG,IAAI,CAAC;AACpB,CAAC","file":"svg-source.js","sourcesContent":["import { registerDataSetInstanceParser, warn } from '@visactor/vchart';\nimport { DataSet, DataView, svgParser } from '@visactor/vdataset';\nimport type { ISVGSourceOption } from '@visactor/vdataset';\n\nexport const svgSourceMap = new Map<string, DataView>();\n\nlet svgDataSet: DataSet | null;\n\nfunction initSVGDataSet() {\n  if (svgDataSet) {\n    return;\n  }\n  svgDataSet = new DataSet();\n  registerDataSetInstanceParser(svgDataSet, 'svg', svgParser);\n}\n\nexport function registerSVGSource(key: string, source: ISVGSourceOption) {\n  if (svgSourceMap.has(key)) {\n    warn(`svg source key of '${key}' already exists, will be overwritten.`);\n  }\n  initSVGDataSet();\n  const dataView = new DataView(svgDataSet!);\n  dataView.parse(source, {\n    type: 'svg'\n  });\n\n  svgSourceMap.set(key, dataView);\n}\n\nexport function unregisterSVGSource(key: string) {\n  if (!svgSourceMap.has(key)) {\n    warn(`map type of '${key}' does not exists.`);\n    return;\n  }\n  svgSourceMap.delete(key);\n}\n\nexport function getSVGSource(type: string) {\n  return svgSourceMap.get(type);\n}\n\nexport function clearSVGSource() {\n  svgSourceMap.clear();\n  svgDataSet = null;\n}\n"]}