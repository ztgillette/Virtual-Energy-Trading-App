{"version":3,"sources":["../src/charts/pictogram/series/pictogram.ts"],"names":[],"mappings":"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","file":"pictogram.js","sourcesContent":["import { DataView } from '@visactor/vdataset';\nimport type { SVGParsedElement, SVGParserResult } from '@visactor/vdataset';\nimport type { IPictogramSeriesSpec } from './interface';\nimport {\n  ELEMENT_HIGHLIGHT_BY_GRPHIC_NAME,\n  ELEMENT_SELECT_BY_GRPHIC_NAME,\n  PICTOGRAM_SERIES_TYPE,\n  PictogramSeriesMark\n} from './constant';\nimport { getSVGSource, registerSVGSource, svgSourceMap, unregisterSVGSource } from './svg-source';\nimport { PictogramSeriesSpecTransformer } from './pictogram-transformer';\nimport type { IMatrix, IPoint, IPointLike } from '@visactor/vutils';\nimport { Bounds, Matrix, isValid, merge } from '@visactor/vutils';\nimport { createRect } from '@visactor/vrender-core';\nimport { PictogramSeriesTooltipHelper } from './tooltip-helper';\nimport type {\n  Datum,\n  IGroupMark,\n  IHoverSpec,\n  IMark,\n  ISelectSpec,\n  ISeriesSeriesInfo,\n  ITextMark,\n  PanEventParam,\n  ZoomEventParam\n} from '@visactor/vchart';\nimport {\n  AttributeLevel,\n  ChartEvent,\n  CompilableData,\n  Factory,\n  GeoSeries,\n  lookup,\n  registerDataSetInstanceTransform,\n  shouldMarkDoMorph,\n  STATE_VALUE_ENUM\n} from '@visactor/vchart';\nimport { registerElementHighlightByGraphicName } from '../element-highlight-by-graphic-name';\nimport { registerElementSelectByGraphicName } from '../element-select-by-graphic-name';\nimport { graphicAttributeTransform, pictogram } from './transform';\nimport type { IGroup, GraphicEventType } from '@visactor/vrender-core';\n\nexport interface SVGParsedElementExtend extends SVGParsedElement {\n  _finalAttributes: Record<string, any>;\n  _uniqueId: string; // 用于处理 svg 中 id 重复的情况\n}\n\nexport class PictogramSeries<T extends IPictogramSeriesSpec = IPictogramSeriesSpec> extends GeoSeries<T> {\n  static readonly type: string = PICTOGRAM_SERIES_TYPE;\n  type = PICTOGRAM_SERIES_TYPE;\n  static readonly mark = PictogramSeriesMark;\n  static readonly transformerConstructor = PictogramSeriesSpecTransformer;\n\n  svg!: string;\n\n  protected _pictogramMark: IGroupMark;\n  protected _parsedSvgResult: SVGParserResult;\n  private _labelMark: ITextMark;\n\n  private _idToMark: Map<string, IMark> = new Map();\n\n  setAttrFromSpec() {\n    super.setAttrFromSpec();\n    this.svg = this._spec.svg;\n    this._nameField = this._spec.nameField;\n    this._valueField = this._spec.valueField;\n\n    if (!this.svg) {\n      this._option?.onError(`svg source is not specified !`);\n    }\n    this._parsedSvgResult = getSVGSource(this.svg)?.latestData;\n\n    if (!this._parsedSvgResult) {\n      this._option?.onError(`'${this.svg}' is not registered !`);\n    }\n  }\n\n  getDatumCenter(datum: SVGParsedElementExtend): [number, number] {\n    return [Number.NaN, Number.NaN];\n  }\n\n  getDatumName(datum: SVGParsedElementExtend): string {\n    return datum.name || datum._nameFromParent;\n  }\n\n  getMarksWithoutRoot(): IMark[] {\n    return this.getMarks().filter(\n      m => m.name && !m.name.includes('seriesGroup') && !m.name.includes('root') && m !== this._pictogramMark\n    );\n  }\n\n  protected _buildMarkAttributeContext() {\n    super._buildMarkAttributeContext();\n    this._markAttributeContext.getTransformMatrix = this.getRootMatrix.bind(this);\n    this._markAttributeContext.coordToPosition = this.coordToPosition.bind(this);\n    this._markAttributeContext.dataToPosition = this.dataToPosition.bind(this);\n  }\n\n  protected _defaultHoverConfig(finalHoverSpec: IHoverSpec) {\n    return {\n      type: ELEMENT_HIGHLIGHT_BY_GRPHIC_NAME,\n      // trigger: finalHoverSpec.trigger as EventType,\n      trigger: finalHoverSpec.trigger as GraphicEventType,\n      triggerOff: 'pointerout' as GraphicEventType,\n      blurState: STATE_VALUE_ENUM.STATE_HOVER_REVERSE,\n      highlightState: STATE_VALUE_ENUM.STATE_HOVER\n    };\n  }\n\n  protected _defaultSelectConfig(finalSelectSpec: ISelectSpec) {\n    const isMultiple = finalSelectSpec.mode === 'multiple';\n    const triggerOff = isValid(finalSelectSpec.triggerOff)\n      ? finalSelectSpec.triggerOff\n      : isMultiple\n      ? ['empty', 'self']\n      : ['empty', finalSelectSpec.trigger];\n\n    return {\n      type: ELEMENT_SELECT_BY_GRPHIC_NAME,\n      trigger: finalSelectSpec.trigger as GraphicEventType,\n      triggerOff: triggerOff as GraphicEventType,\n      reverseState: STATE_VALUE_ENUM.STATE_SELECTED_REVERSE,\n      state: STATE_VALUE_ENUM.STATE_SELECTED,\n      isMultiple\n    };\n  }\n\n  initMark() {\n    this._pictogramMark = this._createMark(\n      PictogramSeries.mark.pictogram,\n      {\n        groupKey: this.getDimensionField()[0],\n        isSeriesMark: true,\n        skipBeforeLayouted: true\n      },\n      {\n        morph: shouldMarkDoMorph(this._spec, PictogramSeries.mark.pictogram.name)\n      }\n    ) as IGroupMark;\n\n    if (!this._pictogramMark) {\n      return;\n    }\n    this._pictogramMark.setData(this._mapViewData);\n    this._pictogramMark.setUserId(PictogramSeries.mark.pictogram.name);\n    for (const element of this._mapViewData.getDataView().latestData as SVGParserResult['elements']) {\n      const { graphicType: type, name, parent, id, _nameFromParent, _uniqueId } = element;\n\n      const mark = this._createMark(\n        { type, name: name ?? _nameFromParent },\n        {\n          groupKey: _uniqueId,\n          isSeriesMark: false,\n          skipBeforeLayouted: true,\n          parent: (this._idToMark.get(parent?._uniqueId) as IGroupMark) ?? this._pictogramMark\n        },\n        {\n          morph: shouldMarkDoMorph(this._spec, PictogramSeries.mark.pictogram.name)\n        }\n      );\n\n      if (mark) {\n        mark.setData(this._mapViewData);\n        mark.setUserId(_uniqueId); // id 必须唯一，但无法控制 svg 中元素有重复 id， 这里做一个保护\n        this._idToMark.set(_uniqueId, mark);\n        if (mark.type !== 'group') {\n          mark.setMarkConfig({ graphicName: mark.name });\n        }\n        mark.setTransform([\n          {\n            type: 'filter',\n            callback: (datum: SVGParsedElementExtend) => {\n              return datum._uniqueId === _uniqueId;\n            }\n          }\n        ]);\n      }\n    }\n    this._initLabelMark();\n  }\n\n  private _initLabelMark() {\n    // @ts-ignore\n    if (this._spec.label.visible !== true) {\n      return;\n    }\n\n    const labelMark = this._createMark(PictogramSeries.mark.label, {\n      isSeriesMark: false,\n      parent: this._pictogramMark,\n      groupKey: '_uniqueId',\n      skipBeforeLayouted: true\n    }) as ITextMark;\n\n    if (labelMark) {\n      this._labelMark = labelMark;\n      this._labelMark.setData(this._mapViewData);\n    }\n  }\n\n  initLabelMarkStyle() {\n    if (!this._labelMark) {\n      return;\n    }\n    this.setMarkStyle(\n      this._labelMark,\n      {\n        visible: (d: Datum) => !!this._validElement(d as SVGParsedElementExtend),\n        x: (d: Datum) => this.dataToPosition(d, true)?.x,\n        y: (d: Datum) => this.dataToPosition(d, true)?.y,\n        text: (d: Datum) => d[this.nameField],\n        textAlign: 'center',\n        textBaseline: 'middle'\n      },\n      STATE_VALUE_ENUM.STATE_NORMAL,\n      AttributeLevel.Series\n    );\n  }\n\n  initMarkStyle() {\n    const { root, viewBoxRect } = this._parsedSvgResult;\n    const elements = this._mapViewData.getDataView().latestData as SVGParserResult['elements'];\n    if (root) {\n      this.setMarkStyle(\n        this._pictogramMark,\n        graphicAttributeTransform.group(root.attributes),\n        'normal',\n        AttributeLevel.Built_In\n      );\n      if (root.transform) {\n        this.setMarkStyle(\n          this._pictogramMark,\n          {\n            postMatrix: () => root.transform\n          },\n          'normal',\n          AttributeLevel.Built_In\n        );\n      }\n      if (viewBoxRect) {\n        // fill should be true or content will be invisible\n        this._pictogramMark.setMarkConfig({\n          clip: true,\n          clipPath: [createRect({ ...viewBoxRect, fill: true }) as any]\n        });\n      }\n    }\n    for (const element of elements) {\n      const { _uniqueId, _finalAttributes: attributes } = element as SVGParsedElementExtend;\n      const mark = this._idToMark.get(_uniqueId);\n      const valid = this._validElement(element);\n      if (mark) {\n        // 描边粗细跟随缩放倍数\n        this.setMarkStyle(mark, { keepStrokeScale: true }, 'normal', AttributeLevel.Built_In);\n        if (valid) {\n          this.initMarkStyleWithSpec(mark, merge({}, this._spec.pictogram, (this._spec as any)[mark.name]));\n          this.setMarkStyle(mark, attributes, 'normal', AttributeLevel.Series);\n          mark.setPostProcess('fill', (result, datum) => {\n            return isValid(result) ? result : this._spec.defaultFillColor;\n          });\n        } else {\n          // 对于没有设置 name 的元素，不支持响应事件、改变样式\n          mark.setMarkConfig({ interactive: false });\n          this.setMarkStyle(mark, attributes, 'normal', AttributeLevel.Built_In);\n        }\n      }\n    }\n\n    this.initLabelMarkStyle();\n  }\n  /** 在 svg 中使用 name attribute 标注了的图元*/\n  protected _validElement(element: SVGParsedElement) {\n    return element.name || element._nameFromParent;\n  }\n\n  protected initTooltip() {\n    this._tooltipHelper = new PictogramSeriesTooltipHelper(this);\n    this.getMarksWithoutRoot().forEach(mark => {\n      if (mark && mark.name) {\n        this._tooltipHelper.activeTriggerSet.mark.add(mark);\n      }\n    });\n  }\n\n  dataToPosition(datum: Datum, global = false): IPointLike {\n    if (!datum) {\n      return null;\n    }\n    const name = datum[this.nameField];\n    if (!name) {\n      return null;\n    }\n\n    const mark = this.getMarksWithoutRoot().filter(mark => mark.name === name);\n    if (!mark || mark.length === 0) {\n      return null;\n    }\n    let bounds = new Bounds();\n    if (global) {\n      mark.forEach(m => {\n        bounds = bounds.union(m.getGraphics()[0].globalAABBBounds);\n      });\n    } else {\n      mark.forEach(m => {\n        bounds = bounds.union(m.getProduct().AABBBounds);\n      });\n    }\n\n    const point = { x: (bounds.x1 + bounds.x2) / 2, y: (bounds.y1 + bounds.y2) / 2 };\n\n    if (global) {\n      const { x, y } = this.getLayoutStartPoint();\n      point.x -= x;\n      point.y -= y;\n    }\n    return point;\n  }\n\n  coordToPosition(point: IPoint): IPoint | undefined {\n    if (!point) {\n      return null;\n    }\n    const { x, y } = point;\n    const matrix = this.getRootMatrix();\n    if (!matrix) {\n      return null;\n    }\n    const position = {};\n    matrix.getInverse().transformPoint({ x, y }, position as IPoint);\n    return position as IPoint;\n  }\n\n  getRootMatrix() {\n    return this.getPictogramRootGraphic()?.transMatrix as IMatrix;\n  }\n\n  getPictogramRootGraphic(): IGroup {\n    return this._pictogramMark.getProduct();\n  }\n\n  initData() {\n    super.initData();\n    const parsedSvg = svgSourceMap.get(this.svg);\n    if (!parsedSvg) {\n      this._option?.onError('no valid svg found!');\n    }\n    const svgData = new DataView(this._dataSet, { name: `pictogram_${this.id}_data` });\n    registerDataSetInstanceTransform(this._dataSet, 'pictogram', pictogram);\n    registerDataSetInstanceTransform(this._dataSet, 'lookup', lookup);\n    svgData\n      .parse([parsedSvg], {\n        type: 'dataview'\n      })\n      .transform({ type: 'pictogram' })\n      .transform({\n        type: 'lookup',\n        options: {\n          from: () => this.getViewData().latestData,\n          key: 'name',\n          fields: this._nameField,\n          set: (a: Datum, b: Datum) => {\n            if (b) {\n              a.data = b;\n            }\n          }\n        }\n      })\n      .transform({\n        type: 'lookup',\n        options: {\n          from: () => this.getViewData().latestData,\n          key: '_nameFromParent',\n          fields: this._nameField,\n          set: (a: Datum, b: Datum) => {\n            if (b) {\n              a.data = b;\n            }\n          }\n        }\n      });\n    this._data?.getDataView().target.addListener('change', svgData.reRunAllTransform);\n    this._mapViewData = new CompilableData(this._option, svgData);\n  }\n\n  mapViewDataUpdate() {\n    this._mapViewData.updateData();\n  }\n\n  onLayoutEnd(): void {\n    super.onLayoutEnd();\n    this._mapViewData?.getDataView().reRunAllTransform();\n  }\n\n  updateSVGSize() {\n    const { width: regionWidth, height: regionHeight } = this.getLayoutRect();\n    const regionCenterX = regionWidth / 2;\n    const regionCenterY = regionHeight / 2;\n    const root = this.getPictogramRootGraphic();\n    if (root) {\n      const bounds = root.AABBBounds;\n      const { x1, x2, y1, y2 } = root.AABBBounds;\n      const width = bounds.width();\n      const height = bounds.height();\n\n      const rootCenterX = (x1 + x2) / 2;\n      const rootCenterY = (y1 + y2) / 2;\n\n      const scaleX = regionWidth / width;\n      const scaleY = regionHeight / height;\n      const scale = Math.min(scaleX, scaleY);\n\n      root.scale(scale, scale, { x: rootCenterX, y: rootCenterY });\n      root.translate(regionCenterX - rootCenterX, regionCenterY - rootCenterY);\n    }\n  }\n\n  protected initEvent(): void {\n    super.initEvent();\n    this._mapViewData.getDataView()?.target.addListener('change', this.mapViewDataUpdate.bind(this));\n    // 必须在有 vrender mark 的时机后更新\n    this.event.on(ChartEvent.afterMarkLayoutEnd, this.updateSVGSize.bind(this));\n  }\n\n  handleZoom(e: ZoomEventParam) {\n    const { scale, scaleCenter } = e;\n    if (scale === 1) {\n      return;\n    }\n\n    const root = this.getPictogramRootGraphic();\n    if (root) {\n      if (!root.attribute.postMatrix) {\n        root.setAttributes({\n          postMatrix: new Matrix()\n        });\n      }\n      root.scale(scale, scale, scaleCenter);\n    }\n  }\n\n  handlePan(e: PanEventParam) {\n    const { delta } = e;\n    if (delta[0] === 0 && delta[1] === 0) {\n      return;\n    }\n    const root = this.getPictogramRootGraphic();\n    if (root) {\n      if (!root.attribute.postMatrix) {\n        root.setAttributes({\n          postMatrix: new Matrix()\n        });\n      }\n      root.translate(delta[0], delta[1]);\n    }\n  }\n\n  getMarkData(datum: Datum) {\n    return datum.data ?? {};\n  }\n\n  getMeasureField(): string[] {\n    return [this.valueField];\n  }\n\n  getDimensionField(): string[] {\n    return [this.nameField];\n  }\n  protected _getSeriesInfo(field: string, keys: string[]) {\n    const defaultShapeType = this.getDefaultShapeType();\n    return keys.map(key => {\n      return {\n        key,\n        originalKey: key,\n        style: this.getSeriesStyle({\n          data: {\n            [field]: key\n          }\n        }),\n        shapeType: defaultShapeType\n      } as ISeriesSeriesInfo;\n    });\n  }\n\n  release(): void {\n    this._parsedSvgResult = null;\n    this._idToMark.clear();\n    this._idToMark = null;\n  }\n}\n\nexport const registerPictogramSeries = () => {\n  // 注册语法元素\n  Factory.registerSeries(PictogramSeries.type, PictogramSeries);\n  Factory.registerImplement('registerSVG', registerSVGSource);\n  Factory.registerImplement('unregisterSVG', unregisterSVGSource);\n  registerElementHighlightByGraphicName();\n  registerElementSelectByGraphicName();\n};\n"]}