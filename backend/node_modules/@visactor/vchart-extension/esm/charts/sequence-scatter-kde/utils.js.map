{"version":3,"sources":["../src/charts/sequence-scatter-kde/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { EXPAND_RATIO } from './constant';\nimport type { Point } from './interface';\n\n// KDE 相关的工具函数\nexport function gaussKernel(x: number) {\n  const SQRT2PI2 = Math.sqrt((Math.PI * 2) ** 2);\n  return Math.exp(-(x ** 2) / 2) / SQRT2PI2;\n}\n\nexport function scottBandwidth(data: Point[]) {\n  return data.length ** (-1 / 6);\n}\nexport function calculateKDE(data: Point[], bins = 100, bandwidth?: number) {\n  const groupedData: { [key: string]: Point[] } = data.reduce((groups, point) => {\n    const label = point.label;\n    groups[label] = groups[label] || [];\n    groups[label].push(point);\n    return groups;\n  }, {} as { [key: string]: Point[] });\n\n  const kdeResult: Array<{ x: number; y: number; kde: number; label: string }> = [];\n\n  Object.entries(groupedData).forEach(([label, points]) => {\n    const h = bandwidth || scottBandwidth(points);\n\n    const xValues = points.map(d => d.x);\n    const yValues = points.map(d => d.y);\n\n    const xMin = Math.min(...xValues);\n    const xMax = Math.max(...xValues);\n    const yMin = Math.min(...yValues);\n    const yMax = Math.max(...yValues);\n\n    const xExpand = (xMax - xMin) * EXPAND_RATIO;\n    const yExpand = (yMax - yMin) * EXPAND_RATIO;\n\n    const xExtent = { min: xMin - xExpand, max: xMax + xExpand };\n    const yExtent = { min: yMin - yExpand, max: yMax + yExpand };\n\n    // step决定了背景的填充色块的大小，这个大小其实是不变的\n    const xStep = 0.1;\n    const yStep = 0.1;\n\n    const densities: number[] = []; // 用于存储每个点的 density\n    for (let i = 0; i < bins; i++) {\n      for (let j = 0; j < bins; j++) {\n        const x = xExtent.min + i * xStep;\n        const y = yExtent.min + j * yStep;\n        let density = 0;\n        for (const point of points) {\n          const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n          density += gaussKernel(distance / h);\n        }\n        density = density / (points.length * h * h);\n        densities.push(density); // 先暂存 density 值\n        kdeResult.push({ x, y, kde: density, label }); // 同时也先存入 kdeResult\n      }\n    }\n\n    // // 归一化每个 label 的 KDE 密度值到 [0, 1] 范围内\n    // const maxDensity = Math.max(...densities);\n    // const minDensity = Math.min(...densities);\n    //\n    // // 归一化\n    // for (let i = 0; i < kdeResult.length; i++) {\n    //   if (kdeResult[i].label === label) {\n    //     kdeResult[i].kde = (kdeResult[i].kde - minDensity) / (maxDensity - minDensity);\n    //   }\n    // }\n  });\n\n  return kdeResult;\n}\n"]}