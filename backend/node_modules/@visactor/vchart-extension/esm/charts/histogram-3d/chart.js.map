{"version":3,"sources":["../src/charts/histogram-3d/chart.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,OAAO,EACP,yBAAyB,EACzB,yBAAyB,EACzB,uBAAuB,EACvB,6BAA6B,EAC7B,uBAAuB,EACvB,sBAAsB,EACtB,iCAAiC,EACjC,6BAA6B,EAC7B,4BAA4B,EAE7B,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAmB,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAC/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAChD,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAEhD,MAAM,OAAO,gBAAkD,SAAQ,kBAA2C;IAAlH;;QAIW,2BAAsB,GAAG,6BAA6B,CAAC;QACvD,SAAI,iBAAuC;QAC3C,eAAU,GAAW,gBAAgB,CAAC,KAAK,CAAC;IAQvD,CAAC;IANW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,yBAAyB,CAAC;QAE/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,yBAAyB,CAAC;IACvE,CAAC;;AAZe,qBAAI,iBAAuC;AAC3C,2BAAU,GAAW,gBAAgB,CAAC,KAAK,CAAC;AAC5C,uCAAsB,GAAG,6BAA6B,CAAC;AAYzE,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,6BAA6B,EAAE,CAAC;IAChC,iCAAiC,EAAE,CAAC;IACpC,4BAA4B,EAAE,CAAC;IAC/B,uBAAuB,EAAE,CAAC;IAC1B,sBAAsB,EAAE,CAAC;IACzB,gBAAgB,EAAE,CAAC;IACnB,gBAAgB,EAAE,CAAC;IACnB,mBAAmB,EAAE,CAAC;IACtB,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACjE,CAAC,CAAC","file":"chart.js","sourcesContent":["import {\n  BaseHistogramChart,\n  Factory,\n  getCartesianCrosshairRect,\n  getCartesianDimensionInfo,\n  getDimensionInfoByValue,\n  HistogramChartSpecTransformer,\n  registerDimensionEvents,\n  registerDimensionHover,\n  registerDimensionTooltipProcessor,\n  registerGroupTooltipProcessor,\n  registerMarkTooltipProcessor,\n  type AdaptiveSpec\n} from '@visactor/vchart';\nimport type { IHistogram3dChartSpec } from './interface';\nimport { ChartType3dEnum, SeriesType3dEnum } from '../3d/enum';\nimport { register3DPlugin } from '../3d/plugin';\nimport { registerBar3dSeries } from '../bar-3d/series';\nimport { registerLayout3d } from '../3d/layout';\n\nexport class Histogram3dChart<T extends IHistogram3dChartSpec> extends BaseHistogramChart<AdaptiveSpec<T, 'type'>> {\n  static readonly type: string = ChartType3dEnum.histogram3d;\n  static readonly seriesType: string = SeriesType3dEnum.bar3d;\n  static readonly transformerConstructor = HistogramChartSpecTransformer;\n  readonly transformerConstructor = HistogramChartSpecTransformer;\n  readonly type: string = ChartType3dEnum.histogram3d;\n  readonly seriesType: string = SeriesType3dEnum.bar3d;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\nexport const registerHistogram3dChart = () => {\n  registerGroupTooltipProcessor();\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  register3DPlugin();\n  registerLayout3d();\n  registerBar3dSeries();\n  Factory.registerChart(Histogram3dChart.type, Histogram3dChart);\n};\n"]}