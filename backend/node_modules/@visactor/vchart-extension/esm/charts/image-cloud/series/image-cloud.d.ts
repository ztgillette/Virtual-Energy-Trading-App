import type { IImageCloudSeriesSpec } from './interface';
import { ImageCloudMarkNameEnum } from './constant';
import type { IPoint } from '@visactor/vutils';
import { createImage } from '@visactor/vrender-core';
import type { Datum, IImageMark, IMark, IRectMark } from '@visactor/vchart';
import { BaseSeries } from '@visactor/vchart';
export declare class ImageCloudSeries<T extends IImageCloudSeriesSpec> extends BaseSeries<T> {
    static readonly type: string;
    type: string;
    static readonly mark: {
        image: {
            name: ImageCloudMarkNameEnum;
            type: import("@visactor/vchart").MarkTypeEnum;
        };
        imageMask: {
            name: ImageCloudMarkNameEnum;
            type: import("@visactor/vchart").MarkTypeEnum;
        };
        label?: import("@visactor/vchart").ISeriesMarkInfo;
        point?: import("@visactor/vchart").ISeriesMarkInfo;
        line?: import("@visactor/vchart").ISeriesMarkInfo;
        area?: import("@visactor/vchart").ISeriesMarkInfo;
        bar?: import("@visactor/vchart").ISeriesMarkInfo;
        boxPlot?: import("@visactor/vchart").ISeriesMarkInfo;
        outlier?: import("@visactor/vchart").ISeriesMarkInfo;
        circlePacking?: import("@visactor/vchart").ISeriesMarkInfo;
        group?: import("@visactor/vchart").ISeriesMarkInfo;
        gridBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        grid?: import("@visactor/vchart").ISeriesMarkInfo;
        dot?: import("@visactor/vchart").ISeriesMarkInfo;
        title?: import("@visactor/vchart").ISeriesMarkInfo;
        subTitle?: import("@visactor/vchart").ISeriesMarkInfo;
        symbol?: import("@visactor/vchart").ISeriesMarkInfo;
        funnel?: import("@visactor/vchart").ISeriesMarkInfo;
        transform?: import("@visactor/vchart").ISeriesMarkInfo;
        transformLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        outerLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        outerLabelLine?: import("@visactor/vchart").ISeriesMarkInfo;
        pin?: import("@visactor/vchart").ISeriesMarkInfo;
        pinBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        pointer?: import("@visactor/vchart").ISeriesMarkInfo;
        segment?: import("@visactor/vchart").ISeriesMarkInfo;
        track?: import("@visactor/vchart").ISeriesMarkInfo;
        cell?: import("@visactor/vchart").ISeriesMarkInfo;
        cellBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        link?: import("@visactor/vchart").ISeriesMarkInfo;
        arrow?: import("@visactor/vchart").ISeriesMarkInfo;
        pie?: import("@visactor/vchart").ISeriesMarkInfo;
        labelLine?: import("@visactor/vchart").ISeriesMarkInfo;
        progress?: import("@visactor/vchart").ISeriesMarkInfo;
        minLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        maxLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        rose?: import("@visactor/vchart").ISeriesMarkInfo;
        node?: import("@visactor/vchart").ISeriesMarkInfo;
        sunburst?: import("@visactor/vchart").ISeriesMarkInfo;
        nonLeaf?: import("@visactor/vchart").ISeriesMarkInfo;
        leaf?: import("@visactor/vchart").ISeriesMarkInfo;
        nonLeafLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        leaderLine?: import("@visactor/vchart").ISeriesMarkInfo;
        stackLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        word?: import("@visactor/vchart").ISeriesMarkInfo;
        fillingWord?: import("@visactor/vchart").ISeriesMarkInfo;
        wordMask?: import("@visactor/vchart").ISeriesMarkInfo;
        nodePoint?: import("@visactor/vchart").ISeriesMarkInfo;
        ripplePoint?: import("@visactor/vchart").ISeriesMarkInfo;
        centerPoint?: import("@visactor/vchart").ISeriesMarkInfo;
        centerLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        barBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        lineLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        areaLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        liquidGroup?: import("@visactor/vchart").ISeriesMarkInfo;
        liquid?: import("@visactor/vchart").ISeriesMarkInfo;
        liquidBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        liquidOutline?: import("@visactor/vchart").ISeriesMarkInfo;
        circle?: import("@visactor/vchart").ISeriesMarkInfo;
        overlap?: import("@visactor/vchart").ISeriesMarkInfo;
        overlapLabel?: import("@visactor/vchart").ISeriesMarkInfo;
    };
    protected _urlField: string;
    protected _nameField?: string;
    protected _valueField?: string;
    setValueField(field: string): void;
    protected _imageMark?: IImageMark;
    protected _maskMark?: IRectMark;
    setAttrFromSpec(): void;
    initMark(): void;
    initMarkStyle(): void;
    protected _initImageMarkStyle(): void;
    protected isFillingImage(datum: Datum): boolean;
    protected _initMaskMarkStyle(): void;
    protected initTooltip(): void;
    protected _imageCloudTransformOption(): {
        size: () => number[];
        image: {
            field: string;
        };
        weight: {
            field: string;
        };
        imageConfig: {
            imageSize: number;
            imageSizeRange: [number, number];
            padding: number;
        };
        ratio: number;
        mask: string | import("@visactor/vlayouts").TextShapeMask | import("@visactor/vlayouts").GeometricMaskShape;
        maskConfig: {
            visible?: boolean;
            threshold?: number;
            invert?: boolean;
            removeWhiteBorder?: boolean;
            style?: Partial<import("@visactor/vchart").IImageMarkSpec>;
        };
        layoutConfig: import("@visactor/vlayouts").LayoutConfigType;
        createCanvas: (params: import("@visactor/vrender-core").ICreateCanvasParams) => any;
        createImage: typeof createImage;
        onUpdateMaskCanvas: (inputImage?: HTMLCanvasElement, maskImage?: HTMLCanvasElement) => void;
        onLayoutFinished: () => void;
    };
    protected _buildMarkAttributeContext(): void;
    initAnimation(): void;
    getDimensionField(): string[];
    getMeasureField(): string[];
    getStatisticFields(): {
        key: string;
        operations: Array<'max' | 'min' | 'values'>;
    }[];
    getActiveMarks(): IMark[];
    getMarkData(datum: Datum): any;
    getGroupFields(): string[];
    dataToPosition(data: Datum): IPoint | null;
    dataToPositionX(data: Datum): number | null;
    dataToPositionY(data: Datum): number | null;
    valueToPosition(value1: any, value2?: any): null;
    getStackGroupFields(): string[];
    getStackValueField(): string;
}
export declare const registerImageCloudSeries: () => void;
