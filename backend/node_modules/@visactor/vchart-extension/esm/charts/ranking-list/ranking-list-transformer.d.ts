import type { Datum } from '@visactor/vchart/src/typings';
import type { IRankingListSpec } from './interface';
import type { IMarkGraphic } from '@visactor/vchart';
import { CommonChartSpecTransformer } from '@visactor/vchart';
import { TextMeasure } from '@visactor/vutils';
export declare class RankingListChartSpecTransformer extends CommonChartSpecTransformer {
    protected nameLabelTextMeasure: TextMeasure<any>;
    protected valueLabelTextMeasure: TextMeasure<any>;
    protected orderLabelTextMeasure: TextMeasure<any>;
    protected originalData: Datum[];
    protected originalSpec: IRankingListSpec;
    protected dataSpecs: any[];
    protected formatMap: {
        [key: string]: (text: string, ctx: any) => string;
    };
    protected orderCount: number;
    protected isSpecValid(spec: any): boolean;
    transformSpec(spec: any): void;
    normalizeSpec(spec: any): void;
    upgradeTextMeasure(spec: any): void;
    upgradeFormatMap(spec: any): void;
    processData(spec: any): void;
    transformBaseSpec(spec: any): void;
    transformAnimationSpec(spec: any): void;
    transformAxesSpec(spec: any): void;
    generateBarBackground(spec: any): {
        type: any;
        dataId: string;
        visible: boolean;
        dataKey: string;
        zIndex: number;
        state: any;
        style: any;
        animation: boolean;
        animationEnter: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: any;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationExit: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: number;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationAppear: boolean | {
            type: string;
            oneByOne: boolean;
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            options: {};
            channel?: undefined;
        } | {
            channel: {
                x: {
                    from: number;
                    to: (datum: Datum, graphic: IMarkGraphic) => any;
                };
                opacity?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        } | {
            channel: {
                opacity: {
                    from: number;
                    to: number;
                };
                x?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        };
        animationUpdate: boolean | {
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
    };
    generateDecorateHaloIcons(spec: any): any;
    generateRankingIcon(spec: any): {
        type: string;
        dataId: string;
        visible: boolean;
        dataKey: string;
        state: any;
        style: any;
        animation: boolean;
        animationEnter: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: any;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationExit: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: number;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationAppear: boolean | {
            type: string;
            oneByOne: boolean;
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            options: {};
            channel?: undefined;
        } | {
            channel: {
                x: {
                    from: number;
                    to: (datum: Datum, graphic: IMarkGraphic) => any;
                };
                opacity?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        } | {
            channel: {
                opacity: {
                    from: number;
                    to: number;
                };
                x?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        };
        animationUpdate: boolean | {
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
    };
    generateNameLabel(spec: any): {
        type: string;
        dataId: string;
        dataKey: string;
        state: any;
        style: any;
        animation: boolean;
        animationEnter: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: any;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationExit: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: number;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationAppear: boolean | {
            type: string;
            oneByOne: boolean;
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            options: {};
            channel?: undefined;
        } | {
            channel: {
                x: {
                    from: number;
                    to: (datum: Datum, graphic: IMarkGraphic) => any;
                };
                opacity?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        } | {
            channel: {
                opacity: {
                    from: number;
                    to: number;
                };
                x?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        };
        animationUpdate: boolean | {
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
    };
    generateOrderLabel(spec: any): {
        type: string;
        dataId: string;
        dataKey: string;
        state: any;
        style: any;
        animation: boolean;
        animationEnter: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: any;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationExit: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: number;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationAppear: boolean | {
            type: string;
            oneByOne: boolean;
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            options: {};
            channel?: undefined;
        } | {
            channel: {
                x: {
                    from: number;
                    to: (datum: Datum, graphic: IMarkGraphic) => any;
                };
                opacity?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        } | {
            channel: {
                opacity: {
                    from: number;
                    to: number;
                };
                x?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        };
        animationUpdate: boolean | {
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
    };
    generateValueLabel(spec: any): {
        type: string;
        dataId: string;
        visible: boolean;
        dataKey: string;
        state: any;
        style: any;
        animation: boolean;
        animationEnter: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: any;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationExit: boolean | {
            type: string;
            options: {
                direction: string;
                orient: string;
                excludeChannels: string[];
                point: (datum: Datum, graphic: IMarkGraphic) => {
                    y: number;
                };
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
        animationAppear: boolean | {
            type: string;
            oneByOne: boolean;
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            options: {};
            channel?: undefined;
        } | {
            channel: {
                x: {
                    from: number;
                    to: (datum: Datum, graphic: IMarkGraphic) => any;
                };
                opacity?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        } | {
            channel: {
                opacity: {
                    from: number;
                    to: number;
                };
                x?: undefined;
            };
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
            type?: undefined;
            oneByOne?: undefined;
            options?: undefined;
        };
        animationUpdate: boolean | {
            duration: number;
            easing: import("@visactor/vrender-core").EasingType;
        };
    };
    transformPaddingSpec(spec: any): void;
    paginateDataArr: (spec: IRankingListSpec) => {
        orderCount: number;
        result: {
            [key: string]: Datum[];
        };
    };
    processRankingData: (spec: IRankingListSpec) => any[];
    getMaxDataLabelLens(spec: IRankingListSpec, field: string, textMeasure: TextMeasure<any>): number;
    formatDatum(field: string, datum: Datum): any;
    getLabelWidth(padding: number, width: number): number;
    getAnimationExit(spec: IRankingListSpec): false | {
        type: string;
        options: {
            direction: string;
            orient: string;
            excludeChannels: string[];
            point: (datum: Datum, graphic: IMarkGraphic) => {
                y: number;
            };
        };
        duration: number;
        easing: import("@visactor/vrender-core").EasingType;
    };
    getAnimationEnter(spec: IRankingListSpec): false | {
        type: string;
        options: {
            direction: string;
            orient: string;
            excludeChannels: string[];
            point: (datum: Datum, graphic: IMarkGraphic) => {
                y: any;
            };
        };
        duration: number;
        easing: import("@visactor/vrender-core").EasingType;
    };
    getAnimationAppear(spec: IRankingListSpec, markType: 'rect' | 'text' | 'symbol' | 'barBack'): false | {
        type: string;
        oneByOne: boolean;
        duration: number;
        easing: import("@visactor/vrender-core").EasingType;
        options: {};
        channel?: undefined;
    } | {
        channel: {
            x: {
                from: number;
                to: (datum: Datum, graphic: IMarkGraphic) => any;
            };
            opacity?: undefined;
        };
        duration: number;
        easing: import("@visactor/vrender-core").EasingType;
        type?: undefined;
        oneByOne?: undefined;
        options?: undefined;
    } | {
        channel: {
            opacity: {
                from: number;
                to: number;
            };
            x?: undefined;
        };
        duration: number;
        easing: import("@visactor/vrender-core").EasingType;
        type?: undefined;
        oneByOne?: undefined;
        options?: undefined;
    };
    getAnimationUpdate(spec: IRankingListSpec): false | {
        duration: number;
        easing: import("@visactor/vrender-core").EasingType;
    };
}
