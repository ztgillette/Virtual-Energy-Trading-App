import { IMarkStateSpec, IMarkStateStyleSpec } from '@visactor/vchart';
import { StateValue } from '@visactor/vchart/src/compile/mark';
import { Datum } from '@visactor/vchart/src/typings/common';
import { ITextGraphicAttribute, ISymbolGraphicAttribute, IRectGraphicAttribute, EasingType } from '@visactor/vrender-core';
type IRankingListData = Datum[];
export interface IRankingListSpec {
    type: 'rankingList';
    data: IRankingListData;
    xField: string;
    yField: string;
    width?: number;
    height?: number;
    labelLayout?: 'top' | 'bothEnd';
    bar?: {
        height?: number;
        style?: IRectGraphicAttribute;
        state?: Record<StateValue, IMarkStateSpec<IRectGraphicAttribute> | IMarkStateStyleSpec<IRectGraphicAttribute>>;
    };
    barBackground?: {
        visible?: boolean;
        type?: string;
        style?: ISymbolGraphicAttribute | IRectGraphicAttribute;
        state?: Record<StateValue, IMarkStateSpec<ISymbolGraphicAttribute | IRectGraphicAttribute> | IMarkStateStyleSpec<ISymbolGraphicAttribute | IRectGraphicAttribute>>;
    };
    rankingIcon?: {
        visible?: boolean;
        style?: ISymbolGraphicAttribute;
        state?: Record<StateValue, IMarkStateSpec<ISymbolGraphicAttribute> | IMarkStateStyleSpec<ISymbolGraphicAttribute>>;
    };
    decorateHaloIcons?: [
        {
            visible?: boolean;
            style?: ISymbolGraphicAttribute;
            state?: Record<StateValue, IMarkStateSpec<ISymbolGraphicAttribute> | IMarkStateStyleSpec<ISymbolGraphicAttribute>>;
        }
    ];
    orderLabel?: {
        visible?: boolean;
        style?: ITextGraphicAttribute;
        formatMethod?: (text: string, datum: Datum) => string;
        state?: Record<StateValue, IMarkStateSpec<ITextGraphicAttribute> | IMarkStateStyleSpec<ITextGraphicAttribute>>;
    };
    nameLabel?: {
        visible?: boolean;
        style?: ITextGraphicAttribute;
        formatMethod?: (text: string, datum: Datum) => string;
        state?: Record<StateValue, IMarkStateSpec<ITextGraphicAttribute> | IMarkStateStyleSpec<ITextGraphicAttribute>>;
    };
    valueLabel?: {
        visible?: boolean;
        style?: ITextGraphicAttribute;
        formatMethod?: (text: string, datum: Datum) => string;
        state?: Record<StateValue, IMarkStateSpec<ITextGraphicAttribute> | IMarkStateStyleSpec<ITextGraphicAttribute>>;
    };
    pageSize?: number;
    scrollSize?: number;
    animationAppear?: {
        enable?: boolean;
        type?: 'grow';
        duration?: number;
        easing?: EasingType;
        customTransformSpec?: (spec: any) => void;
    };
    animationUpdate?: {
        enable?: boolean;
        type?: 'grow';
        duration?: number;
        easing?: EasingType;
    };
    animationNormal?: {
        interval?: number;
    };
}
export {};
