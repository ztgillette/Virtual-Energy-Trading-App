import { CommonChartSpecTransformer } from "@visactor/vchart";

import { processSequenceData } from "./utils";

import { DATA_KEY } from "./constant";

export class SequenceScatterPixelChartSpecTransformer extends CommonChartSpecTransformer {
    transformSpec(spec) {
        var _a, _b, _c, _d, _e;
        super.transformSpec(spec);
        const dataSpecs = processSequenceData(spec);
        spec.type = "common", spec.dataKey = DATA_KEY, spec.data = dataSpecs[0].data, spec.width = 300, 
        spec.height = 300, spec.autoFit = !1, spec.series = [ {
            type: "scatter",
            xField: spec.xField,
            yField: spec.yField
        } ], spec.player && (spec.player = Object.assign(Object.assign({}, spec.player), {
            specs: dataSpecs
        }), spec.animationAppear = {
            duration: null !== (_b = null === (_a = spec.player) || void 0 === _a ? void 0 : _a.duration) && void 0 !== _b ? _b : 2e3,
            easing: "linear"
        }, spec.animationUpdate = {
            duration: null !== (_d = null === (_c = spec.player) || void 0 === _c ? void 0 : _c.duration) && void 0 !== _d ? _d : 2e3,
            easing: "linear"
        }), spec.axes = [ {
            orient: "left",
            type: "linear"
        }, {
            orient: "bottom",
            label: {
                visible: !0
            },
            type: "linear"
        } ], spec.customMark = [ {
            type: "image",
            dataIndex: 2,
            style: {
                x: 0,
                y: 0,
                width: 300,
                height: 300,
                image: datum => datum.imageData,
                zIndex: -1
            }
        }, {
            type: "text",
            dataIndex: 1,
            style: Object.assign({
                text: datum => datum.inter,
                x: 50,
                y: () => 10,
                textBaseline: "top",
                textAlign: "left",
                fontSize: 100,
                fontWeight: "bolder",
                fill: "black",
                fillOpacity: .2
            }, null === (_e = spec.infoLabel) || void 0 === _e ? void 0 : _e.style)
        } ], spec.tooltip = {
            visible: !1
        }, super.transformSpec(spec);
    }
}
//# sourceMappingURL=sequence-scatter-pixel-transformer.js.map
