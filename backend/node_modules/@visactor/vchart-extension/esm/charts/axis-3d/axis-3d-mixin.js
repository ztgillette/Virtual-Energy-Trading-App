import { isXAxis, isYAxis, isZAxis } from "@visactor/vchart";

import { getUpdateAttributeOfZAxis } from "./util";

export class Axis3dMixin {
    setLayout3dBox(box3d) {
        this.layout3dBox = box3d;
    }
    _afterUpdateAttribute(attrs, ignoreGrid) {
        const isZ = isZAxis(this._orient), isX = isXAxis(this._orient), isY = isYAxis(this._orient);
        let regionHeight = 0, regionWidth = 0;
        if (!ignoreGrid) {
            const regions = this.getRegions();
            let {x: minX, y: minY} = regions[0].getLayoutStartPoint(), maxX = minX + regions[0].getLayoutRect().width, maxY = minY + regions[0].getLayoutRect().height;
            for (let index = 1; index < regions.length; index++) {
                const region = regions[index], {x: x, y: y} = region.getLayoutStartPoint(), {width: width, height: height} = region.getLayoutRect();
                minX = Math.min(minX, x), maxX = Math.max(maxX, width + x), minY = Math.min(minY, y), 
                maxY = Math.max(maxY, height + y);
            }
            regionHeight = Math.abs(maxY - minY), regionWidth = Math.abs(maxX - minX);
        }
        let gridLength = 0, axisLength = 0;
        const {width: width, height: height} = this.getLayoutRect();
        let end = {
            x: 0,
            y: 0
        };
        isX ? (end = {
            x: width,
            y: 0
        }, gridLength = regionHeight, axisLength = width) : isY && (end = {
            x: 0,
            y: height
        }, gridLength = regionWidth, axisLength = height);
        const depth = this.layout3dBox ? this.layout3dBox.length : 0;
        if (!isZ) {
            const items = this.getLabelItems(axisLength);
            return attrs.grid = {
                length: gridLength
            }, attrs.start = {
                x: 0,
                y: 0
            }, attrs.text = this._spec.title.text || this._dataFieldText, attrs.maxWidth = this._getTitleLimit(isX), 
            attrs.items = items, attrs.grid = {
                type: "line",
                start: {
                    x: 0,
                    y: 0
                },
                end: end,
                items: items[0],
                depth: depth,
                length: gridLength
            }, attrs;
        }
        return getUpdateAttributeOfZAxis(this, ignoreGrid);
    }
}
//# sourceMappingURL=axis-3d-mixin.js.map