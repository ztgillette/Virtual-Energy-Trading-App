{"version":3,"sources":["../src/charts/axis-3d/axis-3d-mixin.ts"],"names":[],"mappings":"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","file":"axis-3d-mixin.js","sourcesContent":["import type { IAxis } from '@visactor/vchart';\nimport { isXAxis, isYAxis, isZAxis } from '@visactor/vchart';\nimport { getUpdateAttributeOfZAxis } from './util';\n\nexport class Axis3dMixin {\n  layout3dBox?: { width: number; height: number; length: number };\n\n  setLayout3dBox(box3d: { width: number; height: number; length: number }) {\n    this.layout3dBox = box3d;\n  }\n\n  protected _afterUpdateAttribute(attrs: any, ignoreGrid: boolean) {\n    const isZ = isZAxis((this as any)._orient);\n    const isX = isXAxis((this as any)._orient);\n    const isY = isYAxis((this as any)._orient);\n\n    // 获取更新的坐标轴属性\n    let regionHeight = 0;\n    let regionWidth = 0;\n\n    if (!ignoreGrid) {\n      const regions = (this as any).getRegions();\n      let { x: minX, y: minY } = regions[0].getLayoutStartPoint();\n      let maxX = minX + regions[0].getLayoutRect().width;\n      let maxY = minY + regions[0].getLayoutRect().height;\n      for (let index = 1; index < regions.length; index++) {\n        const region = regions[index];\n        const { x, y } = region.getLayoutStartPoint();\n        const { width, height } = region.getLayoutRect();\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, width + x);\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, height + y);\n      }\n      regionHeight = Math.abs(maxY - minY);\n      regionWidth = Math.abs(maxX - minX);\n    }\n\n    let gridLength = 0;\n    let axisLength = 0;\n    const { width, height } = (this as any).getLayoutRect();\n    let end = { x: 0, y: 0 };\n\n    if (isX) {\n      end = { x: width, y: 0 };\n      gridLength = regionHeight;\n      axisLength = width;\n    } else if (isY) {\n      end = { x: 0, y: height };\n      gridLength = regionWidth;\n      axisLength = height;\n    }\n\n    const depth = (this as any).layout3dBox ? (this as any).layout3dBox.length : 0;\n\n    if (!isZ) {\n      const items = (this as any).getLabelItems(axisLength);\n      attrs.grid = {\n        length: gridLength\n      };\n      attrs.start = { x: 0, y: 0 };\n      attrs.text = (this as any)._spec.title.text || (this as any)._dataFieldText;\n      attrs.maxWidth = (this as any)._getTitleLimit(isX);\n      attrs.items = items;\n      attrs.grid = {\n        type: 'line',\n        start: { x: 0, y: 0 },\n        end,\n        items: items[0],\n        depth,\n        length: gridLength\n      };\n      return attrs;\n    }\n\n    return getUpdateAttributeOfZAxis(this as unknown as IAxis, ignoreGrid);\n  }\n}\n"]}