import { VChart, FunnelChart, PREFIX, FunnelSeries, registerMarkFilterTransform } from "@visactor/vchart";

import { DataView } from "@visactor/vdataset";

import { ConversionFunnelChartSpecTransformer } from "./conversion-funnel-transformer";

import { conversionArrowTransform } from "./arrow-data-transform";

export class ConversionFunnelChart extends FunnelChart {
    constructor() {
        super(...arguments), this.type = "conversionFunnel", this.transformerConstructor = ConversionFunnelChartSpecTransformer;
    }
}

ConversionFunnelChart.type = "conversionFunnel", ConversionFunnelChart.transformerConstructor = ConversionFunnelChartSpecTransformer;

export class ConversionFunnelSeries extends FunnelSeries {
    initData() {
        var _a;
        super.initData();
        const {conversionArrow: conversionArrow} = this._spec;
        conversionArrow && (null === (_a = conversionArrow.arrows) || void 0 === _a ? void 0 : _a.length) && (this._arrowData = new DataView(this._dataSet, {
            name: `${PREFIX}_series_${this.id}_arrowData`
        }), this._dataSet.getTransform("conversionArrow") || this._dataSet.registerTransform("conversionArrow", conversionArrowTransform), 
        this._arrowData.parse(conversionArrow).transform({
            type: "conversionArrow",
            options: {
                categoryField: this._spec.categoryField
            }
        }));
    }
    afterCompile() {
        var _a;
        null === (_a = super.afterCompile) || void 0 === _a || _a.call(this);
        const rightGroup = this.getMarkInName("arrowRight");
        rightGroup && rightGroup.getMarks().forEach((mark => {
            mark.setDataView(this._arrowData), mark.compileData(), mark.setTransform([ {
                type: "filter",
                callback: datum => "right" === datum.position
            } ]);
        }));
        const leftGroup = this.getMarkInName("arrowLeft");
        leftGroup && leftGroup.getMarks().forEach((mark => {
            mark.setDataView(this._arrowData), mark.compileData(), mark.setTransform([ {
                type: "filter",
                callback: datum => "left" === datum.position
            } ]);
        }));
    }
}

export const registerConversionFunnelChart = option => {
    registerMarkFilterTransform();
    const vchartConstructor = (null == option ? void 0 : option.VChart) || VChart;
    vchartConstructor && (vchartConstructor.useChart([ ConversionFunnelChart ]), vchartConstructor.useSeries([ ConversionFunnelSeries ]));
};
//# sourceMappingURL=conversion-funnel.js.map