import { AbstractComponent, Segment } from "@visactor/vrender-components";

import { cloneDeep, isEmpty } from "@visactor/vutils";

import { Factory } from "@visactor/vchart";

import { createArea, createText } from "@visactor/vrender-core";

import { STACK_FIELD_END, STACK_FIELD_START } from "@visactor/vchart";

import { BAR_LINK } from "./constant";

export class BarLinkComponent extends AbstractComponent {
    constructor() {
        super(...arguments), this.name = BAR_LINK;
    }
    render() {
        const {data: data, linkStyle: linkStyle, areaStyle: areaStyle, styleMap: styleMap, label: label, linkType: linkType = "total"} = this.attribute;
        isEmpty(data) || (this.removeAllChild(), data.forEach(((datum, index) => {
            var _a, _b, _c, _d, _e;
            const {linePoints: linePoints, areaPoints: areaPoints, id: id = index, color: color, data: curData} = datum;
            if (areaPoints && !1 !== (null === (_a = null == styleMap ? void 0 : styleMap[`area-${id}`]) || void 0 === _a ? void 0 : _a.visible)) {
                const area = createArea(Object.assign(Object.assign({
                    points: areaPoints,
                    fillOpacity: .3,
                    fill: color,
                    zIndex: 0
                }, areaStyle), null == styleMap ? void 0 : styleMap[`area-${id}`]));
                area.name = "bar-link-area", area.id = `area-${id}`, this.add(area);
            }
            if (linePoints && !1 !== (null === (_b = null == styleMap ? void 0 : styleMap[`line-${id}`]) || void 0 === _b ? void 0 : _b.visible) && 0 !== (null === (_c = null == linkStyle ? void 0 : linkStyle.lineStyle) || void 0 === _c ? void 0 : _c.lineWidth) && 0 !== (null === (_d = null == styleMap ? void 0 : styleMap[`line-${id}`]) || void 0 === _d ? void 0 : _d.lineWidth)) {
                const {startSymbol: startSymbol = {}, endSymbol: endSymbol = {}, lineStyle: lineStyle} = linkStyle || {}, startSymbolAttrs = cloneDeep(startSymbol), endSymbolAttrs = cloneDeep(endSymbol);
                (null == styleMap ? void 0 : styleMap[`line-${id}`]) && styleMap[`line-${id}`].stroke && (startSymbolAttrs.style = Object.assign(Object.assign({}, startSymbolAttrs.style), {
                    color: styleMap[`line-${id}`].stroke
                }), endSymbolAttrs.style = Object.assign(Object.assign({}, endSymbolAttrs.style), {
                    color: styleMap[`line-${id}`].stroke
                })), startSymbolAttrs.symbolType || startSymbolAttrs.originSymbolType || (startSymbolAttrs.originSymbolType = "solidArrow"), 
                endSymbolAttrs.symbolType || endSymbolAttrs.originSymbolType || (endSymbolAttrs.originSymbolType = "solidArrow");
                const line = new Segment({
                    points: linePoints,
                    startSymbol: Object.assign({
                        size: 8
                    }, startSymbolAttrs),
                    endSymbol: Object.assign({
                        size: 8
                    }, endSymbolAttrs),
                    lineStyle: Object.assign(Object.assign({
                        lineDash: [ 3, 3 ],
                        lineWidth: 1,
                        stroke: "#000"
                    }, lineStyle), null == styleMap ? void 0 : styleMap[`line-${id}`]),
                    pickable: !0,
                    childrenPickable: !1,
                    zIndex: 1
                });
                line.name = "bar-link-line", line.id = `line-${id}`, this.add(line);
            }
            if ((null == label ? void 0 : label.visible) && !1 !== (null === (_e = null == styleMap ? void 0 : styleMap[`label-${id}`]) || void 0 === _e ? void 0 : _e.visible)) {
                const {style: style, formatMethod: formatMethod} = label, [startData, endData] = curData;
                let startValue = startData[STACK_FIELD_END], endValue = endData[STACK_FIELD_END];
                "value" === linkType && (startValue = startData[STACK_FIELD_END] - startData[STACK_FIELD_START], 
                endValue = endData[STACK_FIELD_END] - endData[STACK_FIELD_START]);
                const value = endValue - startValue, percentage = (endValue - startValue) / startValue * 100, text = createText(Object.assign(Object.assign({
                    x: .5 * (linePoints[0].x + linePoints[1].x),
                    y: .5 * (linePoints[0].y + linePoints[1].y),
                    text: formatMethod ? formatMethod(value, percentage, curData) : `${value} ${percentage}`,
                    fontSize: 14,
                    fill: "#000",
                    stroke: "#fff",
                    lineWidth: 1,
                    textAlign: "center",
                    textBaseline: "middle",
                    background: "#fff",
                    zIndex: 2
                }, style), null == styleMap ? void 0 : styleMap[`label-${id}`]));
                text.name = "bar-link-label", text.id = `label-${id}`, this.add(text);
            }
        })));
    }
}

export const registerBarLink = () => {
    Factory.registerGraphicComponent(BAR_LINK, (attrs => new BarLinkComponent(attrs)));
};
//# sourceMappingURL=bar-link.js.map
