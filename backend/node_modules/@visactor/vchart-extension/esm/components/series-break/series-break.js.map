{"version":3,"sources":["../src/components/series-break/series-break.ts"],"names":[],"mappings":"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","file":"series-break.js","sourcesContent":["/**\n * @description vchart 自定义组件，用于实现 bar、area、line 这些图形的截断图形生成\n * @author zhangweixing\n */\n\nimport { AbstractComponent, Point } from '@visactor/vrender-components';\nimport { SeriesBreakAttrs, SeriesBreakData } from './type';\nimport { createGroup, createPath, IGraphic } from '@visactor/vrender-core';\nimport { isEmpty, isNumberClose, isValid } from '@visactor/vutils';\nimport { SERIES_BREAK } from './constant';\nimport { Factory } from '@visactor/vchart';\n\n/**\n * 求锯齿的路径（一个锯齿由向上和向下的两个线段组成）\n * @param start 锯齿的起始点\n * @param end 锯齿的结束点\n * @param size 锯齿的高度\n * @param angle 锯齿的角度\n * @param gap 两条锯齿的间距\n * @param isVertical 是否垂直\n * @returns\n */\nfunction generateZigzagPath(start: Point, end: Point, size: number, angle: number, isVertical = false) {\n  const path = [];\n  const { x: startX, y: startY } = start;\n  const { x: endX, y: endY } = end;\n\n  // 计算锯齿的数量\n  const numZigzags = isVertical ? Math.floor((endY - startY) / (size * 2)) : Math.floor((endX - startX) / (size * 2));\n\n  // 计算倾斜角度的增量\n  const angleRad = (Math.PI / 180) * angle; // 转换为弧度\n  const deltaX = size * Math.cos(angleRad);\n  const deltaY = size * Math.sin(angleRad);\n\n  // 添加第一条锯齿的起始点\n  path.push(`M ${startX} ${startY}`);\n\n  for (let i = 0; i <= numZigzags; i++) {\n    const x = isVertical ? startX + (i % 2 === 0 ? deltaX : -deltaX) : startX + i * size * 2;\n    const y = isVertical ? startY + i * size * 2 : i % 2 === 0 ? startY - deltaY : startY + deltaY;\n    path.push(`L ${x} ${y}`);\n  }\n\n  // 添加第一条锯齿的结束点\n  path.push(`L ${isVertical ? startX : endX} ${isVertical ? endY : startY}`);\n\n  return path.join(' ');\n}\n\nconst checkOverlap = (prevData: SeriesBreakData[], newEntry: SeriesBreakData) => {\n  const { start, end } = newEntry;\n  const isVertical = start.x === end.x;\n  const equalDim = isVertical ? 'x' : 'y';\n  const diffDim = isVertical ? 'y' : 'x';\n  let needAppend = true;\n  const EPS = 1e-6;\n\n  if (prevData.length) {\n    prevData.forEach(prevEntry => {\n      if (isNumberClose(prevEntry.start[equalDim], start[equalDim])) {\n        // 判断是否有重叠，有重叠取交集\n        const minDim = Math.min(start[diffDim], end[diffDim]);\n        const maxDim = Math.max(start[diffDim], end[diffDim]);\n        const prevMinDim = Math.min(prevEntry.start[diffDim], prevEntry.end[diffDim]);\n        const prevMaxDim = Math.max(prevEntry.start[diffDim], prevEntry.end[diffDim]);\n        const hasOverlap = !(maxDim < prevMinDim - EPS || minDim > prevMaxDim + EPS);\n\n        if (hasOverlap) {\n          prevEntry.start[diffDim] = Math.min(prevMinDim, minDim);\n          prevEntry.end[diffDim] = Math.max(prevMaxDim, maxDim);\n          needAppend = false;\n          return;\n        }\n      }\n    });\n  }\n\n  if (needAppend) {\n    prevData.push(newEntry);\n  }\n};\n\nexport class SeriesBreakComponent extends AbstractComponent<Required<SeriesBreakAttrs>> {\n  name = SERIES_BREAK;\n  protected render() {\n    this.removeAllChild();\n    const { data = [] } = this.attribute as SeriesBreakAttrs;\n    if (isEmpty(data)) {\n      return;\n    }\n    // 去除重叠数据\n    const verticalData: SeriesBreakData[] = [];\n    const horizontalData: SeriesBreakData[] = [];\n\n    data.forEach(breakData => {\n      const { start, end } = breakData;\n      const isVertical = start.x === end.x;\n\n      checkOverlap(isVertical ? verticalData : horizontalData, breakData);\n    });\n\n    [...verticalData, ...horizontalData].forEach((breakData, id) => {\n      const { start, end, size = 4, gap = 5, style = {}, ...rest } = breakData;\n      const breakGroup = createGroup({});\n      const isVertical = start.x === end.x;\n\n      let startPathStart;\n      let startPathEnd;\n      let endPathStart;\n      let endPathEnd;\n      if (isVertical) {\n        startPathStart = {\n          x: start.x - gap / 2,\n          y: start.y\n        };\n        startPathEnd = {\n          x: end.x - gap / 2,\n          y: end.y\n        };\n        endPathStart = {\n          x: start.x + gap / 2,\n          y: start.y\n        };\n        endPathEnd = {\n          x: end.x + gap / 2,\n          y: end.y\n        };\n      } else {\n        startPathStart = {\n          x: start.x,\n          y: start.y - gap / 2\n        };\n        startPathEnd = {\n          x: end.x,\n          y: end.y - gap / 2\n        };\n        endPathStart = {\n          x: start.x,\n          y: start.y + gap / 2\n        };\n        endPathEnd = {\n          x: end.x,\n          y: end.y + gap / 2\n        };\n      }\n\n      const startPath = generateZigzagPath(startPathStart, startPathEnd, size, isVertical ? 75 : 15, isVertical);\n      const centerPath = generateZigzagPath(start, end, size, isVertical ? 75 : 15, isVertical);\n      const endPath = generateZigzagPath(endPathStart, endPathEnd, size, isVertical ? 75 : 15, isVertical);\n      breakGroup.add(\n        createPath({\n          path: startPath,\n          stroke: '#000',\n          lineWidth: 1,\n          ...style,\n          pickable: false,\n          zIndex: 1\n        })\n      );\n      breakGroup.add(\n        createPath({\n          path: endPath,\n          stroke: '#000',\n          lineWidth: 1,\n          ...style,\n          pickable: false,\n          zIndex: 1\n        })\n      );\n      breakGroup.add(\n        createPath({\n          path: centerPath,\n          stroke: '#fff',\n          lineWidth: gap,\n          pickable: false,\n          zIndex: 0\n        })\n      );\n\n      breakGroup.name = 'series-break';\n      breakGroup.data = rest;\n\n      if (isValid(rest.axisId)) {\n        breakGroup.id = `${rest.axisId ?? ''}_${id}`;\n      }\n\n      this.add(breakGroup);\n    });\n  }\n}\n\nexport const registerSeriesBreak = () => {\n  Factory.registerGraphicComponent(\n    'seriesBreak',\n    (attrs: Required<SeriesBreakAttrs>) => new SeriesBreakComponent(attrs) as unknown as IGraphic\n  );\n};\n"]}