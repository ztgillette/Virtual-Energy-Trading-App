{"version":3,"sources":["../src/components/bar-link/type.ts"],"names":[],"mappings":"","file":"type.js","sourcesContent":["import type {\n  IAreaGraphicAttribute,\n  IGroupGraphicAttribute,\n  ILineGraphicAttribute,\n  ITextGraphicAttribute\n} from '@visactor/vrender-core';\nimport type { SegmentAttributes } from '@visactor/vrender-components';\nimport type { Dict, IPointLike } from '@visactor/vutils';\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type BarLinkDatum = {\n  /**\n   * 用于绘制的面积的坐标点\n   */\n  areaPoints: [IPointLike, IPointLike];\n  /**\n   * 用于绘制线的坐标点\n   */\n  linePoints: [IPointLike, IPointLike];\n\n  /**\n   * 唯一标识，如果不声明，则默认使用数据索引\n   */\n  id?: string;\n  color?: string;\n  /**\n   * 点携带的图形数据\n   */\n  data: [Dict<any>, Dict<any>];\n};\n\nexport interface BarLinkAttrs extends IGroupGraphicAttribute {\n  data: BarLinkDatum[];\n  /**\n   * 连接类型\n   * 1. 'total' 累计值进行连接\n   * 2. 'value' 本身值连接\n   */\n  linkType?: 'total' | 'value';\n  /**\n   * 是否填充\n   */\n  doFill?: boolean;\n  linkStyle?: Pick<SegmentAttributes, 'startSymbol' | 'endSymbol' | 'lineStyle'>;\n  areaStyle?: IAreaGraphicAttribute;\n  /**\n   * 用于配置各个线的样式，key 对应线的 id，主要用于连接线的编辑场景\n   * 1. 删除：{ visible: false }\n   * 2. 样式编辑：{ stroke: 'red' }\n   */\n  styleMap?: Record<string, ILineGraphicAttribute>;\n  label?: {\n    visible?: boolean;\n    style?: ITextGraphicAttribute;\n    formatMethod?: (value: number, percent: number, data: [any, any]) => (string | number) | (string | number)[];\n  };\n}\n"]}