{"version":3,"sources":["../src/components/bar-link/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,6CAAsE;AACtE,6CAAyC;AACzC,yCAAsC;AAEtC,SAAgB,iBAAiB,CAAC,QAAwB,EAAE,WAAqB;IAC/E,MAAM,MAAM,GAAyB,EAAE,CAAC;IACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACxC,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,QAAQ,GAAG,IAAA,0BAAiB,EAAC,IAAI,CAAU,CAAC;QAClD,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YACrB,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;SACvB;QACD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7B;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAZD,8CAYC;AAED,SAAgB,WAAW,CACzB,cAA4B,EAC5B,WAAyB,EACzB,MAQC;IAED,MAAM,EAAE,YAAY,EAAE,cAAc,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IAE9G,MAAM,gBAAgB,GAAG,cAAc,CAAC,UAAU,CAAC;IACnD,MAAM,aAAa,GAAG,WAAW,CAAC,UAAU,CAAC;IAE7C,IAAI,UAAoC,CAAC;IACzC,IAAI,UAAoC,CAAC;IAEzC,IAAI,YAAY,EAAE;QAChB,UAAU,GAAG;YACX;gBACE,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY;gBACjE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;aACtC;YACD;gBACE,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY;gBAC3D,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;aACnC;SACF,CAAC;QACF,IAAI,cAAc,EAAE;YAClB,IAAI,QAAQ,KAAK,OAAO,EAAE;gBACxB,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACtC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACnC;iBACF,CAAC;aACH;YAED,IAAI,MAAM,EAAE;gBACV,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,EAAE,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACtC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACtC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,EAAE,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBACnC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACnC;iBACF,CAAC;aACH;SACF;aAAM;YACL,IAAI,QAAQ,KAAK,OAAO,EAAE;gBACxB,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACtC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACnC;iBACF,CAAC;aACH;YAED,IAAI,MAAM,EAAE;gBACV,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,EAAE,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACtC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACtC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,EAAE,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBACnC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACnC;iBACF,CAAC;aACH;SACF;KACF;SAAM;QACL,UAAU,GAAG;YACX;gBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;gBACrC,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY;aAClE;YACD;gBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;gBAClC,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY;aAC5D;SACF,CAAC;QAEF,IAAI,cAAc,EAAE;YAClB,IAAI,QAAQ,KAAK,OAAO,EAAE;gBACxB,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACtC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACnC;iBACF,CAAC;aACH;YACD,IAAI,MAAM,EAAE;gBACV,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,EAAE,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACvC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,EAAE,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACpC;iBACF,CAAC;aACH;SACF;aAAM;YACL,IAAI,QAAQ,KAAK,OAAO,EAAE;gBACxB,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACtC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACnC;iBACF,CAAC;aACH;YACD,IAAI,MAAM,EAAE;gBACV,UAAU,GAAG;oBACX;wBACE,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,CAAC,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;wBACrC,EAAE,EAAE,gBAAgB,CAAC,EAAE,GAAG,YAAY;qBACvC;oBACD;wBACE,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,CAAC,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;wBAClC,EAAE,EAAE,aAAa,CAAC,EAAE,GAAG,YAAY;qBACpC;iBACF,CAAC;aACH;SACF;KACF;IAED,OAAO;QAEL,UAAU;QACV,UAAU;QACV,IAAI,EAAE,CAAC,IAAA,0BAAiB,EAAC,cAAc,CAAU,EAAE,IAAA,0BAAiB,EAAC,WAAW,CAAU,CAAC;QAC3F,KAAK,EAAE,cAAc,CAAC,SAAS,CAAC,IAAc;KAC/C,CAAC;AACJ,CAAC;AArKD,kCAqKC;AAED,SAAgB,gBAAgB,CAC9B,QAAsG,EAAE,EACxG,UAAgB;IAEhB,MAAM,EAAE,QAAQ,GAAG,OAAO,EAAE,MAAM,KAAc,KAAK,EAAd,IAAI,UAAK,KAAK,EAA/C,sBAAuC,CAAQ,CAAC;IACtD,OAAO;QACL,IAAI,EAAE,WAAW;QACjB,aAAa,EAAE,mBAAQ;QACvB,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,KAAK;QAClB,KAAK,gCACH,IAAI,EAAE,CAAC,KAAU,EAAE,OAAY,EAAE,EAAE;gBACjC,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;gBAC3B,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;gBAClD,MAAM,YAAY,GAAmB,EAAE,CAAC;gBACxC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,EAAE,EAAE;oBAE9B,MAAM,YAAY,GAAG,MAAM;yBACxB,SAAS,EAAE;yBACX,MAAM,CAAC,CAAC,CAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAuB,CAAC;oBAC3E,MAAM,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;oBAC1E,IAAI,YAAY,CAAC,MAAM,EAAE;wBACvB,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;wBACrD,MAAM,cAAc,GAAmB,EAAE,CAAC;wBAC1C,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;;4BAC/B,MAAM,kBAAkB,GAAG,MAAA,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,0CAAE,WAAW,EAAE,CAAC;4BAEzE,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gCACtC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;4BAClC,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,MAAM,SAAS,GAAG,iBAAiB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;wBAGjE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,aAA6B,EAAE,EAAE;4BACjE,aAAa,CAAC,IAAI,CAAC,CAAC,IAAkB,EAAE,IAAkB,EAAE,EAAE;gCAC5D,OAAO,CACJ,IAAA,0BAAiB,EAAC,IAAI,CAAW,CAAC,wBAAe,CAAC;oCAClD,IAAA,0BAAiB,EAAC,IAAI,CAAW,CAAC,wBAAe,CAAC,CACpD,CAAC;4BACJ,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;wBAClC,MAAM,YAAY,GAAG,SAAS,CAAC,SAAS,KAAK,YAAY,CAAC;wBAC1D,MAAM,cAAc,GAAG,SAAS,CAAC,cAAc,EAAE,CAAC,SAAS,EAAE,CAAC;wBAC9D,MAAM,cAAc,GAAG,SAAS,CAAC,cAAc,EAAE,CAAC,SAAS,EAAE,CAAC;wBAE9D,MAAM,WAAW,GAAqB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBAK/D,IAAI,WAAW,CAAC,MAAM,EAAE;4BACtB,IAAI,YAAY,EAAE;gCAChB,MAAM,gBAAgB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gCACzD,MAAM,eAAe,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gCAC7E,IAAI,gBAAgB,GAAG,eAAe,EAAE;oCACtC,WAAW,CAAC,OAAO,EAAE,CAAC;iCACvB;6BACF;iCAAM;gCACL,MAAM,gBAAgB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gCACzD,MAAM,eAAe,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gCAC7E,IAAI,gBAAgB,GAAG,eAAe,EAAE;oCACtC,WAAW,CAAC,OAAO,EAAE,CAAC;iCACvB;6BACF;yBACF;wBAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE;4BAC3D,MAAM,aAAa,GAAmB,WAAW,CAAC,KAAK,CAAC,CAAC;4BACzD,MAAM,UAAU,GAAmB,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4BAE1D,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE;;gCAC9C,MAAM,WAAW,GAAG,MAAA,UAAU,CAAC,YAAY,CAAC,mCAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gCAElF,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,WAAW,EAAE;oCACjD,YAAY;oCACZ,cAAc;oCACd,cAAc;oCACd,MAAM;oCACN,QAAQ;oCACR,YAAY;oCACZ,YAAY;iCACb,CAAC,CAAC;gCAEH,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BAC9B,CAAC,CAAC,CAAC;4BAEH,IAAI,aAAa,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE;gCAG5C,MAAM,2BAA2B,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gCAC5E,KAAK,IAAI,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCAC7D,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;oCAElC,MAAM,QAAQ,GAAG,WAAW,CAAC,2BAA2B,EAAE,WAAW,EAAE;wCACrE,YAAY;wCACZ,cAAc;wCACd,cAAc;wCACd,MAAM;wCACN,QAAQ;wCACR,YAAY;wCACZ,YAAY;qCACb,CAAC,CAAC;oCAEH,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iCAC7B;6BACF;yBACF;qBACF;gBACH,CAAC,CAAC,CAAC;gBAEH,OAAO,YAAY,CAAC;YACtB,CAAC,EACD,QAAQ,IACL,IAAI,GACJ,UAAU,CACd;KACF,CAAC;AACJ,CAAC;AAzHD,4CAyHC;AAED,SAAgB,mBAAmB,CACjC,OAAc,EACd,WAA0G;IAGzG,OAAe,CAAC,UAAU,GAAG,IAAA,cAAK,EAAE,OAAe,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa,KAAK,mBAAQ,CAAC,CAAC;IACrH,OAAe,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;AAClE,CAAC;AAPD,kDAOC","file":"util.js","sourcesContent":["import type { Dict, IPointLike } from '@visactor/vutils';\nimport type { BarLinkAttrs, BarLinkDatum } from './type';\nimport type { Datum, ICartesianSeries, IMarkGraphic, ISpec } from '@visactor/vchart';\nimport { getDatumOfGraphic, STACK_FIELD_END } from '@visactor/vchart';\nimport { array } from '@visactor/vutils';\nimport { BAR_LINK } from './constant';\n\nexport function groupBarsByFields(elements: IMarkGraphic[], groupFields: string[]) {\n  const result: Dict<IMarkGraphic[]> = {};\n  for (let i = 0; i < elements.length; i++) {\n    const item = elements[i];\n    const itemData = getDatumOfGraphic(item) as Datum;\n    const groupKey = groupFields.map(field => itemData[field]).join('-');\n    if (!result[groupKey]) {\n      result[groupKey] = [];\n    }\n    result[groupKey].push(item);\n  }\n  return result;\n}\n\nexport function getLinkData(\n  currentElement: IMarkGraphic,\n  nextElement: IMarkGraphic,\n  config: {\n    isHorizontal: boolean;\n    isXAxisInverse: boolean;\n    isYAxisInverse: boolean;\n    linkType: string;\n    doFill: boolean;\n    regionStartX: number;\n    regionStartY: number;\n  }\n): BarLinkDatum {\n  const { isHorizontal, isXAxisInverse, isYAxisInverse, linkType, doFill, regionStartX, regionStartY } = config;\n\n  const currentBarBounds = currentElement.AABBBounds;\n  const nextBarBounds = nextElement.AABBBounds;\n\n  let linePoints: [IPointLike, IPointLike];\n  let areaPoints: [IPointLike, IPointLike];\n\n  if (isHorizontal) {\n    linePoints = [\n      {\n        x: (currentBarBounds.x1 + currentBarBounds.x2) / 2 + regionStartX,\n        y: currentBarBounds.y1 + regionStartY\n      },\n      {\n        x: (nextBarBounds.x1 + nextBarBounds.x2) / 2 + regionStartX,\n        y: nextBarBounds.y2 + regionStartY\n      }\n    ];\n    if (isXAxisInverse) {\n      if (linkType === 'total') {\n        linePoints = [\n          {\n            x: currentBarBounds.x1 + regionStartX,\n            y: currentBarBounds.y1 + regionStartY\n          },\n          {\n            x: nextBarBounds.x1 + regionStartX,\n            y: nextBarBounds.y2 + regionStartY\n          }\n        ];\n      }\n\n      if (doFill) {\n        areaPoints = [\n          {\n            x: currentBarBounds.x1 + regionStartX,\n            x1: currentBarBounds.x2 + regionStartX,\n            y: currentBarBounds.y1 + regionStartY\n          },\n          {\n            x: nextBarBounds.x1 + regionStartX,\n            x1: nextBarBounds.x2 + regionStartX,\n            y: nextBarBounds.y2 + regionStartY\n          }\n        ];\n      }\n    } else {\n      if (linkType === 'total') {\n        linePoints = [\n          {\n            x: currentBarBounds.x2 + regionStartX,\n            y: currentBarBounds.y1 + regionStartY\n          },\n          {\n            x: nextBarBounds.x2 + regionStartX,\n            y: nextBarBounds.y2 + regionStartY\n          }\n        ];\n      }\n\n      if (doFill) {\n        areaPoints = [\n          {\n            x: currentBarBounds.x2 + regionStartX,\n            x1: currentBarBounds.x1 + regionStartX,\n            y: currentBarBounds.y1 + regionStartY\n          },\n          {\n            x: nextBarBounds.x2 + regionStartX,\n            x1: nextBarBounds.x1 + regionStartX,\n            y: nextBarBounds.y2 + regionStartY\n          }\n        ];\n      }\n    }\n  } else {\n    linePoints = [\n      {\n        x: currentBarBounds.x2 + regionStartX,\n        y: (currentBarBounds.y1 + currentBarBounds.y2) / 2 + regionStartY\n      },\n      {\n        x: nextBarBounds.x1 + regionStartX,\n        y: (nextBarBounds.y1 + nextBarBounds.y2) / 2 + regionStartY\n      }\n    ];\n\n    if (isYAxisInverse) {\n      if (linkType === 'total') {\n        linePoints = [\n          {\n            x: currentBarBounds.x2 + regionStartX,\n            y: currentBarBounds.y2 + regionStartY\n          },\n          {\n            x: nextBarBounds.x1 + regionStartX,\n            y: nextBarBounds.y2 + regionStartY\n          }\n        ];\n      }\n      if (doFill) {\n        areaPoints = [\n          {\n            x: currentBarBounds.x2 + regionStartX,\n            y: currentBarBounds.y2 + regionStartY,\n            y1: currentBarBounds.y1 + regionStartY\n          },\n          {\n            x: nextBarBounds.x1 + regionStartX,\n            y: nextBarBounds.y2 + regionStartY,\n            y1: nextBarBounds.y1 + regionStartY\n          }\n        ];\n      }\n    } else {\n      if (linkType === 'total') {\n        linePoints = [\n          {\n            x: currentBarBounds.x2 + regionStartX,\n            y: currentBarBounds.y1 + regionStartY\n          },\n          {\n            x: nextBarBounds.x1 + regionStartX,\n            y: nextBarBounds.y1 + regionStartY\n          }\n        ];\n      }\n      if (doFill) {\n        areaPoints = [\n          {\n            x: currentBarBounds.x2 + regionStartX,\n            y: currentBarBounds.y1 + regionStartY,\n            y1: currentBarBounds.y2 + regionStartY\n          },\n          {\n            x: nextBarBounds.x1 + regionStartX,\n            y: nextBarBounds.y1 + regionStartY,\n            y1: nextBarBounds.y2 + regionStartY\n          }\n        ];\n      }\n    }\n  }\n\n  return {\n    // points,\n    areaPoints,\n    linePoints,\n    data: [getDatumOfGraphic(currentElement) as Datum, getDatumOfGraphic(nextElement) as Datum],\n    color: currentElement.attribute.fill as string\n  };\n}\n\nexport function getBarLinkConfig(\n  style: Pick<BarLinkAttrs, 'areaStyle' | 'label' | 'linkStyle' | 'styleMap' | 'doFill' | 'linkType'> = {},\n  extraStyle?: any\n) {\n  const { linkType = 'total', doFill, ...rest } = style;\n  return {\n    type: 'component',\n    componentType: BAR_LINK,\n    zIndex: 500, // 需要处于 region 上层\n    interactive: false,\n    style: {\n      data: (datum: any, context: any) => {\n        const { vchart } = context;\n        const regions = vchart.getChart().getAllRegions();\n        const linkLineData: BarLinkDatum[] = [];\n        regions.forEach((region: any) => {\n          // 获取所有 bar 系列\n          const barSeriesArr = region\n            .getSeries()\n            .filter((s: ICartesianSeries) => s.type === 'bar') as ICartesianSeries[];\n          const { x: regionStartX, y: regionStartY } = region.getLayoutStartPoint();\n          if (barSeriesArr.length) {\n            const groupFields = barSeriesArr[0].getGroupFields();\n            const allBarElements: IMarkGraphic[] = [];\n            barSeriesArr.forEach(barSeries => {\n              const barGraphicElements = barSeries.getMarkInName('bar')?.getGraphics();\n\n              barGraphicElements.forEach(barElement => {\n                allBarElements.push(barElement);\n              });\n            });\n            // 按照 xField/yField 进行分组\n            const groupData = groupBarsByFields(allBarElements, groupFields);\n\n            // 对同组内的图形进行排序\n            Object.values(groupData).forEach((groupedValues: IMarkGraphic[]) => {\n              groupedValues.sort((prev: IMarkGraphic, curr: IMarkGraphic) => {\n                return (\n                  (getDatumOfGraphic(prev) as Datum)[STACK_FIELD_END] -\n                  (getDatumOfGraphic(curr) as Datum)[STACK_FIELD_END]\n                );\n              });\n            });\n\n            const barSeries = barSeriesArr[0];\n            const isHorizontal = barSeries.direction === 'horizontal';\n            const isYAxisInverse = barSeries.getYAxisHelper().isInverse();\n            const isXAxisInverse = barSeries.getXAxisHelper().isInverse();\n\n            const groupValues: IMarkGraphic[][] = Object.values(groupData);\n\n            // 根据每组图形：\n            // 1. 水平，每组图形的 y1 进行由小到大排序，保证图形顺序\n            // 2. 垂直，每组图形的 x1 进行由小到大排序，保证图形顺序\n            if (groupValues.length) {\n              if (isHorizontal) {\n                const firstElementPosY = groupValues[0][0].AABBBounds.y1;\n                const lastElementPosY = groupValues[groupValues.length - 1][0].AABBBounds.y1;\n                if (firstElementPosY < lastElementPosY) {\n                  groupValues.reverse();\n                }\n              } else {\n                const firstElementPosX = groupValues[0][0].AABBBounds.x1;\n                const lastElementPosX = groupValues[groupValues.length - 1][0].AABBBounds.x1;\n                if (firstElementPosX > lastElementPosX) {\n                  groupValues.reverse();\n                }\n              }\n            }\n\n            for (let index = 0; index < groupValues.length - 1; index++) {\n              const currentValues: IMarkGraphic[] = groupValues[index];\n              const nextValues: IMarkGraphic[] = groupValues[index + 1];\n\n              currentValues.forEach((element, elementIndex) => {\n                const nextElement = nextValues[elementIndex] ?? nextValues[nextValues.length - 1];\n\n                const linkData = getLinkData(element, nextElement, {\n                  isHorizontal,\n                  isXAxisInverse,\n                  isYAxisInverse,\n                  doFill,\n                  linkType,\n                  regionStartX,\n                  regionStartY\n                });\n\n                linkLineData.push(linkData);\n              });\n\n              if (currentValues.length < nextValues.length) {\n                // 如果当前组的个数小于下一个组的个数，用当前组的最后一个元素去链接下一组剩余的图形\n                // 使用当前组的最后一个元素去链接下一组剩余的图形\n                const lastElementOfCurrentElement = currentValues[currentValues.length - 1];\n                for (let i = currentValues.length; i < nextValues.length; i++) {\n                  const nextElement = nextValues[i];\n\n                  const linkData = getLinkData(lastElementOfCurrentElement, nextElement, {\n                    isHorizontal,\n                    isXAxisInverse,\n                    isYAxisInverse,\n                    doFill,\n                    linkType,\n                    regionStartX,\n                    regionStartY\n                  });\n\n                  linkLineData.push(linkData);\n                }\n              }\n            }\n          }\n        });\n\n        return linkLineData;\n      },\n      linkType,\n      ...rest,\n      ...extraStyle\n    }\n  };\n}\n\nexport function appendBarLinkConfig(\n  rawSpec: ISpec,\n  barLinkSpec?: Pick<BarLinkAttrs, 'areaStyle' | 'label' | 'linkStyle' | 'styleMap' | 'doFill' | 'linkType'>\n) {\n  // 判断 editorSpec 中是否有 barLink，有则添加 customMark\n  (rawSpec as any).customMark = array((rawSpec as any).customMark).filter((obj: any) => obj.componentType !== BAR_LINK);\n  (rawSpec as any).customMark.push(getBarLinkConfig(barLinkSpec));\n}\n"]}