import type { IGraphic, IGroup } from '@visactor/vrender-core';
import type { Maybe } from '@visactor/vutils';
import { MarkPoint } from '@visactor/vrender-components';
import { LayoutZIndex, VChart, BaseComponent } from '@visactor/vchart';
import type { IRect, IPoint, Datum, IModelSpecInfo, PanEventParam, ICartesianSeries, IGeoSeries } from '@visactor/vchart';
import type { IPairInfo } from './layout';
import type { IMapLabelSpec, MapLabelSceneNodeMap } from './type';
import { MapLabelSpecTransformer } from './map-label-transformer';
export declare class MapLabelComponent extends BaseComponent<IMapLabelSpec> {
    static type: string;
    type: string;
    name: string;
    static specKey: string;
    specKey: string;
    static readonly transformerConstructor: any;
    readonly transformerConstructor: typeof MapLabelSpecTransformer;
    layoutType: 'none';
    layoutZIndex: LayoutZIndex;
    protected nameField: string;
    protected valueField?: string;
    protected _series: ICartesianSeries | IGeoSeries;
    protected _map: any[];
    protected _longitudeField: string;
    protected _latitudeField: string;
    protected _markerComponents: MarkPoint[];
    private _activeDatum;
    static getSpecInfo(chartSpec: any): Maybe<IModelSpecInfo[]>;
    setAttrFromSpec(): void;
    created(): void;
    initRelatedInfo(): void;
    initData(): void;
    initEvent(): void;
    handlePan(e: PanEventParam): void;
    handleZoom(): void;
    private _updateDatum;
    dataToPosition(datum: any): IPoint;
    updateLayoutAttribute(): void;
    protected _updateMarkerLayoutAttribute(): void;
    protected _evaluateMarker(data: Datum, index: number): {
        pairInfo: IPairInfo;
        contentMarks: Partial<Record<import("./type").IMapLabelNodes, IGraphic<Partial<import("@visactor/vrender-core").IGraphicAttribute>>>>;
    };
    protected _layoutMarkers(positionedRects: IRect[], contentMarks: MapLabelSceneNodeMap[]): void;
    protected _renderMarkers(): void;
    protected _layoutLabels(rects: IPairInfo[]): IRect[];
    private _isRelativeModel;
    private _isRelativeSeries;
    protected _getNeedClearVRenderComponents(): IGraphic[];
    getVRenderComponents(): IGroup[];
}
export declare const registerMapLabel: (option?: {
    VChart?: typeof VChart;
}) => void;
