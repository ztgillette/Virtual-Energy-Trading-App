{"version":3,"sources":["../src/charts/axis-3d/util.ts"],"names":[],"mappings":";;;AAAA,6CAAwE;AAEjE,MAAM,yBAAyB,GAAG,CAAC,IAAW,EAAE,UAAmB,EAAE,EAAE;;IAC5E,MAAM,UAAU,GAAG,IAAA,iCAAwB,EAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC/D,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACvC,MAAM,UAAU,GAAG,KAAK,CAAC;IACzB,MAAM,KAAK,GAAI,IAAY,CAAC,WAAW,CAAC,CAAC,CAAE,IAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,MAAM,MAAM,GAAI,IAAY,CAAC,WAAW,CAAC,CAAC,CAAE,IAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,MAAM,GAAG,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAE/B,MAAM,KAAK,GAAI,IAAY,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,KAAK,GAAQ;QACjB,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;QACrB,GAAG;QACH,KAAK,EAAE;YACL,IAAI,EAAG,IAAY,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAK,IAAY,CAAC,cAAc;YACpE,QAAQ,EAAG,IAAY,CAAC,cAAc,CAAC,KAAK,CAAC;SAC9C;QACD,KAAK;QACL,KAAK,EAAG,IAAY,CAAC,MAAM,CAAC,KAAK,EAAE;KACpC,CAAC;IAEF,MAAM,YAAY,GAAG,MAAC,IAAY,CAAC,YAAY,mCAAI,KAAK,CAAC;IACzD,IAAI,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IACzB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,YAAY,KAAK,KAAK,EAAE;QAC1B,CAAC,GAAI,IAAY,CAAC,WAAW,CAAC,MAAM,CAAC;QACrC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACrB,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KACrB;IACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;IACZ,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAE1B,IAAI,CAAC,UAAU,EAAE;QACf,KAAK,CAAC,IAAI,GAAG;YACX,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACrB,GAAG;YACH,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;YACf,cAAc,EAAG,IAAY,CAAC,UAAU,CAAC,cAAc;YACvD,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3C,KAAK;YACL,CAAC;YACD,QAAQ;SACT,CAAC;KACH;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAhDW,QAAA,yBAAyB,6BAgDpC","file":"util.js","sourcesContent":["import { getCombinedSizeOfRegions, type IAxis } from '@visactor/vchart';\n\nexport const getUpdateAttributeOfZAxis = (axis: IAxis, ignoreGrid: boolean) => {\n  const regionSize = getCombinedSizeOfRegions(axis.getRegions());\n  const { width } = axis.getLayoutRect();\n  const axisLength = width;\n  const depth = (axis as any).layout3dBox ? (axis as any).layout3dBox.length : 0;\n  const depthZ = (axis as any).layout3dBox ? (axis as any).layout3dBox.width : 0;\n  const end = { x: depth, y: 0 };\n\n  const items = (axis as any).getLabelItems(axisLength);\n  const attrs: any = {\n    start: { x: 0, y: 0 },\n    end,\n    title: {\n      text: (axis as any)._spec.title.text || (axis as any)._dataFieldText,\n      maxWidth: (axis as any)._getTitleLimit(false)\n    },\n    items,\n    scale: (axis as any)._scale.clone()\n  };\n\n  const directionStr = (axis as any).directionStr ?? 'r2l';\n  let anchor3d = [0, 0];\n  let alpha = -Math.PI / 2;\n  let z = 0;\n  if (directionStr === 'l2r') {\n    z = (axis as any).layout3dBox.length;\n    anchor3d = [0, 0, 0];\n    alpha = Math.PI / 2;\n  }\n  attrs.z = z;\n  attrs.alpha = alpha;\n  attrs.anchor3d = anchor3d;\n\n  if (!ignoreGrid) {\n    attrs.grid = {\n      type: 'line',\n      start: { x: 0, y: 0 },\n      end,\n      items: items[0],\n      verticalFactor: (axis as any)._axisStyle.verticalFactor,\n      depth: depthZ,\n      length: !ignoreGrid ? regionSize.height : 0,\n      alpha,\n      z,\n      anchor3d\n    };\n  }\n  return attrs;\n};\n"]}