import type { SVGParsedElement, SVGParserResult } from '@visactor/vdataset';
import type { IPictogramSeriesSpec } from './interface';
import { PictogramSeriesSpecTransformer } from './pictogram-transformer';
import type { IMatrix, IPoint, IPointLike } from '@visactor/vutils';
import type { Datum, IGroupMark, IHoverSpec, IMark, ISelectSpec, ISeriesSeriesInfo, PanEventParam, ZoomEventParam } from '@visactor/vchart';
import { GeoSeries, STATE_VALUE_ENUM } from '@visactor/vchart';
import type { IGroup, GraphicEventType } from '@visactor/vrender-core';
export interface SVGParsedElementExtend extends SVGParsedElement {
    _finalAttributes: Record<string, any>;
    _uniqueId: string;
}
export declare class PictogramSeries<T extends IPictogramSeriesSpec = IPictogramSeriesSpec> extends GeoSeries<T> {
    static readonly type: string;
    type: string;
    static readonly mark: {
        pictogram: {
            name: import("./constant").PictogramMarkNameEnum;
            type: import("@visactor/vchart").MarkTypeEnum;
        };
        label?: import("@visactor/vchart").ISeriesMarkInfo;
        point?: import("@visactor/vchart").ISeriesMarkInfo;
        line?: import("@visactor/vchart").ISeriesMarkInfo;
        area?: import("@visactor/vchart").ISeriesMarkInfo;
        bar?: import("@visactor/vchart").ISeriesMarkInfo;
        boxPlot?: import("@visactor/vchart").ISeriesMarkInfo;
        outlier?: import("@visactor/vchart").ISeriesMarkInfo;
        circlePacking?: import("@visactor/vchart").ISeriesMarkInfo;
        group?: import("@visactor/vchart").ISeriesMarkInfo;
        gridBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        grid?: import("@visactor/vchart").ISeriesMarkInfo;
        dot?: import("@visactor/vchart").ISeriesMarkInfo;
        title?: import("@visactor/vchart").ISeriesMarkInfo;
        subTitle?: import("@visactor/vchart").ISeriesMarkInfo;
        symbol?: import("@visactor/vchart").ISeriesMarkInfo;
        funnel?: import("@visactor/vchart").ISeriesMarkInfo;
        transform?: import("@visactor/vchart").ISeriesMarkInfo;
        transformLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        outerLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        outerLabelLine?: import("@visactor/vchart").ISeriesMarkInfo;
        pin?: import("@visactor/vchart").ISeriesMarkInfo;
        pinBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        pointer?: import("@visactor/vchart").ISeriesMarkInfo;
        segment?: import("@visactor/vchart").ISeriesMarkInfo;
        track?: import("@visactor/vchart").ISeriesMarkInfo;
        cell?: import("@visactor/vchart").ISeriesMarkInfo;
        cellBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        link?: import("@visactor/vchart").ISeriesMarkInfo;
        arrow?: import("@visactor/vchart").ISeriesMarkInfo;
        pie?: import("@visactor/vchart").ISeriesMarkInfo;
        labelLine?: import("@visactor/vchart").ISeriesMarkInfo;
        progress?: import("@visactor/vchart").ISeriesMarkInfo;
        minLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        maxLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        rose?: import("@visactor/vchart").ISeriesMarkInfo;
        node?: import("@visactor/vchart").ISeriesMarkInfo;
        sunburst?: import("@visactor/vchart").ISeriesMarkInfo;
        nonLeaf?: import("@visactor/vchart").ISeriesMarkInfo;
        leaf?: import("@visactor/vchart").ISeriesMarkInfo;
        nonLeafLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        leaderLine?: import("@visactor/vchart").ISeriesMarkInfo;
        stackLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        word?: import("@visactor/vchart").ISeriesMarkInfo;
        fillingWord?: import("@visactor/vchart").ISeriesMarkInfo;
        wordMask?: import("@visactor/vchart").ISeriesMarkInfo;
        nodePoint?: import("@visactor/vchart").ISeriesMarkInfo;
        ripplePoint?: import("@visactor/vchart").ISeriesMarkInfo;
        centerPoint?: import("@visactor/vchart").ISeriesMarkInfo;
        centerLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        barBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        lineLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        areaLabel?: import("@visactor/vchart").ISeriesMarkInfo;
        liquidGroup?: import("@visactor/vchart").ISeriesMarkInfo;
        liquid?: import("@visactor/vchart").ISeriesMarkInfo;
        liquidBackground?: import("@visactor/vchart").ISeriesMarkInfo;
        liquidOutline?: import("@visactor/vchart").ISeriesMarkInfo;
        circle?: import("@visactor/vchart").ISeriesMarkInfo;
        overlap?: import("@visactor/vchart").ISeriesMarkInfo;
        overlapLabel?: import("@visactor/vchart").ISeriesMarkInfo;
    };
    static readonly transformerConstructor: typeof PictogramSeriesSpecTransformer;
    svg: string;
    protected _pictogramMark: IGroupMark;
    protected _parsedSvgResult: SVGParserResult;
    private _labelMark;
    private _idToMark;
    setAttrFromSpec(): void;
    getDatumCenter(datum: SVGParsedElementExtend): [number, number];
    getDatumName(datum: SVGParsedElementExtend): string;
    getMarksWithoutRoot(): IMark[];
    protected _buildMarkAttributeContext(): void;
    protected _defaultHoverConfig(finalHoverSpec: IHoverSpec): {
        type: string;
        trigger: GraphicEventType;
        triggerOff: GraphicEventType;
        blurState: STATE_VALUE_ENUM;
        highlightState: STATE_VALUE_ENUM;
    };
    protected _defaultSelectConfig(finalSelectSpec: ISelectSpec): {
        type: string;
        trigger: GraphicEventType;
        triggerOff: GraphicEventType;
        reverseState: STATE_VALUE_ENUM;
        state: STATE_VALUE_ENUM;
        isMultiple: boolean;
    };
    initMark(): void;
    private _initLabelMark;
    initLabelMarkStyle(): void;
    initMarkStyle(): void;
    protected _validElement(element: SVGParsedElement): string;
    protected initTooltip(): void;
    dataToPosition(datum: Datum, global?: boolean): IPointLike;
    coordToPosition(point: IPoint): IPoint | undefined;
    getRootMatrix(): IMatrix;
    getPictogramRootGraphic(): IGroup;
    initData(): void;
    mapViewDataUpdate(): void;
    onLayoutEnd(): void;
    updateSVGSize(): void;
    protected initEvent(): void;
    handleZoom(e: ZoomEventParam): void;
    handlePan(e: PanEventParam): void;
    getMarkData(datum: Datum): any;
    getMeasureField(): string[];
    getDimensionField(): string[];
    protected _getSeriesInfo(field: string, keys: string[]): ISeriesSeriesInfo[];
    release(): void;
}
export declare const registerPictogramSeries: () => void;
