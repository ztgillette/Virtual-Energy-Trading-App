{"version":3,"sources":["../src/charts/histogram-3d/chart.ts"],"names":[],"mappings":";;;AAAA,6CAa0B;AAE1B,qCAA+D;AAC/D,yCAAgD;AAChD,6CAAuD;AACvD,yCAAgD;AAEhD,MAAa,gBAAkD,SAAQ,2BAA2C;IAAlH;;QAIW,2BAAsB,GAAG,sCAA6B,CAAC;QACvD,SAAI,iBAAuC;QAC3C,eAAU,GAAW,uBAAgB,CAAC,KAAK,CAAC;IAQvD,CAAC;IANW,eAAe;QACvB,IAAI,CAAC,YAAY,CAAC,gBAAgB,GAAG,kCAAyB,CAAC;QAE/D,IAAI,CAAC,YAAY,CAAC,uBAAuB,GAAG,gCAAuB,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,sBAAsB,GAAG,kCAAyB,CAAC;IACvE,CAAC;;AAbH,4CAcC;AAbiB,qBAAI,iBAAuC;AAC3C,2BAAU,GAAW,uBAAgB,CAAC,KAAK,CAAC;AAC5C,uCAAsB,GAAG,sCAA6B,CAAC;AAYlE,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,IAAA,sCAA6B,GAAE,CAAC;IAChC,IAAA,0CAAiC,GAAE,CAAC;IACpC,IAAA,qCAA4B,GAAE,CAAC;IAC/B,IAAA,gCAAuB,GAAE,CAAC;IAC1B,IAAA,+BAAsB,GAAE,CAAC;IACzB,IAAA,yBAAgB,GAAE,CAAC;IACnB,IAAA,yBAAgB,GAAE,CAAC;IACnB,IAAA,4BAAmB,GAAE,CAAC;IACtB,gBAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACjE,CAAC,CAAC;AAVW,QAAA,wBAAwB,4BAUnC","file":"chart.js","sourcesContent":["import {\n  BaseHistogramChart,\n  Factory,\n  getCartesianCrosshairRect,\n  getCartesianDimensionInfo,\n  getDimensionInfoByValue,\n  HistogramChartSpecTransformer,\n  registerDimensionEvents,\n  registerDimensionHover,\n  registerDimensionTooltipProcessor,\n  registerGroupTooltipProcessor,\n  registerMarkTooltipProcessor,\n  type AdaptiveSpec\n} from '@visactor/vchart';\nimport type { IHistogram3dChartSpec } from './interface';\nimport { ChartType3dEnum, SeriesType3dEnum } from '../3d/enum';\nimport { register3DPlugin } from '../3d/plugin';\nimport { registerBar3dSeries } from '../bar-3d/series';\nimport { registerLayout3d } from '../3d/layout';\n\nexport class Histogram3dChart<T extends IHistogram3dChartSpec> extends BaseHistogramChart<AdaptiveSpec<T, 'type'>> {\n  static readonly type: string = ChartType3dEnum.histogram3d;\n  static readonly seriesType: string = SeriesType3dEnum.bar3d;\n  static readonly transformerConstructor = HistogramChartSpecTransformer;\n  readonly transformerConstructor = HistogramChartSpecTransformer;\n  readonly type: string = ChartType3dEnum.histogram3d;\n  readonly seriesType: string = SeriesType3dEnum.bar3d;\n\n  protected _setModelOption() {\n    this._modelOption.getDimensionInfo = getCartesianDimensionInfo;\n\n    this._modelOption.getDimensionInfoByValue = getDimensionInfoByValue;\n    this._modelOption.getRectByDimensionData = getCartesianCrosshairRect;\n  }\n}\nexport const registerHistogram3dChart = () => {\n  registerGroupTooltipProcessor();\n  registerDimensionTooltipProcessor();\n  registerMarkTooltipProcessor();\n  registerDimensionEvents();\n  registerDimensionHover();\n  register3DPlugin();\n  registerLayout3d();\n  registerBar3dSeries();\n  Factory.registerChart(Histogram3dChart.type, Histogram3dChart);\n};\n"]}