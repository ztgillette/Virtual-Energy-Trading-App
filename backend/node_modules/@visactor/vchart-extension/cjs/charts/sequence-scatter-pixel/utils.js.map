{"version":3,"sources":["../src/charts/sequence-scatter-pixel/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { ISequenceScatterPixelSpec } from './interface';\nimport { BACKGROUND_KEY, DATA_KEY } from './constant';\n\n// 将RGB三元组数组转换为Canvas可用的imageData\nexport function createImageDataFromColorMatrix(colorMatrix: any[][], spec: ISequenceScatterPixelSpec): string | null {\n  // 浏览器环境检查\n  if (typeof document === 'undefined') {\n    throw new Error('Canvas rendering requires browser environment with document object'); // 非浏览器环境下返回null\n  }\n\n  // 创建Canvas离屏渲染\n  const canvas = document.createElement('canvas');\n  canvas.width = spec.width;\n  canvas.height = spec.height;\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('Failed to get 2D rendering context from canvas'); // Canvas context creation failed\n  }\n\n  // 创建imageData\n  const imageData = ctx.createImageData(spec.width, spec.height);\n\n  // 填充像素数据\n  for (let y = 0; y < 300; y++) {\n    for (let x = 0; x < 300; x++) {\n      const rgb = colorMatrix[y]?.[x] || [0, 0, 0];\n      const pixelIndex = (y * 300 + x) * 4;\n\n      // 转换0-1范围到0-255\n      imageData.data[pixelIndex] = Math.round(rgb[0] * 255); // R\n      imageData.data[pixelIndex + 1] = Math.round(rgb[1] * 255); // G\n      imageData.data[pixelIndex + 2] = Math.round(rgb[2] * 255); // B\n      imageData.data[pixelIndex + 3] = 255; // A (完全不透明)\n    }\n  }\n\n  // 将imageData绘制到canvas然后返回dataURL\n  ctx.putImageData(imageData, 0, 0);\n  return canvas.toDataURL('image/png');\n}\n\nexport function processSequenceData(spec: ISequenceScatterPixelSpec) {\n  const result: any[] = [];\n  Object.keys(spec.data).forEach(inter => {\n    let backgroundData = null;\n    if (spec.backgroundColors && spec.backgroundColors[inter]) {\n      const imageData = createImageDataFromColorMatrix(spec.backgroundColors[inter], spec);\n      backgroundData = { imageData };\n    }\n    result.push({\n      data: [\n        {\n          id: 'nodes',\n          values: spec.data[inter].map((d, i) => {\n            return { ...d, [DATA_KEY]: i };\n          })\n        },\n        {\n          id: 'inter',\n          values: [\n            {\n              inter\n            }\n          ]\n        },\n        {\n          id: BACKGROUND_KEY,\n          values: backgroundData ? [backgroundData] : []\n        }\n      ]\n    });\n  });\n  return result;\n}\n"]}