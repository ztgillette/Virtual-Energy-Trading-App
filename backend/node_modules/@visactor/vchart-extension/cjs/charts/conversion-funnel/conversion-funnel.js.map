{"version":3,"sources":["../src/charts/conversion-funnel/conversion-funnel.ts"],"names":[],"mappings":"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","file":"conversion-funnel.js","sourcesContent":["import type { IConversionFunnelChartSpecBase, IConversionFunnelSeriesSpecBase } from './interface';\nimport type { GroupMark } from '@visactor/vchart';\nimport { VChart, FunnelChart, PREFIX, FunnelSeries, registerMarkFilterTransform } from '@visactor/vchart';\nimport { DataView } from '@visactor/vdataset';\nimport { ConversionFunnelChartSpecTransformer } from './conversion-funnel-transformer';\nimport { conversionArrowTransform } from './arrow-data-transform';\n\nexport class ConversionFunnelChart extends FunnelChart<IConversionFunnelChartSpecBase> {\n  type = 'conversionFunnel';\n  static type = 'conversionFunnel';\n\n  declare _spec: IConversionFunnelChartSpecBase;\n\n  static readonly transformerConstructor = ConversionFunnelChartSpecTransformer;\n  readonly transformerConstructor = ConversionFunnelChartSpecTransformer;\n}\n\nexport class ConversionFunnelSeries extends FunnelSeries<IConversionFunnelSeriesSpecBase> {\n  protected _arrowData?: DataView;\n\n  initData() {\n    super.initData();\n    const { conversionArrow } = this._spec;\n    if (conversionArrow && conversionArrow.arrows?.length) {\n      this._arrowData = new DataView(this._dataSet, { name: `${PREFIX}_series_${this.id}_arrowData` });\n      if (!this._dataSet.getTransform('conversionArrow')) {\n        this._dataSet.registerTransform('conversionArrow', conversionArrowTransform);\n      }\n      this._arrowData.parse(conversionArrow).transform({\n        type: 'conversionArrow',\n        options: {\n          categoryField: this._spec.categoryField\n        }\n      });\n    }\n  }\n\n  afterCompile() {\n    // @ts-ignore\n    super.afterCompile?.();\n    const rightGroup = this.getMarkInName('arrowRight') as unknown as GroupMark;\n    if (rightGroup) {\n      rightGroup.getMarks().forEach(mark => {\n        mark.setDataView(this._arrowData);\n        mark.compileData();\n        mark.setTransform([\n          {\n            type: 'filter',\n            callback: (datum: any) => datum.position === 'right'\n          }\n        ]);\n      });\n    }\n    const leftGroup = this.getMarkInName('arrowLeft') as unknown as GroupMark;\n    if (leftGroup) {\n      leftGroup.getMarks().forEach(mark => {\n        mark.setDataView(this._arrowData);\n        mark.compileData();\n        mark.setTransform([\n          {\n            type: 'filter',\n            callback: (datum: any) => datum.position === 'left'\n          }\n        ]);\n      });\n    }\n  }\n}\n\nexport const registerConversionFunnelChart = (option?: { VChart?: typeof VChart }) => {\n  registerMarkFilterTransform();\n\n  const vchartConstructor = option?.VChart || VChart;\n  if (vchartConstructor) {\n    vchartConstructor.useChart([ConversionFunnelChart]);\n    vchartConstructor.useSeries([ConversionFunnelSeries]);\n  }\n};\n"]}