"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerConversionFunnelChart = exports.ConversionFunnelSeries = exports.ConversionFunnelChart = void 0;

const vchart_1 = require("@visactor/vchart"), vdataset_1 = require("@visactor/vdataset"), conversion_funnel_transformer_1 = require("./conversion-funnel-transformer"), arrow_data_transform_1 = require("./arrow-data-transform");

class ConversionFunnelChart extends vchart_1.FunnelChart {
    constructor() {
        super(...arguments), this.type = "conversionFunnel", this.transformerConstructor = conversion_funnel_transformer_1.ConversionFunnelChartSpecTransformer;
    }
}

exports.ConversionFunnelChart = ConversionFunnelChart, ConversionFunnelChart.type = "conversionFunnel", 
ConversionFunnelChart.transformerConstructor = conversion_funnel_transformer_1.ConversionFunnelChartSpecTransformer;

class ConversionFunnelSeries extends vchart_1.FunnelSeries {
    initData() {
        var _a;
        super.initData();
        const {conversionArrow: conversionArrow} = this._spec;
        conversionArrow && (null === (_a = conversionArrow.arrows) || void 0 === _a ? void 0 : _a.length) && (this._arrowData = new vdataset_1.DataView(this._dataSet, {
            name: `${vchart_1.PREFIX}_series_${this.id}_arrowData`
        }), this._dataSet.getTransform("conversionArrow") || this._dataSet.registerTransform("conversionArrow", arrow_data_transform_1.conversionArrowTransform), 
        this._arrowData.parse(conversionArrow).transform({
            type: "conversionArrow",
            options: {
                categoryField: this._spec.categoryField
            }
        }));
    }
    afterCompile() {
        var _a;
        null === (_a = super.afterCompile) || void 0 === _a || _a.call(this);
        const rightGroup = this.getMarkInName("arrowRight");
        rightGroup && rightGroup.getMarks().forEach((mark => {
            mark.setDataView(this._arrowData), mark.compileData(), mark.setTransform([ {
                type: "filter",
                callback: datum => "right" === datum.position
            } ]);
        }));
        const leftGroup = this.getMarkInName("arrowLeft");
        leftGroup && leftGroup.getMarks().forEach((mark => {
            mark.setDataView(this._arrowData), mark.compileData(), mark.setTransform([ {
                type: "filter",
                callback: datum => "left" === datum.position
            } ]);
        }));
    }
}

exports.ConversionFunnelSeries = ConversionFunnelSeries;

const registerConversionFunnelChart = option => {
    (0, vchart_1.registerMarkFilterTransform)();
    const vchartConstructor = (null == option ? void 0 : option.VChart) || vchart_1.VChart;
    vchartConstructor && (vchartConstructor.useChart([ ConversionFunnelChart ]), vchartConstructor.useSeries([ ConversionFunnelSeries ]));
};

exports.registerConversionFunnelChart = registerConversionFunnelChart;
//# sourceMappingURL=conversion-funnel.js.map