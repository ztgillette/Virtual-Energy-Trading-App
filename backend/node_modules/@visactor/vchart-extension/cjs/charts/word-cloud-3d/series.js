"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerWordCloudShape3dSeries = exports.registerWordCloud3dSeries = exports.WordCloud3dSeries = void 0;

const animation_1 = require("./animation"), enum_1 = require("../3d/enum"), vchart_1 = require("@visactor/vchart"), theme_1 = require("./theme");

class WordCloud3dSeries extends vchart_1.BaseWordCloudSeries {
    constructor() {
        super(...arguments), this.type = enum_1.SeriesType3dEnum.wordCloud3d;
    }
    _wordCloudTransformOption() {
        var _a;
        return Object.assign(Object.assign({}, super._wordCloudTransformOption()), {
            postProjection: null !== (_a = this._spec.postProjection) && void 0 !== _a ? _a : "StereographicProjection",
            depth_3d: this._spec.depth_3d
        });
    }
    _wordCloudShapeTransformOption() {
        var _a;
        return Object.assign(Object.assign({}, super._wordCloudShapeTransformOption()), {
            postProjection: null !== (_a = this._spec.postProjection) && void 0 !== _a ? _a : "StereographicProjection",
            depth_3d: this._spec.depth_3d
        });
    }
    initMark() {
        this._wordMark = this._createMark(vchart_1.BaseWordCloudSeries.mark.word, {
            groupKey: this._seriesField,
            isSeriesMark: !0
        }, {
            support3d: !0
        });
    }
    initMarkStyle() {
        super.initMarkStyle();
        const wordMark = this._wordMark;
        wordMark && this.setMarkStyle(wordMark, {
            z: datum => {
                var _a;
                return null !== (_a = datum.z) && void 0 !== _a ? _a : 0;
            }
        }, "normal", vchart_1.AttributeLevel.Series);
    }
    initAnimation() {
        var _a, _b;
        const padding = null !== (_a = this._padding) && void 0 !== _a ? _a : {};
        this._wordMark && this._wordMark.setAnimationConfig((0, vchart_1.animationConfig)(null === (_b = vchart_1.Factory.getAnimationInKey("wordCloud3d")) || void 0 === _b ? void 0 : _b((() => {
            var _a;
            const stage = this.getCompiler().getStage(), width = stage.width - padding.left || 0 - padding.right || 0, height = stage.height - padding.top || 0 - padding.bottom || 0, r = Math.max(width, height) / 2;
            return {
                center: {
                    x: r,
                    y: r,
                    z: null !== (_a = this._spec.depth_3d) && void 0 !== _a ? _a : r
                },
                r: r
            };
        })), (0, vchart_1.userAnimationConfig)("word", this._spec, this._markAttributeContext)));
    }
}

exports.WordCloud3dSeries = WordCloud3dSeries, WordCloud3dSeries.type = enum_1.SeriesType3dEnum.wordCloud3d, 
WordCloud3dSeries.builtInTheme = {
    wordCloud3d: theme_1.wordCloud3d
};

const registerWordCloud3dSeries = () => {
    (0, vchart_1.registerTextMark)(), (0, animation_1.registerWordCloud3dAnimation)(), 
    vchart_1.Factory.registerSeries(WordCloud3dSeries.type, WordCloud3dSeries);
};

exports.registerWordCloud3dSeries = registerWordCloud3dSeries;

const registerWordCloudShape3dSeries = () => {
    (0, exports.registerWordCloud3dSeries)();
};

exports.registerWordCloudShape3dSeries = registerWordCloudShape3dSeries;
//# sourceMappingURL=series.js.map
