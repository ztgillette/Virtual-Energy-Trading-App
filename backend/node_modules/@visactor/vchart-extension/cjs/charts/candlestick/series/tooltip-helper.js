"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.CandlestickSeriesTooltipHelper = void 0;

const vchart_1 = require("@visactor/vchart"), constant_1 = require("./constant");

class CandlestickSeriesTooltipHelper extends vchart_1.BaseSeriesTooltipHelper {
    constructor() {
        super(...arguments), this.getContentKey = contentType => datum => {
            switch (contentType) {
              case constant_1.CANDLESTICK_TOOLTIP_KEYS.OPEN:
                return this.series.getOpenField();

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.HIGH:
                return this.series.getHighField();

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.LOW:
                return this.series.getLowField();

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.CLOSE:
                return this.series.getCloseField();

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.SERIES_FIELD:
                return this.series.getSeriesField();
            }
            return null;
        }, this.getContentValue = contentType => datum => {
            switch (contentType) {
              case constant_1.CANDLESTICK_TOOLTIP_KEYS.OPEN:
                return datum[this.series.getOpenField()];

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.HIGH:
                return datum[this.series.getHighField()];

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.LOW:
                return datum[this.series.getLowField()];

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.CLOSE:
                return datum[this.series.getCloseField()];

              case constant_1.CANDLESTICK_TOOLTIP_KEYS.SERIES_FIELD:
                return datum[this.series.getSeriesField()];
            }
            return null;
        }, this.shapeColorCallback = datum => this.series.getMarkInName("candlestick").getAttribute("stroke", datum);
    }
    getDefaultContentList(activeType) {
        return [ {
            key: this.getContentKey(constant_1.CANDLESTICK_TOOLTIP_KEYS.OPEN),
            value: this.getContentValue(constant_1.CANDLESTICK_TOOLTIP_KEYS.OPEN)
        }, {
            key: this.getContentKey(constant_1.CANDLESTICK_TOOLTIP_KEYS.HIGH),
            value: this.getContentValue(constant_1.CANDLESTICK_TOOLTIP_KEYS.HIGH)
        }, {
            key: this.getContentKey(constant_1.CANDLESTICK_TOOLTIP_KEYS.LOW),
            value: this.getContentValue(constant_1.CANDLESTICK_TOOLTIP_KEYS.LOW)
        }, {
            key: this.getContentKey(constant_1.CANDLESTICK_TOOLTIP_KEYS.CLOSE),
            value: this.getContentValue(constant_1.CANDLESTICK_TOOLTIP_KEYS.CLOSE)
        }, {
            key: this.getContentKey(constant_1.CANDLESTICK_TOOLTIP_KEYS.SERIES_FIELD),
            value: this.getContentValue(constant_1.CANDLESTICK_TOOLTIP_KEYS.SERIES_FIELD)
        } ];
    }
}

exports.CandlestickSeriesTooltipHelper = CandlestickSeriesTooltipHelper;
//# sourceMappingURL=tooltip-helper.js.map
