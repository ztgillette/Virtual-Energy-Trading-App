"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerCandlestickSeries = exports.CandlestickSeries = exports.DEFAULT_STROKE_COLOR = void 0;

const candlestick_1 = require("../mark/candlestick"), vchart_1 = require("@visactor/vchart"), vchart_2 = require("@visactor/vchart"), vutils_1 = require("@visactor/vutils"), animation_1 = require("./animation"), constant_1 = require("./constant"), tooltip_helper_1 = require("./tooltip-helper"), theme_1 = require("./theme");

exports.DEFAULT_STROKE_COLOR = "#000";

class CandlestickSeries extends vchart_1.CartesianSeries {
    constructor() {
        super(...arguments), this.type = constant_1.CANDLESTICK_SERIES_TYPE, this._mergedStyles = {
            rising: {},
            falling: {},
            doji: {}
        };
    }
    getOpenField() {
        return this._openField;
    }
    getHighField() {
        return this._highField;
    }
    getLowField() {
        return this._lowField;
    }
    getCloseField() {
        return this._closeField;
    }
    getBoxFill() {
        return this._boxFill;
    }
    getStrokeColor() {
        return this._strokeColor;
    }
    setAttrFromSpec() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super.setAttrFromSpec();
        const spec = this._spec, CandlestickStyle = null !== (_b = null === (_a = spec.candlestick) || void 0 === _a ? void 0 : _a.style) && void 0 !== _b ? _b : {};
        this._openField = spec.openField, this._highField = spec.highField, this._lowField = spec.lowField, 
        this._closeField = spec.closeField, this._boxWidth = CandlestickStyle.boxWidth, 
        this._boxFill = CandlestickStyle.boxFill, this._strokeColor = CandlestickStyle.strokeColor, 
        this._buildMergedStyles(CandlestickStyle, null !== (_d = null === (_c = spec.rising) || void 0 === _c ? void 0 : _c.style) && void 0 !== _d ? _d : {}, null !== (_f = null === (_e = spec.falling) || void 0 === _e ? void 0 : _e.style) && void 0 !== _f ? _f : {}, null !== (_h = null === (_g = spec.doji) || void 0 === _g ? void 0 : _g.style) && void 0 !== _h ? _h : {});
    }
    initMark() {
        this._candlestickMark = this._createMark(CandlestickSeries.mark.candlestick, {
            groupKey: this._seriesField,
            isSeriesMark: !0
        });
    }
    initMarkStyle() {
        var _a;
        const candlestickMark = this._candlestickMark;
        if (candlestickMark) {
            const CandlestickStyles = {
                fill: datum => this.mergeStyle(datum).boxFill,
                stroke: datum => this.mergeStyle(datum).stroke,
                lineWidth: datum => this.mergeStyle(datum).lineWidth,
                boxWidth: null !== (_a = this._boxWidth) && void 0 !== _a ? _a : this._getMarkWidth.bind(this),
                x: this.dataToPositionX.bind(this)
            };
            candlestickMark.setGlyphConfig({}), this.setMarkStyle(candlestickMark, CandlestickStyles, vchart_1.STATE_VALUE_ENUM.STATE_NORMAL, vchart_1.AttributeLevel.Series);
        }
    }
    initCandlestickMarkStyle() {
        var _a;
        const candlestickMark = this._candlestickMark, axisHelper = this._yAxisHelper;
        if (candlestickMark && axisHelper) {
            const {dataToPosition: dataToPosition} = axisHelper, scale = null === (_a = null == axisHelper ? void 0 : axisHelper.getScale) || void 0 === _a ? void 0 : _a.call(axisHelper, 0);
            this.setMarkStyle(candlestickMark, {
                open: datum => (0, vchart_2.valueInScaleRange)(dataToPosition(this.getDatumPositionValues(datum, this._openField), {
                    bandPosition: this._bandPosition
                }), scale),
                high: datum => (0, vchart_2.valueInScaleRange)(dataToPosition(this.getDatumPositionValues(datum, this._highField), {
                    bandPosition: this._bandPosition
                }), scale),
                low: datum => (0, vchart_2.valueInScaleRange)(dataToPosition(this.getDatumPositionValues(datum, this._lowField), {
                    bandPosition: this._bandPosition
                }), scale),
                close: datum => (0, vchart_2.valueInScaleRange)(dataToPosition(this.getDatumPositionValues(datum, this._closeField), {
                    bandPosition: this._bandPosition
                }), scale)
            }, vchart_1.STATE_VALUE_ENUM.STATE_NORMAL, vchart_1.AttributeLevel.Series);
        }
    }
    init(option) {
        super.init(option), this.initCandlestickMarkStyle();
    }
    _initAnimationSpec(config = {}) {
        const newConfig = (0, vutils_1.merge)({}, config);
        return [ "appear", "enter", "update", "exit", "disappear" ].forEach((state => {
            newConfig[state] && "scaleIn" === newConfig[state].type ? newConfig[state].type = "candlestickScaleIn" : newConfig[state] && "scaleOut" === newConfig[state].type && (newConfig[state].type = "candlestickScaleOut");
        })), newConfig;
    }
    initAnimation() {
        var _a;
        const animationParams = (0, vchart_1.getGroupAnimationParams)(this);
        if (this._candlestickMark) {
            const newDefaultConfig = this._initAnimationSpec(null === (_a = vchart_1.Factory.getAnimationInKey("scaleInOut")) || void 0 === _a ? void 0 : _a()), newConfig = this._initAnimationSpec((0, 
            vchart_1.userAnimationConfig)(constant_1.CANDLESTICK_SERIES_TYPE, this._spec, this._markAttributeContext));
            this._candlestickMark.setAnimationConfig((0, vchart_1.animationConfig)(newDefaultConfig, newConfig, animationParams));
        }
    }
    initTooltip() {
        this._tooltipHelper = new tooltip_helper_1.CandlestickSeriesTooltipHelper(this), 
        this._candlestickMark && this._tooltipHelper.activeTriggerSet.mark.add(this._candlestickMark);
    }
    _buildMergedStyles(baseStyle, risingStyle, fallingStyle, dojiStyle) {
        this._mergedStyles.rising = (0, vutils_1.merge)({}, baseStyle, risingStyle), this._mergedStyles.falling = (0, 
        vutils_1.merge)({}, baseStyle, fallingStyle), this._mergedStyles.doji = (0, vutils_1.merge)({}, baseStyle, dojiStyle);
    }
    mergeStyle(datum) {
        const open = this.getDatumPositionValues(datum, this._openField)[0], close = this.getDatumPositionValues(datum, this._closeField)[0];
        return open < close ? this._mergedStyles.rising : open > close ? this._mergedStyles.falling : this._mergedStyles.doji;
    }
    _getMarkWidth() {
        if (this._autoBoxWidth) return this._autoBoxWidth;
        const bandAxisHelper = this._xAxisHelper, xField = this._fieldX, autoBoxWidth = bandAxisHelper.getBandwidth(xField.length - 1) / xField.length;
        return this._autoBoxWidth = autoBoxWidth, this._autoBoxWidth;
    }
    onLayoutEnd() {
        super.onLayoutEnd(), this._autoBoxWidth = null;
    }
    getActiveMarks() {
        return [ this._candlestickMark ];
    }
}

exports.CandlestickSeries = CandlestickSeries, CandlestickSeries.type = constant_1.CANDLESTICK_SERIES_TYPE, 
CandlestickSeries.builtInTheme = {
    candlestick: theme_1.candlestick
}, CandlestickSeries.mark = constant_1.CandlestickSeriesMark;

const registerCandlestickSeries = () => {
    (0, candlestick_1.registerCandlestickMark)(), (0, vchart_1.registerSymbolMark)(), 
    (0, vchart_1.registerScaleInOutAnimation)(), (0, vchart_1.registerCartesianBandAxis)(), 
    (0, vchart_1.registerCartesianLinearAxis)(), (0, animation_1.registerCandlestickScaleAnimation)(), 
    vchart_1.Factory.registerSeries(CandlestickSeries.type, CandlestickSeries);
};

exports.registerCandlestickSeries = registerCandlestickSeries;
//# sourceMappingURL=candlestick.js.map
