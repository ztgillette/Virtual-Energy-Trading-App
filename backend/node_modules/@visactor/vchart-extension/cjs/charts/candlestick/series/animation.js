"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerCandlestickScaleAnimation = exports.CandlestickScaleOut = exports.CandlestickScaleIn = void 0;

const vutils_1 = require("@visactor/vutils"), vrender_animate_1 = require("@visactor/vrender-animate"), scaleIn = () => graphic => {
    const finalAttribute = graphic.getFinalAttribute(), {x: x, y: y, open: open, high: high, low: low, close: close} = finalAttribute, animateAttributes = {
        from: {
            x: x,
            y: y
        },
        to: {
            x: x,
            y: y
        }
    };
    return (0, vutils_1.isValidNumber)(open) && (0, vutils_1.isValidNumber)(close) && (open > close ? (animateAttributes.from.open = low, 
    animateAttributes.to.open = open, animateAttributes.from.close = low, animateAttributes.to.close = close, 
    (0, vutils_1.isValidNumber)(high) && (animateAttributes.from.high = low, animateAttributes.to.high = high)) : (animateAttributes.from.open = high, 
    animateAttributes.to.open = open, animateAttributes.from.close = high, animateAttributes.to.close = close, 
    (0, vutils_1.isValidNumber)(low) && (animateAttributes.from.low = high, animateAttributes.to.low = low))), 
    animateAttributes;
}, scaleOut = () => graphic => {
    const finalAttribute = graphic.getFinalAttribute(), {x: x, y: y, open: open, high: high, low: low, close: close} = finalAttribute, animateAttributes = {
        from: {
            x: x,
            y: y
        },
        to: {
            x: x,
            y: y
        }
    };
    return (0, vutils_1.isValidNumber)(open) && (0, vutils_1.isValidNumber)(close) && (open > close ? (animateAttributes.from.open = open, 
    animateAttributes.to.open = low, animateAttributes.from.close = close, animateAttributes.to.close = low, 
    (0, vutils_1.isValidNumber)(high) && (animateAttributes.from.high = high, animateAttributes.to.high = low)) : (animateAttributes.from.open = open, 
    animateAttributes.to.open = high, animateAttributes.from.close = close, animateAttributes.to.close = high, 
    (0, vutils_1.isValidNumber)(low) && (animateAttributes.from.low = low, animateAttributes.to.low = high))), 
    animateAttributes;
};

class CandlestickScaleIn extends vrender_animate_1.ACustomAnimate {
    constructor(from, to, duration, easing, params) {
        super(from, to, duration, easing, params);
    }
    onBind() {
        super.onBind();
        const finalAttribute = this.target.getFinalAttribute();
        finalAttribute && this.target.setAttributes(finalAttribute);
        const {from: from, to: to} = this.computeAttribute();
        this.propKeys = Object.keys(to).filter((key => null != to[key])), this.animate.reSyncProps(), 
        this.from = from, this.to = to, this.target.setAttributes(this.from);
    }
    computeAttribute() {
        return (graphic => {
            const finalAttribute = graphic.getFinalAttribute(), {x: x, y: y, open: open, high: high, low: low, close: close} = finalAttribute, animateAttributes = {
                from: {
                    x: x,
                    y: y
                },
                to: {
                    x: x,
                    y: y
                }
            };
            return (0, vutils_1.isValidNumber)(open) && (0, vutils_1.isValidNumber)(close) && (open > close ? (animateAttributes.from.open = low, 
            animateAttributes.to.open = open, animateAttributes.from.close = low, animateAttributes.to.close = close, 
            (0, vutils_1.isValidNumber)(high) && (animateAttributes.from.high = low, animateAttributes.to.high = high)) : (animateAttributes.from.open = high, 
            animateAttributes.to.open = open, animateAttributes.from.close = high, animateAttributes.to.close = close, 
            (0, vutils_1.isValidNumber)(low) && (animateAttributes.from.low = high, animateAttributes.to.low = low))), 
            animateAttributes;
        })(this.target, this.params, this.params.options);
    }
    onUpdate(end, ratio, out) {
        const attribute = this.target.attribute;
        this.propKeys.forEach((key => {
            attribute[key] = this.from[key] + (this.to[key] - this.from[key]) * ratio;
        })), this.target.setAttributes(attribute);
    }
}

exports.CandlestickScaleIn = CandlestickScaleIn;

class CandlestickScaleOut extends vrender_animate_1.ACustomAnimate {
    constructor(from, to, duration, easing, params) {
        super(from, to, duration, easing, params);
    }
    onBind() {
        var _a;
        (null === (_a = this.params) || void 0 === _a ? void 0 : _a.diffAttrs) && this.target.setAttributes(this.params.diffAttrs);
        const {from: from, to: to} = this.computeAttribute();
        this.propKeys = Object.keys(to).filter((key => null != to[key])), this.animate.reSyncProps(), 
        this.from = from, this.to = to, this.target.setAttributes(this.from);
    }
    computeAttribute() {
        return (graphic => {
            const finalAttribute = graphic.getFinalAttribute(), {x: x, y: y, open: open, high: high, low: low, close: close} = finalAttribute, animateAttributes = {
                from: {
                    x: x,
                    y: y
                },
                to: {
                    x: x,
                    y: y
                }
            };
            return (0, vutils_1.isValidNumber)(open) && (0, vutils_1.isValidNumber)(close) && (open > close ? (animateAttributes.from.open = open, 
            animateAttributes.to.open = low, animateAttributes.from.close = close, animateAttributes.to.close = low, 
            (0, vutils_1.isValidNumber)(high) && (animateAttributes.from.high = high, animateAttributes.to.high = low)) : (animateAttributes.from.open = open, 
            animateAttributes.to.open = high, animateAttributes.from.close = close, animateAttributes.to.close = high, 
            (0, vutils_1.isValidNumber)(low) && (animateAttributes.from.low = low, animateAttributes.to.low = high))), 
            animateAttributes;
        })(this.target, this.params, this.params.options);
    }
    onUpdate(end, ratio, out) {
        const attribute = this.target.attribute;
        this.propKeys.forEach((key => {
            attribute[key] = this.from[key] + (this.to[key] - this.from[key]) * ratio;
        })), this.target.setAttributes(attribute);
    }
}

exports.CandlestickScaleOut = CandlestickScaleOut;

const registerCandlestickScaleAnimation = () => {
    vrender_animate_1.AnimateExecutor.registerBuiltInAnimate("candlestickScaleIn", CandlestickScaleIn), 
    vrender_animate_1.AnimateExecutor.registerBuiltInAnimate("candlestickScaleOut", CandlestickScaleOut);
};

exports.registerCandlestickScaleAnimation = registerCandlestickScaleAnimation;
//# sourceMappingURL=animation.js.map
