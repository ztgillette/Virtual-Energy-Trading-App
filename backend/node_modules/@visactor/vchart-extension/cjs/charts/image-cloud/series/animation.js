"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.registerImageCloudAnimation = exports.imageCloudPresetAnimation = exports.AxialRotateAnimation = void 0;

const vrender_animate_1 = require("@visactor/vrender-animate"), vutils_1 = require("@visactor/vutils"), vchart_1 = require("@visactor/vchart");

class AxialRotateAnimation extends vrender_animate_1.ACustomAnimate {
    constructor(from, to, duration, easing, params) {
        var _a;
        super(from, to, duration, easing, params), this._rotations = null !== (_a = null == params ? void 0 : params.rotation) && void 0 !== _a ? _a : 1;
    }
    onBind() {
        this._scaleX = this.target.attribute.scaleX, (0, vutils_1.isValidNumber)(this._rotations) || (this.valid = !1);
    }
    onUpdate(end, ratio, out) {
        var _a;
        if (!1 === this.valid) return;
        if (end) return void (out.scaleX = this._scaleX);
        const currentAngleInRadians = 360 * this._rotations * ratio * Math.PI / 180, scaleX = Math.abs(Math.cos(currentAngleInRadians)) * (null !== (_a = this._scaleX) && void 0 !== _a ? _a : 1);
        this.target.attribute.scaleX = scaleX, this.target.addUpdatePositionTag(), this.target.addUpdateShapeAndBoundsTag();
    }
}

function imageCloudPresetAnimation(params, preset) {
    switch (preset) {
      case "axialRotate":
        return [ {
            custom: AxialRotateAnimation,
            customParameters: {
                rotation: 1
            },
            duration: vchart_1.DEFAULT_ANIMATION_CONFIG.appear.duration
        }, {
            channel: {
                y: {
                    from: (datum, element) => params.height() + element.getFinalAttribute().y
                },
                fillOpacity: {
                    from: 0,
                    to: 1
                }
            },
            easing: "sineInOut"
        } ];

      case "growIn":
        return {
            channel: {
                scaleX: {
                    from: 0,
                    to: 1
                },
                scaleY: {
                    from: 0,
                    to: 1
                },
                x: {
                    from: () => params.center().x
                },
                y: {
                    from: () => params.center().y
                }
            },
            duration: vchart_1.DEFAULT_ANIMATION_CONFIG.appear.duration
        };

      case "scaleIn":
        return {
            type: "scaleIn",
            duration: vchart_1.DEFAULT_ANIMATION_CONFIG.appear.duration
        };

      default:
        return {
            type: "fadeIn",
            easing: "linear",
            duration: vchart_1.DEFAULT_ANIMATION_CONFIG.appear.duration
        };
    }
}

exports.AxialRotateAnimation = AxialRotateAnimation, exports.imageCloudPresetAnimation = imageCloudPresetAnimation;

const registerImageCloudAnimation = () => {
    vchart_1.Factory.registerAnimation("imageCloud", ((params, preset) => ({
        appear: imageCloudPresetAnimation(params, preset),
        enter: imageCloudPresetAnimation(params, preset),
        exit: {
            type: "fadeOut"
        },
        disappear: {
            type: "fadeOut"
        }
    })));
};

exports.registerImageCloudAnimation = registerImageCloudAnimation;
//# sourceMappingURL=animation.js.map
