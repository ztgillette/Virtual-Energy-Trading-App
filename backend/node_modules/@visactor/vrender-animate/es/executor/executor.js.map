{"version":3,"sources":["../src/executor/executor.ts"],"names":[],"mappings":"","file":"executor.js","sourcesContent":["import type { IGraphic, EasingType } from '@visactor/vrender-core';\nimport type { ACustomAnimate } from '../custom/custom-animate';\n\nexport type MarkFunctionCallback<T> = (datum: any, graphic: IGraphic, parameters: any) => T;\nexport type MarkFunctionValueType<T> = MarkFunctionCallback<T> | T;\n\ninterface IAnimationParameters {\n  [key: string]: any;\n}\n\n/**\n * 动画 channel 配置\n */\nexport type IAnimationChannelFunction = (datum: any, element: IGraphic, parameters: IAnimationParameters) => any;\n\n/**\n * 动画 channel 属性配置\n */\nexport type IAnimationChannelAttrs = Record<\n  string,\n  {\n    from?: any | IAnimationChannelFunction;\n    to?: any | IAnimationChannelFunction;\n  }\n>;\nexport type IAnimationChannelAttributes = string[];\n\n/**\n * 动画 channel 插值器\n */\nexport type IAnimationChannelInterpolator = (\n  ratio: number,\n  from: any,\n  to: any,\n  nextAttributes: any,\n  datum: any,\n  element: IGraphic,\n  parameters: IAnimationParameters\n) => boolean | void;\n\n/**\n * 动画 custom 构造器\n */\nexport interface IAnimationCustomConstructor {\n  new (from: any, to: any, duration: number, ease: EasingType, parameters?: any): ACustomAnimate<any>;\n}\n\nexport interface IAnimationEffect {\n  /** 动画类型 */\n  type?: string;\n  /** 动画 channel 配置 */\n  channel?: IAnimationChannelAttrs | IAnimationChannelAttributes;\n  /** 动画 to 配置（和channel互斥，如果同时设置，以to为准） */\n  to?: Record<string, any>;\n  /** 动画 from 配置 */\n  from?: Record<string, any>;\n  /** 动画 自定义插值 配置 */\n  custom?: IAnimationChannelInterpolator | IAnimationCustomConstructor;\n  /** 动画 custom 参数配置 */\n  customParameters?: MarkFunctionValueType<any>;\n  /** 动画 easing 配置 */\n  easing?: EasingType;\n  /** options暂时没有处理 */\n  options?:\n    | MarkFunctionValueType<any>\n    | {\n        // 忽略的属性\n        excludeChannels?: string[];\n      };\n}\n\nexport interface IAnimationTimeSlice {\n  /** 动画效果 */\n  effects: IAnimationEffect | IAnimationEffect[];\n  /** 动画时长 */\n  duration?: MarkFunctionValueType<number>;\n  /** 延迟delay后执行动画 */\n  delay?: MarkFunctionValueType<number>;\n  /** effect动画后再延迟delayAfter结束这个周期 */\n  delayAfter?: MarkFunctionValueType<number>;\n}\n\nexport interface IAnimationControlOptions {\n  /** 当动画状态变更时清空动画 */\n  stopWhenStateChange?: boolean;\n  /** 是否立即应用动画初始状态 */\n  immediatelyApply?: boolean;\n  /** encode 计算图元最终状态时是否忽略循环动画 */\n  ignoreLoopFinalAttributes?: boolean;\n}\n\n/**\n * 动画 config 简化配置\n */\nexport interface IAnimationTypeConfig {\n  /** 动画类型 */\n  type?: string;\n  /** 动画 channel 配置 */\n  channel?: IAnimationChannelAttrs | IAnimationChannelAttributes;\n  /** 动画 to 配置（和channel互斥，如果同时设置，以to为准） */\n  to?: Record<string, any>;\n  /** 动画 from 配置 */\n  from?: Record<string, any>;\n  /** 动画 自定义插值 配置 */\n  custom?: IAnimationChannelInterpolator | IAnimationCustomConstructor;\n  /** 动画 custom 参数配置 */\n  customParameters?: MarkFunctionValueType<any>;\n  /** 动画 easing 配置 */\n  easing?: EasingType;\n  /** 动画 delay 配置 */\n  delay?: MarkFunctionValueType<number>;\n  /** 动画 delayAfter 配置 */\n  delayAfter?: MarkFunctionValueType<number>;\n  /** 动画 duration 配置 */\n  duration?: MarkFunctionValueType<number>;\n  /** 动画 oneByOne 配置（是否依次执行） */\n  oneByOne?: MarkFunctionValueType<boolean | number>;\n  /** 动画 startTime 配置 */\n  startTime?: MarkFunctionValueType<number>;\n  /** 动画 totalTime 配置（如果有循环，只算一个周期） */\n  totalTime?: MarkFunctionValueType<number>;\n  /** loop: true 无限循环; loop: 正整数，表示循环的次数 */\n  loop?: boolean | number;\n  /** 动画 effect 配置项 */\n  options?: MarkFunctionValueType<any>;\n  /** 动画执行相关控制配置项 */\n  controlOptions?: IAnimationControlOptions;\n  /** 动画优先级 */\n  priority?: number;\n  /** 该动画是否需要忽略子图元 */\n  selfOnly?: boolean;\n}\n\n/**\n * 动画 timeline 完整配置，一条时间线内的动画单元只能串行\n * 多个timeline是可以并行的\n * 考虑到同一图元不能在多个timeline上，所以timeline不应该提供数组配置的能力\n */\nexport interface IAnimationTimeline {\n  /** 为了方便动画编排，用户可以设置 id 用于识别时间线 */\n  id?: string;\n  /** 时间切片 */\n  timeSlices: IAnimationTimeSlice | IAnimationTimeSlice[];\n  /** 动画开始的相对时间，可以为负数 */\n  startTime?: MarkFunctionValueType<number>;\n  /** 动画时长 */\n  totalTime?: MarkFunctionValueType<number>;\n  /** 动画依次执行的延迟 */\n  oneByOne?: MarkFunctionValueType<number | boolean>;\n  /** loop: true 无限循环; loop: 正整数，表示循环的次数 */\n  loop?: MarkFunctionValueType<number | boolean>;\n  /** 对图元元素进行划分，和过滤类似，但是不同时间线不能同时作用在相同的元素上 */\n  partitioner?: MarkFunctionCallback<boolean>;\n  /** 对同一时间线上的元素进行排序 */\n  sort?: (datumA: any, datumB: any, elementA: IGraphic, elementB: IGraphic, parameters: any) => number;\n  /** 动画执行相关控制配置项 */\n  controlOptions?: IAnimationControlOptions;\n  /** 动画优先级 */\n  priority?: number;\n  /** 该动画是否需要忽略子图元 */\n  selfOnly?: boolean;\n}\n\n/**\n * 动画配置\n */\nexport type IAnimationConfig = IAnimationTimeline | IAnimationTypeConfig;\n"]}