{"version":3,"sources":["../src/custom/morphing.ts"],"names":[],"mappings":"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","file":"morphing.js","sourcesContent":["import {\n  splitArc,\n  splitCircle,\n  splitLine,\n  splitRect,\n  splitPolygon,\n  splitArea,\n  splitPath,\n  CustomPath2D,\n  application,\n  interpolateColor,\n  ColorStore,\n  ColorType,\n  alignBezierCurves,\n  applyTransformOnBezierCurves,\n  findBestMorphingRotation,\n  pathToBezierCurves,\n  AttributeUpdateType,\n  type MorphingAnimateConfig,\n  type MultiMorphingAnimateConfig,\n  type ICustomPath2D,\n  type IGraphic,\n  type IRect,\n  type EasingType,\n  type IArc,\n  type ICircle,\n  type IGraphicAttribute,\n  type ILine,\n  type IPolygon,\n  type IArea,\n  type IPath\n} from '@visactor/vrender-core';\nimport { isArray, isNil, type IMatrix } from '@visactor/vutils';\nimport { ACustomAnimate } from './custom-animate';\nimport { DefaultMorphingAnimateConfig } from '../config/morphing';\nimport { isTransformKey } from '../utils/transform';\n\ndeclare const __DEV__: boolean;\n\ninterface MorphingDataItem {\n  from: number[];\n  to: number[];\n  fromCp: number[];\n  toCp: number[];\n  rotation: number;\n}\n\ninterface OtherAttrItem {\n  from: any;\n  to: any;\n  key: string;\n}\n\n/**\n * 插值计算非路径属性（如颜色、透明度等）\n * @param attrs 要插值的属性数组\n * @param out 输出对象\n * @param ratio 插值比例\n */\nconst interpolateOtherAttrs = (attrs: OtherAttrItem[], out: any, ratio: number) => {\n  attrs.forEach(entry => {\n    if (Number.isFinite(entry.to)) {\n      out[entry.key] = entry.from + (entry.to - entry.from) * ratio;\n    } else if (entry.key === 'fill' || entry.key === 'stroke') {\n      // 保存解析的结果到step\n      const color = interpolateColor(entry.from, entry.to, ratio, false);\n      if (color) {\n        out[entry.key] = color;\n      }\n    }\n  });\n};\n\n/* Adapted from zrender by ecomfe\n * https://github.com/ecomfe/zrender\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/ecomfe/zrender/blob/master/src/tool/morphPath.ts\n * License: https://github.com/ecomfe/zrender/blob/master/LICENSE\n * @license\n */\n/**\n * 根据给定比例插值计算形变数据并应用到路径\n * @param morphingData 形变数据\n * @param path 目标路径对象\n * @param ratio 插值比例\n */\nconst interpolateMorphingData = (morphingData: MorphingDataItem[], path: ICustomPath2D, ratio: number) => {\n  const tmpArr: number[] = [];\n  const newCp: number[] = [];\n  path.clear();\n\n  for (let i = 0; i < morphingData.length; i++) {\n    const item = morphingData[i];\n    const from = item.from;\n    const to = item.to;\n    const angle = item.rotation * ratio;\n    const fromCp = item.fromCp;\n    const toCp = item.toCp;\n    const sa = Math.sin(angle);\n    const ca = Math.cos(angle);\n\n    newCp[0] = fromCp[0] + (toCp[0] - fromCp[0]) * ratio;\n    newCp[1] = fromCp[1] + (toCp[1] - fromCp[1]) * ratio;\n\n    for (let m = 0; m < from.length; m += 2) {\n      const x0 = from[m];\n      const y0 = from[m + 1];\n      const x1 = to[m];\n      const y1 = to[m + 1];\n\n      const x = x0 * (1 - ratio) + x1 * ratio;\n      const y = y0 * (1 - ratio) + y1 * ratio;\n\n      tmpArr[m] = x * ca - y * sa + newCp[0];\n      tmpArr[m + 1] = x * sa + y * ca + newCp[1];\n    }\n\n    let x0 = tmpArr[0];\n    let y0 = tmpArr[1];\n\n    path.moveTo(x0, y0);\n\n    for (let m = 2; m < from.length; m += 6) {\n      const x1 = tmpArr[m];\n      const y1 = tmpArr[m + 1];\n      const x2 = tmpArr[m + 2];\n      const y2 = tmpArr[m + 3];\n      const x3 = tmpArr[m + 4];\n      const y3 = tmpArr[m + 5];\n\n      // Is a line.\n      if (x0 === x1 && y0 === y1 && x2 === x3 && y2 === y3) {\n        path.lineTo(x3, y3);\n      } else {\n        path.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n      }\n      x0 = x3;\n      y0 = y3;\n    }\n  }\n};\n\n/**\n * 解析形变数据，将源路径和目标路径转换为贝塞尔曲线并找到最佳旋转角度\n * @param fromPath 源路径\n * @param toPath 目标路径\n * @param config 变换配置\n * @returns 形变数据数组\n */\nconst parseMorphingData = (\n  fromPath: ICustomPath2D | null,\n  toPath: ICustomPath2D,\n  config?: {\n    fromTransform?: IMatrix;\n    toTransfrom: IMatrix;\n  }\n) => {\n  // [fromPath, toPath] = [toPath, fromPath];\n  const fromBezier = fromPath ? pathToBezierCurves(fromPath) : [];\n  const toBezier = pathToBezierCurves(toPath);\n\n  if (config && fromBezier) {\n    config.fromTransform && applyTransformOnBezierCurves(fromBezier, config.fromTransform.clone().getInverse());\n    applyTransformOnBezierCurves(fromBezier, config.toTransfrom);\n    // applyTransformOnBezierCurves(toBezier, config.toTransfrom.clone().getInverse());\n  }\n\n  const [fromBezierCurves, toBezierCurves] = alignBezierCurves(fromBezier, toBezier);\n\n  return fromPath\n    ? findBestMorphingRotation(fromBezierCurves, toBezierCurves, 10, Math.PI)\n    : toBezierCurves.map((to, index) => {\n        return {\n          from: fromBezierCurves[index],\n          to,\n          fromCp: [0, 0],\n          toCp: [0, 0],\n          rotation: 0\n        };\n      });\n};\n\nconst validateOtherAttrs = [\n  'fill',\n  'fillOpacity',\n  'shadowBlur',\n  'shadowColor',\n  'shadowOffsetX',\n  'shadowOffsetY',\n  'stroke',\n  'strokeOpacity',\n  'lineDashOffset'\n  // 'lineWidth'\n];\n\n/**\n * 解析可动画属性，提取源属性和目标属性的差异\n * @param fromAttrs 源属性\n * @param toAttrs 目标属性\n * @returns 可动画属性数组\n */\nconst parseOtherAnimateAttrs = (\n  fromAttrs: Partial<IGraphicAttribute> | null,\n  toAttrs: Partial<IGraphicAttribute> | null\n) => {\n  if (!fromAttrs || !toAttrs) {\n    return null;\n  }\n  const res: OtherAttrItem[] = [];\n  let hasAttr = false;\n\n  Object.keys(fromAttrs).forEach(fromKey => {\n    if (!validateOtherAttrs.includes(fromKey)) {\n      return;\n    }\n\n    const toValue = (toAttrs as any)[fromKey];\n    if (!isNil(toValue) && !isNil((fromAttrs as any)[fromKey]) && toValue !== (fromAttrs as any)[fromKey]) {\n      if (fromKey === 'fill' || fromKey === 'stroke') {\n        const parseColor = (color: string) => {\n          return typeof color === 'string' ? ColorStore.Get(color, ColorType.Color255) : color;\n        };\n        res.push({\n          from: isArray(fromAttrs[fromKey])\n            ? (fromAttrs[fromKey] as any).map(parseColor)\n            : parseColor((fromAttrs as any)[fromKey]),\n          to: isArray(toValue) ? toValue.map(parseColor) : parseColor(toValue),\n          key: fromKey\n        });\n      } else {\n        res.push({ from: (fromAttrs as any)[fromKey], to: toValue, key: fromKey });\n      }\n\n      hasAttr = true;\n    }\n  });\n\n  return hasAttr ? res : null;\n};\n\n/**\n * 形变路径动画类，用于处理路径和其他属性的形变\n */\nexport class MorphingPath extends ACustomAnimate<Record<string, any>> {\n  declare path: CustomPath2D;\n\n  saveOnEnd?: boolean;\n  otherAttrs?: OtherAttrItem[];\n\n  constructor(\n    config: { morphingData: MorphingDataItem[]; otherAttrs?: OtherAttrItem[]; saveOnEnd?: boolean },\n    duration: number,\n    easing: EasingType\n  ) {\n    super({}, {}, duration, easing);\n    this.morphingData = config.morphingData;\n    this.otherAttrs = config.otherAttrs;\n    this.saveOnEnd = config.saveOnEnd;\n  }\n\n  private morphingData?: MorphingDataItem[];\n\n  getEndProps(): Record<string, any> {\n    return {};\n  }\n\n  onBind(): void {\n    (this.target as IGraphic).createPathProxy();\n    this.onUpdate(false, 0, (this.target as IGraphic).attribute);\n  }\n\n  onEnd(): void {\n    return;\n  }\n\n  /**\n   * 更新动画状态\n   * @param end 是否结束\n   * @param ratio 动画进度比例\n   * @param out 输出属性对象\n   */\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    const target = this.target as IGraphic;\n    const pathProxy = typeof target.pathProxy === 'function' ? target.pathProxy(target.attribute) : target.pathProxy;\n    interpolateMorphingData(this.morphingData, pathProxy, ratio);\n    if (this.otherAttrs && this.otherAttrs.length) {\n      interpolateOtherAttrs(this.otherAttrs, out, ratio);\n    }\n    this.target.setAttributes(out);\n    // 计算位置\n    if (end && !this.saveOnEnd) {\n      (this.target as IGraphic).pathProxy = null;\n    }\n  }\n}\n\n/**\n * 创建从一个图形到另一个图形的形变动画\n * @param fromGraphic 源图形\n * @param toGraphic 目标图形\n * @param animationConfig 动画配置\n * @param fromGraphicTransform 源图形变换矩阵\n * @returns 动画实例\n */\nexport const morphPath = (\n  fromGraphic: IGraphic | null,\n  toGraphic: IGraphic,\n  animationConfig?: MorphingAnimateConfig,\n  fromGraphicTransform?: IMatrix\n) => {\n  if (fromGraphic && (!fromGraphic.valid || !fromGraphic.toCustomPath)) {\n    if (__DEV__) {\n      console.error(fromGraphic, ' is not validate');\n    }\n    return null;\n  }\n\n  if (!toGraphic.valid || !toGraphic.toCustomPath) {\n    if (__DEV__) {\n      console.error(toGraphic, ' is not validate');\n    }\n    return null;\n  }\n\n  let fromTransform = fromGraphic?.globalTransMatrix;\n\n  if (fromGraphicTransform && fromTransform) {\n    fromTransform = fromGraphicTransform\n      .clone()\n      .multiply(fromTransform.a, fromTransform.b, fromTransform.c, fromTransform.d, fromTransform.e, fromTransform.f);\n  }\n  const morphingData = parseMorphingData(fromGraphic?.toCustomPath?.(), toGraphic.toCustomPath(), {\n    fromTransform,\n    toTransfrom: toGraphic.globalTransMatrix\n  });\n\n  const attrs = parseOtherAnimateAttrs(fromGraphic?.attribute, toGraphic.attribute);\n  const animate = toGraphic.animate(animationConfig);\n\n  if (animationConfig?.delay) {\n    animate.wait(animationConfig.delay);\n  }\n\n  const morphingPath = new MorphingPath(\n    { morphingData, otherAttrs: attrs },\n    animationConfig?.duration ?? DefaultMorphingAnimateConfig.duration,\n    animationConfig?.easing ?? DefaultMorphingAnimateConfig.easing\n  );\n  animate.play(morphingPath);\n\n  return animate;\n};\n\n/**\n * 创建从一个图形到多个图形的形变动画\n * @param fromGraphic 源图形\n * @param toGraphics 目标图形数组\n * @param animationConfig 动画配置\n */\nexport const oneToMultiMorph = (\n  fromGraphic: IGraphic,\n  toGraphics: IGraphic[],\n  animationConfig?: MultiMorphingAnimateConfig\n) => {\n  const validateToGraphics = toGraphics.filter(graphic => graphic && graphic.toCustomPath && graphic.valid);\n  if (!validateToGraphics.length) {\n    if (__DEV__) {\n      console.error(validateToGraphics, ' is not validate');\n    }\n  }\n\n  if (!fromGraphic.valid || !fromGraphic.toCustomPath) {\n    if (__DEV__) {\n      console.error(fromGraphic, ' is not validate');\n    }\n  }\n\n  const childGraphics: IGraphic[] = (\n    animationConfig?.splitPath === 'clone' ? cloneGraphic : animationConfig?.splitPath ?? splitGraphic\n  )(fromGraphic, validateToGraphics.length, false);\n\n  const oldOnEnd = animationConfig?.onEnd;\n  let count = validateToGraphics.length;\n  const onEachEnd = () => {\n    count--;\n    if (count === 0 && oldOnEnd) {\n      oldOnEnd();\n    }\n  };\n\n  validateToGraphics.forEach((toChild, index) => {\n    const fromChild = childGraphics[index];\n    const delay =\n      (animationConfig?.delay ?? 0) +\n      (animationConfig?.individualDelay\n        ? animationConfig.individualDelay(index, validateToGraphics.length, fromChild, toChild)\n        : 0);\n    morphPath(\n      fromChild,\n      toChild,\n      Object.assign({}, animationConfig, { onEnd: onEachEnd, delay }),\n      fromGraphic.globalTransMatrix\n    );\n  });\n};\n\n/**\n * 多对一形变路径动画类，用于处理多个路径形变为一个目标路径\n */\nexport class MultiToOneMorphingPath extends ACustomAnimate<Record<string, any>> {\n  declare path: CustomPath2D;\n\n  otherAttrs?: OtherAttrItem[][];\n\n  constructor(\n    config: { morphingData: MorphingDataItem[][]; otherAttrs?: OtherAttrItem[][] },\n    duration: number,\n    easing: EasingType\n  ) {\n    super({}, {}, duration, easing);\n    this.morphingData = config.morphingData;\n    this.otherAttrs = config.otherAttrs;\n  }\n\n  private morphingData?: MorphingDataItem[][];\n\n  getEndProps(): Record<string, any> {\n    return {};\n  }\n\n  onBind(): void {\n    this.addPathProxy();\n  }\n\n  /**\n   * 为每个子图形添加路径代理\n   */\n  private addPathProxy() {\n    const shadowRoot = (this.target as IGraphic).shadowRoot;\n\n    shadowRoot.forEachChildren(child => {\n      (child as IGraphic).createPathProxy();\n    });\n\n    this.onUpdate(false, 0, (this.target as IGraphic).attribute);\n  }\n\n  /**\n   * 清除所有子图形的路径代理\n   */\n  private clearPathProxy() {\n    const shadowRoot = (this.target as IGraphic).shadowRoot;\n\n    shadowRoot.forEachChildren(child => {\n      (child as IGraphic).pathProxy = null;\n    });\n  }\n\n  onEnd(): void {\n    return;\n  }\n\n  /**\n   * 更新动画状态\n   * @param end 是否结束\n   * @param ratio 动画进度比例\n   * @param out 输出属性对象\n   */\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    const shadowRoot = (this.target as IGraphic).shadowRoot;\n\n    shadowRoot.forEachChildren((child: IGraphic, index) => {\n      interpolateMorphingData(\n        this.morphingData[index],\n        typeof child.pathProxy === 'function' ? child.pathProxy(child.attribute) : child.pathProxy,\n        ratio\n      );\n\n      if (this.otherAttrs?.[index] && this.otherAttrs[index].length) {\n        interpolateOtherAttrs(this.otherAttrs[index], child.attribute, ratio);\n      }\n    });\n\n    // 计算位置\n    if (end) {\n      this.clearPathProxy();\n      this.morphingData = null;\n    }\n  }\n}\n\n/**\n * 解析图形的阴影子元素属性（排除变换相关属性）\n * @param graphicAttrs 图形属性\n * @returns 阴影子元素属性\n */\nconst parseShadowChildAttrs = (graphicAttrs: Partial<IGraphicAttribute>) => {\n  const attrs: Partial<IGraphicAttribute> = {};\n\n  Object.keys(graphicAttrs).forEach(key => {\n    if (!isTransformKey(key)) {\n      (attrs as any)[key] = (graphicAttrs as any)[key];\n    }\n  });\n\n  // if (attrs.fill == null) {\n  //   attrs.fill = !!attrs.fillColor;\n  // }\n  // if (attrs.stroke == null) {\n  //   attrs.stroke = !!attrs.strokeColor;\n  // }\n\n  return attrs;\n};\n\n/**\n * 将阴影子元素添加到图形中\n * @param graphic 目标图形\n * @param children 子元素数组\n * @param count 子元素数量\n */\nconst appendShadowChildrenToGraphic = (graphic: IGraphic, children: IGraphic[], count: number) => {\n  const childAttrs = parseShadowChildAttrs(graphic.attribute);\n  const shadowRoot = graphic.attachShadow();\n\n  if (children.length) {\n    shadowRoot.setTheme({\n      [children[0].type]: childAttrs\n    });\n    children.forEach(element => {\n      element.setAttributes({ pickable: false });\n      shadowRoot.appendChild(element);\n    });\n  } else {\n    const box = graphic.AABBBounds;\n    const width = box.width();\n    const height = box.height();\n\n    shadowRoot.setTheme({\n      rect: childAttrs\n    });\n    new Array(count).fill(0).forEach(el => {\n      const child = application.graphicService.creator.rect({\n        x: 0,\n        y: 0,\n        width,\n        height: height,\n        pickable: false\n      });\n      shadowRoot.appendChild(child);\n      children.push(child);\n    });\n  }\n};\n\n/**\n * 克隆图形为多个相同的图形\n * @param graphic 源图形\n * @param count 克隆数量\n * @param needAppend 是否需要添加到源图形中\n * @returns 克隆的图形数组\n */\nexport const cloneGraphic = (graphic: IGraphic, count: number, needAppend?: boolean) => {\n  const children: IGraphic[] = [];\n  const childAttrs = needAppend ? null : parseShadowChildAttrs(graphic.attribute);\n  const path = graphic.toCustomPath();\n\n  for (let i = 0; i < count; i++) {\n    const element = {\n      path: new CustomPath2D().fromCustomPath2D(path)\n    };\n\n    children.push(\n      application.graphicService.creator.path(needAppend ? element : Object.assign({}, childAttrs, element))\n    );\n  }\n\n  if (needAppend) {\n    appendShadowChildrenToGraphic(graphic, children, count);\n  }\n\n  return children;\n};\n\n/**\n * 将图形分割为多个子图形\n * @param graphic 源图形\n * @param count 分割数量\n * @param needAppend 是否需要添加到源图形中\n * @returns 分割后的图形数组\n */\nexport const splitGraphic = (graphic: IGraphic, count: number, needAppend?: boolean) => {\n  const children: IGraphic[] = [];\n  const childAttrs = needAppend ? null : parseShadowChildAttrs(graphic.attribute);\n\n  if (graphic.type === 'rect') {\n    const childrenAttrs = splitRect(graphic as IRect, count);\n    childrenAttrs.forEach(element => {\n      children.push(\n        application.graphicService.creator.rect(needAppend ? element : Object.assign({}, childAttrs, element))\n      );\n    });\n  } else if (graphic.type === 'arc') {\n    const childrenAttrs = splitArc(graphic as IArc, count);\n    childrenAttrs.forEach(element => {\n      children.push(\n        application.graphicService.creator.arc(needAppend ? element : Object.assign({}, childAttrs, element))\n      );\n    });\n  } else if (graphic.type === 'circle') {\n    const childrenAttrs = splitCircle(graphic as ICircle, count);\n    childrenAttrs.forEach(element => {\n      children.push(\n        application.graphicService.creator.arc(needAppend ? element : Object.assign({}, childAttrs, element))\n      );\n    });\n  } else if (graphic.type === 'line') {\n    const childrenAttrs = splitLine(graphic as ILine, count);\n    const defaultSymbol = { size: 10, symbolType: 'circle' };\n\n    childrenAttrs.forEach(element => {\n      children.push(\n        application.graphicService.creator.symbol(\n          needAppend ? Object.assign({}, element, defaultSymbol) : Object.assign({}, childAttrs, element, defaultSymbol)\n        )\n      );\n    });\n  } else if (graphic.type === 'polygon') {\n    const childrenAttrs = splitPolygon(graphic as IPolygon, count);\n    childrenAttrs.forEach(element => {\n      children.push(\n        application.graphicService.creator.polygon(needAppend ? element : Object.assign({}, childAttrs, element))\n      );\n    });\n  } else if (graphic.type === 'area') {\n    const childrenAttrs = splitArea(graphic as IArea, count);\n    childrenAttrs.forEach(element => {\n      children.push(\n        application.graphicService.creator.polygon(needAppend ? element : Object.assign({}, childAttrs, element))\n      );\n    });\n  } else if (graphic.type === 'path') {\n    const childrenAttrs = splitPath(graphic as IPath, count);\n    childrenAttrs.forEach(element => {\n      if ('path' in element) {\n        children.push(\n          application.graphicService.creator.path(needAppend ? element : Object.assign({}, childAttrs, element))\n        );\n      } else {\n        children.push(\n          application.graphicService.creator.polygon(needAppend ? element : Object.assign({}, childAttrs, element))\n        );\n      }\n    });\n  }\n\n  if (needAppend) {\n    appendShadowChildrenToGraphic(graphic, children, count);\n  }\n\n  return children;\n};\n\n/**\n * 创建从多个图形到一个图形的形变动画\n * @param fromGraphics 源图形数组\n * @param toGraphic 目标图形\n * @param animationConfig 动画配置\n */\nexport const multiToOneMorph = (\n  fromGraphics: IGraphic[],\n  toGraphic: IGraphic,\n  animationConfig?: MultiMorphingAnimateConfig\n) => {\n  const validateFromGraphics = fromGraphics.filter(graphic => graphic.toCustomPath && graphic.valid);\n  if (!validateFromGraphics.length) {\n    if (__DEV__) {\n      console.error(fromGraphics, ' is not validate');\n    }\n  }\n\n  if (!toGraphic.valid || !toGraphic.toCustomPath) {\n    if (__DEV__) {\n      console.error(toGraphic, ' is not validate');\n    }\n  }\n\n  const childGraphics: IGraphic[] = (\n    animationConfig?.splitPath === 'clone' ? cloneGraphic : animationConfig?.splitPath ?? splitGraphic\n  )(toGraphic, validateFromGraphics.length, true);\n\n  const toAttrs = toGraphic.attribute;\n  toGraphic.setAttribute('visible', false);\n\n  const morphingData = validateFromGraphics.map((graphic, index) => {\n    return parseMorphingData(graphic.toCustomPath(), childGraphics[index].toCustomPath(), {\n      fromTransform: graphic.globalTransMatrix,\n      toTransfrom: childGraphics[index].globalTransMatrix\n    });\n  });\n  const otherAttrs = validateFromGraphics.map((graphic, index) => {\n    return parseOtherAnimateAttrs(graphic.attribute, toAttrs);\n  });\n\n  if (animationConfig?.individualDelay) {\n    const oldOnEnd = animationConfig.onEnd;\n    let count = validateFromGraphics.length;\n    const onEachEnd = () => {\n      count--;\n      if (count === 0) {\n        toGraphic.setAttributes({ visible: true, ratio: null } as any, false, {\n          type: AttributeUpdateType.ANIMATE_END\n        });\n        toGraphic.detachShadow();\n        if (oldOnEnd) {\n          oldOnEnd();\n        }\n      }\n    };\n    childGraphics.forEach((to, index) => {\n      const delay =\n        (animationConfig.delay ?? 0) +\n        animationConfig.individualDelay(index, validateFromGraphics.length, fromGraphics[index], to);\n      const animate = to.animate(Object.assign({}, animationConfig, { onEnd: onEachEnd }));\n      animate.wait(delay);\n\n      animate.play(\n        new MorphingPath(\n          {\n            morphingData: morphingData[index],\n            saveOnEnd: true,\n            otherAttrs: otherAttrs[index]\n          },\n          animationConfig.duration ?? DefaultMorphingAnimateConfig.duration,\n          animationConfig.easing ?? DefaultMorphingAnimateConfig.easing\n        )\n      );\n    });\n  } else {\n    const oldOnEnd = animationConfig?.onEnd;\n    const config = animationConfig ? Object.assign({}, animationConfig) : {};\n\n    config.onEnd = () => {\n      toGraphic.setAttribute('visible', true, false, { type: AttributeUpdateType.ANIMATE_END });\n      toGraphic.detachShadow();\n\n      if (oldOnEnd) {\n        oldOnEnd();\n      }\n    };\n\n    const animate = toGraphic.animate(config);\n\n    if (animationConfig?.delay) {\n      animate.wait(animationConfig.delay);\n    }\n\n    animate.play(\n      new MultiToOneMorphingPath(\n        { morphingData, otherAttrs },\n        animationConfig?.duration ?? DefaultMorphingAnimateConfig.duration,\n        animationConfig?.easing ?? DefaultMorphingAnimateConfig.easing\n      )\n    );\n  }\n};\n"]}