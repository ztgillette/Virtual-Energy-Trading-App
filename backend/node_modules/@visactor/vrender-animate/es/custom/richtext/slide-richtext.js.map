{"version":3,"sources":["../src/custom/richtext/slide-richtext.ts"],"names":[],"mappings":"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","file":"slide-richtext.js","sourcesContent":["import { ACustomAnimate } from '../custom-animate';\nimport type { IRichTextCharacter, IAnimate, IStep, EasingType } from '@visactor/vrender-core';\nimport { RichText } from '@visactor/vrender-core';\n\n/**\n * 滑动富文本动画，结合打字效果和方向滑动效果\n * 文字会从指定方向滑入，同时逐字显示和渐入\n * 支持上、下、左、右四个方向\n * 支持按单词或字符入场\n */\nexport class SlideRichText extends ACustomAnimate<{ textConfig: IRichTextCharacter[] }> {\n  declare valid: boolean;\n\n  private fromTextConfig: IRichTextCharacter[] = [];\n  private toTextConfig: IRichTextCharacter[] = [];\n  private originalTextConfig: IRichTextCharacter[] = [];\n  private singleCharConfig: IRichTextCharacter[] = [];\n  private fadeInDuration: number = 0.3; // 透明度渐变持续时间，以动画总时长的比例表示\n  private slideDirection: 'up' | 'down' | 'left' | 'right' = 'right'; // 滑动方向\n  private slideDistance: number = 30; // 滑动距离（像素）\n  private wordByWord: boolean = false; // 是否按单词为单位进行动画\n  // 默认正则表达式: 匹配英文单词(含中间连字符),连续中文字符,数字,以及独立的符号和空格\n  private wordRegex: RegExp = /[a-zA-Z]+(-[a-zA-Z]+)*|[\\u4e00-\\u9fa5]+|[0-9]+|[^\\s\\w\\u4e00-\\u9fa5]/g;\n  private wordGroups: number[][] = []; // 存储单词分组信息，每个数组包含属于同一单词的字符索引\n\n  constructor(\n    from: { textConfig: IRichTextCharacter[] },\n    to: { textConfig: IRichTextCharacter[] },\n    duration: number,\n    easing: EasingType,\n    params?: {\n      fadeInDuration?: number;\n      slideDirection?: 'up' | 'down' | 'left' | 'right';\n      slideDistance?: number;\n      wordByWord?: boolean;\n      wordRegex?: RegExp;\n    }\n  ) {\n    super(from, to, duration, easing, params);\n\n    // 配置透明度渐变效果\n    if (params?.fadeInDuration !== undefined) {\n      this.fadeInDuration = params.fadeInDuration;\n    }\n\n    // 配置滑动方向和距离\n    if (params?.slideDirection !== undefined) {\n      this.slideDirection = params.slideDirection;\n    }\n    if (params?.slideDistance !== undefined) {\n      this.slideDistance = params.slideDistance;\n    }\n\n    // 配置按单词动画\n    if (params?.wordByWord !== undefined) {\n      this.wordByWord = params.wordByWord;\n    }\n    if (params?.wordRegex !== undefined) {\n      this.wordRegex = params.wordRegex;\n    }\n  }\n\n  onFirstRun(): void {\n    const fromProps = this.getLastProps();\n    const toProps = this.getEndProps();\n\n    // 存储原始配置\n    this.originalTextConfig = toProps.textConfig ? [...toProps.textConfig] : [];\n\n    // 初始化解析结果\n    this.valid = true;\n\n    // 确保to不为空\n    if (!this.originalTextConfig || this.originalTextConfig.length === 0) {\n      this.valid = false;\n      return;\n    }\n\n    // 将文本拆分为单个字符，使用RichText的静态方法\n    this.fromTextConfig =\n      fromProps.textConfig && fromProps.textConfig.length > 0\n        ? RichText.TransformTextConfig2SingleCharacter(fromProps.textConfig)\n        : [];\n\n    this.toTextConfig = RichText.TransformTextConfig2SingleCharacter(this.originalTextConfig);\n\n    // 创建单字符数组，用于动画\n    this.singleCharConfig = this.toTextConfig.map(item => {\n      if ('text' in item) {\n        // 文本字符初始设置为透明\n        return {\n          ...item,\n          opacity: 0,\n          dx: this.getInitialDx(),\n          dy: this.getInitialDy()\n        };\n      }\n      return { ...item, opacity: 0 };\n    });\n\n    // 如果启用按单词动画，则计算单词分组\n    if (this.wordByWord) {\n      this.calculateWordGroups();\n    }\n  }\n\n  // 计算单词分组\n  private calculateWordGroups(): void {\n    // 重置单词分组\n    this.wordGroups = [];\n\n    // 构建完整文本用于正则匹配\n    let fullText = '';\n    const charMap: Record<number, number> = {}; // 映射全文索引到字符配置索引\n    let fullTextIndex = 0;\n\n    // 构建全文和映射\n    this.toTextConfig.forEach((item, configIndex) => {\n      if ('text' in item) {\n        const text = String(item.text);\n        fullText += text;\n        // 为每个字符创建映射\n        charMap[fullTextIndex] = configIndex;\n        fullTextIndex++;\n      }\n    });\n\n    // 使用正则表达式查找单词\n    let match;\n\n    // 重置正则表达式状态\n    this.wordRegex.lastIndex = 0;\n\n    while ((match = this.wordRegex.exec(fullText)) !== null) {\n      const wordStart = match.index;\n      const wordEnd = match.index + match[0].length;\n\n      // 找出属于这个单词的所有字符索引\n      const wordIndices = [];\n\n      for (let i = wordStart; i < wordEnd; i++) {\n        if (charMap[i] !== undefined) {\n          wordIndices.push(charMap[i]);\n        }\n      }\n\n      // 添加到单词分组\n      if (wordIndices.length > 0) {\n        this.wordGroups.push(wordIndices);\n      }\n    }\n\n    // 处理没有分配到任何单词的字符\n    const allocatedIndices = new Set<number>();\n    this.wordGroups.forEach(group => {\n      group.forEach(index => allocatedIndices.add(index));\n    });\n\n    for (let i = 0; i < this.toTextConfig.length; i++) {\n      if ('text' in this.toTextConfig[i] && !allocatedIndices.has(i)) {\n        // 单独为每个未分配的字符创建一个\"单词\"\n        this.wordGroups.push([i]);\n      }\n    }\n  }\n\n  // 根据滑动方向计算初始x偏移\n  private getInitialDx(): number {\n    switch (this.slideDirection) {\n      case 'left':\n        return -this.slideDistance;\n      case 'right':\n        return this.slideDistance;\n      default:\n        return 0;\n    }\n  }\n\n  // 根据滑动方向计算初始y偏移\n  private getInitialDy(): number {\n    switch (this.slideDirection) {\n      case 'up':\n        return -this.slideDistance;\n      case 'down':\n        return this.slideDistance;\n      default:\n        return 0;\n    }\n  }\n\n  onEnd(cb?: (animate: IAnimate, step: IStep) => void): void {\n    super.onEnd(cb);\n    if (!cb) {\n      // 动画结束时，恢复原始textConfig\n      this.target.setAttribute('textConfig', this.originalTextConfig);\n    }\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    if (!this.valid) {\n      return;\n    }\n\n    // 计算文本显示比例上限 - 为尾部字符的渐变和滑动效果留出时间\n    const maxTextShowRatio = 1 - this.fadeInDuration;\n\n    let updatedTextConfig: IRichTextCharacter[];\n\n    if (this.wordByWord && this.wordGroups.length > 0) {\n      // 按单词动画\n      updatedTextConfig = this.updateByWord(ratio, maxTextShowRatio);\n    } else {\n      // 按字符动画\n      updatedTextConfig = this.updateByCharacter(ratio, maxTextShowRatio);\n    }\n\n    // 更新富文本的textConfig属性\n    this.target.setAttribute('textConfig', updatedTextConfig);\n  }\n\n  // 按单词更新文本配置\n  private updateByWord(ratio: number, maxTextShowRatio: number): IRichTextCharacter[] {\n    const totalGroups = this.wordGroups.length;\n    const updatedTextConfig = [...this.singleCharConfig];\n\n    // 处理单词分组\n    for (let groupIndex = 0; groupIndex < this.wordGroups.length; groupIndex++) {\n      // 计算这个单词组的显示时间点\n      let appearTime;\n      if (this.slideDirection === 'left') {\n        // 从右到左顺序（最后的单词先出现）\n        appearTime = ((totalGroups - 1 - groupIndex) / totalGroups) * maxTextShowRatio;\n      } else {\n        // 标准顺序（第一个单词先出现）\n        appearTime = (groupIndex / totalGroups) * maxTextShowRatio;\n      }\n\n      // 如果当前时间还没到显示这个单词的时间点，保持隐藏状态\n      if (ratio < appearTime) {\n        for (const charIndex of this.wordGroups[groupIndex]) {\n          const item = updatedTextConfig[charIndex];\n          if ('text' in item) {\n            updatedTextConfig[charIndex] = {\n              ...item,\n              opacity: 0,\n              dx: this.getInitialDx(),\n              dy: this.getInitialDy()\n            };\n          }\n        }\n        continue;\n      }\n\n      // 计算动画进度（0-1之间）\n      const animProgress = (ratio - appearTime) / this.fadeInDuration;\n      const progress = Math.max(0, Math.min(1, animProgress));\n\n      // 计算当前偏移和透明度\n      const dx = this.getInitialDx() * (1 - progress);\n      const dy = this.getInitialDy() * (1 - progress);\n\n      // 更新这个单词的所有字符\n      for (const charIndex of this.wordGroups[groupIndex]) {\n        const item = updatedTextConfig[charIndex];\n        if ('text' in item) {\n          updatedTextConfig[charIndex] = {\n            ...item,\n            opacity: progress,\n            dx,\n            dy\n          };\n        }\n      }\n    }\n\n    return updatedTextConfig;\n  }\n\n  // 按字符更新文本配置\n  private updateByCharacter(ratio: number, maxTextShowRatio: number): IRichTextCharacter[] {\n    const totalItems = this.toTextConfig.length;\n    const updatedTextConfig = [...this.singleCharConfig];\n\n    // 更新每个字符的状态\n    for (let index = 0; index < updatedTextConfig.length; index++) {\n      const item = updatedTextConfig[index];\n      if ('text' in item) {\n        // 计算每个字符的显示时间点\n        // 对于left方向，反转显示顺序（从右到左）\n        let appearTime;\n        if (this.slideDirection === 'left') {\n          // 从右到左的顺序 (最后的字符先出现)\n          appearTime = ((totalItems - 1 - index) / totalItems) * maxTextShowRatio;\n        } else {\n          // 标准顺序 (第一个字符先出现)\n          appearTime = (index / totalItems) * maxTextShowRatio;\n        }\n\n        // 如果当前时间还没到显示这个字符的时间点，保持隐藏状态\n        if (ratio < appearTime) {\n          updatedTextConfig[index] = {\n            ...item,\n            opacity: 0,\n            dx: this.getInitialDx(),\n            dy: this.getInitialDy()\n          };\n          continue;\n        }\n\n        // 计算动画进度（0-1之间）\n        const animProgress = (ratio - appearTime) / this.fadeInDuration;\n        const progress = Math.max(0, Math.min(1, animProgress));\n\n        // 计算当前偏移和透明度\n        const dx = this.getInitialDx() * (1 - progress);\n        const dy = this.getInitialDy() * (1 - progress);\n\n        updatedTextConfig[index] = {\n          ...item,\n          opacity: progress,\n          dx,\n          dy\n        };\n      }\n    }\n\n    return updatedTextConfig;\n  }\n}\n"]}