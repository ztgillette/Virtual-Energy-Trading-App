{"version":3,"sources":["../src/custom/disappear/distortion.ts"],"names":[],"mappings":"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","file":"distortion.js","sourcesContent":["import type { EasingType } from '@visactor/vrender-core';\nimport { HybridEffectBase } from './base/CustomEffectBase';\n\n// 扭曲效果配置接口\nexport interface DistortionConfig {\n  distortionType?: 'wave' | 'ripple' | 'swirl'; // 扭曲效果类型\n  strength?: number; // 扭曲强度\n  useWebGL?: boolean; // 是否使用WebGL实现\n}\n/**\n * 扭曲消失动画效果 - 重构版\n * 使用HybridEffectBase实现WebGL和Canvas 2D双重支持\n */\nexport class Distortion extends HybridEffectBase {\n  private distortionConfig: Partial<DistortionConfig>;\n\n  constructor(from: null, to: null, duration: number, easing: EasingType, params: any) {\n    super(from, to, duration, easing, params);\n\n    this.distortionConfig = {\n      distortionType: params?.options?.distortionType || 'wave',\n      strength: params?.options?.strength || 0.3,\n      useWebGL: params?.options?.useWebGL !== undefined ? params.options.useWebGL : true\n    };\n  }\n\n  /**\n   * WebGL实现：着色器扭曲效果\n   */\n  protected getShaderSources(): { vertex: string; fragment: string } | null {\n    const vertexShader = `\n      attribute vec2 a_position;\n      attribute vec2 a_texCoord;\n      varying vec2 v_texCoord;\n\n      void main() {\n        gl_Position = vec4(a_position, 0.0, 1.0);\n        v_texCoord = a_texCoord;\n      }\n    `;\n\n    const fragmentShader = `\n      precision mediump float;\n      uniform sampler2D u_texture;\n      uniform float u_time;\n      uniform float u_strength;\n      uniform int u_distortionType;\n      uniform vec2 u_resolution;\n      varying vec2 v_texCoord;\n\n      // 波浪扭曲函数\n      vec2 wave(vec2 uv, float time, float strength) {\n        float waveX = sin(uv.y * 10.0 + time * 3.0) * strength * 0.1;\n        float waveY = sin(uv.x * 10.0 + time * 2.0) * strength * 0.1;\n        return uv + vec2(waveX, waveY);\n      }\n\n      // 涟漪扭曲函数\n      vec2 ripple(vec2 uv, float time, float strength) {\n        vec2 center = vec2(0.5, 0.5);\n        float distance = length(uv - center);\n        float ripple = sin(distance * 20.0 - time * 5.0) * strength * 0.1;\n        vec2 direction = normalize(uv - center);\n        return uv + direction * ripple;\n      }\n\n      // 漩涡扭曲函数\n      vec2 swirl(vec2 uv, float time, float strength) {\n        vec2 center = vec2(0.5, 0.5);\n        vec2 delta = uv - center;\n        float dist = length(delta);\n        float originalAngle = atan(delta.y, delta.x);\n        float rotationAngle = dist * strength * time * 2.0;\n        float finalAngle = originalAngle + rotationAngle;\n        return center + dist * vec2(cos(finalAngle), sin(finalAngle));\n      }\n\n      void main() {\n        vec2 uv = v_texCoord;\n\n        // 根据扭曲类型应用相应变换\n        if (u_distortionType == 0) {\n          uv = wave(uv, u_time, u_strength);\n        } else if (u_distortionType == 1) {\n          uv = ripple(uv, u_time, u_strength);\n        } else if (u_distortionType == 2) {\n          uv = swirl(uv, u_time, u_strength);\n        }\n\n        // 边界检查\n        if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        } else {\n          gl_FragColor = texture2D(u_texture, uv);\n        }\n      }\n    `;\n\n    return { vertex: vertexShader, fragment: fragmentShader };\n  }\n\n  protected applyWebGLEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    if (!this.gl || !this.program || !this.webglCanvas) {\n      return null;\n    }\n\n    // 使用基类提供的公共方法\n    this.setupWebGLState(canvas);\n\n    // 创建纹理\n    const texture = this.createTextureFromCanvas(canvas);\n    if (!texture) {\n      return null;\n    }\n\n    // 创建顶点缓冲区\n    const vertexBuffer = this.createFullScreenQuad();\n    if (!vertexBuffer) {\n      this.gl.deleteTexture(texture);\n      return null;\n    }\n\n    try {\n      // 使用着色器程序\n      this.gl.useProgram(this.program);\n\n      // 设置顶点属性\n      this.setupVertexAttributes();\n\n      // 设置uniform变量\n      this.setDistortionUniforms();\n\n      // 绘制\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n\n      return this.webglCanvas;\n    } finally {\n      // 清理资源\n      this.gl.deleteTexture(texture);\n      this.gl.deleteBuffer(vertexBuffer);\n    }\n  }\n\n  /**\n   * 设置扭曲效果的uniform变量\n   */\n  private setDistortionUniforms(): void {\n    if (!this.gl || !this.program) {\n      return;\n    }\n\n    const currentTime = this.getAnimationTime();\n\n    // 获取uniform位置\n    const timeLocation = this.gl.getUniformLocation(this.program, 'u_time');\n    const strengthLocation = this.gl.getUniformLocation(this.program, 'u_strength');\n    const distortionTypeLocation = this.gl.getUniformLocation(this.program, 'u_distortionType');\n    const resolutionLocation = this.gl.getUniformLocation(this.program, 'u_resolution');\n\n    // 设置uniform值\n    this.gl.uniform1f(timeLocation, currentTime);\n    this.gl.uniform1f(strengthLocation, this.distortionConfig.strength);\n    this.gl.uniform2f(resolutionLocation, this.webglCanvas.width, this.webglCanvas.height);\n\n    // 扭曲类型映射\n    const distortionTypeMap: { [key: string]: number } = {\n      wave: 0,\n      ripple: 1,\n      swirl: 2\n    };\n    this.gl.uniform1i(distortionTypeLocation, distortionTypeMap[this.distortionConfig.distortionType] || 0);\n  }\n\n  /**\n   * Canvas 2D实现：软件扭曲效果\n   */\n  protected applyCanvas2DEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    const outputCanvas = this.createOutputCanvas(canvas);\n    if (!outputCanvas) {\n      return null;\n    }\n\n    const { ctx } = outputCanvas;\n\n    try {\n      // 获取图像数据\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const currentTime = this.getAnimationTime();\n\n      // 应用对应的扭曲算法\n      let distortedImageData: ImageData;\n\n      switch (this.distortionConfig.distortionType) {\n        case 'wave':\n          distortedImageData = this.applyWaveDistortion(imageData, this.distortionConfig.strength, currentTime);\n          break;\n        case 'ripple':\n          distortedImageData = this.applyRippleDistortion(imageData, this.distortionConfig.strength, currentTime);\n          break;\n        case 'swirl':\n          distortedImageData = this.applySwirlDistortion(imageData, this.distortionConfig.strength, currentTime);\n          break;\n        default:\n          distortedImageData = imageData;\n      }\n\n      // 清空画布并绘制扭曲后的图像\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(distortedImageData, 0, 0);\n\n      return outputCanvas.canvas;\n    } catch (error) {\n      console.warn('Canvas 2D distortion effect failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Canvas 2D波浪扭曲实现\n   */\n  private applyWaveDistortion(imageData: ImageData, strength: number, time: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data.length);\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        // 波浪扭曲计算\n        const waveX = Math.sin(y * 0.1 + time * 3) * strength * 20;\n        const waveY = Math.sin(x * 0.1 + time * 2) * strength * 20;\n\n        const sourceX = Math.round(x - waveX);\n        const sourceY = Math.round(y - waveY);\n\n        const targetIndex = (y * width + x) * 4;\n\n        if (sourceX >= 0 && sourceX < width && sourceY >= 0 && sourceY < height) {\n          const sourceIndex = (sourceY * width + sourceX) * 4;\n          result[targetIndex] = data[sourceIndex];\n          result[targetIndex + 1] = data[sourceIndex + 1];\n          result[targetIndex + 2] = data[sourceIndex + 2];\n          result[targetIndex + 3] = data[sourceIndex + 3];\n        } else {\n          result[targetIndex + 3] = 0; // 透明\n        }\n      }\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * Canvas 2D涟漪扭曲实现\n   */\n  private applyRippleDistortion(imageData: ImageData, strength: number, time: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data.length);\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // 涟漪效果\n        const ripple = Math.sin(distance * 0.2 - time * 5) * strength * 10;\n        const angle = Math.atan2(dy, dx);\n\n        const sourceX = Math.round(x - Math.cos(angle) * ripple);\n        const sourceY = Math.round(y - Math.sin(angle) * ripple);\n\n        const targetIndex = (y * width + x) * 4;\n\n        if (sourceX >= 0 && sourceX < width && sourceY >= 0 && sourceY < height) {\n          const sourceIndex = (sourceY * width + sourceX) * 4;\n          result[targetIndex] = data[sourceIndex];\n          result[targetIndex + 1] = data[sourceIndex + 1];\n          result[targetIndex + 2] = data[sourceIndex + 2];\n          result[targetIndex + 3] = data[sourceIndex + 3];\n        } else {\n          result[targetIndex + 3] = 0;\n        }\n      }\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * Canvas 2D漩涡扭曲实现\n   */\n  private applySwirlDistortion(imageData: ImageData, strength: number, time: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data.length);\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const originalAngle = Math.atan2(dy, dx);\n\n        // 旋转角度随时间和强度增长\n        const rotationAngle = distance * strength * time * 0.02;\n        const finalAngle = originalAngle + rotationAngle;\n\n        const sourceX = Math.round(centerX + distance * Math.cos(finalAngle));\n        const sourceY = Math.round(centerY + distance * Math.sin(finalAngle));\n\n        const targetIndex = (y * width + x) * 4;\n\n        if (sourceX >= 0 && sourceX < width && sourceY >= 0 && sourceY < height) {\n          const sourceIndex = (sourceY * width + sourceX) * 4;\n          result[targetIndex] = data[sourceIndex];\n          result[targetIndex + 1] = data[sourceIndex + 1];\n          result[targetIndex + 2] = data[sourceIndex + 2];\n          result[targetIndex + 3] = data[sourceIndex + 3];\n        } else {\n          result[targetIndex + 3] = 0;\n        }\n      }\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * 重写主要渲染方法，添加强度检查\n   */\n  protected afterStageRender(stage: any, canvas: HTMLCanvasElement): HTMLCanvasElement | void | null | false {\n    // 如果强度为0，直接返回原图\n    if (this.distortionConfig.strength <= 0) {\n      return canvas;\n    }\n\n    // 调用父类的智能渲染选择逻辑\n    return super.afterStageRender(stage, canvas);\n  }\n}\n"]}