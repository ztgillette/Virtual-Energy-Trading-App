{"version":3,"sources":["../src/custom/disappear/gaussian-blur.ts"],"names":[],"mappings":"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","file":"gaussian-blur.js","sourcesContent":["import type { EasingType } from '@visactor/vrender-core';\nimport { vglobal } from '@visactor/vrender-core';\nimport { AStageAnimate } from '../custom-animate';\n\n// 模糊效果配置接口\nexport interface BlurConfig {\n  blurRadius: number;\n  useOptimizedBlur: boolean;\n}\n\nexport class GaussianBlur extends AStageAnimate<any> {\n  // 模糊配置\n  private blurConfig: BlurConfig;\n\n  constructor(from: null, to: null, duration: number, easing: EasingType, params: any) {\n    super(from, to, duration, easing, params);\n\n    this.blurConfig = {\n      blurRadius: params?.options?.blurRadius || 8,\n      useOptimizedBlur: params?.options?.useOptimizedBlur !== undefined ? params.options.useOptimizedBlur : true\n    };\n  }\n  // 使用CSS滤镜（性能最好）\n  private applyCSSBlur(canvas: HTMLCanvasElement, radius: number): HTMLCanvasElement {\n    const c = vglobal.createCanvas({\n      width: canvas.width,\n      height: canvas.height,\n      dpr: vglobal.devicePixelRatio\n    });\n    const ctx = c.getContext('2d');\n    if (!ctx) {\n      return canvas;\n    }\n\n    // 使用CSS滤镜进行模糊\n    ctx.filter = `blur(${radius}px)`;\n    ctx.drawImage(canvas, 0, 0);\n    ctx.filter = 'none';\n\n    return c;\n  }\n\n  // 降采样模糊（减少计算量）\n  private applyDownsampleBlur(imageData: ImageData, radius: number): ImageData {\n    const { width, height } = imageData;\n\n    // 降采样因子，减少计算量\n    const downsample = Math.max(1, Math.floor(radius / 2));\n    const smallWidth = Math.floor(width / downsample);\n    const smallHeight = Math.floor(height / downsample);\n\n    // 创建小尺寸的临时canvas\n    const tempCanvas = vglobal.createCanvas({\n      width: smallWidth,\n      height: smallHeight,\n      dpr: 1\n    });\n    const tempCtx = tempCanvas.getContext('2d');\n    if (!tempCtx) {\n      return imageData;\n    }\n\n    // 将图像绘制到小canvas上\n    const originalCanvas = vglobal.createCanvas({\n      width: width,\n      height: height,\n      dpr: 1\n    });\n    const originalCtx = originalCanvas.getContext('2d');\n    if (!originalCtx) {\n      return imageData;\n    }\n\n    originalCtx.putImageData(imageData, 0, 0);\n\n    // 缩小绘制（自动插值）\n    tempCtx.drawImage(originalCanvas, 0, 0, smallWidth, smallHeight);\n\n    // 应用模糊到小图像\n    tempCtx.filter = `blur(${radius / downsample}px)`;\n    tempCtx.drawImage(tempCanvas, 0, 0);\n    tempCtx.filter = 'none';\n\n    // 放大回原尺寸\n    originalCtx.clearRect(0, 0, width, height);\n    originalCtx.drawImage(tempCanvas, 0, 0, width, height);\n\n    return originalCtx.getImageData(0, 0, width, height);\n  }\n\n  protected afterStageRender(stage: any, canvas: HTMLCanvasElement): HTMLCanvasElement | void | null | false {\n    // 如果模糊强度为0，直接返回原图\n    if (this.blurConfig.blurRadius <= 0) {\n      return canvas;\n    }\n\n    let result: HTMLCanvasElement;\n\n    if (this.blurConfig.useOptimizedBlur) {\n      // 使用CSS滤镜（性能最好）\n      result = this.applyCSSBlur(canvas, this.blurConfig.blurRadius);\n    } else {\n      // 使用传统的像素级模糊\n      const c = vglobal.createCanvas({\n        width: canvas.width,\n        height: canvas.height,\n        dpr: vglobal.devicePixelRatio\n      });\n      const ctx = c.getContext('2d');\n      if (!ctx) {\n        return false;\n      }\n\n      // 清空画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 绘制原始图像\n      ctx.drawImage(canvas, 0, 0);\n\n      // 获取图像数据\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      // 高质量模式下统一使用降采样模糊\n      const blurredImageData = this.applyDownsampleBlur(imageData, this.blurConfig.blurRadius);\n\n      // 将模糊后的图像数据绘制到画布上\n      ctx.putImageData(blurredImageData, 0, 0);\n\n      result = c;\n    }\n\n    // 添加一个半透明的覆盖层来增强效果\n    const ctx = result.getContext('2d');\n    if (ctx) {\n      ctx.globalCompositeOperation = 'overlay';\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n      ctx.fillRect(0, 0, result.width, result.height);\n      ctx.globalCompositeOperation = 'source-over';\n    }\n\n    return result;\n  }\n}\n"]}