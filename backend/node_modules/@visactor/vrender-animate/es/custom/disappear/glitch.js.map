{"version":3,"sources":["../src/custom/disappear/glitch.ts"],"names":[],"mappings":"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","file":"glitch.js","sourcesContent":["import type { EasingType } from '@visactor/vrender-core';\nimport { Canvas2DEffectBase } from './base/CustomEffectBase';\n// import { GlitchEffectConfig, EffectConfigFactory, EffectType } from './base/DisappearEffectConfig';\nimport { ImageProcessUtils } from './base/ImageProcessUtils';\n\n// 故障效果配置接口\nexport interface GlitchConfig {\n  effectType?: 'rgb-shift' | 'digital-distortion' | 'scan-lines' | 'data-corruption'; // 故障效果类型\n  intensity?: number; // 故障强度 0-1\n}\n\n/**\n * 故障消失动画效果 - 重构版\n * 使用Canvas2DEffectBase实现，专注于2D图像处理的故障效果\n */\nexport class Glitch extends Canvas2DEffectBase {\n  private glitchConfig: Required<GlitchConfig>;\n\n  constructor(from: null, to: null, duration: number, easing: EasingType, params: any) {\n    super(from, to, duration, easing, params);\n\n    this.glitchConfig = {\n      effectType: params?.options?.effectType || 'rgb-shift',\n      // intensity 可能为 0\n      intensity: params?.options?.intensity !== undefined ? params.options.intensity : 0.5\n    };\n  }\n\n  /**\n   * Canvas 2D故障效果主入口\n   */\n  protected applyCanvas2DEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    // 如果强度为0，创建一个原图副本返回\n    if (this.glitchConfig.intensity <= 0) {\n      const outputCanvas = this.createOutputCanvas(canvas);\n      return outputCanvas ? outputCanvas.canvas : null;\n    }\n\n    try {\n      // 根据故障类型应用对应效果\n      switch (this.glitchConfig.effectType) {\n        case 'rgb-shift':\n          return this.applyRGBShiftGlitch(canvas);\n        case 'digital-distortion':\n          return this.applyDigitalDistortionGlitch(canvas);\n        case 'scan-lines':\n          return this.applyScanLineGlitch(canvas);\n        case 'data-corruption':\n          return this.applyDataCorruptionGlitch(canvas);\n        default:\n          return this.applyRGBShiftGlitch(canvas);\n      }\n    } catch (error) {\n      console.warn('Glitch effect failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * RGB通道偏移故障效果\n   * 分离RGB通道并应用不同的偏移，产生色散效果\n   */\n  private applyRGBShiftGlitch(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    const outputCanvas = this.createOutputCanvas(canvas);\n    if (!outputCanvas) {\n      return null;\n    }\n\n    const { ctx } = outputCanvas;\n\n    try {\n      // 清空画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 计算基于动画进度的动态强度\n      const dynamicIntensity = ImageProcessUtils.calculateDynamicStrength(\n        this.glitchConfig.intensity,\n        this.getAnimationTime()\n      );\n\n      // 计算偏移量 - 增强色散效果\n      const maxOffset = Math.floor(dynamicIntensity * 20);\n      const redOffset = this.generateRandomOffset(maxOffset);\n      const greenOffset = this.generateRandomOffset(maxOffset, 0.3);\n      const blueOffset = this.generateRandomOffset(-maxOffset);\n\n      // 获取原始图像数据\n      const tempCanvas = ImageProcessUtils.createTempCanvas(canvas.width, canvas.height);\n      const tempCtx = tempCanvas.getContext('2d');\n      tempCtx.drawImage(canvas, 0, 0);\n      const originalImageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);\n\n      // 创建RGB通道分离的图像数据\n      const redChannelData = ImageProcessUtils.extractChannel(originalImageData, 0);\n      const greenChannelData = ImageProcessUtils.extractChannel(originalImageData, 1);\n      const blueChannelData = ImageProcessUtils.extractChannel(originalImageData, 2);\n\n      // 使用screen混合模式绘制分离的通道\n      ctx.globalCompositeOperation = 'screen';\n\n      // 绘制红色通道\n      tempCtx.clearRect(0, 0, canvas.width, canvas.height);\n      tempCtx.putImageData(redChannelData, 0, 0);\n      ctx.drawImage(tempCanvas, redOffset.x, redOffset.y);\n\n      // 绘制绿色通道\n      tempCtx.clearRect(0, 0, canvas.width, canvas.height);\n      tempCtx.putImageData(greenChannelData, 0, 0);\n      ctx.drawImage(tempCanvas, greenOffset.x, greenOffset.y);\n\n      // 绘制蓝色通道\n      tempCtx.clearRect(0, 0, canvas.width, canvas.height);\n      tempCtx.putImageData(blueChannelData, 0, 0);\n      ctx.drawImage(tempCanvas, blueOffset.x, blueOffset.y);\n\n      // 恢复正常混合模式\n      ctx.globalCompositeOperation = 'source-over';\n\n      return outputCanvas.canvas;\n    } catch (error) {\n      console.warn('RGB shift glitch failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 数字扭曲故障效果\n   * 应用水平切片偏移和随机像素噪声\n   */\n  private applyDigitalDistortionGlitch(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    const outputCanvas = this.createOutputCanvas(canvas);\n    if (!outputCanvas) {\n      return null;\n    }\n\n    const { ctx } = outputCanvas;\n\n    try {\n      // 获取图像数据\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const dynamicIntensity = ImageProcessUtils.calculateDynamicStrength(\n        this.glitchConfig.intensity,\n        this.getAnimationTime()\n      );\n\n      // 应用数字扭曲\n      const distortedImageData = this.processDigitalDistortion(imageData, dynamicIntensity);\n\n      // 清空画布并绘制扭曲后的图像\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(distortedImageData, 0, 0);\n\n      return outputCanvas.canvas;\n    } catch (error) {\n      console.warn('Digital distortion glitch failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 扫描线故障效果\n   * 添加水平扫描线和随机亮线效果\n   */\n  private applyScanLineGlitch(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    const outputCanvas = this.createOutputCanvas(canvas);\n    if (!outputCanvas) {\n      return null;\n    }\n\n    const { ctx } = outputCanvas;\n\n    try {\n      const dynamicIntensity = ImageProcessUtils.calculateDynamicStrength(\n        this.glitchConfig.intensity,\n        this.getAnimationTime()\n      );\n\n      // 添加暗扫描线\n      const lineSpacing = Math.max(2, Math.floor(10 - dynamicIntensity * 8));\n      ctx.globalCompositeOperation = 'multiply';\n\n      for (let y = 0; y < canvas.height; y += lineSpacing) {\n        if (Math.random() < dynamicIntensity) {\n          const opacity = 0.1 + dynamicIntensity * 0.4;\n          ctx.fillStyle = `rgba(0, 0, 0, ${opacity})`;\n          ctx.fillRect(0, y, canvas.width, 1);\n        }\n      }\n\n      // 添加随机亮线\n      ctx.globalCompositeOperation = 'screen';\n      const brightLineCount = Math.floor(dynamicIntensity * 20);\n      for (let i = 0; i < brightLineCount; i++) {\n        const y = Math.random() * canvas.height;\n        const opacity = dynamicIntensity * 0.3;\n        ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\n        ctx.fillRect(0, Math.floor(y), canvas.width, 1);\n      }\n\n      // 恢复正常混合模式\n      ctx.globalCompositeOperation = 'source-over';\n\n      return outputCanvas.canvas;\n    } catch (error) {\n      console.warn('Scan line glitch failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 数据损坏故障效果\n   * 创建垂直条纹和随机块状损坏效果\n   */\n  private applyDataCorruptionGlitch(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    const outputCanvas = this.createOutputCanvas(canvas);\n    if (!outputCanvas) {\n      return null;\n    }\n\n    const { ctx } = outputCanvas;\n\n    try {\n      // 获取图像数据\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const dynamicIntensity = ImageProcessUtils.calculateDynamicStrength(\n        this.glitchConfig.intensity,\n        this.getAnimationTime()\n      );\n\n      // 应用数据损坏\n      const corruptedImageData = this.processDataCorruption(imageData, dynamicIntensity);\n\n      // 清空画布并绘制损坏后的图像\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(corruptedImageData, 0, 0);\n\n      return outputCanvas.canvas;\n    } catch (error) {\n      console.warn('Data corruption glitch failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 生成随机偏移量\n   */\n  private generateRandomOffset(maxOffset: number, scale: number = 1): { x: number; y: number } {\n    return {\n      x: (Math.random() - 0.5) * maxOffset,\n      y: (Math.random() - 0.5) * maxOffset * scale\n    };\n  }\n\n  /**\n   * 处理数字扭曲算法\n   */\n  private processDigitalDistortion(imageData: ImageData, intensity: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data);\n\n    // 随机水平切片\n    const sliceCount = Math.floor(intensity * 20) + 5;\n    const sliceHeight = Math.floor(height / sliceCount);\n\n    for (let i = 0; i < sliceCount; i++) {\n      if (Math.random() < intensity) {\n        const y = i * sliceHeight;\n        const sliceEnd = Math.min(y + sliceHeight, height);\n        const offset = Math.floor((Math.random() - 0.5) * width * intensity * 0.1);\n\n        // 水平偏移切片\n        this.shiftSliceHorizontal(result, width, height, y, sliceEnd, offset);\n      }\n    }\n\n    // 添加随机像素噪声\n    const noiseIntensity = intensity * 0.3;\n    for (let i = 0; i < data.length; i += 4) {\n      if (Math.random() < noiseIntensity) {\n        result[i] = Math.random() * 255; // R\n        result[i + 1] = Math.random() * 255; // G\n        result[i + 2] = Math.random() * 255; // B\n      }\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * 水平切片偏移算法\n   */\n  private shiftSliceHorizontal(\n    data: Uint8ClampedArray,\n    width: number,\n    height: number,\n    startY: number,\n    endY: number,\n    offset: number\n  ): void {\n    const tempRow = new Uint8ClampedArray(width * 4);\n\n    for (let y = startY; y < endY; y++) {\n      const rowStart = y * width * 4;\n\n      // 保存当前行\n      for (let x = 0; x < width * 4; x++) {\n        tempRow[x] = data[rowStart + x];\n      }\n\n      // 应用偏移\n      for (let x = 0; x < width; x++) {\n        const sourceX = (x - offset + width) % width;\n        const targetIndex = rowStart + x * 4;\n        const sourceIndex = sourceX * 4;\n\n        data[targetIndex] = tempRow[sourceIndex];\n        data[targetIndex + 1] = tempRow[sourceIndex + 1];\n        data[targetIndex + 2] = tempRow[sourceIndex + 2];\n        data[targetIndex + 3] = tempRow[sourceIndex + 3];\n      }\n    }\n  }\n\n  /**\n   * 处理数据损坏算法\n   */\n  private processDataCorruption(imageData: ImageData, intensity: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data);\n\n    // 随机垂直条纹\n    const stripeCount = Math.floor(intensity * 15) + 5;\n    for (let i = 0; i < stripeCount; i++) {\n      if (Math.random() < intensity) {\n        const x = Math.floor(Math.random() * width);\n        const stripeWidth = Math.floor(Math.random() * 5) + 1;\n        const color = Math.random() < 0.5 ? 0 : 255;\n\n        for (let y = 0; y < height; y++) {\n          for (let dx = 0; dx < stripeWidth && x + dx < width; dx++) {\n            const index = (y * width + x + dx) * 4;\n            result[index] = color; // R\n            result[index + 1] = color; // G\n            result[index + 2] = color; // B\n          }\n        }\n      }\n    }\n\n    // 随机块状损坏\n    const corruptionCount = Math.floor(intensity * 20);\n    for (let i = 0; i < corruptionCount; i++) {\n      const blockX = Math.floor(Math.random() * width);\n      const blockY = Math.floor(Math.random() * height);\n      const blockW = Math.floor(Math.random() * 20) + 5;\n      const blockH = Math.floor(Math.random() * 10) + 2;\n\n      this.corruptBlock(result, width, height, blockX, blockY, blockW, blockH);\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * 损坏指定区域的像素块\n   */\n  private corruptBlock(\n    data: Uint8ClampedArray,\n    width: number,\n    height: number,\n    x: number,\n    y: number,\n    w: number,\n    h: number\n  ): void {\n    for (let dy = 0; dy < h && y + dy < height; dy++) {\n      for (let dx = 0; dx < w && x + dx < width; dx++) {\n        const index = ((y + dy) * width + (x + dx)) * 4;\n        if (Math.random() < 0.7) {\n          data[index] = Math.random() * 255;\n          data[index + 1] = Math.random() * 255;\n          data[index + 2] = Math.random() * 255;\n        }\n      }\n    }\n  }\n}\n"]}