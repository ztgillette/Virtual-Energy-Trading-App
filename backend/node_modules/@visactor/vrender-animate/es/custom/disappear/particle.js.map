{"version":3,"sources":["../src/custom/disappear/particle.ts"],"names":[],"mappings":"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","file":"particle.js","sourcesContent":["import type { EasingType } from '@visactor/vrender-core';\nimport { HybridEffectBase } from './base/CustomEffectBase';\nimport { ImageProcessUtils } from './base/ImageProcessUtils';\n\nexport interface ParticleConfig {\n  effectType?: 'explode' | 'vortex' | 'gravity'; // 粒子效果类型\n  count?: number; // 粒子数量\n  size?: number; // 粒子大小\n  strength?: number; // 力场强度\n  useWebGL: boolean;\n}\n// 粒子数据结构\nexport interface ParticleData {\n  x: number;\n  y: number;\n  originX: number;\n  originY: number;\n  vx: number;\n  vy: number;\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n  life: number;\n  size: number;\n}\n\n/**\n * 重构后的粒子消散特效\n * 使用HybridEffectBase，优先WebGL实现，Canvas 2D回退\n */\nexport class Particle extends HybridEffectBase {\n  private particles: ParticleData[] = [];\n  private positionBuffer: WebGLBuffer | null = null;\n  private colorBuffer: WebGLBuffer | null = null;\n  private particleConfig: ParticleConfig;\n\n  constructor(from: null, to: null, duration: number, easing: EasingType, params: any) {\n    super(from, to, duration, easing, params);\n\n    this.particleConfig = {\n      effectType: params?.options?.effectType || 'gravity', //'explode' | 'vortex' | 'gravity'; // 粒子效果类型\n      count: params?.options?.count || 4000,\n      size: params?.options?.size || 20,\n      strength: params?.options?.strength || 1.5,\n      useWebGL: params?.options?.useWebGL !== undefined ? params.options.useWebGL : true // 是否使用WebGL实现\n    };\n  }\n\n  // WebGL实现 - 高性能版本\n  protected getShaderSources(): { vertex: string; fragment: string } | null {\n    const vertexShader = `\n      attribute vec2 a_position;\n      attribute vec4 a_color;\n      attribute float a_size;\n\n      uniform vec2 u_resolution;\n      uniform float u_time;\n      uniform float u_forceStrength;\n      uniform int u_effectType;\n\n      varying vec4 v_color;\n\n      void main() {\n        // 将像素坐标转换为剪辑空间坐标\n        vec2 clipSpace = ((a_position / u_resolution) * 2.0) - 1.0;\n        clipSpace.y = -clipSpace.y; // 翻转Y轴\n\n        gl_Position = vec4(clipSpace, 0.0, 1.0);\n        gl_PointSize = a_size;\n        v_color = a_color;\n      }\n    `;\n\n    const fragmentShader = `\n      precision mediump float;\n      varying vec4 v_color;\n\n      void main() {\n        // 创建圆形粒子\n        vec2 coord = gl_PointCoord - vec2(0.5);\n        float distance = length(coord);\n\n        if (distance > 0.5) {\n          discard;\n        }\n\n        // 保持原始颜色，只调整透明度渐变\n        gl_FragColor = vec4(v_color.rgb, v_color.a);\n      }\n    `;\n\n    return { vertex: vertexShader, fragment: fragmentShader };\n  }\n\n  protected applyWebGLEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    if (!this.gl || !this.program || !this.webglCanvas) {\n      return null;\n    }\n\n    // 使用基类提供的WebGL状态设置\n    this.setupWebGLState(canvas);\n\n    // 如果没有粒子，提取粒子数据\n    if (this.particles.length === 0) {\n      this.extractParticles(canvas);\n    }\n\n    // 更新粒子物理\n    this.updateParticles(canvas);\n\n    const gl = this.gl;\n\n    // 启用混合\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    gl.useProgram(this.program);\n\n    // 准备粒子数据并绘制\n    this.prepareAndDrawParticles(gl);\n\n    return this.webglCanvas;\n  }\n\n  // Canvas 2D回退实现 - 简化版本，主要用于兼容性\n  protected applyCanvas2DEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    const output = this.createOutputCanvas(canvas);\n    if (!output) {\n      return null;\n    }\n\n    const { canvas: outputCanvas, ctx } = output;\n\n    // 简化的粒子效果：使用透明度和简单变换模拟粒子消散\n    const progress = this.currentAnimationRatio;\n\n    // 根据效果类型应用不同的Canvas 2D模拟\n    switch (this.particleConfig.effectType) {\n      case 'explode':\n        this.applyCanvas2DExplode(ctx, canvas, progress);\n        break;\n      case 'gravity':\n        this.applyCanvas2DGravity(ctx, canvas, progress);\n        break;\n      case 'vortex':\n        this.applyCanvas2DVortex(ctx, canvas, progress);\n        break;\n      default:\n        // 默认简单透明度淡出\n        ctx.globalAlpha = Math.max(0, 1 - progress);\n        ctx.drawImage(canvas, 0, 0);\n    }\n\n    return outputCanvas;\n  }\n\n  /**\n   * 从canvas提取粒子数据\n   */\n  private extractParticles(canvas: HTMLCanvasElement): void {\n    const tempCanvas = ImageProcessUtils.createTempCanvas(canvas.width, canvas.height, 1);\n    const tempCtx = tempCanvas.getContext('2d');\n    if (!tempCtx) {\n      return;\n    }\n\n    // 绘制原始图像到临时canvas\n    tempCtx.drawImage(canvas, 0, 0, tempCanvas.width, tempCanvas.height);\n\n    // 获取图像数据\n    const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);\n    const data = imageData.data;\n\n    this.particles = [];\n\n    // 计算采样步长\n    const step = Math.max(\n      1,\n      Math.floor(Math.sqrt((tempCanvas.width * tempCanvas.height) / (this.particleConfig.count * 1.5)))\n    );\n\n    for (let y = 0; y < tempCanvas.height; y += step) {\n      for (let x = 0; x < tempCanvas.width; x += step) {\n        const index = (y * tempCanvas.width + x) * 4;\n\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        // 只创建非透明像素的粒子\n        if (a > 5) {\n          // 将坐标转换回原始canvas尺寸\n          const realX = (x / tempCanvas.width) * canvas.width;\n          const realY = (y / tempCanvas.height) * canvas.height;\n\n          const particle: ParticleData = {\n            x: realX,\n            y: realY,\n            originX: realX,\n            originY: realY,\n            vx: 0,\n            vy: 0,\n            r: r / 255,\n            g: g / 255,\n            b: b / 255,\n            a: Math.max(0.6, a / 255),\n            life: 1.0,\n            size: this.particleConfig.size * (1 + Math.random() * 0.5)\n          };\n\n          this.particles.push(particle);\n        }\n      }\n    }\n  }\n\n  /**\n   * 更新粒子物理模拟\n   */\n  private updateParticles(canvas: HTMLCanvasElement): void {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const progress = this.currentAnimationRatio;\n    const duration = this.getDurationFromParent();\n    const isShortAnimation = duration < 2000;\n    const timeMultiplier = isShortAnimation ? Math.max(1.5, 3000 / duration) : 1.0;\n    const intensityBoost = isShortAnimation ? Math.min(2.0, 2000 / duration) : 1.0;\n\n    this.particles.forEach(particle => {\n      const dx = particle.x - centerX;\n      const dy = particle.y - centerY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const angle = Math.atan2(dy, dx);\n\n      // 根据效果类型应用不同的物理力\n      this.applyParticleForces(particle, angle, distance, progress, intensityBoost, canvas);\n\n      // 更新粒子属性\n      this.updateParticleProperties(particle, progress, isShortAnimation, timeMultiplier, intensityBoost);\n    });\n  }\n\n  /**\n   * 根据效果类型应用粒子力\n   */\n  private applyParticleForces(\n    particle: ParticleData,\n    angle: number,\n    distance: number,\n    progress: number,\n    intensityBoost: number,\n    canvas: HTMLCanvasElement\n  ): void {\n    const time = this.getAnimationTime();\n\n    switch (this.particleConfig.effectType) {\n      case 'explode':\n        const explodeIntensity = progress * this.particleConfig.strength * intensityBoost * 5;\n        particle.vx += Math.cos(angle) * explodeIntensity;\n        particle.vy += Math.sin(angle) * explodeIntensity;\n        break;\n\n      case 'gravity':\n        this.applyGravityEffect(particle, progress, intensityBoost, canvas, time);\n        break;\n\n      case 'vortex':\n        this.applyVortexEffect(particle, progress, intensityBoost, canvas, angle, distance);\n        break;\n    }\n  }\n\n  /**\n   * 应用重力效果\n   */\n  private applyGravityEffect(\n    particle: ParticleData,\n    progress: number,\n    intensityBoost: number,\n    canvas: HTMLCanvasElement,\n    time: number\n  ): void {\n    const gravityThreshold = ((particle.originX + particle.originY * 0.7) / (canvas.width + canvas.height)) * 0.8;\n\n    if (progress > gravityThreshold) {\n      const gravityProgress = (progress - gravityThreshold) / (1 - gravityThreshold);\n      const gravityForce = this.particleConfig.strength * gravityProgress * gravityProgress * 12 * intensityBoost;\n\n      particle.vy += gravityForce;\n\n      // 添加水平随机扰动\n      const turbulence = Math.sin(time * 3 + particle.originX * 0.02) * Math.cos(time * 2 + particle.originY * 0.015);\n      particle.vx += turbulence * this.particleConfig.strength * 2 * intensityBoost;\n    }\n  }\n\n  /**\n   * 应用漩涡效果\n   */\n  private applyVortexEffect(\n    particle: ParticleData,\n    progress: number,\n    intensityBoost: number,\n    canvas: HTMLCanvasElement,\n    angle: number,\n    distance: number\n  ): void {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    const spiralAngle = angle + progress * Math.PI * 0.8;\n    const targetRadius = distance + progress * Math.max(canvas.width, canvas.height) * 0.7 * 1.8;\n\n    const targetX = centerX + Math.cos(spiralAngle) * targetRadius;\n    const targetY = centerY + Math.sin(spiralAngle) * targetRadius;\n\n    const baseForce = progress * this.particleConfig.strength * 0.08 * intensityBoost;\n\n    particle.vx += (targetX - particle.x) * baseForce;\n    particle.vy += (targetY - particle.y) * baseForce;\n  }\n\n  /**\n   * 更新粒子生命周期属性\n   */\n  private updateParticleProperties(\n    particle: ParticleData,\n    progress: number,\n    isShortAnimation: boolean,\n    timeMultiplier: number,\n    intensityBoost: number\n  ): void {\n    // 应用阻力\n    const dragCoeff = isShortAnimation ? 0.99 : 0.98;\n    particle.vx *= dragCoeff;\n    particle.vy *= dragCoeff;\n\n    // 更新位置\n    particle.x += particle.vx;\n    particle.y += particle.vy;\n\n    // 更新生命值和透明度\n    if (isShortAnimation) {\n      const lifeDecayRate = Math.max(0.1, 0.5 / timeMultiplier);\n      particle.life = Math.max(0, 1 - progress * lifeDecayRate);\n      particle.a = Math.max(0.2, particle.life * Math.min(1, particle.a * 1.2));\n      particle.size = Math.max(this.particleConfig.size * 0.7, this.particleConfig.size * (0.5 + particle.life * 0.5));\n    } else {\n      particle.life = Math.max(0, 1 - progress * 0.2);\n      particle.a = Math.max(0.1, particle.life * Math.min(1, particle.a * 1.5));\n      particle.size = Math.max(this.particleConfig.size * 0.5, this.particleConfig.size * (0.3 + particle.life * 0.7));\n    }\n  }\n\n  /**\n   * 准备粒子数据并绘制\n   */\n  private prepareAndDrawParticles(gl: WebGLRenderingContext): void {\n    const positions = new Float32Array(this.particles.length * 2);\n    const colors = new Float32Array(this.particles.length * 4);\n    const sizes = new Float32Array(this.particles.length);\n\n    this.particles.forEach((particle, i) => {\n      positions[i * 2] = particle.x;\n      positions[i * 2 + 1] = particle.y;\n\n      colors[i * 4] = particle.r;\n      colors[i * 4 + 1] = particle.g;\n      colors[i * 4 + 2] = particle.b;\n      colors[i * 4 + 3] = Math.max(0.1, particle.a);\n\n      sizes[i] = Math.max(6, particle.size * 1.5);\n    });\n\n    // 更新缓冲区\n    this.updateParticleBuffers(gl, positions, colors, sizes);\n\n    // 设置uniforms\n    this.setParticleUniforms(gl);\n\n    // 绘制粒子\n    gl.drawArrays(gl.POINTS, 0, this.particles.length);\n\n    // 清理临时缓冲区\n    this.cleanupTempBuffers(gl);\n  }\n\n  /**\n   * 更新粒子缓冲区\n   */\n  private updateParticleBuffers(\n    gl: WebGLRenderingContext,\n    positions: Float32Array,\n    colors: Float32Array,\n    sizes: Float32Array\n  ): void {\n    // 位置缓冲区\n    if (!this.positionBuffer) {\n      this.positionBuffer = gl.createBuffer();\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.DYNAMIC_DRAW);\n\n    const positionLocation = gl.getAttribLocation(this.program, 'a_position');\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // 颜色缓冲区\n    if (!this.colorBuffer) {\n      this.colorBuffer = gl.createBuffer();\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.DYNAMIC_DRAW);\n\n    const colorLocation = gl.getAttribLocation(this.program, 'a_color');\n    gl.enableVertexAttribArray(colorLocation);\n    gl.vertexAttribPointer(colorLocation, 4, gl.FLOAT, false, 0, 0);\n\n    // 大小缓冲区\n    const sizeBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, sizeBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, sizes, gl.DYNAMIC_DRAW);\n\n    const sizeLocation = gl.getAttribLocation(this.program, 'a_size');\n    gl.enableVertexAttribArray(sizeLocation);\n    gl.vertexAttribPointer(sizeLocation, 1, gl.FLOAT, false, 0, 0);\n\n    // 保存临时缓冲区引用，用于清理\n    (this as any)._tempSizeBuffer = sizeBuffer;\n  }\n\n  /**\n   * 设置粒子着色器uniforms\n   */\n  private setParticleUniforms(gl: WebGLRenderingContext): void {\n    const resolutionLocation = gl.getUniformLocation(this.program, 'u_resolution');\n    const timeLocation = gl.getUniformLocation(this.program, 'u_time');\n    const forceStrengthLocation = gl.getUniformLocation(this.program, 'u_forceStrength');\n    const effectTypeLocation = gl.getUniformLocation(this.program, 'u_effectType');\n\n    gl.uniform2f(resolutionLocation, this.webglCanvas.width, this.webglCanvas.height);\n    gl.uniform1f(timeLocation, this.getAnimationTime());\n    gl.uniform1f(forceStrengthLocation, this.particleConfig.strength);\n\n    const effectTypeMap: { [key: string]: number } = {\n      explode: 0,\n      vortex: 1,\n      gravity: 2\n    };\n    gl.uniform1i(effectTypeLocation, effectTypeMap[this.particleConfig.effectType] || 0);\n  }\n\n  /**\n   * 清理临时缓冲区\n   */\n  private cleanupTempBuffers(gl: WebGLRenderingContext): void {\n    const tempSizeBuffer = (this as any)._tempSizeBuffer;\n    if (tempSizeBuffer) {\n      gl.deleteBuffer(tempSizeBuffer);\n      delete (this as any)._tempSizeBuffer;\n    }\n  }\n\n  // Canvas 2D回退实现的具体方法\n\n  /**\n   * Canvas 2D爆炸效果模拟\n   */\n  private applyCanvas2DExplode(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement, progress: number): void {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    // 简单的放大和透明度模拟爆炸效果\n    ctx.save();\n    ctx.globalAlpha = Math.max(0, 1 - progress);\n    ctx.translate(centerX, centerY);\n    const scale = 1 + progress * 0.5;\n    ctx.scale(scale, scale);\n    ctx.translate(-centerX, -centerY);\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Canvas 2D重力效果模拟\n   */\n  private applyCanvas2DGravity(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement, progress: number): void {\n    // 使用垂直偏移和透明度模拟重力下落\n    ctx.save();\n    ctx.globalAlpha = Math.max(0, 1 - progress);\n    const offsetY = progress * canvas.height * 0.3;\n    ctx.drawImage(canvas, 0, offsetY);\n    ctx.restore();\n  }\n\n  /**\n   * Canvas 2D漩涡效果模拟\n   */\n  private applyCanvas2DVortex(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement, progress: number): void {\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    // 使用旋转和透明度模拟漩涡效果\n    ctx.save();\n    ctx.globalAlpha = Math.max(0, 1 - progress);\n    ctx.translate(centerX, centerY);\n    ctx.rotate(progress * Math.PI * 2);\n    ctx.translate(-centerX, -centerY);\n    ctx.drawImage(canvas, 0, 0);\n    ctx.restore();\n  }\n}\n"]}