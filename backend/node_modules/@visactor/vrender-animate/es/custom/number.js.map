{"version":3,"sources":["../src/custom/number.ts"],"names":[],"mappings":"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","file":"number.js","sourcesContent":["import type { EasingType, IAnimate, IStep } from '@visactor/vrender-core';\nimport { ACustomAnimate } from './custom-animate';\n\n/**\n * 数字增加动画，支持string; number; xx%; xx,xxx; xxx.xx%\n * 也支持通过formatTemplate参数指定格式化模板，如 \"{{var}}m\"、\"${{var}}\"\n * format和formatTemplate可以同时生效，先应用format再应用模板\n */\nexport class IncreaseCount extends ACustomAnimate<{ text: string | number }> {\n  declare valid: boolean;\n\n  private fromNumber: number;\n  private toNumber: number;\n  private decimalLength: number;\n  private format: string;\n  private formatTemplate: string | null = null;\n\n  constructor(\n    from: { text: string | number },\n    to: { text: string | number },\n    duration: number,\n    easing: EasingType,\n    // 支持外部控制小数位数以及格式化\n    // format控制数字本身的格式化方式\n    // formatTemplate可以定义模板字符串如 \"{{var}}m\"、\"${{var}}\"，两者可以同时使用\n    params?: {\n      decimalLength?: number;\n      format?: 'percent' | 'thousandth' | 'none';\n      formatTemplate?: string;\n    }\n  ) {\n    super(from, to, duration, easing, params);\n    this.decimalLength = params?.decimalLength;\n\n    // 检查是否提供了格式化模板\n    if (params?.formatTemplate && params.formatTemplate.includes('{{var}}')) {\n      this.formatTemplate = params.formatTemplate;\n    }\n  }\n\n  onFirstRun(): void {\n    const fromProps = this.getLastProps();\n    const toProps = this.getEndProps();\n    const fromText = fromProps.text ?? 0;\n    const toText = toProps.text ?? 0;\n\n    // 初始化解析结果\n    this.valid = true;\n    let fromNum = 0;\n    let toNum = 0;\n    let fromFormat = '';\n    let toFormat = '';\n    let maxDecimalLength = 0;\n\n    // 解析fromText\n    if (typeof fromText === 'number') {\n      fromNum = fromText;\n      const str = fromText.toString();\n      const decimalPart = str.split('.')[1] || '';\n      maxDecimalLength = Math.max(maxDecimalLength, decimalPart.length);\n    } else if (typeof fromText === 'string') {\n      // 检查是否是百分比\n      if (fromText.endsWith('%')) {\n        fromFormat = '%';\n        const numStr = fromText.substring(0, fromText.length - 1);\n        // 去除可能的千分位逗号\n        const cleanNumStr = numStr.replace(/,/g, '');\n        fromNum = parseFloat(cleanNumStr) / 100;\n        if (isNaN(fromNum)) {\n          this.valid = false;\n          return;\n        }\n        const decimalPart = cleanNumStr.split('.')[1] || '';\n        maxDecimalLength = Math.max(maxDecimalLength, decimalPart.length + 2); // 百分比需要加2\n      } else {\n        // 处理普通数字或带千分位逗号的数字\n        const cleanNumStr = fromText.replace(/,/g, '');\n        fromNum = parseFloat(cleanNumStr);\n        if (isNaN(fromNum)) {\n          this.valid = false;\n          return;\n        }\n        // 检查是否有千分位\n        if (fromText.includes(',')) {\n          fromFormat = ',';\n        }\n        const decimalPart = cleanNumStr.split('.')[1] || '';\n        maxDecimalLength = Math.max(maxDecimalLength, decimalPart.length);\n      }\n    } else {\n      this.valid = false;\n      return;\n    }\n\n    // 解析toText\n    if (typeof toText === 'number') {\n      toNum = toText;\n      const str = toText.toString();\n      const decimalPart = str.split('.')[1] || '';\n      maxDecimalLength = Math.max(maxDecimalLength, decimalPart.length);\n    } else if (typeof toText === 'string') {\n      // 检查是否是百分比\n      if (toText.endsWith('%')) {\n        toFormat = '%';\n        const numStr = toText.substring(0, toText.length - 1);\n        // 去除可能的千分位逗号\n        const cleanNumStr = numStr.replace(/,/g, '');\n        toNum = parseFloat(cleanNumStr) / 100;\n        if (isNaN(toNum)) {\n          this.valid = false;\n          return;\n        }\n        const decimalPart = cleanNumStr.split('.')[1] || '';\n        maxDecimalLength = Math.max(maxDecimalLength, decimalPart.length + 2); // 百分比需要加2\n      } else {\n        // 处理普通数字或带千分位逗号的数字\n        const cleanNumStr = toText.replace(/,/g, '');\n        toNum = parseFloat(cleanNumStr);\n        if (isNaN(toNum)) {\n          this.valid = false;\n          return;\n        }\n        // 检查是否有千分位\n        if (toText.includes(',')) {\n          toFormat = ',';\n        }\n        const decimalPart = cleanNumStr.split('.')[1] || '';\n        maxDecimalLength = Math.max(maxDecimalLength, decimalPart.length);\n      }\n    } else {\n      this.valid = false;\n      return;\n    }\n\n    // 设置最终格式\n    // 检查是否有外部传入的格式\n    if (this.params?.format) {\n      // 使用外部传入的格式，将外部格式映射到内部格式\n      switch (this.params.format) {\n        case 'percent':\n          this.format = '%';\n          break;\n        case 'thousandth':\n          this.format = ',';\n          break;\n        case 'none':\n          this.format = '';\n          break;\n        default:\n          // 如果传入了未知格式，则使用自动检测的格式\n          this.format = toFormat || fromFormat;\n      }\n\n      // 如果外部指定了百分比格式，但输入不是百分比，需要适配\n      if (this.format === '%' && toFormat !== '%' && fromFormat !== '%') {\n        // 不需要除以100，因为输入不是百分比\n        if (this.decimalLength === undefined) {\n          // 默认百分比显示2位小数\n          this.decimalLength = 2;\n        }\n      }\n\n      // 如果外部指定了不用百分比格式，但输入是百分比，需要适配\n      if (this.format !== '%' && (toFormat === '%' || fromFormat === '%')) {\n        // 需要乘以100，因为输入是百分比但不显示为百分比\n        fromNum = fromNum * 100;\n        toNum = toNum * 100;\n      }\n    } else {\n      // 自动检测格式，优先使用toFormat，如果to没有特殊格式则使用fromFormat\n      this.format = toFormat || fromFormat;\n    }\n\n    // 设置fromNumber和toNumber\n    this.fromNumber = fromNum;\n    this.toNumber = toNum;\n\n    // 如果没有传入decimalLength，则根据输入格式设置\n    if (this.decimalLength === undefined) {\n      this.decimalLength = maxDecimalLength;\n    }\n  }\n\n  onEnd(cb?: (animate: IAnimate, step: IStep) => void): void {\n    super.onEnd(cb);\n    if (!cb) {\n      this.props && this.target.setAttributes(this.props as any);\n    }\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    if (!this.valid) {\n      return;\n    }\n    // 插值计算当前数值\n    const currentNumber = this.fromNumber + (this.toNumber - this.fromNumber) * ratio;\n\n    // 根据格式和小数位格式化数字\n    let formattedText: string | number = '';\n    const format = this.format;\n\n    // 首先格式化数字值（保留小数位）\n    // 对于百分比，乘以100\n    const adjustedNumber = format === '%' ? currentNumber * 100 : currentNumber;\n    // 保留指定小数位\n    const numberWithDecimals = adjustedNumber.toFixed(this.decimalLength);\n    // 如果小数位全是0，转为整数\n    let formattedNumber: string | number = numberWithDecimals;\n    if (parseFloat(numberWithDecimals) === Math.floor(parseFloat(numberWithDecimals))) {\n      formattedNumber = Math.floor(parseFloat(numberWithDecimals));\n    }\n\n    // 应用基本格式（百分比、千分位）\n    let formattedWithBasicFormat: string | number;\n    if (format === '%') {\n      // 百分比格式\n      formattedWithBasicFormat = `${formattedNumber}%`;\n    } else if (format === ',') {\n      // 千分位格式\n      const parts = formattedNumber.toString().split('.');\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      formattedWithBasicFormat = parts.join('.');\n    } else {\n      // 普通数字格式\n      formattedWithBasicFormat = formattedNumber;\n    }\n\n    // 应用模板（如果存在）\n    if (this.formatTemplate) {\n      // 使用模板格式化\n      formattedText = this.formatTemplate.replace('{{var}}', formattedWithBasicFormat.toString());\n    } else {\n      // 不使用模板，直接使用基本格式的结果\n      formattedText = formattedWithBasicFormat;\n    }\n\n    // 更新图形的text属性\n    this.target.setAttribute('text', formattedText);\n  }\n}\n"]}