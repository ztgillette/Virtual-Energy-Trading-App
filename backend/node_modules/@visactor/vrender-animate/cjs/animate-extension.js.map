{"version":3,"sources":["../src/animate-extension.ts"],"names":[],"mappings":"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","file":"animate-extension.js","sourcesContent":["// 1. 支持animate函数\n// 2. 支持animates map\n// 2. 支持animatedAttribute 为所有动画的最终结果（loop为INFINITY的动画不算）\n// 3. 支持finalAttribute 为所有动画的最终结果（animatedAttribute 合并了 graphic.attribute之后的最终结果）\n// 3. 重载Graphic的getAttributes方法，根据参数getAttributes(final = true)返回finalAttribute = {}; merge(finalAttribute, graphic.attribute, animatedAttribute)，\n// animatedAttribute为所有动画的最终结果（loop为INFINITY的动画不算）\n\nimport type { IGraphicAnimateParams, IAnimate } from '@visactor/vrender-core';\nimport { Animate } from './animate';\nimport { DefaultTimeline, defaultTimeline } from './timeline';\nimport { DefaultTicker } from './ticker/default-ticker';\nimport type { IAnimationConfig } from './executor/executor';\nimport { AnimateExecutor } from './executor/animate-executor';\n\n// 基于性能考虑，每次调用animate函数，都会设置animatedAttribute为null，每次getAttributes(true)会根据animatedAttribute属性判断是否需要重新计算animatedAttribute。\nexport class AnimateExtension {\n  declare finalAttribute: Record<string, any>;\n  _animateExecutor: AnimateExecutor | null;\n\n  declare animates: Map<string | number, IAnimate>;\n\n  getAttributes(final: boolean = false) {\n    if (final && this.finalAttribute) {\n      return this.finalAttribute;\n    }\n    return (this as any).attribute;\n  }\n\n  animate(params?: IGraphicAnimateParams) {\n    const animate = new Animate(\n      params?.id,\n      params?.timeline ?? ((this as any).stage && (this as any).stage.getTimeline()) ?? defaultTimeline,\n      params?.slience\n    );\n\n    animate.bind(this as any);\n    if (params) {\n      const { onStart, onEnd, onRemove } = params;\n      onStart != null && animate.onStart(onStart);\n      onEnd != null && animate.onEnd(onEnd);\n      onRemove != null && animate.onRemove(onRemove);\n    }\n\n    // TODO 考虑性能问题\n    (this as any).stage?.ticker.start();\n\n    return animate;\n  }\n\n  createTimeline() {\n    return new DefaultTimeline();\n  }\n\n  createTicker(stage: any) {\n    return new DefaultTicker(stage);\n  }\n\n  setFinalAttributes(finalAttribute: Record<string, any>) {\n    if (!this.finalAttribute) {\n      this.finalAttribute = {};\n    }\n    Object.assign(this.finalAttribute, finalAttribute);\n  }\n\n  initFinalAttributes(finalAttribute: Record<string, any>) {\n    this.finalAttribute = finalAttribute;\n  }\n\n  initAnimateExecutor(): void {\n    if (!this._animateExecutor) {\n      this._animateExecutor = new AnimateExecutor(this as any);\n    }\n  }\n\n  /**\n   * Apply animation configuration to the component\n   * @param config Animation configuration\n   * @returns This component instance\n   */\n  executeAnimation(config: IAnimationConfig): this {\n    this.initAnimateExecutor();\n    this._animateExecutor.execute(config);\n    return this;\n  }\n\n  /**\n   * Apply animations to multiple components\n   * @param configs Animation configurations\n   * @returns This component instance\n   */\n  executeAnimations(configs: IAnimationConfig[]): this {\n    this.initAnimateExecutor();\n    configs.forEach(config => {\n      this._animateExecutor.execute(config);\n    });\n    return this;\n  }\n\n  protected getFinalAttribute() {\n    return this.finalAttribute;\n  }\n\n  // TODO prev是兼容原本VGrammar函数的一个参数，用于动画中获取上一次属性，目前的逻辑中应该不需要，直接去当前帧的属性即可\n  getGraphicAttribute(key: string, prev: boolean = false) {\n    if (!prev && this.finalAttribute) {\n      return this.finalAttribute[key];\n    }\n    return (this as any).attribute[key];\n  }\n\n  pauseAnimation(deep: boolean = false) {\n    this.animates && this.animates.forEach(animate => animate.pause());\n    if (deep && (this as any).isContainer) {\n      (this as any).forEachChildren((child: any) => {\n        child.pauseAnimation(deep);\n      });\n    }\n  }\n\n  resumeAnimation(deep: boolean = false) {\n    this.animates && this.animates.forEach(animate => animate.resume());\n    if (deep && (this as any).isContainer) {\n      (this as any).forEachChildren((child: any) => {\n        child.resumeAnimation(deep);\n      });\n    }\n  }\n\n  stopAnimation(deep: boolean = false) {\n    this.animates && this.animates.forEach(animate => animate.stop());\n    if (deep && (this as any).isContainer) {\n      (this as any).forEachChildren((child: any) => {\n        child.stopAnimation(deep);\n      });\n    }\n  }\n}\n"]}