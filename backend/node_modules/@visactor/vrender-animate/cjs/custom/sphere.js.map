{"version":3,"sources":["../src/custom/sphere.ts"],"names":[],"mappings":"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","file":"sphere.js","sourcesContent":["import { pi, pi2 } from '@visactor/vutils';\nimport { ACustomAnimate } from './custom-animate';\n\ntype RotateSphereParams =\n  | {\n      center: { x: number; y: number; z: number };\n      r: number;\n      cb?: (out: any) => void;\n    }\n  | (() => any);\n\nexport class RotateBySphereAnimate extends ACustomAnimate<any> {\n  declare params: RotateSphereParams;\n  declare theta: number;\n  declare phi: number;\n\n  onBind(): void {\n    super.onBind();\n\n    // const to: Record<string, number> = {};\n    // const from: Record<string, number> = this.from ?? {};\n\n    // 用于入场的时候设置属性（因为有动画的时候VChart不会再设置属性了）\n\n    // this.props = to;\n    this.propKeys = ['x', 'y', 'z', 'alpha', 'zIndex'];\n    // this.from = from;\n    // this.to = to;\n  }\n\n  onFirstRun(): void {\n    super.onFirstRun();\n    const finalAttribute = this.target.getFinalAttribute();\n    if (finalAttribute) {\n      this.target.setAttributes(finalAttribute);\n    }\n  }\n\n  onStart(): void {\n    super.onStart();\n    const { center, r } = typeof this.params === 'function' ? this.params() : this.params;\n    const startX = this.target.finalAttribute.x;\n    const startY = this.target.finalAttribute.y;\n    const startZ = this.target.finalAttribute.z;\n    const phi = Math.acos((startY - center.y) / r);\n    let theta = Math.acos((startX - center.x) / r / Math.sin(phi));\n    if (startZ - center.z < 0) {\n      theta = pi2 - theta;\n    }\n    this.theta = theta;\n    this.phi = phi;\n  }\n\n  onEnd() {\n    return;\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    if (this.phi == null || this.theta == null) {\n      return;\n    }\n    const target = this.target;\n    const { center, r, cb } = typeof this.params === 'function' ? this.params() : this.params;\n    const deltaAngle = Math.PI * 2 * ratio;\n    const theta = this.theta + deltaAngle;\n    const phi = this.phi;\n    const x = r * Math.sin(phi) * Math.cos(theta) + center.x;\n    const y = r * Math.cos(phi) + center.y;\n    const z = r * Math.sin(phi) * Math.sin(theta) + center.z;\n    target.attribute.x = x;\n    target.attribute.y = y;\n    target.attribute.z = z;\n    // out.beta = phi;\n    target.attribute.alpha = theta + pi / 2;\n    while (target.attribute.alpha > pi2) {\n      target.attribute.alpha -= pi2;\n    }\n    target.attribute.alpha = pi2 - target.attribute.alpha;\n\n    target.attribute.zIndex = target.attribute.z * -10000;\n    cb && cb(out);\n  }\n}\n"]}