{"version":3,"sources":["../src/custom/disappear/base/ImageProcessUtils.ts"],"names":[],"mappings":"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","file":"ImageProcessUtils.js","sourcesContent":["import { vglobal } from '@visactor/vrender-core';\n\n/**\n * 图像处理工具类，公共的图像处理逻辑\n */\nexport class ImageProcessUtils {\n  /**\n   * 创建临时Canvas用于图像处理\n   */\n  static createTempCanvas(width: number, height: number, dpr?: number): HTMLCanvasElement {\n    return vglobal.createCanvas({\n      width,\n      height,\n      dpr: dpr || vglobal.devicePixelRatio\n    });\n  }\n\n  /**\n   * 复制图像数据\n   */\n  static cloneImageData(imageData: ImageData): ImageData {\n    const clonedData = new Uint8ClampedArray(imageData.data);\n    return new ImageData(clonedData, imageData.width, imageData.height);\n  }\n\n  /**\n   * 线性插值\n   */\n  static lerp(start: number, end: number, t: number): number {\n    return start * (1 - t) + end * t;\n  }\n\n  /**\n   * 平滑步进函数\n   */\n  static smoothstep(edge0: number, edge1: number, x: number): number {\n    const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));\n    return t * t * (3 - 2 * t);\n  }\n\n  /**\n   * 计算两点之间的距离\n   */\n  static distance(x1: number, y1: number, x2: number, y2: number): number {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * 归一化角度到0-1范围\n   */\n  static normalizeAngle(angle: number): number {\n    return (angle + Math.PI) / (2 * Math.PI);\n  }\n\n  /**\n   * 基于像素网格的噪声函数\n   */\n  static pixelNoise(x: number, y: number, pixelSize: number): number {\n    if (pixelSize <= 0) {\n      return 0;\n    }\n\n    const gridX = Math.floor(x / pixelSize) * pixelSize;\n    const gridY = Math.floor(y / pixelSize) * pixelSize;\n\n    const n = Math.sin(gridX * 12.9898 + gridY * 78.233) * 43758.5453;\n    return n - Math.floor(n);\n  }\n\n  /**\n   * 生成噪声纹理数据\n   */\n  static generateNoiseTexture(width: number, height: number): Uint8Array {\n    const data = new Uint8Array(width * height);\n    for (let i = 0; i < data.length; i++) {\n      data[i] = Math.floor(Math.random() * 256);\n    }\n    return data;\n  }\n\n  /**\n   * 应用CSS滤镜（如果支持）\n   */\n  static applyCSSFilter(canvas: HTMLCanvasElement, filter: string): HTMLCanvasElement {\n    const outputCanvas = this.createTempCanvas(canvas.width, canvas.height);\n    const ctx = outputCanvas.getContext('2d');\n    if (!ctx) {\n      return canvas;\n    }\n\n    ctx.filter = filter;\n    ctx.drawImage(canvas, 0, 0);\n    ctx.filter = 'none';\n\n    return outputCanvas;\n  }\n\n  /**\n   * 提取颜色通道\n   */\n  static extractChannel(imageData: ImageData, channelIndex: number): ImageData {\n    const { data, width, height } = imageData;\n    const channelData = new Uint8ClampedArray(data.length);\n\n    for (let i = 0; i < data.length; i += 4) {\n      // 清空所有通道\n      channelData[i] = 0; // R\n      channelData[i + 1] = 0; // G\n      channelData[i + 2] = 0; // B\n      channelData[i + 3] = data[i + 3]; // 保持Alpha通道\n\n      // 只保留指定通道的数据\n      if (channelIndex >= 0 && channelIndex <= 2) {\n        channelData[i + channelIndex] = data[i + channelIndex];\n      }\n    }\n\n    return new ImageData(channelData, width, height);\n  }\n\n  /**\n   * 混合两个图像数据\n   */\n  static blendImageData(imageData1: ImageData, imageData2: ImageData, ratio: number): ImageData {\n    const { data: data1, width, height } = imageData1;\n    const { data: data2 } = imageData2;\n    const result = new Uint8ClampedArray(data1.length);\n\n    for (let i = 0; i < data1.length; i += 4) {\n      result[i] = Math.round(this.lerp(data1[i], data2[i], ratio)); // R\n      result[i + 1] = Math.round(this.lerp(data1[i + 1], data2[i + 1], ratio)); // G\n      result[i + 2] = Math.round(this.lerp(data1[i + 2], data2[i + 2], ratio)); // B\n      result[i + 3] = Math.round(this.lerp(data1[i + 3], data2[i + 3], ratio)); // A\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * 计算像素亮度\n   */\n  static getLuminance(r: number, g: number, b: number): number {\n    return r * 0.299 + g * 0.587 + b * 0.114;\n  }\n\n  /**\n   * 应用褐色调效果\n   */\n  static applySepiaToPixel(r: number, g: number, b: number): [number, number, number] {\n    const sepiaR = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);\n    const sepiaG = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);\n    const sepiaB = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);\n    return [sepiaR, sepiaG, sepiaB];\n  }\n\n  /**\n   * 动态计算强度（基于动画时间的线性增长）\n   */\n  static calculateDynamicStrength(baseStrength: number, animationTime: number): number {\n    // 时间范围0-2π，标准化到0-1\n    return baseStrength * (animationTime / (Math.PI * 2));\n  }\n}\n\n/**\n * WebGL着色器片段库\n */\nexport class ShaderLibrary {\n  /**\n   * 标准顶点着色器\n   */\n  static readonly STANDARD_VERTEX_SHADER = `\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n    varying vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n\n  /**\n   * 常用的着色器函数库\n   */\n  static readonly SHADER_FUNCTIONS = `\n    // 亮度计算函数\n    float luminance(vec3 color) {\n      return dot(color, vec3(0.299, 0.587, 0.114));\n    }\n\n    // 褐色调函数\n    vec3 sepia(vec3 color) {\n      float r = color.r * 0.393 + color.g * 0.769 + color.b * 0.189;\n      float g = color.r * 0.349 + color.g * 0.686 + color.b * 0.168;\n      float b = color.r * 0.272 + color.g * 0.534 + color.b * 0.131;\n      return vec3(r, g, b);\n    }\n\n    // 线性插值函数\n    float lerp(float a, float b, float t) {\n      return a * (1.0 - t) + b * t;\n    }\n\n\n    // 简单噪声函数\n    float pixelNoise(vec2 coord, float pixelSize) {\n      vec2 gridCoord = floor(coord / pixelSize) * pixelSize;\n      return fract(sin(dot(gridCoord, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n\n    // 动态强度计算\n    float calculateDynamicStrength(float baseStrength, float time) {\n      return baseStrength * (time / 6.28318531); // 2π\n    }\n  `;\n}\n"]}