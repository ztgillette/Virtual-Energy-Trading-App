{"version":3,"sources":["../src/custom/disappear/grayscale.ts"],"names":[],"mappings":"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","file":"grayscale.js","sourcesContent":["import type { EasingType } from '@visactor/vrender-core';\nimport { HybridEffectBase } from './base/CustomEffectBase';\nimport { ImageProcessUtils, ShaderLibrary } from './base/ImageProcessUtils';\n\nexport interface ColorEffectConfig {\n  effectType: 'grayscale' | 'sepia';\n  strength: number;\n  useWebGL: boolean;\n}\n/**\n * 灰度/褐色调消失动画效果 - 重构版\n * 使用HybridEffectBase实现WebGL和Canvas 2D双重支持\n */\nexport class Grayscale extends HybridEffectBase {\n  private colorConfig: Required<ColorEffectConfig>;\n\n  constructor(from: null, to: null, duration: number, easing: EasingType, params: any) {\n    super(from, to, duration, easing, params);\n\n    // 获取strength并限制在0-1范围内\n    const rawStrength = params?.options?.strength !== undefined ? params.options.strength : 1.0;\n    const clampedStrength = Math.max(0, Math.min(1, rawStrength));\n\n    this.colorConfig = {\n      effectType: params?.options?.effectType || 'grayscale', // 'grayscale' | 'sepia'\n      strength: clampedStrength, // 限制在 0.0 - 1.0 范围内\n      useWebGL: params?.options?.useWebGL !== undefined ? params.options.useWebGL : true // 是否使用WebGL实现\n    };\n  }\n\n  /**\n   * WebGL实现：高性能着色器颜色转换\n   */\n  protected getShaderSources(): { vertex: string; fragment: string } | null {\n    const vertexShader = ShaderLibrary.STANDARD_VERTEX_SHADER;\n\n    const fragmentShader = `\n      precision mediump float;\n      uniform sampler2D u_texture;\n      uniform float u_time;\n      uniform float u_strength;\n      uniform int u_effectType;\n      uniform vec2 u_resolution;\n      varying vec2 v_texCoord;\n\n      ${ShaderLibrary.SHADER_FUNCTIONS}\n\n      void main() {\n        vec2 uv = v_texCoord;\n        vec4 originalColor = texture2D(u_texture, uv);\n        vec3 color = originalColor.rgb;\n\n        // 计算动态强度\n        float dynamicStrength = calculateDynamicStrength(u_strength, u_time);\n\n        if (u_effectType == 0) {\n          // 灰度效果\n          float gray = luminance(color);\n          vec3 grayColor = vec3(gray);\n          color = mix(color, grayColor, dynamicStrength);\n        } else if (u_effectType == 1) {\n          // 褐色调效果\n          vec3 sepiaColor = sepia(color);\n          color = mix(color, sepiaColor, dynamicStrength);\n        }\n\n        gl_FragColor = vec4(color, originalColor.a);\n      }\n    `;\n\n    return { vertex: vertexShader, fragment: fragmentShader };\n  }\n\n  protected applyWebGLEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    if (!this.gl || !this.program || !this.webglCanvas) {\n      return null;\n    }\n\n    // 使用基类提供的公共方法\n    this.setupWebGLState(canvas);\n\n    // 创建纹理\n    const texture = this.createTextureFromCanvas(canvas);\n    if (!texture) {\n      return null;\n    }\n\n    // 创建顶点缓冲区\n    const vertexBuffer = this.createFullScreenQuad();\n    if (!vertexBuffer) {\n      this.gl.deleteTexture(texture);\n      return null;\n    }\n\n    try {\n      // 使用着色器程序\n      this.gl.useProgram(this.program);\n\n      // 设置顶点属性\n      this.setupVertexAttributes();\n\n      // 设置uniform变量\n      this.setColorUniforms();\n\n      // 绘制\n      this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n\n      return this.webglCanvas;\n    } finally {\n      // 清理资源\n      this.gl.deleteTexture(texture);\n      this.gl.deleteBuffer(vertexBuffer);\n    }\n  }\n\n  /**\n   * 设置颜色效果的uniform变量\n   */\n  private setColorUniforms(): void {\n    if (!this.gl || !this.program) {\n      return;\n    }\n\n    const currentTime = this.getAnimationTime();\n\n    // 获取uniform位置\n    const timeLocation = this.gl.getUniformLocation(this.program, 'u_time');\n    const strengthLocation = this.gl.getUniformLocation(this.program, 'u_strength');\n    const effectTypeLocation = this.gl.getUniformLocation(this.program, 'u_effectType');\n    const resolutionLocation = this.gl.getUniformLocation(this.program, 'u_resolution');\n\n    // 设置uniform值\n    this.gl.uniform1f(timeLocation, currentTime);\n    this.gl.uniform1f(strengthLocation, this.colorConfig.strength);\n    this.gl.uniform2f(resolutionLocation, this.webglCanvas.width, this.webglCanvas.height);\n\n    // 效果类型映射\n    const effectTypeMap: { [key: string]: number } = {\n      grayscale: 0,\n      sepia: 1\n    };\n    this.gl.uniform1i(effectTypeLocation, effectTypeMap[this.colorConfig.effectType] || 0);\n  }\n\n  /**\n   * Canvas 2D实现：软件颜色转换\n   */\n  protected applyCanvas2DEffect(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    // 如果强度为0，创建原图副本\n    if (this.colorConfig.strength <= 0) {\n      const outputCanvas = this.createOutputCanvas(canvas);\n      return outputCanvas ? outputCanvas.canvas : null;\n    }\n\n    // 检查是否使用CSS Filter API（如果支持）\n    if (this.canUseCSSFilter()) {\n      return this.applyCSSFilter(canvas);\n    }\n\n    // 使用像素级处理\n    const outputCanvas = this.createOutputCanvas(canvas);\n    if (!outputCanvas) {\n      return null;\n    }\n\n    const { ctx } = outputCanvas;\n\n    try {\n      // 获取图像数据\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const currentTime = this.getAnimationTime();\n\n      // 应用对应的颜色效果\n      let processedImageData: ImageData;\n\n      switch (this.colorConfig.effectType) {\n        case 'grayscale':\n          processedImageData = this.applyGrayscaleEffect(imageData, this.colorConfig.strength, currentTime);\n          break;\n        case 'sepia':\n          processedImageData = this.applySepiaEffect(imageData, this.colorConfig.strength, currentTime);\n          break;\n        default:\n          processedImageData = this.applyGrayscaleEffect(imageData, this.colorConfig.strength, currentTime);\n      }\n\n      // 清空画布并绘制处理后的图像\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(processedImageData, 0, 0);\n\n      return outputCanvas.canvas;\n    } catch (error) {\n      console.warn('Canvas 2D color effect failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 检查是否可以使用CSS Filter API\n   */\n  private canUseCSSFilter(): boolean {\n    // 检查全局配置或浏览器支持\n    return !!(window as any).useFilterAPI && typeof CSS !== 'undefined' && CSS.supports?.('filter', 'grayscale(1)');\n  }\n\n  /**\n   * 使用CSS Filter API应用颜色效果\n   */\n  private applyCSSFilter(canvas: HTMLCanvasElement): HTMLCanvasElement | null {\n    try {\n      const outputCanvas = ImageProcessUtils.createTempCanvas(canvas.width, canvas.height);\n      const ctx = outputCanvas.getContext('2d');\n      if (!ctx) {\n        return null;\n      }\n\n      // 计算动态强度\n      const currentTime = this.getAnimationTime();\n      const dynamicStrength = ImageProcessUtils.calculateDynamicStrength(this.colorConfig.strength, currentTime);\n\n      // 应用CSS滤镜\n      let filterValue = '';\n      if (this.colorConfig.effectType === 'grayscale') {\n        filterValue = `grayscale(${Math.min(1, dynamicStrength)})`;\n      } else if (this.colorConfig.effectType === 'sepia') {\n        filterValue = `sepia(${Math.min(1, dynamicStrength)})`;\n      }\n\n      ctx.filter = filterValue;\n      ctx.drawImage(canvas, 0, 0);\n      ctx.filter = 'none';\n\n      return outputCanvas;\n    } catch (error) {\n      console.warn('CSS Filter API failed, falling back to pixel processing:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Canvas 2D灰度效果实现\n   */\n  private applyGrayscaleEffect(imageData: ImageData, strength: number, time: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data.length);\n\n    // 计算动态强度\n    const dynamicStrength = ImageProcessUtils.calculateDynamicStrength(strength, time);\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      // 使用标准亮度公式计算灰度值\n      const gray = ImageProcessUtils.getLuminance(r, g, b);\n\n      // 根据动态强度混合原色和灰度色\n      result[i] = Math.round(ImageProcessUtils.lerp(r, gray, dynamicStrength));\n      result[i + 1] = Math.round(ImageProcessUtils.lerp(g, gray, dynamicStrength));\n      result[i + 2] = Math.round(ImageProcessUtils.lerp(b, gray, dynamicStrength));\n      result[i + 3] = a;\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * Canvas 2D褐色调效果实现\n   */\n  private applySepiaEffect(imageData: ImageData, strength: number, time: number): ImageData {\n    const { data, width, height } = imageData;\n    const result = new Uint8ClampedArray(data.length);\n\n    // 计算动态强度\n    const dynamicStrength = ImageProcessUtils.calculateDynamicStrength(strength, time);\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      // 使用工具类计算褐色调\n      const [sepiaR, sepiaG, sepiaB] = ImageProcessUtils.applySepiaToPixel(r, g, b);\n\n      // 根据动态强度混合原色和褐色调\n      result[i] = Math.round(ImageProcessUtils.lerp(r, sepiaR, dynamicStrength));\n      result[i + 1] = Math.round(ImageProcessUtils.lerp(g, sepiaG, dynamicStrength));\n      result[i + 2] = Math.round(ImageProcessUtils.lerp(b, sepiaB, dynamicStrength));\n      result[i + 3] = a;\n    }\n\n    return new ImageData(result, width, height);\n  }\n\n  /**\n   * 重写主要渲染方法，添加CSS Filter快速路径\n   */\n  protected afterStageRender(stage: any, canvas: HTMLCanvasElement): HTMLCanvasElement | void | null | false {\n    // 检查是否使用CSS Filter API作为快速路径\n    if (this.canUseCSSFilter() && this.colorConfig.strength > 0) {\n      const cssResult = this.applyCSSFilter(canvas);\n      if (cssResult) {\n        return cssResult;\n      }\n    }\n\n    // 调用父类的智能渲染选择逻辑\n    return super.afterStageRender(stage, canvas);\n  }\n}\n"]}