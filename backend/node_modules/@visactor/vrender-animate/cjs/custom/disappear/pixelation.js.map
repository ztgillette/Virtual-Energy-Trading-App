{"version":3,"sources":["../src/custom/disappear/pixelation.ts"],"names":[],"mappings":"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","file":"pixelation.js","sourcesContent":["import type { EasingType } from '@visactor/vrender-core';\nimport { vglobal } from '@visactor/vrender-core';\nimport { DisappearAnimateBase } from './base/DisappearAnimateBase';\n\nexport interface PixelationConfig {\n  maxPixelSize?: number; // 最大像素化强度\n  method?: 'out' | 'in'; // 像素化方法：out为出场效果，in为入场效果\n}\n\nexport class Pixelation extends DisappearAnimateBase<any> {\n  private pixelationConfig: Required<PixelationConfig>;\n\n  constructor(from: null, to: null, duration: number, easing: EasingType, params: any) {\n    super(from, to, duration, easing, params);\n\n    this.pixelationConfig = {\n      maxPixelSize: params?.options?.maxPixelSize || 20,\n      method: params?.options?.method || 'out'\n    };\n  }\n\n  // Canvas 2D 降采样像素化\n  private applyDownsamplePixelation(canvas: HTMLCanvasElement, pixelSize: number): HTMLCanvasElement {\n    if (pixelSize <= 1) {\n      return canvas;\n    }\n\n    const { width, height } = canvas;\n\n    // 创建小尺寸的离屏Canvas\n    const smallWidth = Math.ceil(width / pixelSize);\n    const smallHeight = Math.ceil(height / pixelSize);\n\n    const smallCanvas = vglobal.createCanvas({\n      width: smallWidth,\n      height: smallHeight,\n      dpr: 1\n    });\n    const smallCtx = smallCanvas.getContext('2d');\n    if (!smallCtx) {\n      return canvas;\n    }\n\n    // 创建输出Canvas\n    const outputCanvas = vglobal.createCanvas({\n      width: width,\n      height: height,\n      dpr: vglobal.devicePixelRatio\n    });\n    const outputCtx = outputCanvas.getContext('2d');\n    if (!outputCtx) {\n      return canvas;\n    }\n\n    // 关闭图像平滑以获得清晰的像素块效果\n    smallCtx.imageSmoothingEnabled = false;\n    outputCtx.imageSmoothingEnabled = false;\n\n    // 将原图绘制到小Canvas上（自动降采样）\n    smallCtx.drawImage(canvas, 0, 0, smallWidth, smallHeight);\n\n    // 将小图放大绘制到输出Canvas上\n    outputCtx.drawImage(smallCanvas, 0, 0, width, height);\n\n    return outputCanvas;\n  }\n\n  private updateAnimationProgress(): number {\n    // 直接根据动画进度计算像素化强度\n\n    if (this.pixelationConfig.method === 'in') {\n      // 入场效果：从最大值逐渐减小到1\n      const currentPixelSize =\n        this.pixelationConfig.maxPixelSize - this.currentAnimationRatio * (this.pixelationConfig.maxPixelSize - 1);\n      return currentPixelSize;\n    }\n    // 退场效果：从1逐渐增加到最大值（默认行为）\n    const currentPixelSize = 1 + this.currentAnimationRatio * (this.pixelationConfig.maxPixelSize - 1);\n    return currentPixelSize;\n  }\n\n  protected afterStageRender(stage: any, canvas: HTMLCanvasElement): HTMLCanvasElement | void | null | false {\n    // 更新动画进度并获取当前像素化强度\n    const currentPixelSize = this.updateAnimationProgress();\n\n    // 如果像素化强度为1或更小，直接返回原图\n    if (currentPixelSize <= 1) {\n      return canvas;\n    }\n\n    // 直接使用降采样像素化方法\n    const result: HTMLCanvasElement = this.applyDownsamplePixelation(canvas, currentPixelSize);\n    return result;\n  }\n}\n"]}