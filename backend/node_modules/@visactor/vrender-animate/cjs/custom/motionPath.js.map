{"version":3,"sources":["../src/custom/motionPath.ts"],"names":[],"mappings":";;;AACA,qDAAkD;AAElD,MAAa,UAAW,SAAQ,+BAAmB;IASjD,YACE,IAAS,EACT,EAAO,EACP,QAAgB,EAChB,MAAkB,EAClB,MAMC;;QAED,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAC1C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC1C,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;YACnD,IAAI,CAAC,SAAS,GAAG,MAAA,MAAM,CAAC,SAAS,mCAAI,CAAC,CAAC;YACvC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;YACxC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;SACrB;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;QACpD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC;IACvB,CAAC;IAED,QAAQ,CAAC,GAAY,EAAE,KAAa,EAAE,GAAwB;QAC5D,MAAM,KAAK,GAAG,EAAS,CAAC;QAExB,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACpC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAC/C,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAChB,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;SACtC;QACD,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAkB,CAAC,CAAC;QACvE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;CACF;AArDD,gCAqDC","file":"motionPath.js","sourcesContent":["import type { CustomPath2D, IGraphic, EasingType } from '@visactor/vrender-core';\nimport { ACustomAnimate } from './custom-animate';\n\nexport class MotionPath extends ACustomAnimate<any> {\n  declare valid: boolean;\n  declare pathLength: number;\n  declare path: CustomPath2D;\n  declare distance: number;\n  declare totalLength: number;\n  declare initAngle: number;\n  declare changeAngle: boolean;\n  declare cb?: (from: any, to: any, ratio: number, target: IGraphic) => void;\n  constructor(\n    from: any,\n    to: any,\n    duration: number,\n    easing: EasingType,\n    params?: {\n      path: CustomPath2D;\n      distance: number;\n      cb?: (from: any, to: any, ratio: number, target: IGraphic) => void;\n      initAngle?: number;\n      changeAngle?: boolean;\n    }\n  ) {\n    super(from, to, duration, easing, params);\n    if (params) {\n      this.pathLength = params.path.getLength();\n      this.path = params.path;\n      this.distance = params.distance;\n      this.totalLength = this.distance * this.pathLength;\n      this.initAngle = params.initAngle ?? 0;\n      this.changeAngle = !!params.changeAngle;\n      this.cb = params.cb;\n    }\n  }\n\n  onBind(): void {\n    this.from = { x: 0, y: 0 };\n    this.to = this.path.getAttrAt(this.totalLength).pos;\n    this.props = this.to;\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    const attrs = {} as any;\n    // 计算位置\n    const at = this.totalLength * ratio;\n    const { pos, angle } = this.path.getAttrAt(at);\n    attrs.x = pos.x;\n    attrs.y = pos.y;\n    if (this.changeAngle) {\n      attrs.angle = angle + this.initAngle;\n    }\n    this.cb && this.cb(this.from, this.to, ratio, this.target as IGraphic);\n    this.target.setAttributes(attrs);\n  }\n}\n"]}