{"version":3,"sources":["../src/custom/input-text.ts"],"names":[],"mappings":"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","file":"input-text.js","sourcesContent":["import type { EasingType, IAnimate, IStep } from '@visactor/vrender-core';\nimport { ACustomAnimate } from './custom-animate';\n\n/**\n * 文本输入动画，实现类似打字机的字符逐个显示效果\n * 支持通过beforeText和afterText参数添加前缀和后缀\n * 支持通过showCursor参数显示光标，cursorChar自定义光标字符\n */\nexport class InputText extends ACustomAnimate<{ text: string }> {\n  declare valid: boolean;\n\n  private fromText: string = '';\n  private toText: string = '';\n  private showCursor: boolean = false;\n  private cursorChar: string = '|';\n  private blinkCursor: boolean = true;\n  private beforeText: string = '';\n  private afterText: string = '';\n\n  constructor(\n    from: { text: string },\n    to: { text: string },\n    duration: number,\n    easing: EasingType,\n    params?: {\n      showCursor?: boolean;\n      cursorChar?: string;\n      blinkCursor?: boolean;\n      beforeText?: string;\n      afterText?: string;\n    }\n  ) {\n    super(from, to, duration, easing, params);\n\n    // 配置光标相关选项\n    if (params?.showCursor !== undefined) {\n      this.showCursor = params.showCursor;\n    }\n    if (params?.cursorChar !== undefined) {\n      this.cursorChar = params.cursorChar;\n    }\n    if (params?.blinkCursor !== undefined) {\n      this.blinkCursor = params.blinkCursor;\n    }\n\n    // 配置前缀和后缀文本\n    if (params?.beforeText !== undefined) {\n      this.beforeText = params.beforeText;\n    }\n    if (params?.afterText !== undefined) {\n      this.afterText = params.afterText;\n    }\n  }\n\n  onFirstRun(): void {\n    const fromProps = this.getLastProps();\n    const toProps = this.getEndProps();\n    const fromText = fromProps.text ?? '';\n    const toText = toProps.text ?? '';\n\n    // 初始化解析结果\n    this.valid = true;\n\n    // 存储文本用于动画\n    this.fromText = fromText.toString();\n    this.toText = toText.toString();\n\n    // 确保to不为空\n    if (!this.toText && this.toText !== '') {\n      this.valid = false;\n      return;\n    }\n  }\n\n  onEnd(cb?: (animate: IAnimate, step: IStep) => void): void {\n    super.onEnd(cb);\n    if (!cb) {\n      // 动画结束时，显示完整文本（不带闪烁光标）\n      if (this.showCursor && !this.blinkCursor) {\n        // 如果有光标但不闪烁，保留光标\n        this.target.setAttribute('text', this.beforeText + this.toText + this.cursorChar + this.afterText);\n      } else {\n        // 不显示光标\n        this.target.setAttribute('text', this.beforeText + this.toText + this.afterText);\n      }\n    }\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    if (!this.valid) {\n      return;\n    }\n\n    // 计算当前应该显示的字符数量\n    const totalChars = this.toText.length;\n    const fromChars = this.fromText.length;\n\n    // 如果fromText比toText长，则是删除动画\n    // 否则是添加动画\n    let currentLength: number;\n    let currentText: string;\n\n    if (fromChars > totalChars) {\n      // 删除文本动画（从多到少）\n      currentLength = Math.round(fromChars - (fromChars - totalChars) * ratio);\n      currentText = this.fromText.substring(0, currentLength);\n    } else {\n      // 添加文本动画（从少到多）\n      currentLength = Math.round(fromChars + (totalChars - fromChars) * ratio);\n\n      // 如果fromText是toText的前缀，则直接使用toText的子串\n      if (this.toText.startsWith(this.fromText)) {\n        currentText = this.toText.substring(0, currentLength);\n      } else {\n        // 否则需要在fromText和toText之间进行过渡\n        if (currentLength <= fromChars) {\n          currentText = this.fromText.substring(0, currentLength);\n        } else {\n          currentText = this.toText.substring(0, currentLength - fromChars + Math.min(fromChars, currentLength));\n        }\n      }\n    }\n\n    // 构建最终显示的文本\n    let displayText = this.beforeText + currentText + this.afterText;\n\n    // 添加光标效果\n    if (this.showCursor) {\n      if (this.blinkCursor) {\n        // 闪烁效果：在动画期间，光标每半个周期闪烁一次\n        const blinkRate = 0.1; // 光标闪烁频率（每10%动画进度闪烁一次）\n        const showCursorNow = Math.floor(ratio / blinkRate) % 2 === 0;\n\n        if (showCursorNow) {\n          displayText = this.beforeText + currentText + this.cursorChar + this.afterText;\n        }\n      } else {\n        // 固定光标（不闪烁）\n        displayText = this.beforeText + currentText + this.cursorChar + this.afterText;\n      }\n    }\n\n    // 更新图形的text属性\n    this.target.setAttribute('text', displayText);\n  }\n}\n"]}