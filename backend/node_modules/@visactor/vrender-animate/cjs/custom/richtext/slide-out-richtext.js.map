{"version":3,"sources":["../src/custom/richtext/slide-out-richtext.ts"],"names":[],"mappings":"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","file":"slide-out-richtext.js","sourcesContent":["import { ACustomAnimate } from '../custom-animate';\nimport type { IRichTextCharacter, IAnimate, IStep, EasingType } from '@visactor/vrender-core';\nimport { RichText } from '@visactor/vrender-core';\n\n/**\n * 滑动富文本退出动画，文字会向指定方向滑出，同时逐字消失\n * 支持上、下、左、右四个方向\n * 支持按单词或字符退场\n */\nexport class SlideOutRichText extends ACustomAnimate<{ textConfig: IRichTextCharacter[] }> {\n  declare valid: boolean;\n\n  private fromTextConfig: IRichTextCharacter[] = [];\n  private toTextConfig: IRichTextCharacter[] = [];\n  private originalTextConfig: IRichTextCharacter[] = [];\n  private singleCharConfig: IRichTextCharacter[] = [];\n  private fadeOutDuration: number = 0.3; // 透明度渐变持续时间，以动画总时长的比例表示\n  private slideDirection: 'up' | 'down' | 'left' | 'right' = 'right'; // 滑动方向\n  private slideDistance: number = 30; // 滑动距离（像素）\n  private wordByWord: boolean = false; // 是否按单词为单位进行动画\n  // 默认正则表达式: 匹配英文单词(含中间连字符),连续中文字符,数字,以及独立的符号和空格\n  private wordRegex: RegExp = /[a-zA-Z]+(-[a-zA-Z]+)*|[\\u4e00-\\u9fa5]+|[0-9]+|[^\\s\\w\\u4e00-\\u9fa5]/g;\n  private wordGroups: number[][] = []; // 存储单词分组信息，每个数组包含属于同一单词的字符索引\n  private reverseOrder: boolean = false; // 是否反转字符/单词的消失顺序\n\n  constructor(\n    from: { textConfig: IRichTextCharacter[] },\n    to: { textConfig: IRichTextCharacter[] },\n    duration: number,\n    easing: EasingType,\n    params?: {\n      fadeOutDuration?: number;\n      slideDirection?: 'up' | 'down' | 'left' | 'right';\n      slideDistance?: number;\n      wordByWord?: boolean;\n      wordRegex?: RegExp;\n      reverseOrder?: boolean;\n    }\n  ) {\n    super(from, to, duration, easing, params);\n\n    // 配置透明度渐变效果\n    if (params?.fadeOutDuration !== undefined) {\n      this.fadeOutDuration = params.fadeOutDuration;\n    }\n\n    // 配置滑动方向和距离\n    if (params?.slideDirection !== undefined) {\n      this.slideDirection = params.slideDirection;\n    }\n    if (params?.slideDistance !== undefined) {\n      this.slideDistance = params.slideDistance;\n    }\n\n    // 配置按单词动画\n    if (params?.wordByWord !== undefined) {\n      this.wordByWord = params.wordByWord;\n    }\n    if (params?.wordRegex !== undefined) {\n      this.wordRegex = params.wordRegex;\n    }\n\n    // 配置顺序\n    if (params?.reverseOrder !== undefined) {\n      this.reverseOrder = params.reverseOrder;\n    }\n\n    this.propKeys = ['textConfig'];\n  }\n\n  onFirstRun(): void {\n    const fromProps = this.getLastProps();\n    const toProps = this.getEndProps();\n\n    // 存储原始配置\n    this.originalTextConfig = fromProps.textConfig ? [...fromProps.textConfig] : [];\n\n    // 初始化解析结果\n    this.valid = true;\n\n    // 确保from不为空\n    if (!this.originalTextConfig || this.originalTextConfig.length === 0) {\n      this.valid = false;\n      return;\n    }\n\n    // 将文本拆分为单个字符，使用RichText的静态方法\n    this.fromTextConfig = RichText.TransformTextConfig2SingleCharacter(this.originalTextConfig);\n\n    // 目标状态是空文本（或指定的目标）\n    this.toTextConfig =\n      toProps.textConfig && toProps.textConfig.length > 0\n        ? RichText.TransformTextConfig2SingleCharacter(toProps.textConfig)\n        : [];\n\n    // 创建单字符数组，用于动画初始状态\n    this.singleCharConfig = this.fromTextConfig.map(item => {\n      if ('text' in item) {\n        // 文本字符初始设置为完全可见且无偏移\n        return {\n          ...item,\n          opacity: 1,\n          dx: 0,\n          dy: 0\n        };\n      }\n      return { ...item, opacity: 1 };\n    });\n\n    // 如果启用按单词动画，则计算单词分组\n    if (this.wordByWord) {\n      this.calculateWordGroups();\n    }\n  }\n\n  // 计算单词分组\n  private calculateWordGroups(): void {\n    // 重置单词分组\n    this.wordGroups = [];\n\n    // 构建完整文本用于正则匹配\n    let fullText = '';\n    const charMap: Record<number, number> = {}; // 映射全文索引到字符配置索引\n    let fullTextIndex = 0;\n\n    // 构建全文和映射\n    this.fromTextConfig.forEach((item, configIndex) => {\n      if ('text' in item) {\n        const text = String(item.text);\n        fullText += text;\n        // 为每个字符创建映射\n        charMap[fullTextIndex] = configIndex;\n        fullTextIndex++;\n      }\n    });\n\n    // 使用正则表达式查找单词\n    let match;\n\n    // 重置正则表达式状态\n    this.wordRegex.lastIndex = 0;\n\n    while ((match = this.wordRegex.exec(fullText)) !== null) {\n      const wordStart = match.index;\n      const wordEnd = match.index + match[0].length;\n\n      // 找出属于这个单词的所有字符索引\n      const wordIndices = [];\n\n      for (let i = wordStart; i < wordEnd; i++) {\n        if (charMap[i] !== undefined) {\n          wordIndices.push(charMap[i]);\n        }\n      }\n\n      // 添加到单词分组\n      if (wordIndices.length > 0) {\n        this.wordGroups.push(wordIndices);\n      }\n    }\n\n    // 处理没有分配到任何单词的字符\n    const allocatedIndices = new Set<number>();\n    this.wordGroups.forEach(group => {\n      group.forEach(index => allocatedIndices.add(index));\n    });\n\n    for (let i = 0; i < this.fromTextConfig.length; i++) {\n      if ('text' in this.fromTextConfig[i] && !allocatedIndices.has(i)) {\n        // 单独为每个未分配的字符创建一个\"单词\"\n        this.wordGroups.push([i]);\n      }\n    }\n  }\n\n  // 根据滑动方向计算目标x偏移（最终位置）\n  private getTargetDx(): number {\n    switch (this.slideDirection) {\n      case 'left':\n        return -this.slideDistance;\n      case 'right':\n        return this.slideDistance;\n      default:\n        return 0;\n    }\n  }\n\n  // 根据滑动方向计算目标y偏移（最终位置）\n  private getTargetDy(): number {\n    switch (this.slideDirection) {\n      case 'up':\n        return -this.slideDistance;\n      case 'down':\n        return this.slideDistance;\n      default:\n        return 0;\n    }\n  }\n\n  onEnd(cb?: (animate: IAnimate, step: IStep) => void): void {\n    super.onEnd(cb);\n    if (!cb) {\n      // 动画结束时，应用最终textConfig（通常是空的或特定的toTextConfig）\n      if (this.toTextConfig.length > 0) {\n        this.target.setAttribute('textConfig', this.toTextConfig);\n      } else {\n        this.target.setAttribute('textConfig', []);\n      }\n    }\n  }\n\n  onUpdate(end: boolean, ratio: number, out: Record<string, any>): void {\n    if (!this.valid) {\n      return;\n    }\n\n    // 计算文本显示时间比例上限 - 为尾部字符的渐变和滑动效果留出时间\n    const maxTextShowRatio = 1 - this.fadeOutDuration;\n\n    let updatedTextConfig: IRichTextCharacter[];\n\n    if (this.wordByWord && this.wordGroups.length > 0) {\n      // 按单词动画\n      updatedTextConfig = this.updateByWord(ratio, maxTextShowRatio);\n    } else {\n      // 按字符动画\n      updatedTextConfig = this.updateByCharacter(ratio, maxTextShowRatio);\n    }\n\n    // 更新富文本的textConfig属性\n    this.target.setAttribute('textConfig', updatedTextConfig);\n  }\n\n  // 按单词更新文本配置\n  private updateByWord(ratio: number, maxTextShowRatio: number): IRichTextCharacter[] {\n    const totalGroups = this.wordGroups.length;\n    const updatedTextConfig = [...this.singleCharConfig];\n\n    // 处理单词分组\n    for (let groupIndex = 0; groupIndex < this.wordGroups.length; groupIndex++) {\n      // 计算这个单词组的消失时间点\n      let disappearTime;\n\n      if (this.reverseOrder) {\n        // 反转顺序 (与入场顺序相反)\n        if (this.slideDirection === 'left') {\n          // 从左到右的顺序 (第一个单词先消失)\n          disappearTime = (groupIndex / totalGroups) * maxTextShowRatio;\n        } else {\n          // 从右到左的顺序 (最后的单词先消失)\n          disappearTime = ((totalGroups - 1 - groupIndex) / totalGroups) * maxTextShowRatio;\n        }\n      } else {\n        // 标准顺序 (与入场顺序相同)\n        if (this.slideDirection === 'left') {\n          // 从右到左的顺序 (最后的单词先消失)\n          disappearTime = ((totalGroups - 1 - groupIndex) / totalGroups) * maxTextShowRatio;\n        } else {\n          // 从左到右的顺序 (第一个单词先消失)\n          disappearTime = (groupIndex / totalGroups) * maxTextShowRatio;\n        }\n      }\n\n      // 如果当前时间还没到显示这个单词的消失时间点，保持可见状态\n      if (ratio < disappearTime) {\n        for (const charIndex of this.wordGroups[groupIndex]) {\n          const item = updatedTextConfig[charIndex];\n          if ('text' in item) {\n            updatedTextConfig[charIndex] = {\n              ...item,\n              opacity: 1,\n              dx: 0,\n              dy: 0\n            };\n          }\n        }\n        continue;\n      }\n\n      // 计算动画进度（0-1之间）\n      const animProgress = (ratio - disappearTime) / this.fadeOutDuration;\n      const progress = Math.max(0, Math.min(1, animProgress));\n\n      // 计算当前偏移和透明度\n      const dx = this.getTargetDx() * progress;\n      const dy = this.getTargetDy() * progress;\n      const opacity = 1 - progress;\n\n      // 更新这个单词的所有字符\n      for (const charIndex of this.wordGroups[groupIndex]) {\n        const item = updatedTextConfig[charIndex];\n        if ('text' in item) {\n          updatedTextConfig[charIndex] = {\n            ...item,\n            opacity,\n            dx,\n            dy\n          };\n        }\n      }\n    }\n\n    return updatedTextConfig;\n  }\n\n  // 按字符更新文本配置\n  private updateByCharacter(ratio: number, maxTextShowRatio: number): IRichTextCharacter[] {\n    const totalItems = this.fromTextConfig.length;\n    const updatedTextConfig = [...this.singleCharConfig];\n\n    // 更新每个字符的状态\n    for (let index = 0; index < updatedTextConfig.length; index++) {\n      const item = updatedTextConfig[index];\n      if ('text' in item) {\n        // 计算每个字符的消失时间点\n        let disappearTime;\n\n        if (this.reverseOrder) {\n          // 反转入场顺序\n          if (this.slideDirection === 'left') {\n            // 从左到右的顺序 (第一个字符先消失)\n            disappearTime = (index / totalItems) * maxTextShowRatio;\n          } else {\n            // 从右到左的顺序 (最后的字符先消失)\n            disappearTime = ((totalItems - 1 - index) / totalItems) * maxTextShowRatio;\n          }\n        } else {\n          // 与入场顺序相同\n          if (this.slideDirection === 'left') {\n            // 从右到左的顺序 (最后的字符先消失)\n            disappearTime = ((totalItems - 1 - index) / totalItems) * maxTextShowRatio;\n          } else {\n            // 标准顺序 (第一个字符先消失)\n            disappearTime = (index / totalItems) * maxTextShowRatio;\n          }\n        }\n\n        // 如果当前时间还没到这个字符的消失时间点，保持可见状态\n        if (ratio < disappearTime) {\n          updatedTextConfig[index] = {\n            ...item,\n            opacity: 1,\n            dx: 0,\n            dy: 0\n          };\n          continue;\n        }\n\n        // 计算动画进度（0-1之间）\n        const animProgress = (ratio - disappearTime) / this.fadeOutDuration;\n        const progress = Math.max(0, Math.min(1, animProgress));\n\n        // 计算当前偏移和透明度\n        const dx = this.getTargetDx() * progress;\n        const dy = this.getTargetDy() * progress;\n        const opacity = 1 - progress;\n\n        updatedTextConfig[index] = {\n          ...item,\n          opacity,\n          dx,\n          dy\n        };\n      }\n    }\n\n    return updatedTextConfig;\n  }\n}\n"]}