import type { EasingType, IGraphic } from '@visactor/vrender-core';
import { ACustomAnimate } from './custom-animate';
export interface IRotateAnimationOptions {
    orient?: 'clockwise' | 'anticlockwise';
    angle?: number;
}
export declare const rotateIn: (graphic: IGraphic, options: IRotateAnimationOptions) => {
    from: {
        angle: number;
    };
    to: {
        angle: any;
    };
};
export declare const rotateOut: (graphic: IGraphic, options: IRotateAnimationOptions) => {
    from: {
        angle: any;
    };
    to: {
        angle: number;
    };
};
export declare class RotateBase extends ACustomAnimate<Record<string, number>> {
    valid: boolean;
    constructor(from: null, to: null, duration: number, easing: EasingType, params?: any);
    onUpdate(end: boolean, ratio: number, out: Record<string, any>): void;
}
export declare class RotateIn extends RotateBase {
    onBind(): void;
}
export declare class RotateOut extends RotateBase {
    onBind(): void;
}
