{"version":3,"sources":["../src/state/graphic-extension.ts"],"names":[],"mappings":"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","file":"graphic-extension.js","sourcesContent":["import type { IGraphic } from '@visactor/vrender-core';\nimport type { IAnimationState } from './types';\nimport { AnimationStateManager, AnimationStateStore } from './animation-state';\nimport type { IAnimationConfig } from '../executor/executor';\n\n/**\n * 将动画状态方法作为混入扩展 Graphic 的类\n */\nexport class GraphicStateExtension {\n  _getAnimationStateManager(graphic: IGraphic): AnimationStateManager {\n    if (!(graphic as any)._animationStateManager) {\n      // Create the appropriate manager type based on whether this is a group\n      (graphic as any)._animationStateManager = new AnimationStateManager(graphic);\n    }\n    return (graphic as any)._animationStateManager;\n  }\n  _getAnimationStateStore(graphic: IGraphic): AnimationStateStore {\n    if (!(graphic as any)._animationStateStore) {\n      // Create the appropriate manager type based on whether this is a group\n      (graphic as any)._animationStateStore = new AnimationStateStore(graphic);\n    }\n    return (graphic as any)._animationStateStore;\n  }\n\n  /**\n   * 注册一个动画状态\n   */\n  registerAnimationState(state: IAnimationState): this {\n    this._getAnimationStateStore(this as unknown as IGraphic).registerState(state);\n    return this;\n  }\n\n  /**\n   * 应用一个动画状态到图形\n   */\n  applyAnimationState(\n    state: string[],\n    animationConfig: (IAnimationState | IAnimationState[])[],\n    callback?: (empty?: boolean) => void\n  ): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).applyState(state, animationConfig, callback);\n    return this;\n  }\n\n  /**\n   * 应用出现动画状态\n   * @param animationConfig 动画配置\n   * @param callback 动画结束回调\n   */\n  applyAppearState(animationConfig: IAnimationConfig, callback?: () => void): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).applyAppearState(animationConfig, callback);\n    return this;\n  }\n\n  /**\n   * 应用消失动画状态\n   * @param animationConfig 动画配置\n   * @param callback 动画结束回调\n   */\n  applyDisappearState(animationConfig: IAnimationConfig, callback?: () => void): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).applyDisappearState(animationConfig, callback);\n    return this;\n  }\n\n  /**\n   * 应用更新动画状态\n   * @param animationConfig 动画配置\n   * @param callback 动画结束回调\n   */\n  applyUpdateState(animationConfig: IAnimationConfig, callback?: () => void): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).applyUpdateState(animationConfig, callback);\n    return this;\n  }\n\n  /**\n   * 应用高亮动画状态\n   * @param animationConfig 动画配置\n   * @param callback 动画结束回调\n   */\n  applyHighlightState(animationConfig: IAnimationConfig, callback?: () => void): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).applyHighlightState(animationConfig, callback);\n    return this;\n  }\n\n  /**\n   * 应用取消高亮动画状态\n   * @param animationConfig 动画配置\n   * @param callback 动画结束回调\n   */\n  applyUnhighlightState(animationConfig: IAnimationConfig, callback?: () => void): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).applyUnhighlightState(animationConfig, callback);\n    return this;\n  }\n\n  /**\n   * 停止一个动画状态\n   */\n  stopAnimationState(state: string, type?: 'start' | 'end' | Record<string, any>, deep: boolean = false): this {\n    this._getAnimationStateManager(this as unknown as IGraphic).stopState(state, type);\n    if (deep && (this as any).isContainer) {\n      (this as any).forEachChildren((child: any) => {\n        child.stopAnimationState(state, type, deep);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * 清除图形上的所有动画状态\n   */\n  clearAnimationStates(): this {\n    const stateManager = (this as any)._animationStateManager as AnimationStateManager;\n    if (stateManager) {\n      stateManager.clearState();\n    }\n    return this;\n  }\n\n  reApplyAnimationState(state: string, deep: boolean = false): this {\n    const stateManager = (this as any)._animationStateManager as AnimationStateManager;\n    if (stateManager) {\n      stateManager.reApplyState(state);\n    }\n    if (deep && (this as any).isContainer) {\n      (this as any).forEachChildren((child: any) => {\n        child.reApplyAnimationState(state, deep);\n      });\n    }\n    return this;\n  }\n\n  // /**\n  //  * 获取图形当前的动画状态\n  //  */\n  // getCurrentAnimationState(): string[] | null {\n  //   return this._getAnimationStateManager(this as unknown as IGraphic).getCurrentState();\n  // }\n\n  /**\n   * 继承\n   */\n  static extend(graphic: IGraphic): IGraphic {\n    const extension = new GraphicStateExtension();\n    extension._getAnimationStateManager(graphic);\n    return graphic;\n  }\n}\n"]}