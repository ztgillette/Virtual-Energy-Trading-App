{"version":3,"sources":["../src/state/animation-states-registry.ts"],"names":[],"mappings":"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","file":"animation-states-registry.js","sourcesContent":["import type { IGraphic } from '@visactor/vrender-core';\n\ninterface ITransitionResult {\n  allowTransition: boolean;\n  stopOriginalTransition: boolean;\n}\n\n/**\n * 注册动画状态切换的转换函数\n */\nexport type TransitionFunction = (graphic: IGraphic, fromState: string) => ITransitionResult;\n\n/**\n * 动画状态切换的注册表\n * 管理所有图形的动画状态切换逻辑\n */\nexport class AnimationTransitionRegistry {\n  private static instance: AnimationTransitionRegistry;\n\n  // 源状态到目标状态的映射，每个目标状态都有一个转换函数\n  private transitions: Map<string, Map<string, TransitionFunction>> = new Map();\n\n  constructor() {\n    this.registerDefaultTransitions();\n  }\n\n  /**\n   * 获取注册表的单例实例\n   */\n  static getInstance(): AnimationTransitionRegistry {\n    if (!AnimationTransitionRegistry.instance) {\n      AnimationTransitionRegistry.instance = new AnimationTransitionRegistry();\n    }\n    return AnimationTransitionRegistry.instance;\n  }\n\n  /**\n   * 注册默认的转换规则\n   */\n  private registerDefaultTransitions(): void {\n    // appear动画，可以被任何动画覆盖，但不会停止（disappear、exit除外）\n    this.registerTransition('appear', '*', () => ({\n      allowTransition: true,\n      stopOriginalTransition: false\n    }));\n    // appear 动画碰到appear动画，什么都不会发生\n    this.registerTransition('appear', 'appear', () => ({\n      allowTransition: false,\n      stopOriginalTransition: false\n    }));\n    this.registerTransition('appear', 'disappear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    this.registerTransition('appear', 'exit', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n\n    // 循环动画（normal），可以被任何动画覆盖，但不会停止（disappear、exit除外）\n    this.registerTransition('normal', '*', () => ({\n      allowTransition: true,\n      stopOriginalTransition: false\n    }));\n    // 循环动画碰到循环动画，什么都不会发生\n    this.registerTransition('normal', 'normal', () => ({\n      allowTransition: false,\n      stopOriginalTransition: false\n    }));\n    this.registerTransition('normal', 'disappear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    this.registerTransition('normal', 'exit', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n\n    // 退出动画不能被覆盖或停止(disappear除外)\n    this.registerTransition('exit', '*', () => ({\n      allowTransition: false,\n      stopOriginalTransition: false\n    }));\n    this.registerTransition('exit', 'disappear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    // 退出动画碰到enter动画，会立即停止\n    this.registerTransition('exit', 'enter', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    // 退出动画碰到退出，什么都不会发生\n    this.registerTransition('exit', 'exit', () => ({\n      allowTransition: false,\n      stopOriginalTransition: false\n    }));\n\n    // enter 动画可以被任何动画覆盖，但不会停止（exit、disappear除外）\n    this.registerTransition('enter', '*', () => ({\n      allowTransition: true,\n      stopOriginalTransition: false\n    }));\n    // enter 动画碰到enter动画，什么都不会发生\n    this.registerTransition('enter', 'enter', () => ({\n      allowTransition: false,\n      stopOriginalTransition: false\n    }));\n    this.registerTransition('enter', 'disappear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    this.registerTransition('enter', 'exit', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n\n    // disappear 动画碰到任何动画，什么都不会发生（appear除外）\n    this.registerTransition('disappear', '*', () => ({\n      allowTransition: false,\n      stopOriginalTransition: false\n    }));\n\n    // disappear 动画碰到appear动画，会立即停止\n    this.registerTransition('disappear', 'appear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n\n    this.registerTransition('update', '*', () => ({\n      allowTransition: true,\n      stopOriginalTransition: false\n    }));\n    // update动画碰到disappear动画，会停止，也会被覆盖\n    this.registerTransition('update', 'disappear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    // update动画碰到exit动画，会停止，也会被覆盖\n    this.registerTransition('update', 'exit', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n\n    // state动画，可以被任何动画覆盖，但不会停止（disappear、exit除外）\n    this.registerTransition('state', '*', () => ({\n      allowTransition: true,\n      stopOriginalTransition: false\n    }));\n    // state动画碰到disappear动画，会停止，也会被覆盖\n    this.registerTransition('state', 'disappear', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n    // state动画碰到exit动画，会停止，也会被覆盖\n    this.registerTransition('state', 'exit', () => ({\n      allowTransition: true,\n      stopOriginalTransition: true\n    }));\n  }\n\n  /**\n   * 检查两个状态之间是否允许转换\n   */\n  isTransitionAllowed(fromState: string, toState: string, graphic: IGraphic): ITransitionResult {\n    // 直接转换规则\n    let func = this.transitions.get(fromState)?.get(toState);\n    if (func) {\n      return func(graphic, fromState);\n    }\n\n    // 状态到通配符\n    func = this.transitions.get(fromState)?.get('*');\n    if (func) {\n      return func(graphic, fromState);\n    }\n\n    // 通配符到状态\n    func = this.transitions.get('*')?.get(toState);\n    if (func) {\n      return func(graphic, fromState);\n    }\n\n    // 通配符到通配符\n    func = this.transitions.get('*')?.get('*');\n    if (func) {\n      return func(graphic, fromState);\n    }\n\n    // 默认允许转换\n    return {\n      allowTransition: true,\n      stopOriginalTransition: true\n    };\n  }\n\n  /**\n   * 注册两个状态之间的转换\n   */\n  registerTransition(fromState: string, toState: string, transition: TransitionFunction): void {\n    let fromStateMap = this.transitions.get(fromState);\n\n    if (!fromStateMap) {\n      fromStateMap = new Map();\n      this.transitions.set(fromState, fromStateMap);\n    }\n\n    fromStateMap.set(toState, transition);\n  }\n}\n\n// 初始化单例转换注册表\nconst transitionRegistry = AnimationTransitionRegistry.getInstance();\n\nexport { transitionRegistry };\n"]}