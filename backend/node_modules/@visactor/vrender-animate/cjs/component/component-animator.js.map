{"version":3,"sources":["../src/component/component-animator.ts"],"names":[],"mappings":"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","file":"component-animator.js","sourcesContent":["import type { IGraphic, IAnimate } from '@visactor/vrender-core';\nimport { AnimateExecutor } from '../executor/animate-executor';\nimport type { IAnimationConfig } from '../executor/executor';\n\n/**\n * Animation task that contains information about a scheduled animation\n */\ninterface IAnimationTask {\n  graphic: IGraphic;\n  config: IAnimationConfig;\n  animate?: IAnimate[];\n}\n\n/**\n * ComponentAnimator provides a way to orchestrate animations across child elements\n * with centralized lifecycle management\n */\nexport class ComponentAnimator {\n  private component: IGraphic;\n  private tasks: IAnimationTask[] = [];\n  private started: boolean = false;\n  private completed: number = 0;\n  private totalDuration: number = 0;\n  private onStartCallbacks: (() => void)[] = [];\n  private onEndCallbacks: (() => void)[] = [];\n  private onUpdateCallbacks: ((progress: number) => void)[] = [];\n\n  /**\n   * Creates a new ComponentAnimator\n   * @param component The component or group containing elements to animate\n   */\n  constructor(component: IGraphic) {\n    this.component = component;\n  }\n\n  /**\n   * Add animation for a specific graphic element\n   * @param graphic The graphic element to animate\n   * @param config Animation configuration\n   * @param delay Optional delay before starting this animation (in ms)\n   * @returns This ComponentAnimator for chaining\n   */\n  animate(graphic: IGraphic, config: IAnimationConfig): ComponentAnimator {\n    if (this.started) {\n      console.warn('Cannot add animations after animation has started');\n      return this;\n    }\n\n    this.tasks.push({\n      graphic,\n      config\n    });\n\n    return this;\n  }\n\n  /**\n   * Add a callback to be called when animation starts\n   * @param callback Function to call when animation starts\n   * @returns This ComponentAnimator for chaining\n   */\n  onStart(callback: () => void): ComponentAnimator {\n    this.onStartCallbacks.push(callback);\n    return this;\n  }\n\n  /**\n   * Add a callback to be called when animation ends\n   * @param callback Function to call when animation ends\n   * @returns This ComponentAnimator for chaining\n   */\n  onEnd(callback: () => void): ComponentAnimator {\n    this.onEndCallbacks.push(callback);\n    return this;\n  }\n\n  /**\n   * Add a callback to be called when animation updates\n   * @param callback Function to call when animation updates (receives progress from 0 to 1)\n   * @returns This ComponentAnimator for chaining\n   */\n  onUpdate(callback: (progress: number) => void): ComponentAnimator {\n    this.onUpdateCallbacks.push(callback);\n    return this;\n  }\n\n  /**\n   * Start all animations in this component animation\n   * @returns This ComponentAnimator\n   */\n  start(): ComponentAnimator {\n    if (this.started) {\n      console.warn('Animation has already started');\n      return this;\n    }\n\n    this.started = true;\n    this.completed = 0;\n\n    // Call onStart callbacks\n    this.onStartCallbacks.forEach(callback => callback());\n\n    // Empty animation case\n    if (this.tasks.length === 0) {\n      setTimeout(() => {\n        this.onEndCallbacks.forEach(callback => callback());\n      }, 0);\n      return this;\n    }\n\n    // Start all animations with their specified delays\n    this.tasks.forEach(task => {\n      const executor = new AnimateExecutor(task.graphic);\n\n      // Set up callbacks to track completion\n      executor.onEnd(() => {\n        this.completed++;\n        if (this.completed === this.tasks.length) {\n          this.onEndCallbacks.forEach(callback => callback());\n        }\n      });\n\n      const animate = executor.executeItem(task.config, task.graphic);\n      task.animate = animate;\n      animate.forEach(animate => {\n        this.totalDuration = Math.max(this.totalDuration, animate.getStartTime() + animate.getDuration());\n      });\n    });\n\n    return this;\n  }\n\n  deleteSelfAttr(key: string): void {\n    this.tasks.forEach(task => {\n      if (task.animate) {\n        task.animate.forEach(animate => animate.preventAttr(key));\n      }\n    });\n  }\n\n  /**\n   * Stop all animations in this component animation\n   * @param type Whether to jump to the end state or start state\n   * @returns This ComponentAnimator\n   */\n  stop(type?: 'start' | 'end'): ComponentAnimator {\n    this.tasks.forEach(task => {\n      if (task.animate) {\n        task.animate.forEach(animate => animate.stop(type));\n      }\n    });\n\n    // If not already completed, call end callbacks\n    if (this.started && this.completed !== this.tasks.length) {\n      this.onEndCallbacks.forEach(callback => callback());\n      this.completed = this.tasks.length;\n    }\n\n    return this;\n  }\n\n  /**\n   * Get total duration of all animations including delays\n   * @returns Total duration in milliseconds\n   */\n  getDuration(): number {\n    return this.totalDuration;\n  }\n}\n\n/**\n * Factory function to create a ComponentAnimator for a component\n * @param component The component or group to animate\n * @returns A new ComponentAnimator instance\n */\nexport function createComponentAnimator(component: IGraphic): ComponentAnimator {\n  return new ComponentAnimator(component);\n}\n"]}