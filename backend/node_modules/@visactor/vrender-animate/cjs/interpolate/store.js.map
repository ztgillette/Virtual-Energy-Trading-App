{"version":3,"sources":["../src/interpolate/store.ts"],"names":[],"mappings":";;;AACA,yDAA+G;AAC/G,qCAA6C;AAuD7C,MAAa,sBAAsB;IAAnC;QACE,YAAO,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAChG,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAChE,CAAC,CAAC;QACF,gBAAW,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACnG,MAAM,CAAC,SAAiB,CAAC,WAAW,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7E,CAAC,CAAC;QACF,gBAAW,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACpG,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC;QACF,kBAAa,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACtG,MAAM,CAAC,SAAS,CAAC,aAAa,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACtE,CAAC,CAAC;QACF,WAAM,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC/F,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,sBAAiB,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC1G,MAAM,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAC1E,CAAC,CAAC;QACF,kBAAa,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACtG,MAAM,CAAC,SAAS,CAAC,aAAa,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACtE,CAAC,CAAC;QACF,kBAAa,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACtG,MAAM,CAAC,SAAS,CAAC,aAAa,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACtE,CAAC,CAAC;QACF,eAAU,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACnG,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC,CAAC;QACF,SAAI,GAAG,CACL,GAAW,EACX,IAAsC,EACtC,EAAoC,EACpC,KAAa,EACb,IAAW,EACX,MAAgB,EAChB,EAAE;YACF,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,IAAA,+BAAgB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAQ,CAAC;QAC1E,CAAC,CAAC;QACF,aAAQ,GAAG,CACT,GAAW,EACX,IAAsC,EACtC,EAAoC,EACpC,KAAa,EACb,IAAW,EACX,MAAgB,EAChB,EAAE;YACF,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI;gBAC/C,CAAC,CAAE,IAAA,6CAA8B,EAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAS;gBACpG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;QAC9B,CAAC,CAAC;QACF,WAAM,GAAG,CACP,GAAW,EACX,IAAsC,EACtC,EAAoC,EACpC,KAAa,EACb,IAAW,EACX,MAAgB,EAChB,EAAE;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,IAAA,+BAAgB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC,CAAC;QACF,eAAU,GAAG,CACX,GAAW,EACX,IAAsC,EACtC,EAAoC,EACpC,KAAa,EACb,IAAW,EACX,MAAgB,EAChB,EAAE;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM;gBACnD,CAAC,CAAE,IAAA,6CAA8B,EAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAS;gBACxG,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QAChC,CAAC,CAAC;QAGF,UAAK,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC7F,MAAM,CAAC,SAAiB,CAAC,KAAK,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACrE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,WAAM,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC9F,MAAM,CAAC,SAAiB,CAAC,MAAM,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACtE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,MAAC,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC1F,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,MAAC,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC1F,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,OAAE,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC3F,MAAM,CAAC,SAAS,CAAC,EAAE,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,OAAE,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC3F,MAAM,CAAC,SAAS,CAAC,EAAE,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,UAAK,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC9F,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC5D,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,WAAM,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC/F,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,WAAM,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC/F,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAC3B,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC;QACF,cAAS,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAClG,MAAM,CAAC,SAAS,CAAC,SAAS,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,eAAU,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAClG,MAAM,CAAC,SAAiB,CAAC,UAAU,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC1E,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,aAAQ,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAChG,MAAM,CAAC,SAAiB,CAAC,QAAQ,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACxE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,WAAM,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC9F,MAAM,CAAC,SAAiB,CAAC,MAAM,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACtE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,gBAAW,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACnG,MAAM,CAAC,SAAiB,CAAC,WAAW,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC3E,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,gBAAW,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YACnG,MAAM,CAAC,SAAiB,CAAC,WAAW,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC3E,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,SAAI,GAAG,CAAC,GAAW,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC5F,MAAM,CAAC,SAAiB,CAAC,IAAI,GAAG,IAAA,0BAAiB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACpE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QACF,WAAM,GAAG,CAAC,GAAW,EAAE,IAAkB,EAAE,EAAgB,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB,EAAE,EAAE;YAC1G,MAAM,CAAC,SAAiB,CAAC,MAAM,GAAG,IAAA,kCAAmB,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACxE,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;IACJ,CAAC;CAAA;AArJD,wDAqJC;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AAEnE,SAAgB,uBAAuB,CAAC,GAAW,EAAE,IAAS,EAAE,EAAO,EAAE,KAAa,EAAE,IAAW,EAAE,MAAgB;IACnH,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC/C,MAAM,CAAC,SAAiB,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC;QAC5D,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;QAChF,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACzB,KAAK,GAAG,KAAK,CAAC;gBACd,MAAM;aACP;YACD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;QACD,IAAI,KAAK,EAAE;YACR,MAAM,CAAC,SAAiB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;SAC3C;QACD,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAtBD,0DAsBC","file":"store.js","sourcesContent":["import type { IGraphic, IStep } from '@visactor/vrender-core';\nimport { interpolateColor, interpolatePureColorArrayToStr, pointsInterpolation } from '@visactor/vrender-core';\nimport { interpolateNumber } from './number';\nimport type { IPointLike } from '@visactor/vutils';\n\n// 直接设置，触发 隐藏类（Hidden Class）优化：\n/**\n *\nconst a = { type: 1 };\nconst ITERATIONS = 1e7; // 测试次数\n\n// 动态生成 keys 数组（确保引擎无法静态推断 key）\nconst keys = [];\nfor (let i = 0; i < ITERATIONS; i++) {\n    // 通过条件确保 key 动态变化（但实际始终为 'type'，避免属性缺失的开销）\n    keys.push(Math.random() < 0 ? 'other' : 'type');\n}\n\n// 测试字面量访问\nfunction testLiteral() {\n    let sum = 0;\n    for (let i = 0; i < ITERATIONS; i++) {\n        const key = keys[i]; // 读取 key（与动态测试完全一致）\n        sum += a.type;       // 差异仅在此处：使用字面量访问\n    }\n    return sum;\n}\n\n// 测试变量动态访问\nfunction testDynamic() {\n    let sum = 0;\n    for (let i = 0; i < ITERATIONS; i++) {\n        const key = keys[i]; // 读取 key（与字面量测试完全一致）\n        sum += a[key];       // 差异仅在此处：使用变量访问\n    }\n    return sum;\n}\n\n// 预热（避免 JIT 编译影响）\ntestLiteral();\ntestDynamic();\n\n// 正式测试\nconsole.time('literal');\ntestLiteral();\nconsole.timeEnd('literal');\n\nconsole.time('dynamic');\ntestDynamic();\nconsole.timeEnd('dynamic');\n\n\n// out:\n// literal: 7.1259765625 ms\n// dynamic: 9.322998046875 ms\n */\n\nexport class InterpolateUpdateStore {\n  opacity = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.opacity = interpolateNumber(from, to, ratio);\n  };\n  baseOpacity = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).baseOpacity = interpolateNumber(from, to, ratio);\n  };\n  fillOpacity = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.fillOpacity = interpolateNumber(from, to, ratio);\n  };\n  strokeOpacity = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.strokeOpacity = interpolateNumber(from, to, ratio);\n  };\n  zIndex = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.zIndex = interpolateNumber(from, to, ratio);\n  };\n  backgroundOpacity = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.backgroundOpacity = interpolateNumber(from, to, ratio);\n  };\n  shadowOffsetX = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.shadowOffsetX = interpolateNumber(from, to, ratio);\n  };\n  shadowOffsetY = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.shadowOffsetY = interpolateNumber(from, to, ratio);\n  };\n  shadowBlur = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.shadowBlur = interpolateNumber(from, to, ratio);\n  };\n  fill = (\n    key: string,\n    from: [number, number, number, number],\n    to: [number, number, number, number],\n    ratio: number,\n    step: IStep,\n    target: IGraphic\n  ) => {\n    target.attribute.fill = interpolateColor(from, to, ratio, false) as any;\n  };\n  fillPure = (\n    key: string,\n    from: [number, number, number, number],\n    to: [number, number, number, number],\n    ratio: number,\n    step: IStep,\n    target: IGraphic\n  ) => {\n    target.attribute.fill = step.fromParsedProps.fill\n      ? (interpolatePureColorArrayToStr(step.fromParsedProps.fill, step.toParsedProps.fill, ratio) as any)\n      : step.toParsedProps.fill;\n  };\n  stroke = (\n    key: string,\n    from: [number, number, number, number],\n    to: [number, number, number, number],\n    ratio: number,\n    step: IStep,\n    target: IGraphic\n  ) => {\n    target.attribute.stroke = interpolateColor(from, to, ratio, false);\n  };\n  strokePure = (\n    key: string,\n    from: [number, number, number, number],\n    to: [number, number, number, number],\n    ratio: number,\n    step: IStep,\n    target: IGraphic\n  ) => {\n    target.attribute.stroke = step.fromParsedProps.stroke\n      ? (interpolatePureColorArrayToStr(step.fromParsedProps.stroke, step.toParsedProps.stroke, ratio) as any)\n      : step.toParsedProps.stroke;\n  };\n\n  // 需要更新Bounds\n  width = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).width = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  height = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).height = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  x = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.x = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  y = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.y = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  dx = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.dx = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  dy = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.dy = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  angle = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.angle = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  scaleX = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.scaleX = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  scaleY = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.scaleY = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n    target.addUpdatePositionTag();\n  };\n  lineWidth = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    target.attribute.lineWidth = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  startAngle = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).startAngle = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  endAngle = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).endAngle = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  radius = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).radius = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  outerRadius = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).outerRadius = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  innerRadius = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).innerRadius = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  size = (key: string, from: number, to: number, ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).size = interpolateNumber(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n  points = (key: string, from: IPointLike[], to: IPointLike[], ratio: number, step: IStep, target: IGraphic) => {\n    (target.attribute as any).points = pointsInterpolation(from, to, ratio);\n    target.addUpdateBoundTag();\n  };\n}\n\nexport const interpolateUpdateStore = new InterpolateUpdateStore();\n\nexport function commonInterpolateUpdate(key: string, from: any, to: any, ratio: number, step: IStep, target: IGraphic) {\n  if (Number.isFinite(to) && Number.isFinite(from)) {\n    (target.attribute as any)[key] = from + (to - from) * ratio;\n    return true;\n  } else if (Array.isArray(to) && Array.isArray(from) && to.length === from.length) {\n    const nextList = [];\n    let valid = true;\n    for (let i = 0; i < to.length; i++) {\n      const v = from[i];\n      const val = v + (to[i] - v) * ratio;\n      if (!Number.isFinite(val)) {\n        valid = false;\n        break;\n      }\n      nextList.push(val);\n    }\n    if (valid) {\n      (target.attribute as any)[key] = nextList;\n    }\n    return true;\n  }\n  return false;\n}\n"]}