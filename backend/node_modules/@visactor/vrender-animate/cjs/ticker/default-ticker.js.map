{"version":3,"sources":["../src/ticker/default-ticker.ts"],"names":[],"mappings":"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","file":"default-ticker.js","sourcesContent":["import { EventEmitter } from '@visactor/vutils';\nimport type { IStage, ITimeline } from '@visactor/vrender-core';\nimport { application, PerformanceRAF, type ITickHandler, type ITicker, STATUS } from '@visactor/vrender-core';\n\nconst performanceRAF = new PerformanceRAF();\n\nclass RAFTickHandler implements ITickHandler {\n  protected released: boolean = false;\n\n  tick(interval: number, cb: (handler: ITickHandler) => void | boolean): void {\n    performanceRAF.addAnimationFrameCb(() => {\n      if (this.released) {\n        return;\n      }\n      return cb(this);\n    });\n  }\n\n  release(): void {\n    this.released = true;\n  }\n\n  getTime(): number {\n    return Date.now();\n  }\n}\n\n/**\n * Graph-based Ticker implementation\n * This ticker works directly with GraphManager instances without needing timeline adapters\n */\nexport class DefaultTicker extends EventEmitter implements ITicker {\n  protected interval: number;\n  protected tickerHandler: ITickHandler;\n  protected status: STATUS;\n  protected lastFrameTime: number;\n  protected tickCounts: number;\n  protected stage: IStage;\n  timelines: ITimeline[] = [];\n  autoStop: boolean;\n  // 随机扰动（每次都对interval进行随机的扰动，避免所有tick都发生在同一帧）\n  protected _jitter: number;\n  protected timeOffset: number;\n  declare _lastTickTime: number;\n  protected frameTimeHistory: number[] = [];\n\n  constructor(stage?: IStage) {\n    super();\n    this.init();\n    this.lastFrameTime = -1;\n    this.tickCounts = 0;\n    this.stage = stage;\n    this.autoStop = true;\n    this.interval = 16;\n    this.computeTimeOffsetAndJitter();\n  }\n\n  bindStage(stage: IStage): void {\n    this.stage = stage;\n  }\n\n  /**\n   * 计算时间偏移和随机扰动\n   */\n  computeTimeOffsetAndJitter(): void {\n    this.timeOffset = Math.floor(Math.random() * this.interval);\n    this._jitter = Math.min(Math.max(this.interval * 0.2, 6), this.interval * 0.7);\n  }\n\n  init(): void {\n    this.interval = 16;\n    this.status = STATUS.INITIAL;\n    application.global.hooks.onSetEnv.tap('graph-ticker', () => {\n      this.initHandler(false);\n    });\n    if (application.global.env) {\n      this.initHandler(false);\n    }\n  }\n\n  addTimeline(timeline: ITimeline): void {\n    this.timelines.push(timeline);\n  }\n\n  remTimeline(timeline: ITimeline): void {\n    this.timelines = this.timelines.filter(t => t !== timeline);\n  }\n\n  getTimelines(): ITimeline[] {\n    return this.timelines;\n  }\n\n  protected initHandler(force: boolean = false) {\n    this.setupTickHandler(force);\n  }\n\n  /**\n   * Set up the tick handler\n   * @returns true if setup was successful, false otherwise\n   */\n  protected setupTickHandler(force: boolean = false): boolean {\n    if (!force && this.tickerHandler) {\n      return true;\n    }\n    const handler: ITickHandler = new RAFTickHandler();\n\n    // Destroy the previous tick handler\n    if (this.tickerHandler) {\n      this.tickerHandler.release();\n    }\n\n    this.tickerHandler = handler;\n    return true;\n  }\n\n  setInterval(interval: number): void {\n    this.interval = interval;\n    this.computeTimeOffsetAndJitter();\n  }\n\n  getInterval(): number {\n    return this.interval;\n  }\n\n  setFPS(fps: number): void {\n    this.setInterval(Math.floor(1000 / fps));\n  }\n\n  getFPS(): number {\n    return 1000 / this.interval;\n  }\n\n  tick(interval: number): void {\n    this.tickerHandler.tick(interval, (handler: ITickHandler) => {\n      return this.handleTick(handler, { once: true });\n    });\n  }\n\n  tickTo(t: number): void {\n    if (!this.tickerHandler.tickTo) {\n      return;\n    }\n    this.tickerHandler.tickTo(t, (handler: ITickHandler) => {\n      this.handleTick(handler, { once: true });\n    });\n  }\n\n  pause(): boolean {\n    if (this.status === STATUS.INITIAL) {\n      return false;\n    }\n    this.status = STATUS.PAUSE;\n    return true;\n  }\n\n  resume(): boolean {\n    if (this.status === STATUS.INITIAL) {\n      return false;\n    }\n    this.status = STATUS.RUNNING;\n    return true;\n  }\n\n  ifCanStop(): boolean {\n    if (this.autoStop) {\n      if (!this.timelines.length) {\n        return true;\n      }\n      if (this.timelines.every(timeline => !timeline.isRunning())) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  start(force: boolean = false): boolean {\n    if (this.status === STATUS.RUNNING) {\n      return false;\n    }\n    if (!this.tickerHandler) {\n      return false;\n    }\n\n    // 暂停中、或者应该停止的时候，就不执行\n    if (!force) {\n      if (this.status === STATUS.PAUSE) {\n        return false;\n      }\n      if (this.ifCanStop()) {\n        return false;\n      }\n    }\n\n    this.status = STATUS.RUNNING;\n    this.tickerHandler.tick(0, this.handleTick);\n    return true;\n  }\n\n  stop(): void {\n    // Reset the tick handler\n    this.status = STATUS.INITIAL;\n    this.setupTickHandler(true);\n    this.lastFrameTime = -1;\n  }\n\n  /**\n   * 用于自动启动或停止\n   * 基于当前的graph managers检查是否需要启动或停止\n   */\n  trySyncTickStatus(): void {\n    if (this.status === STATUS.INITIAL && this.timelines.some(timeline => timeline.isRunning())) {\n      this.start();\n    } else if (this.status === STATUS.RUNNING && this.timelines.every(timeline => !timeline.isRunning())) {\n      this.stop();\n    }\n  }\n\n  release(): void {\n    this.stop();\n    this.timelines = [];\n    this.tickerHandler?.release();\n    this.tickerHandler = null;\n    this.lastFrameTime = -1;\n  }\n\n  protected checkSkip(delta: number): boolean {\n    if (this.stage?.params?.optimize?.tickRenderMode === 'performance') {\n      return false;\n    }\n    // 随机扰动（每次都对interval进行随机的扰动，避免所有tick都发生在同一帧）\n    const skip = delta < this.interval + (Math.random() - 0.5) * 2 * this._jitter;\n    return skip;\n  }\n\n  protected handleTick = (handler: ITickHandler, params?: { once?: boolean }): boolean => {\n    const { once = false } = params ?? {};\n\n    // 尝试停止\n    if (this.ifCanStop()) {\n      this.stop();\n      return false;\n    }\n\n    const currentTime = handler.getTime();\n    this._lastTickTime = currentTime;\n\n    if (this.lastFrameTime < 0) {\n      this.lastFrameTime = currentTime - this.interval + this.timeOffset;\n      this.frameTimeHistory.push(this.lastFrameTime);\n    }\n\n    const delta = currentTime - this.lastFrameTime;\n\n    const skip = this.checkSkip(delta);\n\n    if (!skip) {\n      this._handlerTick(delta);\n      this.lastFrameTime = currentTime;\n      this.frameTimeHistory.push(this.lastFrameTime);\n    }\n\n    if (!once) {\n      handler.tick(this.interval, this.handleTick);\n    }\n\n    return !skip;\n  };\n\n  protected _handlerTick = (delta: number): void => {\n    if (this.status !== STATUS.RUNNING) {\n      return;\n    }\n\n    this.tickCounts++;\n\n    // Update all graph managers\n    this.timelines.forEach(timeline => {\n      timeline.tick(delta);\n    });\n\n    this.emit('tick', delta);\n  };\n}\n"]}