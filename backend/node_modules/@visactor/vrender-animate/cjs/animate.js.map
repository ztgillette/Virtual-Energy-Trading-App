{"version":3,"sources":["../src/animate.ts"],"names":[],"mappings":"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","file":"animate.js","sourcesContent":["import { Step, WaitStep } from './step';\nimport {\n  Generator,\n  AnimateStatus,\n  AnimateStepType,\n  type IGraphic,\n  type IAnimate,\n  type IStep,\n  type ICustomAnimate,\n  type EasingType,\n  type ITimeline\n} from '@visactor/vrender-core';\nimport { defaultTimeline } from './timeline';\n\nexport class Animate implements IAnimate {\n  readonly id: string | number;\n  status: AnimateStatus;\n  target: IGraphic;\n\n  // 回调函数列表\n  _onStart?: (() => void)[];\n  _onFrame?: ((step: IStep, ratio: number) => void)[];\n  _onEnd?: (() => void)[];\n  _onRemove?: (() => void)[];\n\n  // 时间控制\n  private _timeline: ITimeline;\n  private _startTime: number;\n  private _duration: number;\n  private _totalDuration: number;\n\n  // 动画控制\n  // private _reversed: boolean;\n  private _loopCount: number;\n  private _currentLoop: number;\n  private _bounce: boolean;\n\n  // 链表头节点和尾节点\n  private _firstStep: IStep | null;\n  private _lastStep: IStep | null;\n\n  // 初始属性和屏蔽的属性\n  private _startProps: Record<string, any>;\n  private _endProps: Record<string, any>;\n  private _preventAttrs: Set<string>;\n  // 优先级，用于判定是否能被后续的动画preventAttr\n  declare priority: number;\n\n  protected currentTime: number;\n  slience?: boolean;\n\n  // 临时变量\n  lastRunStep?: IStep;\n\n  interpolateUpdateFunction:\n    | ((from: Record<string, any>, to: Record<string, any>, ratio: number, step: IStep, target: IGraphic) => void)\n    | null;\n\n  constructor(\n    id: string | number = Generator.GenAutoIncrementId(),\n    timeline: ITimeline = defaultTimeline,\n    slience?: boolean\n  ) {\n    this.id = id;\n    this.status = AnimateStatus.INITIAL;\n    this._timeline = timeline;\n    timeline.addAnimate(this);\n    this.slience = slience;\n    this._startTime = 0;\n    this._duration = 0;\n    this._totalDuration = 0;\n    // this._reversed = false;\n    this._loopCount = 0;\n    this._currentLoop = 0;\n    this._bounce = false;\n    this._firstStep = null;\n    this._lastStep = null;\n    this._startProps = {};\n    this._endProps = {};\n    this._preventAttrs = new Set();\n    this.currentTime = 0;\n    this.interpolateUpdateFunction = null;\n    this.priority = 0;\n  }\n\n  /**\n   * 获取开始属性\n   */\n  getStartProps(): Record<string, any> {\n    return this._startProps;\n  }\n\n  /**\n   * 获取结束属性\n   */\n  getEndProps(): Record<string, any> {\n    return this._endProps;\n  }\n\n  /**\n   * 设置时间线\n   */\n  setTimeline(timeline: ITimeline): void {\n    this._timeline = timeline;\n  }\n\n  /**\n   * 获取时间线\n   */\n  getTimeline(): ITimeline {\n    return this._timeline;\n  }\n\n  /**\n   * 时间线属性访问器\n   */\n  get timeline(): ITimeline {\n    return this._timeline;\n  }\n\n  /**\n   * 绑定目标图形\n   */\n  bind(target: IGraphic): this {\n    this.target = target;\n\n    if (!this.target.animates) {\n      this.target.animates = new Map();\n    }\n    this.target.animates.set(this.id, this);\n    this.onRemove(() => {\n      this.stop();\n      this.target.animates.delete(this.id);\n    });\n\n    if (this.target.onAnimateBind && !this.slience) {\n      this.target.onAnimateBind(this as any);\n    }\n    // 添加一个animationAttribute属性，用于存储动画过程中的属性\n    if (!this.target.animationAttribute) {\n      this.target.animationAttribute = {};\n    }\n    return this;\n  }\n\n  /**\n   * 动画步骤：to\n   * 添加一个to步骤，这会在当前状态到指定状态间进行插值\n   */\n  to(props: Record<string, any>, duration: number = 300, easing: EasingType = 'linear'): this {\n    // 创建新的step\n    const step = new Step(AnimateStepType.to, props, duration, easing);\n\n    step.bind(this.target, this);\n\n    this.updateStepAfterAppend(step);\n\n    return this;\n  }\n\n  /**\n   * 等待延迟\n   */\n  wait(delay: number): this {\n    // 创建新的wait step\n    const step = new WaitStep(AnimateStepType.wait, {}, delay, 'linear');\n\n    step.bind(this.target, this);\n\n    this.updateStepAfterAppend(step);\n\n    return this;\n  }\n\n  protected updateStepAfterAppend(step: IStep): void {\n    // 如果是第一个step\n    if (!this._firstStep) {\n      this._firstStep = step;\n      this._lastStep = step;\n    } else {\n      // 添加到链表末尾\n      this._lastStep.append(step);\n      this._lastStep = step;\n    }\n\n    this.parseStepProps(step);\n\n    this.updateDuration();\n  }\n\n  /**\n   * 解析step的props\n   * 1. 预先获取step的propKeys并保存\n   * 2. 将截止目前的最新props设置到step.props中，这样该props上的属性就是最终的属性了，跳帧时直接设置即可\n   * 3. 同步到_endProps中，保存这个Animate实例的最终props\n   * 4. 给step的props的原型链上绑定Animate的_startProps，这样在下一个step查找fromProps的时候，一定能拿得到值\n   */\n  parseStepProps(step: IStep) {\n    if (!this._lastStep) {\n      return;\n    }\n\n    /* 预设置step的属性，基于性能考虑，实现比较复杂 */\n    // step.propKeys为真实的props属性的key\n    step.propKeys = step.propKeys || Object.keys(step.props);\n    // step.props为包含前序step的props的最终props，用于跳帧等场景，可以直接设置\n    Object.keys(this._endProps).forEach(key => {\n      step.props[key] = step.props[key] ?? this._endProps[key];\n    });\n    // 将最终的props设置到step.props中\n    step.propKeys.forEach(key => {\n      this._endProps[key] = step.props[key];\n    });\n    // 给step的props的原型链上绑定Animate的_startProps\n    // 下一个step在查找上一个step.props（也就是找到它的fromProps）的时候，就能拿到初始的props了\n    // 比如：\n    // rect.animate().to({ x: 100 }, 1000, 'linear').to({ y: 100 }, 1000, 'linear');\n    // 在第二个step查找fromProps的时候，就能拿到第一个step的endProps中的y值（在原型链上）\n    // TODO 由于会有其他animate的干扰，所以不能直接设置原型链\n    // Object.setPrototypeOf(step.props, this._startProps);\n  }\n\n  /**\n   * 重新同步和计算props，用于内部某些step发生了变更后，重新计算自身\n   * 性能较差，不要频繁调用\n   * @returns\n   */\n  reSyncProps() {\n    if (!this._lastStep) {\n      return;\n    }\n    this._endProps = {};\n    let currentStep: IStep = this._firstStep;\n    // 从前向后寻找当前时间所在的step\n    while (currentStep) {\n      // step.props为包含前序step的props的最终props，用于跳帧等场景，可以直接设置\n      // eslint-disable-next-line no-loop-func\n      Object.keys(this._endProps).forEach(key => {\n        currentStep.props[key] = currentStep.props[key] ?? this._endProps[key];\n      });\n      // 将最终的props设置到step.props中\n      // eslint-disable-next-line no-loop-func\n      currentStep.propKeys.forEach(key => {\n        this._endProps[key] = currentStep.props[key];\n      });\n      // 给step的props的原型链上绑定Animate的_startProps\n      // 下一个step在查找上一个step.props（也就是找到它的fromProps）的时候，就能拿到初始的props了\n      // 比如：\n      // rect.animate().to({ x: 100 }, 1000, 'linear').to({ y: 100 }, 1000, 'linear');\n      // 在第二个step查找fromProps的时候，就能拿到第一个step的endProps中的y值（在原型链上）\n      // TODO 由于会有其他animate的干扰，所以不能直接设置原型链\n      // Object.setPrototypeOf(currentStep.props, this._startProps);\n      currentStep = currentStep.next;\n    }\n  }\n\n  /**\n   * 动画步骤：from\n   * 添加一个from步骤，这会将目标属性先设置为指定值，然后过渡到当前状态\n   * 【注意】这可能会导致动画跳变，请谨慎使用\n   */\n  from(props: Record<string, any>, duration: number = 300, easing: EasingType = 'linear'): this {\n    // 创建新的step\n    const step = new Step(AnimateStepType.from, props, duration, easing);\n\n    // 如果是第一个step\n    if (!this._firstStep) {\n      this._firstStep = step;\n      this._lastStep = step;\n    } else {\n      // 添加到链表末尾\n      this._lastStep.append(step);\n      this._lastStep = step;\n    }\n\n    this.updateDuration();\n\n    return this;\n  }\n\n  /**\n   * 自定义动画\n   */\n  play(customAnimate: ICustomAnimate): this {\n    customAnimate.bind(this.target, this);\n    this.updateStepAfterAppend(customAnimate);\n\n    return this;\n  }\n\n  /**\n   * 暂停动画\n   */\n  pause(): void {\n    if (this.status === AnimateStatus.RUNNING) {\n      this.status = AnimateStatus.PAUSED;\n    }\n  }\n\n  /**\n   * 恢复动画\n   */\n  resume(): void {\n    if (this.status === AnimateStatus.PAUSED) {\n      this.status = AnimateStatus.RUNNING;\n    }\n  }\n\n  /**\n   * 注册开始回调\n   */\n  onStart(cb?: () => void): void {\n    if (cb) {\n      if (!this._onStart) {\n        this._onStart = [];\n      }\n      this._onStart.push(cb);\n    } else {\n      this._onStart?.forEach(cb => cb());\n      // 设置开始属性，Animate不会重复执行start所以不需要判断firstStart\n      Object.keys(this._endProps).forEach(key => {\n        this._startProps[key] = this.target.getComputedAttribute(key);\n      });\n    }\n  }\n\n  /**\n   * 注册结束回调\n   */\n  onEnd(cb?: () => void): void {\n    if (cb) {\n      if (!this._onEnd) {\n        this._onEnd = [];\n      }\n      this._onEnd.push(cb);\n    } else {\n      this._onEnd?.forEach(cb => cb());\n    }\n  }\n\n  /**\n   * 注册帧回调\n   */\n  onFrame(cb?: (step: IStep, ratio: number) => void): void {\n    if (cb) {\n      if (!this._onFrame) {\n        this._onFrame = [];\n      }\n      this._onFrame.push(cb);\n    }\n  }\n\n  /**\n   * 注册移除回调\n   */\n  onRemove(cb?: () => void): void {\n    if (cb) {\n      if (!this._onRemove) {\n        this._onRemove = [];\n      }\n      this._onRemove.push(cb);\n    } else {\n      this._onRemove?.forEach(cb => cb());\n    }\n  }\n\n  /**\n   * 屏蔽单个属性\n   */\n  preventAttr(key: string): void {\n    this._preventAttrs.add(key);\n    // 从所有step中移除该属性，并从自身的_startProps和_endProps中移除该属性\n    delete this._startProps[key];\n    delete this._endProps[key];\n    let step = this._firstStep;\n    while (step) {\n      step.deleteSelfAttr(key);\n      step = step.next;\n    }\n  }\n\n  /**\n   * 屏蔽多个属性\n   */\n  preventAttrs(keys: string[]): void {\n    keys.forEach(key => this._preventAttrs.add(key));\n  }\n\n  /**\n   * 检查属性是否合法（未被屏蔽）\n   */\n  validAttr(key: string): boolean {\n    return !this._preventAttrs.has(key);\n  }\n\n  /**\n   * 运行自定义回调\n   */\n  runCb(cb: (a: IAnimate, step: IStep) => void): IAnimate {\n    this._lastStep?.onEnd(cb);\n    return this;\n  }\n\n  /**\n   * 设置动画开始时间\n   */\n  startAt(t: number): this {\n    this._startTime = t;\n\n    return this;\n  }\n\n  /**\n   * 自定义插值函数，返回false表示没有匹配上\n   */\n  customInterpolate(\n    key: string,\n    ratio: number,\n    from: any,\n    to: any,\n    target: IGraphic,\n    ret: Record<string, any>\n  ): boolean {\n    // 默认无自定义插值，可由子类重写\n    return false;\n  }\n\n  /**\n   * 获取起始值，该起始值为animate的起始值，并不一定为step的起始值\n   */\n  getFromValue(): Record<string, any> {\n    return this._startProps;\n  }\n\n  /**\n   * 获取结束值\n   */\n  getToValue(): Record<string, any> {\n    return this._endProps;\n  }\n\n  /**\n   * 停止动画\n   */\n  stop(type?: 'start' | 'end' | Record<string, any>): void {\n    // TODO 有些动画可能一添加就被删除\n    // if (this.status === AnimateStatus.END) {\n    //   return;\n    // }\n    // 遍历step，调用其stop\n    let step = this._firstStep;\n    while (step) {\n      step.stop();\n      step = step.next;\n    }\n\n    if (this.status !== AnimateStatus.END) {\n      this.onEnd();\n    }\n\n    this.status = AnimateStatus.END;\n\n    if (!this.target) {\n      return;\n    }\n\n    if (type === 'start') {\n      // 设置为开始状态\n      this.target.setAttributes(this._startProps);\n    } else if (type === 'end') {\n      // 设置为结束状态\n      this.target.setAttributes(this._endProps);\n    } else if (type) {\n      // 设置为自定义状态\n      this.target.setAttributes(type);\n    }\n  }\n\n  /**\n   * 释放动画资源\n   */\n  release(): void {\n    this.status = AnimateStatus.END;\n\n    // 触发移除回调\n    if (this._onRemove) {\n      this._onRemove.forEach(cb => cb());\n    }\n\n    // 清空回调\n    this._onStart = [];\n    this._onFrame = [];\n    this._onEnd = [];\n    this._onRemove = [];\n\n    this.forEachStep(step => {\n      step.release();\n    });\n  }\n\n  /**\n   * 获取动画持续时间\n   */\n  getDuration(): number {\n    return this._duration;\n  }\n\n  /**\n   * 获取动画开始时间\n   */\n  getStartTime(): number {\n    return this._startTime;\n  }\n\n  /**\n   * 在所有动画完成后执行\n   */\n  afterAll(list: IAnimate[]): this {\n    if (!list || list.length === 0) {\n      return this;\n    }\n\n    // 计算所有动画结束的最大时间点\n    let maxEndTime = 0;\n    list.forEach(animate => {\n      const endTime = animate.getStartTime() + animate.getTotalDuration();\n      maxEndTime = Math.max(maxEndTime, endTime);\n    });\n\n    // 设置当前动画的开始时间为最大结束时间\n    return this.startAt(maxEndTime);\n  }\n\n  /**\n   * 在指定动画完成后执行\n   */\n  after(animate: IAnimate): this {\n    if (!animate) {\n      return this;\n    }\n\n    // 计算指定动画结束的时间点\n    const endTime = animate.getStartTime() + animate.getTotalDuration();\n\n    // 设置当前动画的开始时间为结束时间\n    return this.startAt(endTime);\n  }\n\n  /**\n   * 并行执行动画\n   */\n  parallel(animate: IAnimate): this {\n    if (!animate) {\n      return this;\n    }\n\n    // 设置指定动画的开始时间为当前动画的开始时间\n    this.startAt(animate.getStartTime());\n\n    return this;\n  }\n\n  // /**\n  //  * 设置动画是否反转\n  //  */\n  // reversed(r: boolean): this {\n  //   this._reversed = r;\n  //   return this;\n  // }\n\n  /**\n   * 设置动画循环次数，如果传入true，则无限循环，如果传入false，则不循环\n   */\n  loop(n: number | boolean): this {\n    if (n === true) {\n      n = Infinity;\n    } else if (n === false) {\n      n = 0;\n    }\n    this._loopCount = n;\n    this.updateDuration();\n    return this;\n  }\n\n  /**\n   * 设置动画是否反弹\n   */\n  bounce(b: boolean): this {\n    this._bounce = b;\n    return this;\n  }\n\n  /**\n   * 推进动画\n   */\n  advance(delta: number): void {\n    if (this.status === AnimateStatus.END) {\n      console.warn('aaa 动画已经结束，不能推进');\n      return;\n    }\n    const nextTime = this.currentTime + delta;\n    // 如果还没开始，直接return\n    if (nextTime < this._startTime) {\n      this.currentTime = nextTime;\n      return;\n    }\n    // 如果已经结束，设置状态后return\n    if (nextTime >= this._startTime + this._totalDuration) {\n      this._lastStep?.onUpdate(true, 1, {});\n      this._lastStep?.onEnd();\n      this.onEnd();\n      this.status = AnimateStatus.END;\n      return;\n    }\n\n    this.status = AnimateStatus.RUNNING;\n\n    // 如果是第一次运行，触发开始回调\n    if (this.currentTime <= this._startTime) {\n      this.onStart();\n    }\n    this.currentTime = nextTime;\n\n    let cycleTime = nextTime - this._startTime;\n    let newLoop = false;\n    let bounceTime = false;\n    if (this._loopCount > 0) {\n      cycleTime = (nextTime - this._startTime) % this._duration;\n      const currentLoop = Math.floor((nextTime - this._startTime) / this._duration);\n      newLoop = currentLoop > this._currentLoop;\n      this._currentLoop = currentLoop;\n\n      bounceTime = this._bounce && currentLoop % 2 === 1;\n      if (bounceTime) {\n        cycleTime = this._duration - cycleTime;\n      }\n    }\n\n    // 如果是新的循环，重置为初始状态\n    if (newLoop && !bounceTime) {\n      this.target.setAttributes(this._startProps);\n    }\n\n    // 选择起始步骤和遍历方向\n    let targetStep: IStep | null = null;\n\n    if (this._lastStep === this._firstStep) {\n      targetStep = this._firstStep;\n    } else {\n      let currentStep: IStep = this._firstStep;\n      // 从前向后寻找当前时间所在的step\n      while (currentStep) {\n        const stepStartTime = currentStep.getStartTime();\n        const stepDuration = currentStep.getDuration();\n        const stepEndTime = stepStartTime + stepDuration;\n\n        // 找到当前周期时间所在的step\n        if (cycleTime >= stepStartTime && cycleTime <= stepEndTime) {\n          targetStep = currentStep;\n          break;\n        }\n\n        currentStep = currentStep.next;\n      }\n    }\n\n    // 如果没找到目标step（可能是所有step都执行完了，但整体动画还没结束，这正常是不存在的）\n    if (!targetStep) {\n      // this.currentTime = nextTime;\n      // console.warn('动画出现问题');\n      return;\n    }\n\n    // 如果当前step和上一次执行的step不一样，则调用上一次step的onEnd，确保所有完成的step都调用了结束\n    // 如果上一次的step已经调用了onEnd，在下面的onEnd那里会将lastRunStep设置为null\n    if (targetStep !== this.lastRunStep) {\n      this.lastRunStep?.onEnd();\n    }\n\n    this.lastRunStep = targetStep;\n\n    // 计算当前step的进度比例（基于当前step内的相对时间）\n    const stepStartTime = targetStep.getStartTime();\n    const stepDuration = targetStep.getDuration();\n\n    const ratio = (cycleTime - stepStartTime) / stepDuration;\n    // // 限制ratio在0-1之间\n    // ratio = Math.max(0, Math.min(1, ratio));\n\n    const isEnd = ratio >= 1;\n    targetStep.update(isEnd, ratio, {});\n\n    // 如果step执行完毕\n    if (isEnd) {\n      targetStep.onEnd();\n      this.lastRunStep = null;\n      // 不立即调用onFinish，让动画系统来决定何时结束\n    }\n\n    // 触发帧回调\n    // if (this._onFrame) {\n    //   this._onFrame.forEach(cb => cb(targetStep, ratio));\n    // }\n  }\n\n  updateDuration(): void {\n    if (!this._lastStep) {\n      this._duration = 0;\n      return;\n    }\n\n    this._duration = this._lastStep.getStartTime() + this._lastStep.getDuration();\n    this._totalDuration = this._duration * (this._loopCount + 1);\n  }\n\n  getTotalDuration(): number {\n    return this._totalDuration;\n  }\n\n  getLoop(): number {\n    return this._loopCount;\n  }\n\n  protected forEachStep(cb: (step: IStep) => void): void {\n    let step = this._firstStep;\n    while (step) {\n      cb(step);\n      step = step.next;\n    }\n  }\n}\n"]}