{"version":3,"sources":["../src/color/rgbToHsl.ts"],"names":[],"mappings":";;AAAA,SAAwB,QAAQ,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;IAC9D,CAAC,IAAI,GAAG,CAAC;IACT,CAAC,IAAI,GAAG,CAAC;IACT,CAAC,IAAI,GAAG,CAAC;IAGT,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,MAAM,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;KACP;SAEI,IAAI,IAAI,KAAK,CAAC,EAAE;QACnB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;KAC3B;SAEI,IAAI,IAAI,KAAK,CAAC,EAAE;QACnB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KACzB;SAEI;QACH,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KACzB;IAED,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,EAAE;QACT,CAAC,IAAI,GAAG,CAAC;KACV;IACD,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IAGtB,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAGxD,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1B,OAAO;QACL,CAAC;QACD,CAAC;QACD,CAAC;KACF,CAAC;AACJ,CAAC;AA9CD,2BA8CC","file":"rgbToHsl.js","sourcesContent":["export default function rgbToHsl(r: number, g: number, b: number) {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  // Find greatest and smallest channel values\n  const cMin = Math.min(r, g, b);\n  const cMax = Math.max(r, g, b);\n  const delta = cMax - cMin;\n  let h = 0;\n  let s = 0;\n  let l = 0;\n\n  if (delta === 0) {\n    h = 0;\n  }\n  // Red is max\n  else if (cMax === r) {\n    h = ((g - b) / delta) % 6;\n  }\n  // Green is max\n  else if (cMax === g) {\n    h = (b - r) / delta + 2;\n  }\n  // Blue is max\n  else {\n    h = (r - g) / delta + 4;\n  }\n\n  h = Math.round(h * 60);\n  if (h < 0) {\n    h += 360;\n  }\n  l = (cMax + cMin) / 2;\n\n  // Calculate saturation\n  s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  // Multiply l and s by 100\n  s = +(s * 100).toFixed(1);\n  l = +(l * 100).toFixed(1);\n  return {\n    h,\n    s,\n    l\n  };\n}\n"]}