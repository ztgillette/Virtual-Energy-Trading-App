import { BaseEnvContribution, RafBasedSTO } from '@visactor/vrender-core';
import type { ICanvasLike, EnvType, ICreateCanvasParams, IEnvContribution, IGlobal, ILynxCanvas } from '@visactor/vrender-core';
export declare class HarmonyEnvContribution extends BaseEnvContribution implements IEnvContribution {
    type: EnvType;
    supportEvent: boolean;
    rafSTO: RafBasedSTO;
    constructor();
    configure(service: IGlobal, params: {
        domref: any;
        canvasIdLists: string[];
        freeCanvasIdx: number;
        offscreen?: boolean;
        pixelRatio?: number;
    }): void;
    getDynamicCanvasCount(): number;
    getStaticCanvasCount(): number;
    loadImage(url: string): Promise<{
        loadState: 'success' | 'fail';
        data: HTMLImageElement | ImageData | null;
    }>;
    loadSvg(url: string): Promise<{
        loadState: 'success' | 'fail';
        data: HTMLImageElement | ImageData | null;
    }>;
    createCanvas(params: ICreateCanvasParams): ILynxCanvas;
    createOffscreenCanvas(params: ICreateCanvasParams): void;
    releaseCanvas(canvas: ICanvasLike | string): void;
    getDevicePixelRatio(): number;
    getRequestAnimationFrame(): (callback: FrameRequestCallback) => number;
    getCancelAnimationFrame(): (h: number) => void;
    mapToCanvasPoint(event: any): any;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
    dispatchEvent(event: any): boolean;
    getElementById(str: string): any | null;
    getRootElement(): HTMLElement | null;
    getDocument(): Document | null;
    release(...params: any): void;
}
