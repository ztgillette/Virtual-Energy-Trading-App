{"version":3,"sources":["../src/window/contributions/native-contribution.ts"],"names":[],"mappings":"","file":"native-contribution.js","sourcesContent":["// import { createCanvas, createImageData, loadImage } from 'canvas';\n// import { VGlobal, IWindow, EnvType, IGlobal, IWindowHandlerContribution, IWindowParams } from '../..';\n// import { BaseWindowHandlerContribution } from './base-contribution';\n\n// type NodePkg = {\n//   createCanvas: typeof createCanvas;\n//   createImageData: typeof createImageData;\n//   loadImage: typeof loadImage;\n// };\n\n// @injectable()\n// export class NodeWindowHandlerContribution extends BaseWindowHandlerContribution implements IWindowHandlerContribution {\n//   type: EnvType = 'native';\n\n//   pkg: NodePkg;\n\n//   configure(window: IWindow, global: IGlobal) {\n//     if (global.env === this.type) {\n//       window.setWindowHandler(this);\n//       this.pkg = global.envParams;\n//     }\n//   }\n\n//   get container(): HTMLElement | null {\n//     // return this.canvas.nativeCanvas.parentElement;\n//     return null;\n//   }\n\n//   constructor(@inject(VGlobal) private readonly global: IGlobal) {\n//     super();\n//   }\n\n//   createWindow(params: IWindowParams): void {\n//     // 如果没有传入canvas，那么就创建一个canvas\n//     params.CreateWindow && params.CreateWindow(params.width, params.height, params.title);\n//   }\n\n//   destroyWindow(): void {\n//     return;\n//   }\n//   resizeWindow(width: number, height: number): void {\n//     return;\n//   }\n//   setDpr(dpr: number): void {\n//     return;\n//   }\n\n//   getContext(): any {\n//     throw new Error('暂不支持');\n//   }\n\n//   getWH(): { width: number; height: number } {\n//     throw new Error('暂不支持');\n//   }\n//   getTitle(): string {\n//     throw new Error('暂不支持');\n//   }\n//   getXY(): { x: number; y: number } {\n//     throw new Error('暂不支持');\n//   }\n// }\n"]}