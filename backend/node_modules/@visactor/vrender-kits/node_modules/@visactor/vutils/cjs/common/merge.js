"use strict";

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.baseMerge = void 0;

const isArray_1 = __importDefault(require("./isArray")), isArrayLike_1 = __importDefault(require("./isArrayLike")), isPlainObject_1 = __importDefault(require("./isPlainObject")), isValid_1 = __importDefault(require("./isValid"));

function baseMerge(target, source, shallowArray = !1, skipTargetArray = !1) {
    if (source) {
        if (target === source) return;
        if ((0, isValid_1.default)(source) && "object" == typeof source) {
            const iterable = Object(source), props = [];
            for (const key in iterable) props.push(key);
            let {length: length} = props, propIndex = -1;
            for (;length--; ) {
                const key = props[++propIndex];
                !(0, isValid_1.default)(iterable[key]) || "object" != typeof iterable[key] || skipTargetArray && (0, 
                isArray_1.default)(target[key]) ? assignMergeValue(target, key, iterable[key]) : baseMergeDeep(target, source, key, shallowArray, skipTargetArray);
            }
        }
    }
}

function baseMergeDeep(target, source, key, shallowArray = !1, skipTargetArray = !1) {
    const objValue = target[key], srcValue = source[key];
    let newValue = source[key], isCommon = !0;
    if ((0, isArray_1.default)(srcValue)) {
        if (shallowArray) newValue = []; else if ((0, isArray_1.default)(objValue)) newValue = objValue; else if ((0, 
        isArrayLike_1.default)(objValue)) {
            newValue = new Array(objValue.length);
            let index = -1;
            const length = objValue.length;
            for (;++index < length; ) newValue[index] = objValue[index];
        }
    } else (0, isPlainObject_1.default)(srcValue) ? (newValue = null != objValue ? objValue : {}, 
    "function" != typeof objValue && "object" == typeof objValue || (newValue = {})) : isCommon = !1;
    isCommon && baseMerge(newValue, srcValue, shallowArray, skipTargetArray), assignMergeValue(target, key, newValue);
}

function assignMergeValue(target, key, value) {
    (void 0 !== value && !eq(target[key], value) || void 0 === value && !(key in target)) && (target[key] = value);
}

function eq(value, other) {
    return value === other || Number.isNaN(value) && Number.isNaN(other);
}

function merge(target, ...sources) {
    let sourceIndex = -1;
    const length = sources.length;
    for (;++sourceIndex < length; ) {
        baseMerge(target, sources[sourceIndex], !0);
    }
    return target;
}

exports.baseMerge = baseMerge, exports.default = merge;
//# sourceMappingURL=merge.js.map
