{"version":3,"sources":["../src/graphics/polygon.ts"],"names":[],"mappings":"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","file":"polygon.js","sourcesContent":["import type { IPointLike } from '../data-structure';\nimport { isIntersect } from './algorithm';\n\nconst EPSILON = 1e-8;\n\n// Adapted from https://github.com/apache/echarts/blob/master/src/util/graphic.ts by striezel\n// License: https://github.com/apache/echarts/blob/master/LICENSE\n/**\n * Return `true` if the given line (line `a`) and the given polygon\n * are intersect.\n * Note that we do not count colinear as intersect here because no\n * requirement for that. We could do that if required in future.\n */\nexport function lineIntersectPolygon(\n  a1x: number,\n  a1y: number,\n  a2x: number,\n  a2y: number,\n  points: IPointLike[]\n): boolean {\n  for (let i = 0, p2 = points[points.length - 1]; i < points.length; i++) {\n    const p = points[i];\n    if (isIntersect([a1x, a1y], [a2x, a2y], [p.x, p.y], [p2.x, p2.y])) {\n      return true;\n    }\n    p2 = p;\n  }\n  return false;\n}\n\n// Adapted from https://github.com/ecomfe/zrender/blob/master/src/contain/polygon.ts by pissang\n// License: https://github.com/ecomfe/zrender/blob/master/LICENSE\nexport function polygonContainPoint(points: IPointLike[], x: number, y: number) {\n  let w = 0;\n  let p = points[0];\n\n  if (!p) {\n    return false;\n  }\n\n  for (let i = 1; i < points.length; i++) {\n    const p2 = points[i];\n    w += isPointInLine(p.x, p.y, p2.x, p2.y, x, y);\n    p = p2;\n  }\n\n  // Close polygon\n  const p0 = points[0];\n  if (!isAroundEqual(p.x, p0.x) || !isAroundEqual(p.y, p0.y)) {\n    w += isPointInLine(p.x, p.y, p0.x, p0.y, x, y);\n  }\n\n  return w !== 0;\n}\n\n// Adapted from https://github.com/ecomfe/zrender/blob/master/src/contain/windingLine.ts by pissang\n// License: https://github.com/ecomfe/zrender/blob/master/LICENSE\nexport function isPointInLine(x0: number, y0: number, x1: number, y1: number, x: number, y: number): number {\n  if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n    return 0;\n  }\n  // Ignore horizontal line\n  if (y1 === y0) {\n    return 0;\n  }\n  const t = (y - y0) / (y1 - y0);\n\n  let dir = y1 < y0 ? 1 : -1;\n  // Avoid winding error when intersection point is the connect point of two line of polygon\n  if (t === 1 || t === 0) {\n    dir = y1 < y0 ? 0.5 : -0.5;\n  }\n\n  const x_ = t * (x1 - x0) + x0;\n\n  // If (x, y) on the line, considered as \"contain\".\n  return x_ === x ? Infinity : x_ > x ? dir : 0;\n}\n\n// Adapted from https://github.com/ecomfe/zrender/blob/master/src/contain/polygon.ts by pissang\n// License: https://github.com/ecomfe/zrender/blob/master/LICENSE\nfunction isAroundEqual(a: number, b: number): boolean {\n  return Math.abs(a - b) < EPSILON;\n}\n\n/**\n * polygon图元之间是否相交\n * @param pointsA 图元A的points\n * @param pointsB 图元B的points\n * @returns 是否相交\n */\nexport function polygonIntersectPolygon(pointsA: IPointLike[], pointsB: IPointLike[]) {\n  for (let i = 0; i < pointsB.length; i++) {\n    if (polygonContainPoint(pointsA, pointsB[i].x, pointsB[i].y)) {\n      return true;\n    }\n    if (i > 0 && lineIntersectPolygon(pointsB[i - 1].x, pointsB[i - 1].y, pointsB[i].x, pointsB[i].y, pointsA)) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}