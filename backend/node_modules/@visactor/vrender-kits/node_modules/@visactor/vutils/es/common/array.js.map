{"version":3,"sources":["../src/common/array.ts"],"names":[],"mappings":"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","file":"array.js","sourcesContent":["import isArray from './isArray';\nimport isArrayLike from './isArrayLike';\nimport isValid from './isValid';\n\n/**\n * 将传入数据转换为数组格式\n * @param arr 入参。\n * @returns 数组\n */\nexport function array<T>(arr?: T | T[]): T[] {\n  if (isValid(arr)) {\n    return isArray(arr) ? arr : [arr];\n  }\n  return [];\n}\n\n/**\n * 获取数组的最后一个值，如果传入的参数为非数组，则返回 undefined\n * @param val any\n * @returns\n */\nexport function last<T>(val: T | T[]): T | undefined {\n  if (isArrayLike(val)) {\n    const arr = val as ArrayLike<any>;\n    return arr[arr.length - 1];\n  }\n  return undefined;\n}\n\n/**\n * 获取数组第一项与最后一项的差值，如果数组为空\b则返回 0\n * @param arr\n * @returns\n */\nexport const span = (arr: number[]) => {\n  if (arr.length <= 1) {\n    return 0;\n  }\n  return (last(arr) as number) - arr[0];\n};\n\n/**\n * 获取数组中的最大值\n * @param arr 数组\n * @param compareFn 比较函数，返回正数表示 a > b，返回负数表示 a < b，返回 0 表示相等\n * @returns\n */\nexport const maxInArray = <T>(arr: T[], compareFn?: (a: T, b: T) => number): T | undefined => {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    const value = arr[i];\n    if ((compareFn?.(value, max) ?? (value as number) - (max as number)) > 0) {\n      max = value;\n    }\n  }\n  return max;\n};\n\n/**\n * 获取数组中的最小值\n * @param arr 数组\n * @param compareFn 比较函数，返回正数表示 a > b，返回负数表示 a < b，返回 0 表示相等\n * @returns\n */\nexport const minInArray = <T>(arr: T[], compareFn?: (a: T, b: T) => number): T | undefined => {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    const value = arr[i];\n    if ((compareFn?.(value, min) ?? (value as number) - (min as number)) < 0) {\n      min = value;\n    }\n  }\n  return min;\n};\n\n/**\n * 判断两个数组是否相同\n * @param a\n * @param b\n * @returns\n */\nexport function arrayEqual(a: any, b: any): boolean {\n  if (!isArray(a) || !isArray(b)) {\n    return false;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * 封装并返回无重复的数组\n * @param arr\n * @returns\n */\nexport function uniqArray<T>(arr: T | T[]): T | T[] {\n  if (!arr || !isArray(arr)) {\n    return arr;\n  }\n  return Array.from(new Set(array(arr)));\n}\n\n// Based on http://jsfromhell.com/array/shuffle\nexport function shuffleArray<T>(arr: T[], random: () => number = Math.random): T[] {\n  let j;\n  let x;\n  let i = arr.length;\n\n  while (i) {\n    j = Math.floor(random() * i);\n    x = arr[--i];\n    arr[i] = arr[j];\n    arr[j] = x;\n  }\n  return arr;\n}\n\n/**\n * 展开多层数组，非数组内容将变为 [input]\n * @param arr\n * @returns\n */\nexport function flattenArray(arr: any): any[] {\n  if (!isArray(arr)) {\n    return [arr];\n  }\n  const result = [];\n  for (const value of arr) {\n    result.push(...flattenArray(value));\n  }\n  return result;\n}\n"]}