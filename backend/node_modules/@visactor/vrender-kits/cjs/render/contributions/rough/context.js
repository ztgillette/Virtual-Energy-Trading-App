"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.RoughContext2d = void 0;

class RoughContext2d {
    constructor(originContext, customPath) {
        this.originContext = originContext, this.customPath = customPath;
    }
    reset(setTransform = !0) {
        return this.originContext.reset(setTransform);
    }
    beginPath() {
        this.originContext.beginPath(), this.customPath.beginPath();
    }
    moveTo(x, y, z) {
        this.originContext.moveTo(x, y, z), this.customPath.moveTo(x, y);
    }
    lineTo(x, y, z) {
        this.originContext.lineTo(x, y, z), this.customPath.lineTo(x, y);
    }
    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, z) {
        this.originContext.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, z), this.customPath.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    }
    quadraticCurveTo(cpx, cpy, x, y, z) {
        this.originContext.quadraticCurveTo(cpx, cpy, x, y, z), this.customPath.quadraticCurveTo(cpx, cpy, x, y);
    }
    arc(x, y, radius, startAngle, endAngle, anticlockwise, z) {
        this.originContext.arc(x, y, radius, startAngle, endAngle, anticlockwise, z), this.customPath.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    }
    arcTo(x1, y1, x2, y2, radius) {
        this.originContext.arcTo(x1, y1, x2, y2, radius), this.customPath.arcTo(x1, y1, x2, y2, radius);
    }
    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        this.originContext.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise), 
        this.customPath.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
    }
    rect(x, y, w, h, z) {
        this.originContext.rect(x, y, w, h, z), this.customPath.rect(x, y, w, h);
    }
    closePath() {
        this.originContext.closePath(), this.customPath.closePath();
    }
    get canvas() {
        return this.originContext.canvas;
    }
    set canvas(value) {
        this.originContext.canvas = value;
    }
    get camera() {
        return this.originContext.camera;
    }
    set camera(value) {
        this.originContext.camera = value;
    }
    get modelMatrix() {
        return this.originContext.modelMatrix;
    }
    set modelMatrix(value) {
        this.originContext.modelMatrix = value;
    }
    get nativeContext() {
        return this.originContext.nativeContext;
    }
    set nativeContext(value) {
        this.originContext.nativeContext = value;
    }
    get _inuse() {
        return this.originContext._inuse;
    }
    set _inuse(value) {
        this.originContext._inuse = value;
    }
    get inuse() {
        return this.originContext.inuse;
    }
    set inuse(value) {
        this.originContext.inuse = value;
    }
    get stack() {
        return this.originContext.stack;
    }
    set stack(value) {
        this.originContext.stack = value;
    }
    get disableFill() {
        return this.originContext.disableFill;
    }
    set disableFill(value) {
        this.originContext.disableFill = value;
    }
    get disableStroke() {
        return this.originContext.disableStroke;
    }
    set disableStroke(value) {
        this.originContext.disableStroke = value;
    }
    get disableBeginPath() {
        return this.originContext.disableBeginPath;
    }
    set disableBeginPath(value) {
        this.originContext.disableBeginPath = value;
    }
    get fontFamily() {
        return this.originContext.fontFamily;
    }
    set fontFamily(value) {
        this.originContext.fontFamily = value;
    }
    get fontSize() {
        return this.originContext.fontSize;
    }
    set fontSize(value) {
        this.originContext.fontSize = value;
    }
    get _clearMatrix() {
        return this.originContext._clearMatrix;
    }
    set _clearMatrix(value) {
        this.originContext._clearMatrix = value;
    }
    get dpr() {
        return this.originContext.dpr;
    }
    set dpr(value) {
        this.originContext.dpr = value;
    }
    get baseGlobalAlpha() {
        return this.originContext.baseGlobalAlpha;
    }
    set baseGlobalAlpha(value) {
        this.originContext.baseGlobalAlpha = value;
    }
    get drawPromise() {
        return this.originContext.drawPromise;
    }
    set drawPromise(value) {
        this.originContext.drawPromise = value;
    }
    get mathTextMeasure() {
        return this.originContext.mathTextMeasure;
    }
    set mathTextMeasure(value) {
        this.originContext.mathTextMeasure = value;
    }
    get fillStyle() {
        return this.originContext.fillStyle;
    }
    set fillStyle(value) {
        this.originContext.fillStyle = value;
    }
    get font() {
        return this.originContext.font;
    }
    set font(value) {
        this.originContext.font = value;
    }
    get globalAlpha() {
        return this.originContext.globalAlpha;
    }
    set globalAlpha(value) {
        this.originContext.globalAlpha = value;
    }
    get lineCap() {
        return this.originContext.lineCap;
    }
    set lineCap(value) {
        this.originContext.lineCap = value;
    }
    get lineDashOffset() {
        return this.originContext.lineDashOffset;
    }
    set lineDashOffset(value) {
        this.originContext.lineDashOffset = value;
    }
    get lineJoin() {
        return this.originContext.lineJoin;
    }
    set lineJoin(value) {
        this.originContext.lineJoin = value;
    }
    get lineWidth() {
        return this.originContext.lineWidth;
    }
    set lineWidth(value) {
        this.originContext.lineWidth = value;
    }
    get miterLimit() {
        return this.originContext.miterLimit;
    }
    set miterLimit(value) {
        this.originContext.miterLimit = value;
    }
    get shadowBlur() {
        return this.originContext.shadowBlur;
    }
    set shadowBlur(value) {
        this.originContext.shadowBlur = value;
    }
    get shadowColor() {
        return this.originContext.shadowColor;
    }
    set shadowColor(value) {
        this.originContext.shadowColor = value;
    }
    get shadowOffsetX() {
        return this.originContext.shadowOffsetX;
    }
    set shadowOffsetX(value) {
        this.originContext.shadowOffsetX = value;
    }
    get shadowOffsetY() {
        return this.originContext.shadowOffsetY;
    }
    set shadowOffsetY(value) {
        this.originContext.shadowOffsetY = value;
    }
    get strokeStyle() {
        return this.originContext.strokeStyle;
    }
    set strokeStyle(value) {
        this.originContext.strokeStyle = value;
    }
    get textAlign() {
        return this.originContext.textAlign;
    }
    set textAlign(value) {
        this.originContext.textAlign = value;
    }
    get textBaseline() {
        return this.originContext.textBaseline;
    }
    set textBaseline(value) {
        this.originContext.textBaseline = value;
    }
    get currentMatrix() {
        return this.originContext.currentMatrix;
    }
    save() {
        return this.originContext.save();
    }
    restore() {
        return this.originContext.restore();
    }
    highPerformanceSave() {
        return this.originContext.highPerformanceSave();
    }
    highPerformanceRestore() {
        return this.originContext.highPerformanceRestore();
    }
    rotate(rad, setTransform) {
        return this.originContext.rotate(rad, setTransform);
    }
    scale(sx, sy, setTransform) {
        return this.originContext.scale(sx, sy, setTransform);
    }
    setScale(sx, sy, setTransform) {
        return this.originContext.setScale(sx, sy, setTransform);
    }
    scalePoint(sx, sy, px, py, setTransform) {
        return this.originContext.scalePoint(sx, sy, px, py, setTransform);
    }
    setTransform(a, b, c, d, e, f, setTransform, dpr) {
        return this.originContext.setTransform(a, b, c, d, e, f, setTransform, dpr);
    }
    setTransformFromMatrix(matrix, setTransform, dpr) {
        return this.originContext.setTransformFromMatrix(matrix, setTransform, dpr);
    }
    resetTransform(setTransform, dpr) {
        return this.originContext.resetTransform(setTransform, dpr);
    }
    transform(a, b, c, d, e, f, setTransform) {
        return this.originContext.transform(a, b, c, d, e, f, setTransform);
    }
    transformFromMatrix(matrix, setTransform) {
        return this.originContext.transformFromMatrix(matrix, setTransform);
    }
    translate(x, y, setTransform) {
        return this.originContext.translate(x, y, setTransform);
    }
    rotateDegrees(deg, setTransform) {
        return this.originContext.rotateDegrees(deg, setTransform);
    }
    rotateAbout(rad, x, y, setTransform) {
        return this.originContext.rotateAbout(rad, x, y, setTransform);
    }
    rotateDegreesAbout(deg, x, y, setTransform) {
        return this.originContext.rotateDegreesAbout(deg, x, y, setTransform);
    }
    setTransformForCurrent(force = !1) {
        return this.originContext.setTransformForCurrent(force);
    }
    clip(path, fillRule) {
        return this.originContext.clip(path, fillRule);
    }
    fill(path, fillRule) {
        return this.originContext.fill(path, fillRule);
    }
    stroke(path) {
        return this.originContext.stroke(path);
    }
    fillRect(x, y, width, height) {
        return this.originContext.fillRect(x, y, width, height);
    }
    strokeRect(x, y, width, height) {
        return this.originContext.strokeRect(x, y, width, height);
    }
    fillText(text, x, y, z) {
        return this.originContext.fillText(text, x, y, z);
    }
    strokeText(text, x, y, z) {
        return this.originContext.strokeText(text, x, y, z);
    }
    clearRect(x, y, w, h) {
        return this.originContext.clearRect(x, y, w, h);
    }
    drawImage(...args) {
        return this.originContext.drawImage(...args);
    }
    createImageData(...args) {
        return this.originContext.createImageData(...args);
    }
    getImageData(sx, sy, sw, sh) {
        return this.originContext.getImageData(sx, sy, sw, sh);
    }
    putImageData(imagedata, dx, dy) {
        return this.originContext.putImageData(imagedata, dx, dy);
    }
    createLinearGradient(x0, y0, x1, y1) {
        return this.originContext.createLinearGradient(x0, y0, x1, y1);
    }
    createRadialGradient(x0, y0, r0, x1, y1, r1) {
        return this.originContext.createRadialGradient(x0, y0, r0, x1, y1, r1);
    }
    createConicGradient(x, y, startAngle, endAngle) {
        return this.originContext.createConicGradient(x, y, startAngle, endAngle);
    }
    createPattern(image, repetition) {
        return this.originContext.createPattern(image, repetition);
    }
    getLineDash() {
        return this.originContext.getLineDash();
    }
    setLineDash(segments) {
        return this.originContext.setLineDash(segments);
    }
    clear() {
        return this.originContext.clear();
    }
    measureText(text, method) {
        return this.originContext.measureText(text, method);
    }
    isPointInPath(x, y) {
        return this.originContext.isPointInPath(x, y);
    }
    isPointInStroke(x, y) {
        return this.originContext.isPointInStroke(x, y);
    }
    project(x, y, z) {
        return this.originContext.project(x, y, z);
    }
    view(x, y, z) {
        return this.originContext.view(x, y, z);
    }
    getCanvas() {
        return this.originContext.getCanvas();
    }
    getContext() {
        return this.originContext.getContext();
    }
    setCommonStyle(params, attribute, offsetX, offsetY, defaultParams) {
        return this.originContext.setCommonStyle(params, attribute, offsetX, offsetY, defaultParams);
    }
    setShadowBlendStyle(params, attribute, defaultParams) {
        return this.originContext.setShadowBlendStyle(params, attribute, defaultParams);
    }
    setStrokeStyle(params, attribute, offsetX, offsetY, defaultParams) {
        return this.originContext.setStrokeStyle(params, attribute, offsetX, offsetY, defaultParams);
    }
    setTextStyle(params, defaultParams, z) {
        return this.originContext.setTextStyle(params, defaultParams, z);
    }
    setTextStyleWithoutAlignBaseline(params, defaultParams, z) {
        return this.originContext.setTextStyleWithoutAlignBaseline(params, defaultParams, z);
    }
    clearMatrix(setTransform, dpr) {
        return this.originContext.clearMatrix(setTransform, dpr);
    }
    setClearMatrix(a, b, c, d, e, f) {
        return this.originContext.setClearMatrix(a, b, c, d, e, f);
    }
    onlyTranslate(dpr) {
        return this.originContext.onlyTranslate(dpr);
    }
    cloneMatrix(m) {
        return this.originContext.cloneMatrix(m);
    }
    draw() {
        return this.originContext.draw();
    }
    release(...params) {
        return this.originContext.release(...params);
    }
}

exports.RoughContext2d = RoughContext2d, RoughContext2d.env = "browser";
//# sourceMappingURL=context.js.map
