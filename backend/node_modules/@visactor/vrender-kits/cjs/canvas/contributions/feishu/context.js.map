{"version":3,"sources":["../src/canvas/contributions/feishu/context.ts"],"names":[],"mappings":";;;;;;;;;AACA,yDAAoD;AAEpD,wCAA8C;AAOvC,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,0BAAgB;IAQnD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IACD,IAAI,WAAW,CAAC,EAAU;QACxB,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;QAC3D,IAAI,CAAC,YAAY,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;IAChD,CAAC;IAED,YAAY,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;QACzD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;;YACrC,IAAI;gBACF,EAAE,CAAC,kBAAkB,CAAC;oBACpB,QAAQ,EAAE,MAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,mCAAI,IAAI,CAAC,MAAM,CAAC,EAAE;oBACvD,CAAC,EAAE,EAAE;oBACL,CAAC,EAAE,EAAE;oBACL,KAAK,EAAE,EAAE;oBACT,MAAM,EAAE,EAAE;oBACV,OAAO,CAAC,GAAQ;wBACd,OAAO,CAAC,GAAG,CAAC,CAAC;oBACf,CAAC;iBACF,CAAC,CAAC;aACJ;YAAC,OAAO,GAAG,EAAE;gBACZ,MAAM,CAAC,GAAG,CAAC,CAAC;aACb;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI;QACF,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAoB,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YAClB,OAAO;SACR;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACvC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;gBACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACD,aAAa,CAAC,KAA8D,EAAE,UAAkB;QAC9F,OAAO,IAAI,CAAC;IACd,CAAC;;AAhDM,mBAAG,GAAY,QAAQ,CAAC;AADpB,eAAe;IAD3B,IAAA,yBAAU,GAAE;GACA,eAAe,CAkD3B;AAlDY,0CAAe","file":"context.js","sourcesContent":["// 参考konva\nimport { injectable } from '@visactor/vrender-core';\nimport type { IContext2d, EnvType } from '@visactor/vrender-core';\nimport { BrowserContext2d } from '../browser';\n\ndeclare const tt: {\n  canvasGetImageData: (d: any) => any;\n};\n\n@injectable()\nexport class FeishuContext2d extends BrowserContext2d implements IContext2d {\n  static env: EnvType = 'feishu';\n\n  declare drawPromise?: Promise<any>;\n\n  _globalAlpha: number;\n\n  // feishu小程序无法正常获取到globalAlpha\n  get globalAlpha(): number {\n    return this._globalAlpha;\n  }\n  set globalAlpha(ga: number) {\n    this.nativeContext.globalAlpha = ga * this.baseGlobalAlpha;\n    this._globalAlpha = ga * this.baseGlobalAlpha;\n  }\n\n  getImageData(sx: number, sy: number, sw: number, sh: number): any {\n    return new Promise((resolve, reject) => {\n      try {\n        tt.canvasGetImageData({\n          canvasId: this.canvas.nativeCanvas.id ?? this.canvas.id,\n          x: sx,\n          y: sy,\n          width: sw,\n          height: sh,\n          success(res: any) {\n            resolve(res);\n          }\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  draw() {\n    const _context = this.nativeContext as any;\n    if (!_context.draw) {\n      return;\n    }\n    this.drawPromise = new Promise(resolve => {\n      _context.draw(true, () => {\n        this.drawPromise = null;\n        resolve(null);\n      });\n    });\n  }\n  createPattern(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, repetition: string): CanvasPattern {\n    return null;\n  }\n}\n"]}