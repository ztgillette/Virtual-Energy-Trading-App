"use strict";

var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.FeishuContext2d = void 0;

const vrender_core_1 = require("@visactor/vrender-core"), browser_1 = require("../browser");

let FeishuContext2d = class extends browser_1.BrowserContext2d {
    get globalAlpha() {
        return this._globalAlpha;
    }
    set globalAlpha(ga) {
        this.nativeContext.globalAlpha = ga * this.baseGlobalAlpha, this._globalAlpha = ga * this.baseGlobalAlpha;
    }
    getImageData(sx, sy, sw, sh) {
        return new Promise(((resolve, reject) => {
            var _a;
            try {
                tt.canvasGetImageData({
                    canvasId: null !== (_a = this.canvas.nativeCanvas.id) && void 0 !== _a ? _a : this.canvas.id,
                    x: sx,
                    y: sy,
                    width: sw,
                    height: sh,
                    success(res) {
                        resolve(res);
                    }
                });
            } catch (err) {
                reject(err);
            }
        }));
    }
    draw() {
        const _context = this.nativeContext;
        _context.draw && (this.drawPromise = new Promise((resolve => {
            _context.draw(!0, (() => {
                this.drawPromise = null, resolve(null);
            }));
        })));
    }
    createPattern(image, repetition) {
        return null;
    }
};

FeishuContext2d.env = "feishu", FeishuContext2d = __decorate([ (0, vrender_core_1.injectable)() ], FeishuContext2d), 
exports.FeishuContext2d = FeishuContext2d;
//# sourceMappingURL=context.js.map
