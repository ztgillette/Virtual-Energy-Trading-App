import { type IArc3dGraphicAttribute, type IArcGraphicAttribute, type IAreaGraphicAttribute, type ICircleGraphicAttribute, type IGlyphGraphicAttribute, type IGroupGraphicAttribute, type IImageGraphicAttribute, type ILineGraphicAttribute, type IPathGraphicAttribute, type IPolygonGraphicAttribute, type IPyramid3dGraphicAttribute, type IRect3dGraphicAttribute, type IRectGraphicAttribute, type IRichTextCharacter, type IRichTextGraphicAttribute, type IRichTextImageCharacter, type ISymbolGraphicAttribute, type ITextGraphicAttribute } from '@visactor/vrender-core';
export declare const REACT_TO_CANOPUS_EVENTS: {
    onPointerDown: string;
    onPointerUp: string;
    onPointerUpOutside: string;
    onPointerTap: string;
    onPointerOver: string;
    onPointerMove: string;
    onPointerEnter: string;
    onPointerLeave: string;
    onPointerOut: string;
    onMouseDown: string;
    onMouseUp: string;
    onMouseUpOutside: string;
    onMouseMove: string;
    onMouseOver: string;
    onMouseOut: string;
    onMouseEnter: string;
    onMouseLeave: string;
    onPinch: string;
    onPinchStart: string;
    onPinchEnd: string;
    onPan: string;
    onPanStart: string;
    onPanEnd: string;
    onDrag: string;
    onDragStart: string;
    onDragEnter: string;
    onDragLeave: string;
    onDragOver: string;
    onDragEnd: string;
    onRightDown: string;
    onRightUp: string;
    onRightUpOutside: string;
    onTouchStart: string;
    onTouchEnd: string;
    onTouchEndOutside: string;
    onTouchMove: string;
    onTouchCancel: string;
    onPress: string;
    onPressUp: string;
    onPressEnd: string;
    onSwipe: string;
    onDrop: string;
    onWeel: string;
    onClick: string;
    onDblClick: string;
};
export declare const REACT_TO_CANOPUS_EVENTS_LIST: string[];
export type IEventParamsType = {
    [t in keyof typeof REACT_TO_CANOPUS_EVENTS]?: (d: any) => void;
};
export type IDefaultGraphicParamsType<T> = {
    attribute?: T;
    stateProxy?: (stateName: string, targetStates?: string[]) => Partial<T>;
    children?: any;
    name?: string;
    id?: string;
} & IEventParamsType;
export declare function VArc(params: IDefaultGraphicParamsType<IArcGraphicAttribute>): any;
export declare function VArc3d(params: IDefaultGraphicParamsType<IArc3dGraphicAttribute>): any;
export declare function VArea(params: IDefaultGraphicParamsType<IAreaGraphicAttribute>): any;
export declare function VCircle(params: IDefaultGraphicParamsType<ICircleGraphicAttribute>): any;
export declare function VGroup(params: IDefaultGraphicParamsType<IGroupGraphicAttribute>): any;
export declare function VGlyph(params: IDefaultGraphicParamsType<IGlyphGraphicAttribute>): any;
export declare function VImage(params: IDefaultGraphicParamsType<IImageGraphicAttribute>): any;
export declare function VLine(params: IDefaultGraphicParamsType<ILineGraphicAttribute>): any;
export declare function VPath(params: IDefaultGraphicParamsType<IPathGraphicAttribute>): any;
export declare function VPolygon(params: IDefaultGraphicParamsType<IPolygonGraphicAttribute>): any;
export declare function VPyramid3d(params: IDefaultGraphicParamsType<IPyramid3dGraphicAttribute>): any;
export declare function VRect(params: IDefaultGraphicParamsType<IRectGraphicAttribute>): any;
export declare function VRect3d(params: IDefaultGraphicParamsType<IRect3dGraphicAttribute>): any;
export declare function VSymbol(params: IDefaultGraphicParamsType<ISymbolGraphicAttribute>): any;
export declare function VText(params: IDefaultGraphicParamsType<ITextGraphicAttribute>): any;
export declare function VRichText(params: IDefaultGraphicParamsType<IRichTextGraphicAttribute>): any;
export declare namespace VRichText {
    var Text: (params: IDefaultGraphicParamsType<IRichTextCharacter>) => {
        attribute?: IRichTextCharacter;
        stateProxy?: (stateName: string, targetStates?: string[]) => Partial<IRichTextCharacter>;
        children?: any;
        name?: string;
        id?: string;
        onPointerDown?: (d: any) => void;
        onPointerUp?: (d: any) => void;
        onPointerUpOutside?: (d: any) => void;
        onPointerTap?: (d: any) => void;
        onPointerOver?: (d: any) => void;
        onPointerMove?: (d: any) => void;
        onPointerEnter?: (d: any) => void;
        onPointerLeave?: (d: any) => void;
        onPointerOut?: (d: any) => void;
        onMouseDown?: (d: any) => void;
        onMouseUp?: (d: any) => void;
        onMouseUpOutside?: (d: any) => void;
        onMouseMove?: (d: any) => void;
        onMouseOver?: (d: any) => void;
        onMouseOut?: (d: any) => void;
        onMouseEnter?: (d: any) => void;
        onMouseLeave?: (d: any) => void;
        onPinch?: (d: any) => void;
        onPinchStart?: (d: any) => void;
        onPinchEnd?: (d: any) => void;
        onPan?: (d: any) => void;
        onPanStart?: (d: any) => void;
        onPanEnd?: (d: any) => void;
        onDrag?: (d: any) => void;
        onDragStart?: (d: any) => void;
        onDragEnter?: (d: any) => void;
        onDragLeave?: (d: any) => void;
        onDragOver?: (d: any) => void;
        onDragEnd?: (d: any) => void;
        onRightDown?: (d: any) => void;
        onRightUp?: (d: any) => void;
        onRightUpOutside?: (d: any) => void;
        onTouchStart?: (d: any) => void;
        onTouchEnd?: (d: any) => void;
        onTouchEndOutside?: (d: any) => void;
        onTouchMove?: (d: any) => void;
        onTouchCancel?: (d: any) => void;
        onPress?: (d: any) => void;
        onPressUp?: (d: any) => void;
        onPressEnd?: (d: any) => void;
        onSwipe?: (d: any) => void;
        onDrop?: (d: any) => void;
        onWeel?: (d: any) => void;
        onClick?: (d: any) => void;
        onDblClick?: (d: any) => void;
        type: string;
    };
    var Image: (params: IDefaultGraphicParamsType<IRichTextImageCharacter>) => {
        attribute?: IRichTextImageCharacter;
        stateProxy?: (stateName: string, targetStates?: string[]) => Partial<IRichTextImageCharacter>;
        children?: any;
        name?: string;
        id?: string;
        onPointerDown?: (d: any) => void;
        onPointerUp?: (d: any) => void;
        onPointerUpOutside?: (d: any) => void;
        onPointerTap?: (d: any) => void;
        onPointerOver?: (d: any) => void;
        onPointerMove?: (d: any) => void;
        onPointerEnter?: (d: any) => void;
        onPointerLeave?: (d: any) => void;
        onPointerOut?: (d: any) => void;
        onMouseDown?: (d: any) => void;
        onMouseUp?: (d: any) => void;
        onMouseUpOutside?: (d: any) => void;
        onMouseMove?: (d: any) => void;
        onMouseOver?: (d: any) => void;
        onMouseOut?: (d: any) => void;
        onMouseEnter?: (d: any) => void;
        onMouseLeave?: (d: any) => void;
        onPinch?: (d: any) => void;
        onPinchStart?: (d: any) => void;
        onPinchEnd?: (d: any) => void;
        onPan?: (d: any) => void;
        onPanStart?: (d: any) => void;
        onPanEnd?: (d: any) => void;
        onDrag?: (d: any) => void;
        onDragStart?: (d: any) => void;
        onDragEnter?: (d: any) => void;
        onDragLeave?: (d: any) => void;
        onDragOver?: (d: any) => void;
        onDragEnd?: (d: any) => void;
        onRightDown?: (d: any) => void;
        onRightUp?: (d: any) => void;
        onRightUpOutside?: (d: any) => void;
        onTouchStart?: (d: any) => void;
        onTouchEnd?: (d: any) => void;
        onTouchEndOutside?: (d: any) => void;
        onTouchMove?: (d: any) => void;
        onTouchCancel?: (d: any) => void;
        onPress?: (d: any) => void;
        onPressUp?: (d: any) => void;
        onPressEnd?: (d: any) => void;
        onSwipe?: (d: any) => void;
        onDrop?: (d: any) => void;
        onWeel?: (d: any) => void;
        onClick?: (d: any) => void;
        onDblClick?: (d: any) => void;
        type: string;
    };
}
