{"version":3,"sources":["../src/picker/contributions/math-picker/richtext-picker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,yDAAkG;AAG3F,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IAIpC,YAAoD,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAHlF,SAAI,GAAW,UAAU,CAAC;QAC1B,eAAU,GAAW,mCAAoB,CAAC;IAE2C,CAAC;IAEtF,QAAQ,CAAC,QAAmB,EAAE,KAAa,EAAE,MAAoB;QAC/D,IAAI,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AAZY,yBAAyB;IADrC,IAAA,yBAAU,GAAE;IAKE,WAAA,IAAA,qBAAM,EAAC,6BAAc,CAAC,CAAA;;GAJxB,yBAAyB,CAYrC;AAZY,8DAAyB","file":"richtext-picker.js","sourcesContent":["import type { IPoint } from '@visactor/vutils';\nimport { inject, injectable, RICHTEXT_NUMBER_TYPE, RichTextRender } from '@visactor/vrender-core';\nimport type { IGraphicPicker, IGraphicRender, IPickParams, IRichText } from '@visactor/vrender-core';\n@injectable()\nexport class DefaultMathRichTextPicker implements IGraphicPicker {\n  type: string = 'richtext';\n  numberType: number = RICHTEXT_NUMBER_TYPE;\n\n  constructor(@inject(RichTextRender) public readonly canvasRenderer: IGraphicRender) {}\n\n  contains(richtext: IRichText, point: IPoint, params?: IPickParams): boolean {\n    if (richtext.AABBBounds.containsPoint(point)) {\n      return true;\n    }\n    return false;\n  }\n}\n"]}