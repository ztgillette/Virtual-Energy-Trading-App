{"version":3,"sources":["../src/picker/math-picker-service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,yDASgC;AAehC,yDAAmE;AAK5D,IAAM,wBAAwB,GAA9B,MAAM,wBAAyB,SAAQ,iCAAkB;IAO9D,YAGqB,aAAoD,EAIpD,gCAAyF,EAGzF,mCAA+F;QAElH,KAAK,CAAC,gCAAgC,EAAE,mCAAmC,CAAC,CAAC;QAT1D,kBAAa,GAAb,aAAa,CAAuC;QAIpD,qCAAgC,GAAhC,gCAAgC,CAAyD;QAGzF,wCAAmC,GAAnC,mCAAmC,CAA4D;QAGlH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE;YAC7E,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,IAAI;QACF,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IAED,SAAS,CAAC,MAAe,EAAE,GAAY;QACrC,IAAI,CAAC,WAAW,GAAG,IAAI,6BAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;IAGD,QAAQ,CACN,OAAiB,EACjB,KAAiB,EACjB,YAA4B,EAC5B,MAAoB;QAEpB,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,EAAE;YACxC,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACnD,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAC9B,IAAI,CAAC,EAAE;YACL,OAAO;gBACL,OAAO,EAAE,CAAC;gBACV,MAAM,EAAE,EAAE;aACX,CAAC;SACH;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AA/DY,wBAAwB;IADpC,IAAA,yBAAU,GAAE;IASR,WAAA,IAAA,qBAAM,EAAC,mCAAoB,CAAC,CAAA;IAC5B,WAAA,IAAA,oBAAK,EAAC,kCAAsB,CAAC,CAAA;IAG7B,WAAA,IAAA,qBAAM,EAAC,mCAAoB,CAAC,CAAA;IAC5B,WAAA,IAAA,oBAAK,EAAC,kCAAmB,CAAC,CAAA;IAE1B,WAAA,IAAA,qBAAM,EAAC,mCAAoB,CAAC,CAAA;IAC5B,WAAA,IAAA,oBAAK,EAAC,qCAAsB,CAAC,CAAA;;GAhBrB,wBAAwB,CA+DpC;AA/DY,4DAAwB","file":"math-picker-service.js","sourcesContent":["import type { IMatrix, IPointLike } from '@visactor/vutils';\n// eslint-disable-next-line\nimport {\n  ContributionProvider,\n  inject,\n  injectable,\n  named,\n  DefaultPickService,\n  EmptyContext2d,\n  PickItemInterceptor,\n  PickServiceInterceptor\n} from '@visactor/vrender-core';\nimport type {\n  ICanvas,\n  IContext2d,\n  IGraphic,\n  EnvType,\n  IGlobal,\n  IGraphicPicker,\n  IPickerService,\n  IContributionProvider,\n  IPickItemInterceptorContribution,\n  IPickParams,\n  PickResult,\n  IPickServiceInterceptorContribution\n} from '@visactor/vrender-core';\nimport { MathPickerContribution } from './contributions/constants';\n\n// 默认的pick-service，提供基本的最优选中策略，尽量不需要用户自己实现contribution\n// 用户可以写plugin\n@injectable()\nexport class DefaultMathPickerService extends DefaultPickService implements IPickerService {\n  declare type: 'default';\n  // pcik canvas\n  declare pickCanvas: ICanvas;\n  declare pickContext: IContext2d;\n  declare pickerMap: Map<number, IGraphicPicker>;\n\n  constructor(\n    @inject(ContributionProvider)\n    @named(MathPickerContribution)\n    protected readonly contributions: IContributionProvider<IGraphicPicker>,\n    // 拦截器\n    @inject(ContributionProvider)\n    @named(PickItemInterceptor)\n    protected readonly pickItemInterceptorContributions: IContributionProvider<IPickItemInterceptorContribution>,\n    @inject(ContributionProvider)\n    @named(PickServiceInterceptor)\n    protected readonly pickServiceInterceptorContributions: IContributionProvider<IPickServiceInterceptorContribution>\n  ) {\n    super(pickItemInterceptorContributions, pickServiceInterceptorContributions);\n    this.global.hooks.onSetEnv.tap('math-picker-service', (lastEnv, env, global) => {\n      this.configure(global, env);\n    });\n    this.configure(this.global, this.global.env);\n    this.pickerMap = new Map();\n    this.init();\n  }\n\n  init() {\n    this.contributions.getContributions().forEach(item => {\n      this.pickerMap.set(item.numberType, item);\n    });\n    super._init();\n  }\n\n  configure(global: IGlobal, env: EnvType) {\n    this.pickContext = new EmptyContext2d(null, 1);\n  }\n\n  // todo: switch统一改为数字map\n  pickItem(\n    graphic: IGraphic,\n    point: IPointLike,\n    parentMatrix: IMatrix | null,\n    params?: IPickParams\n  ): PickResult | null {\n    if (graphic.attribute.pickable === false) {\n      return null;\n    }\n    const picker = this.pickerMap.get(graphic.numberType);\n    if (!picker) {\n      return null;\n    }\n    const pd = picker.contains(graphic, point, params);\n    const g = pd ? graphic : null;\n    if (g) {\n      return {\n        graphic: g,\n        params: pd\n      };\n    }\n    return null;\n  }\n}\n"]}