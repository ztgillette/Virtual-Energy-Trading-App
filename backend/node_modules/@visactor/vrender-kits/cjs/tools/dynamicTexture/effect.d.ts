import type { IContext2d, IGraphic } from '@visactor/vrender-core';
export declare function randomOpacity(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function columnLeftToRight(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function columnRightToLeft(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function rowTopToBottom(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function rowBottomToTop(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function diagonalCenterToEdge(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function diagonalTopLeftToBottomRight(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function rotationScan(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function rippleEffect(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function snakeWave(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function alternatingWave(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function spiralEffect(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function columnCenterToEdge(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function columnEdgeToCenter(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function rowCenterToEdge(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function rowEdgeToCenter(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function cornerToCenter(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function centerToCorner(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function pulseWave(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
export declare function particleEffect(ctx: IContext2d, row: number, column: number, rowCount: number, columnCount: number, ratio: number, graphic: IGraphic, minRatio?: number, amplitude?: number): number;
