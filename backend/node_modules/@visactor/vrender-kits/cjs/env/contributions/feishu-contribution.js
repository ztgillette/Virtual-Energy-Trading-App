"use strict";

var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.FeishuEnvContribution = void 0;

const vrender_core_1 = require("@visactor/vrender-core"), canvas_wrap_1 = require("./canvas-wrap");

function makeUpCanvas(domref, canvasIdLists, canvasMap, freeCanvasIdx, freeCanvasList, pixelRatio) {
    const dpr = null != pixelRatio ? pixelRatio : tt.getSystemInfoSync().pixelRatio;
    canvasIdLists.forEach(((id, i) => {
        const ctx = tt.createCanvasContext(id), canvas = new canvas_wrap_1.CanvasWrapDisableWH(ctx.canvas || {}, ctx, dpr, domref.width, domref.height, id);
        ctx.canvas = canvas, canvasMap.set(id, canvas), i >= freeCanvasIdx && freeCanvasList.push(canvas);
    }));
}

let FeishuEnvContribution = class extends vrender_core_1.BaseEnvContribution {
    constructor() {
        super(), this.type = "feishu", this.supportEvent = !0, this.canvasMap = new Map, 
        this.freeCanvasList = [], this.canvasIdx = 0, this.supportsTouchEvents = !0;
        try {
            this.supportsPointerEvents = !!globalThis.PointerEvent, this.supportsMouseEvents = !!globalThis.MouseEvent;
        } catch (err) {
            this.supportsPointerEvents = !1, this.supportsMouseEvents = !1;
        }
        this.applyStyles = !0;
    }
    getDynamicCanvasCount() {
        return this.freeCanvasList.length;
    }
    getStaticCanvasCount() {
        return 9999;
    }
    configure(service, params) {
        service.env === this.type && (service.setActiveEnvContribution(this), makeUpCanvas(params.domref, params.canvasIdLists, this.canvasMap, params.freeCanvasIdx, this.freeCanvasList, params.pixelRatio));
    }
    loadImage(url) {
        return Promise.resolve({
            data: url,
            loadState: "success"
        });
    }
    loadSvg(url) {
        return Promise.reject();
    }
    createCanvas(params) {
        const result = this.freeCanvasList[this.canvasIdx] || this.freeCanvasList[this.freeCanvasList.length - 1];
        return this.canvasIdx++, result;
    }
    createOffscreenCanvas(params) {}
    releaseCanvas(canvas) {}
    getDevicePixelRatio() {
        return tt.getSystemInfoSync().pixelRatio;
    }
    getRequestAnimationFrame() {
        return function(callback) {
            return vrender_core_1.rafBasedSto.call(callback);
        };
    }
    getCancelAnimationFrame() {
        return h => {
            vrender_core_1.rafBasedSto.clear(h);
        };
    }
    addEventListener(type, listener, options) {
        return null;
    }
    removeEventListener(type, listener, options) {
        return null;
    }
    dispatchEvent(event) {
        return null;
    }
    getElementById(str) {
        return this.canvasMap.get(str);
    }
    getRootElement() {
        return null;
    }
    getDocument() {
        return null;
    }
    release(...params) {}
    mapToCanvasPoint(event) {
        var _a;
        return null === (_a = null == event ? void 0 : event.type) || void 0 === _a || _a.startsWith("mouse"), 
        event;
    }
};

FeishuEnvContribution = __decorate([ (0, vrender_core_1.injectable)(), __metadata("design:paramtypes", []) ], FeishuEnvContribution), 
exports.FeishuEnvContribution = FeishuEnvContribution;
//# sourceMappingURL=feishu-contribution.js.map